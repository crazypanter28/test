(function() {
    'use strict';

    angular.module('actinver.providers', []);
    angular.module('actinver.controllers', []);
    angular.module('actinver.services', []);
    angular.module('actinver.directives', []);
    angular.module('actinver.constants', []);
    angular.module('actinver.filters', []);
    angular.module('actinver.templates', []);

    angular.module('actinver', [
        'actinver.filters',
        'actinver.providers',
        'actinver.controllers',
        'actinver.services',
        'actinver.directives',
        'actinver.constants',
        'actinver.filters',
        'actinver.templates',
        'ui.bootstrap',
        'sun.scrollable',
        'ui.router',
        'ncy-angular-breadcrumb',
        'ngStorage',
        'ngResource',
        'oc.lazyLoad',
        'chart.js',
        'ngTable',
        'ngStomp',
        'ngSanitize',
        'daterangepicker',
        'angularFileUpload',
        'ngFileSaver',
        'angularMoment',
        'textAngular',
        'rzModule',
        'ng-currency',
        'ng-percent',
        'chart.js',
        'ngMask',
        'angularUtils.directives.dirPagination',
        'angular-loading-bar',
        'htmlToPdfSave'
        //'pascalprecht.translate',
    ]);

    angular.module('actinver').config(['$httpProvider', '$locationProvider', function( $httpProvider, $locationProvider ) {
        $httpProvider.interceptors.push('interceptor404');
        $httpProvider.interceptors.push('interceptorToken');
        $locationProvider.hashPrefix('');
    }]);

    angular.module('actinver').run(['$rootScope', '$state', '$sessionStorage', 'Auth', function($rootScope, $state, $sessionStorage, Auth) {
        Auth.init();
        $rootScope.$state = $state;
        $rootScope.Object = Object;
        $rootScope.getTodayDate = new Date();

        $rootScope.$on('$stateChangeStart', function(event, next, _params) {
            // window.scrollTo(0, 0);
             $('html, body').animate({scrollTop:0},'1500');

            if (!Auth.checkPermissionForView(next)) {
                event.preventDefault();
                if( !$sessionStorage.user ){
                    //window.location.href = '/login.html';
                    location.assign('/asesoria/login');
                } else {
                    window.location.href = '/#!/dashboard';
                }
            }

            if(next.name !== 'app.dashboard' && event.currentScope.$state.$current.self.name ==="app.dashboard" ){
                $rootScope.$broadcast('close-socket-ipc-status');
                $rootScope.$broadcast('close-socket-last-news');
            }

            if (next.data && next.data.needContract && !$sessionStorage.sclient){
                event.preventDefault();
                $state.go('operations', _params, {location: 'replace'});
            }

            if(typeof next.data === 'undefined' && next.name !== 'operations' && next.name !== 'account'){
                delete $sessionStorage.sclient;
            }

            if ( next.redirectTo) {
                event.preventDefault();
                $state.go(next.redirectTo, _params, {location: 'replace'});
            }

            if( event.currentScope.$state.$current.self.name === 'investment.capitals'  ){
                $rootScope.$broadcast( 'disconnectCapitals' );
            }
            if( event.currentScope.$state.$current.self.name === 'investment.capitalsLumina'  ){
                $rootScope.$broadcast( 'disconnectCapitals' );
            }
        });

    }]);

})();

(function () {
    "use strict";

    mainCtrl.$inject = ['$scope', '$sessionStorage'];
    function mainCtrl($scope, $sessionStorage ) {


        $scope.modelForView = {};


        $scope.$watch(function () {
            return angular.toJson($sessionStorage);
        }, function (nval, oval) {

            if ((oval !== undefined) && (nval !== oval)) {
                if (R.isEmpty(JSON.parse(nval)) || !JSON.parse(oval).sclient && !JSON.parse(nval).sclient) {
                    window.location.href = "/login.html";
                }
            }
        });
        
    }

    angular.module('actinver.controllers')
        .controller('mainCtrl', mainCtrl);

})();


( function(){
    "use strict";

    function REGEX(){
        return {
            numeric: '\\d+',
            alphanumeric: '\[a-z0-9A-ÑñZáéíóúÁÉÍÓÚ ]+',
            letter: '\[a-zA-ZáéíóúÁÉÍÓÚ ]+',
            date: '\[(\d{1,2})/(\d{1,2})/(\d{4})]+'
        };

    }

    angular.module('actinver.constants')
    .constant('REGEX', new REGEX() );
})();


            /*
                Este archivo solo es declarativo, para agregar nuevas urls hacerlo en config.yml
            */
            ( function(){
                "use strict";
                function url(){
                    var urls = {"userInfo":"/asesoria-restful/api/asesoria/user","csrfRest":"/asesoria-restful/api/asesoria/validate","validateUserTokens":"/asesoria-restful/api/asr/orchestrate/validateUserTokens","saveAdviserNumber":"/asesoria-restful/api/asr/orchestrate/saveAdviserNumber","login":"/asesoria/login","logout":"/asesoria/logout","getPermiso":"/asesoria-restful/api/all/Asesores/UserRole/getRoleAllow","getBalance":"/asesoria-restful/api/asr/investmentSociety/v1_1/cashByDate/","getTransfers":"/asesoria-restful/api/asr/movements/v1_0/contractMovementsQuery/","getBankContractSPEIMovementsQuery":"/asesoria-restful/api/asr/movements/v1_0/bankContractSPEIMovementsQuery/","getOtherAccounts":"/asesoria-restful/api/asr/orchestrate/destinationAccountQuery/","getMedia":"/asesoria-restful/api/asr/catalogs/v1_0/contactMeansCatalog?language=SPA","webSocketUrl":"http://vsdlapafro01.actinver.com.mx/Asesores/ws/stock/","makeTransfer":"/asesoria-restful/api/asr/financialOps/v1_0/transferExecution?language=SPA","makeTransferOtherAccount":"/asesoria-restful/api/asr/financialOps/v1_0/brokerSPEITransfer?language=SPA","getIPC":"/asesoria-restful/api/asr/Asesores/GraphicsInfo/getIPC","dashboardWebSocket":"/asesoria-restful/api/asr/ws","getIssuers2":"/issuers2","dashboardNews":"/asesoria-restful/api/asr/orchestrate/getLastNews","dashboardMonthGoal":"","dashboardIncomes":"","dashboardSchedule":"/asesoria-restful/api/asr/Asesores/ActivityLog/getUncontactedCustomers/","dashboardSocial":"","getAppointments":"/asesoria-restful/api/asr/Asesores/Mail/getAppointments/","getCurrentMessages":"/asesoria-restful/api/asr/Asesores/Message/getCurrentMessages/","addNewActivity":"/asesoria-restful/api/asr/Asesores/ActivityDay/addActivityDay/","getGoalsPositions":"/asesoria-restful/api/asr/Asesores/Meta/metaPosiciones/","getSumGoalsPositions":"/asesoria-restful/api/asr/Asesores/Meta/sumMetaPosiciones/","getGoalsContracts":"/asesoria-restful/api/asr/Asesores/Meta/metaContratos/","getSupervisorInfo":"/asesoria-restful/api/asr/Asesores/Meta/reporteSupervisor/","getCenterInfo":"/asesoria-restful/api/asr/Asesores/Meta/metaPosicionesCFSuper/","getCenterProducts":"/asesoria-restful/api/asr/Asesores/Meta/metaContratosCFSuper/","getGroupsByEmployee":"/asesoria-restful/api/asr/Asesores/Meta/getGroupsByEmployee/","getInfoByGroup":"/asesoria-restful/api/asr/Asesores/Meta/reporteSupervisorPorGrupo/","getCustomCenterInfo":"/asesoria-restful/api/asr/Asesores/Meta/metaPosicionesCF/","getCustomCenterProducts":"/asesoria-restful/api/asr/Asesores/Meta/metaContratosCF/","getSharedReport":"/asesoria-restful/api/asr/Asesores/SharedReport/getSharedReport/","getGroupsByEmployeeRpt":"/asesoria-restful/api/rpt/Asesores/Meta/getGroupsByEmployee/","getInfoByGroupRpt":"/asesoria-restful/api/rpt/Asesores/Meta/reporteSupervisorPorGrupo/","getGoalsPositionsRpt":"/asesoria-restful/api/rpt/Asesores/Meta/metaPosiciones/","getSumGoalsPositionsRpt":"/asesoria-restful/api/rpt/Asesores/Meta/sumMetaPosiciones/","getGoalsContractsRpt":"/asesoria-restful/api/rpt/Asesores/Meta/metaContratos/","getCustomCenterInfoRpt":"/asesoria-restful/api/rpt/Asesores/Meta/metaPosicionesCF/","getCustomCenterProductsRpt":"/asesoria-restful/api/rpt/Asesores/Meta/metaContratosCF/","getBinnacleClients":"/asesoria-restful/api/asr/Asesores/Contract/getSponsorList/","getBirthDays":"/asesoria-restful/api/asr/Asesores/ActivityLog/getBirthDays/","getClientDetails":"/asesoria-restful/api/asr/Asesores/Contract/getDetailsOfContract/","getCommentsDetailsByContract":"/asesoria-restful/api/asr/Asesores/Contract/getDetailsOfContract/","sendMessangeBirthday":"/asesoria-restful/api/asr/Asesores/ActivityLog/sendCongratulations","getDetailGraph":"/asesoria-restful/api/asr/Asesores/ActivityLog/getReportMetas","getAdvisersDetails":"/asesoria-restful/api/asr/Asesores/ActivityLog/getReportMetasDetail/","getClientType":"/asesoria-restful/api/asr/Asesores/Contract/validateUser/","getClientProfile":"/asesoria-restful/api/asr/Asesores/Contract/getProfile/","getBinnacleAdvGoal":"/asesoria-restful/api/asr/Asesores/ActivityLog/getReport/","getBinnacleCatalog":"/asesoria-restful/api/asr/Asesores/ActivityLog/getActivityCatalogRoot/TPC/","getBinnacleCatalogChild":"/asesoria-restful/api/asr/Asesores/ActivityLog/getActivityCatalogChild/","doBinnacleComment":"/asesoria-restful/api/asr/Asesores/ActivityLog/saveComment/","getOutlineInfo":"/asesoria-restful/api/asr/Asesores/PracticasVenta/","getSellsPracticeUrl":"/asesoria-restful/api/asr/Asesores/PracticasVenta/getUrlVentas","getIssuersInfo":"/asesoria-restful/api/asr/Asesores/Fund/getFunds/","getProducts":"/asesoria-restful/api/asr/Asesores/Product/getClassifications/","getSubProducts":"/asesoria-restful/api/asr/Asesores/Product/getProductsByClassification/","getProfiles":"/asesoria-restful/api/asr/Asesores/Catalogs/getClientProfileCatalog/","getStrategies":"/asesoria-restful/api/asr/Asesores/Portfolio/getModelPortfolioByCriterionQuery/","getStrategyDetail":"/asesoria-restful/api/asr/Asesores/Portfolio/getModelPortfolioDetailQuery/","getInvIssuersCatalog":"/asesoria-restful/api/asr/Asesores/InvestmentSociety/getIssuersCatalog/","getBandsCatalog":"/asesoria-restful/api/asr/Asesores/BondMarket/getBandsCatalog/","getIssuersCatalog":"/asesoria-restful/api/asr/Asesores/BondMarket/getIssuersCatalog/","getAllIssuers":"/asesoria-restful/api/asr/Asesores/MarketInfo/getIssuersCatalog/","doProposal":"/asesoria-restful/api/asr/Asesores/ActivityLog/saveComment/","getContractInfo":"/asesoria-restful/api/asr/orchestrate/validateContractUserOrchestrate/","doTracing":"/Asesores/ActivityLog/saveComment/","getCustomerTrackingAndProposal":"/asesoria-restful/api/asr/Asesores/Report/getCustomerTrackingAndProposal","getCustomerTracking":"/asesoria-restful/api/asr/Asesores/Report/getCustomerTracking/","getAdviserContract":"/asesoria-restful/api/asr/Asesores/Contract/validateUser/","getContractIdClient":"/eActinver_Admin/jaxrs/AdministrativeManagerEnrollmentRest/getIdClient/","getContractSummary":"/asesoria-restful/api/asr/Asesores/Portfolio/getSummary/","getinsuranceAccumulatedRisksValidation":"/asesoria-restful/api/asr/insurance/v1_0/insuranceAccumulatedRisksValidation","getDetailedSummary":"/asesoria-restful/api/asr/Asesores/Portfolio/getDetailedSummary","getDetailedSummaryGral":"/asesoria-restful/api/asr/Asesores/Portfolio/getDetailedSummary","getBrokerHousePositionList":"/api/asr/Asesores/Contract/getBrokerHousePositionList/","getBankPositionList":"/asesoria-restful/api/asr/Asesores/Contract/getBankPositionList/","getBankWarrantyPositionList":"/asesoria-restful/api/asr/Asesores/Contract/getBankWarrantyPositionList/","getInsuranceInsuredSumQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceInsuredSumQuery","getCurrentPortfolio":"/Asesores/Portfolio/getCurrentPortfolio/","getCustomerProposal":"/asesoria-restful/api/asr/Asesores/Report/getCustomerProposal","getFavoritesAsr":"/asesoria-restful/api/asr/Asesores/Issuer/getFavorites/","getClientInfo":"/asesoria-restful/api/asr/client/v1_0/clientOrContractClientInfoQuery/","getContractByAdviser":"/asesoria-restful/api/asr/orchestrate/contractByClientID/","getContracts":"/asesoria-restful/api/asr/balance/v1_0/contractsBalancesByPortfolioQuery","getContractHistorical":"/asesoria-restful/api/asr/balance/v1_0/brokerMonthlyBalanceQuery","getClientName":"/asesoria-restful/api/asr/clientInfo/v1_0/clientInfoQuery","getBrokerHistoricalBalanceQuery":"/asesoria-restful/api/asr/balance/v1_0/brokerHistoricalBalanceQuery","getPortfolioResume":"/asesoria-restful/api/asr/orchestrate/summaryPortfolio/","getCreditsList":"/asesoria-restful/api/asr/orchestrate/loans/","getInsurancesList":"/portfolio-insurances/","getContractDetail":"/asesoria-restful/api/asr/portfolio/v1_0/portfolioDetailQuery/","getContractDetailBank":"/asesoria-restful/api/asr/portfolio/v1_0/fIXISSecuritiesPortfolioQuery/","getInitDoll":"/asesoria-restful/api/asr/balance/v1_0/a2KContractBalance/","getInitDoll2":"/asesoria-restful/api/asr/investmentSociety/v1_0/fundQuery/","confirmDoll":"/asesoria-restful/api/asr/investmentSociety/v1_2/fundOrderQuotation?language=SPA","capture":"/asesoria-restful/api/asr/investmentSociety/v1_2/fundOrderRegistration?language=SPA","getDetailStations":"/asesoria-restful/api/asr/investmentSociety/v1_2/fundOperationDataQuery/","getDollAccounts":"/asesoria-restful/api/asr/orchestrate/destinationAccountQuery/","getOrderDetail":"/asesoria-restful/api/asr/movements/v1_0/contractMovementsQuery","getOrders":"/asesoria-restful/api/asr/orders/v1_2/ordersByDateQuery/","getPortfolio":"/asesoria-restful/api/asr/portfolio/v1_0/portfolioDetailQuery/","getInvestmentSocietyRest":"/asesoria-restful/api/asr/investmentSociety/v1_2/investmentIssuersQuery/","getMoreInfo":"/asesoria-restful/api/asr/orders/v1_0/fundsOrderDetailQuey/","getMoreInfoCapital":"/asesoria-restful/api/asr/orders/v1_0/capitalMarketOrderDetailQuery/","cancellation":"/asesoria-restful/api/asr/investmentSociety/v1_2/fundOrderCancelation","cancellationMarket":"/asesoria-restful/api/asr/capitalMarket/v1_1/stockMarketOrderCancelation","cancellationStopLoss":"/asesoria-restful/api/asr/capitalMarket/v1_1/stopLossTrailingStopCancelation/","getReporto":"/asesoria-restful/api/asr/bondMarket/v1_1/bondMarketBands/","getCurrentCash":"/asesoria-restful/api/asr/balance/v1_0/a2KContractBalance/","confirmMoneyDoll":"/asesoria-restful/api/asr/bondMarket/v1_1/bondMarketOrderQuotation?language=SPA","doMoneyTransaction":"/asesoria-restful/api/asr/bondMarket/v1_1/bondMarketOrderRegistration?language=SPA","getCapitalsStation":"/asesoria-restful/api/asr/marketinfo/v1_1/clientIssuersMarketInfoQuery/","getNewCapitalsStation":"/asesoria-restful/api/asr/marketinfo/v1_1/contractIssuersMarketInfoQuery/","CapitalsWebSocket":"/asesoria-restful/api/asr/ws","getLastIPC":"/asesoria-restful/api/asr/marketinfo/v1_0/stockMarketIndexQuery","getCommission":"/asesoria-restful/api/asr/contractInfo/v1_0/contractCommissionAndValuationQuery/","getCommission34":"/asesoria-restful/api/asr/catalogs/v1_0/capitalBandCatalog/","getCapitalStop":"/asesoria-restful/api/asr/capitalMarket/v1_0/securitiesForStopLossQuery/","getAcciones":"/asesoria-restful/api/asr/portfolio/v1_1/securitiesPortfolioQuery/","confirmStopLoss":"/asesoria-restful/api/asr/capitalMarket/v1_1/stopLossTrailingStopRegistration?language=SPA","getOrderValidity":"/asesoria-restful/api/asr/orders/v1_0/orderValidityQuery/","getOptionsTypeOperation":"/asesoria-restful/api/asr/catalogs/v1_1/getOptionsTypeOperation","getAccionesLumina":"/asesoria-restful/api/asr/capitalMarket/v1_0/capitalMarketPositionQuery","getOrdersLumina":"/asesoria-restful/api/asr/capitalMarket/v1_0/capitalMarketOrderQuery","cancellationLumina":"/asesoria-restful/api/asr/capitalMarket/v1_0/cMEquityOrderCancelation","confirmCapitalDollLumina":"/asesoria-restful/api/asr/capitalMarket/v1_0/cMEquityOrderRegistration","getOrdertypeCatalog":"/asesoria-restful/api/asr/orchestrate/orderTypeCatalog/","getClientElegible":"/asesoria-restful/api/asr/contractInfo/v1_0/bankContractQuery/","geturlpracticasventa":"/asesoria-restful/api/asr/orchestrate/generateUrlSelling/","LuminaWebSocket":"/asesoria-restful/api/asr/ws","updateStatusLumina":"/asesoria-restful/api/asr/adviser/v1_0/adviserNotificationStsModification","getNotificationLumina":"/asesoria-restful/api/asr/orchestrate/notificationQuery","getOrderCatalog":"/asesoria-restful/api/asr/orders/v1_0/ordersTypeQuery","confirmCapitalDoll":"/asesoria-restful/api/asr/capitalMarket/v1_0/cMOrderManagement?language=SPA","getBinnacleOperativeBank":"/asesoria-restful/api/asr/Asesores/OperativeLogBook/getBankLog","getBinnacleOperativeStockExchange":"/asesoria-restful/api/asr/Asesores/OperativeLogBook/getCBLog","getInvestmentIssuersQuery":"/asesoria-restful/api/asr/Asesores/InvestmentSociety/getInvestmentIssuersQuery/","clientIssuersMarketInfoQuery":"/asesoria-restful/api/asr/Asesores/MarketInfo/clientIssuersMarketInfoQuery/","SimulatorRest":"/ficha-valor-restful/SimulatorRest/","getCreditDetail":"/getCreditDetail/","getSimPayment":"/getSimPayment/","clientIssuersMarketInfoQueryV1":"/asesoria-restful/api/asr/marketinfo/v1_0/clientIssuersMarketInfoQuery/","getTableProspects":"/tableAdmin/","getProsGraphics":"/asesoria-restful/api/asr/Asesores/getProsGraphics/","getProsReports":"/getProsReports/","getCatalogSearch":"/asesoria-restful/api/asr/Asesores/Prospect/catalogSearch/","getListByEmployee":"/asesoria-restful/api/asr/Asesores/Prospect/getListByEmployee/","getStages":"/asesoria-restful/api/asr/Asesores/Prospect/getStagesCatalog","prospecsPT":"/asesoria-restful/api/asr/Asesores/Prospect/prospect/PT/","getDetailProspect":"/asesoria-restful/api/asr/Asesores/Prospect/getDetail/","getProspectTPC":"/asesoria-restful/api/asr/Asesores/Prospect/TPC/","getProspectProfile":"/asesoria-restful/api/asr/Asesores/Prospect/Prospect/profile/","saveProspect":"/asesoria-restful/api/asr/Asesores/Prospect/save/","updateProspect":"/asesoria-restful/api/asr/Asesores/Prospect/update/","saveActivity":"/asesoria-restful/api/asr/Asesores/Prospect/saveActivity/","deleteActivity":"/asesoria-restful/api/asr/Asesores/Prospect/deleteActivity/","closeActivity":"/asesoria-restful/api/asr/Asesores/Prospect/closeActivity/","updateActivity":"/asesoria-restful/api/asr/Asesores/Prospect/updateActivity/","getActivityRecord":"/asesoria-restful/api/asr/Asesores/ActivityRecord","getActivityRecordAdm":"/asesoria-restful/api/adm/Asesores/ActivityRecord","getActivityOffices":"/asesoria-restful/api/asr/Asesores/Meta/getFinancialCenters/?language=SPA","getTracingClient":"/asesoria-restful/api/asr/Asesores","getDetailedCustomerTrackingReport":"/asesoria-restful/api/asr/Asesores/Report/getDetailedCustomerTrackingReport","getCustomerTrackingReport":"/asesoria-restful/api/asr/Asesores/Report/getCustomerTrackingReport","getPresentations":"/asesoria-restful/api/asr/Asesores/Presentation/getPresentationsByType/","getIssuersProposal":"/asesoria-restful/api/adm/Asesores/Fund/getFunds/","getClassifications":"/asesoria-restful/api/adm/Asesores/Product/getClassifications/","getProductsByClassification":"/asesoria-restful/api/adm/Asesores/Product/getProductsByClassification/","deleteProduct":"/asesoria-restful/api/adm/Asesores/Product/delete/","saveProduct":"/asesoria-restful/api/adm/Asesores/Product/save/","updateProduct":"/asesoria-restful/api/adm/Asesores/Product/updateName/","doFactsheet":"/asesoria-restful/api/adm/Asesores/Product/save/","updateFactsheetImg":"/asesoria-restful/api/asr/Asesores/Product/updateProduct/","getProductFactsheetImg":"/asesoria-restful/api/adm/Asesores/Product/getImage/","updateFactsheetProduct":"/asesoria-restful/api/adm/Asesores/Product/updateName/","deleteFactsheetProduct":"/asesoria-restful/api/adm/Asesores/Product/delete/","getGroups":"/asesoria-restful/api/adm/Asesores/Meta/getGroups/","saveGroup":"/asesoria-restful/api/adm/Asesores/Meta/saveGroup/","updateNameGroup":"/asesoria-restful/api/adm/Asesores/Meta/updateNameGroup/","deleteGroup":"/asesoria-restful/api/adm/Asesores/Meta/deleteGroup/","ServiceGroups":"/asesoria-restful/api/adm/Asesores/Meta/","getTypesAsr":"/asesoria-restful/api/asr/Asesores/Presentation/getTypes/","getTypes":"/asesoria-restful/api/adm/Asesores/Presentation/getTypes/","getPresentationsByType":"/asesoria-restful/api/adm/Asesores/Presentation/getPresentationsByType/","getPresentationSubTypes":"/asesoria-restful/api/asr/Asesores/PresentationSubType/getPresentationSubTypes/","getPresentationSubTypesByClassification":"/asesoria-restful/api/adm/Asesores/PresentationSubType/getPresentationSubTypesByClassification/","savePresentation":"/asesoria-restful/api/adm/Asesores/Presentation/save/","updatePresentationImg":"/asesoria-restful/api/asr/Asesores/Presentation/update/","getPresentationFile":"/asesoria-restful/api/asr/Asesores/Presentation/getFile/","getPresentationFileAdm":"/asesoria-restful/api/adm/Asesores/Presentation/getFile/","deletePresentation":"/asesoria-restful/api/adm/Asesores/Presentation/delete/","updateNamePresentation":"/asesoria-restful/api/adm/Asesores/Presentation/updateName/","saveClasification":"/asesoria-restful/api/adm/Asesores/PresentationType/saveClassification/","saveSubClasification":"/asesoria-restful/api/asr/Asesores/PresentationSubType/save/","getGlobalForecasts":"/asesoria-restful/api/adm/Asesores/Parameters/getGlobalForecasts/","updateGlobalForecasts":"/asesoria-restful/api/adm/Asesores/Parameters/updateGlobalForecasts/","getLocalForecasts":"/asesoria-restful/api/adm/Asesores/Parameters/getLocalForecasts/","updateLocalForecasts":"/asesoria-restful/api/adm/Asesores/Parameters/updateLocalForecasts/","getEconomicEnvironment":"/asesoria-restful/api/adm/Asesores/Parameters/getEconomicEnvironment/","updateEconomicEnvironment":"/asesoria-restful/api/adm/Asesores/Parameters/updateEconomicEnvironment/","getAnnoucement":"/asesoria-restful/api/adm/Asesores/Parameters/getAnnoucement/","updateAnnouncement":"/asesoria-restful/api/adm/Asesores/Parameters/updateAnnouncement/","getDerivatives":"/asesoria-restful/api/adm/Asesores/Parameters/getDerivatives/","updateDerivatives":"/asesoria-restful/api/adm/Asesores/Parameters/updateDerivatives/","getDerivativesAsr":"/asesoria-restful/api/asr/Asesores/Parameters/getDerivatives/","getFundTypes":"/asesoria-restful/api/adm/Asesores/Fund/getFundTypes/","saveFund":"/asesoria-restful/api/adm/Asesores/Fund/saveFund/","deleteFund":"/asesoria-restful/api/adm/Asesores/Fund/deleteFund/","updateFund":"/asesoria-restful/api/adm/Asesores/Fund/updateFund/","saveFavorite":"/asesoria-restful/api/adm/Asesores/Issuer/saveFavorite/","deleteFavorite":"/asesoria-restful/api/adm/Asesores/Issuer/deleteFavorite/","updateFavorite":"/asesoria-restful/api/adm/Asesores/Issuer/updateFavorite/","getFavorites":"/asesoria-restful/api/adm/Asesores/Issuer/getFavorites/","getClassificationFav":"/asesoria-restful/api/asr/Asesores/ClassificationFav/getClassificationFav/","getClassificationFavAdm":"/asesoria-restful/api/adm/Asesores/ClassificationFav/getClassificationFav/","saveClassificationFav":"/asesoria-restful/api/adm/Asesores/ClassificationFav/saveClassificationFav/","deleteClassificationFav":"/asesoria-restful/api/adm/Asesores/ClassificationFav/deleteClassificationFav/","getEmployeeMap":"/asesoria-restful/api/adm/Asesores/employeeMap/getEmployeeMap/","deleteEmployeMap":"/asesoria-restful/api/adm/Asesores/employeeMap/deleteEmployeMap/","saveEmployeeMap":"/asesoria-restful/api/adm/Asesores/employeeMap/saveEmployeeMap/","getRoles":"/asesoria-restful/api/adm/Asesores/UserRole/getRoles/","getUserRoles":"/asesoria-restful/api/adm/Asesores/UserRole/getUserRoles/","saveUserRole":"/asesoria-restful/api/adm/Asesores/UserRole/saveUserRole/","deleteUserRole":"/asesoria-restful/api/adm/Asesores/UserRole/deleteUserRole/","getMessages":"/asesoria-restful/api/adm/Asesores/Message/getAllMessages/","messageRegistration":"/asesoria-restful/api/adm/Asesores/Message/messageRegistration/","getMessageDetail":"/asesoria-restful/api/asr/Asesores/Message/getMessageDetail/","getAllMessagesByRange":"/asesoria-restful/api/adm/Asesores/Message/getAllMessagesByRangeDate/","getAdvisersBinnacleMessage":"/asesoria-restful/api/adm/Asesores/Message/getMessage/","getAdvisersBinnacleBinnacle":"/asesoria-restful/api/adm/Asesores/ActivityLog/getReportCommentsXls/","getMediaBank":"/asesoria-restful/api/asr/orchestrate/contactMeansCatalog","getOrdersBank":"/asesoria-restful/api/asr/funds/v1_0/bankFundsAndMoneyMarketMvmntsQuery","getOrdersMoneyMarketBank":"/asesoria-restful/api/asr/movements/v1_0/bankContractInvstMovementsQuery","deleteReportoBuy":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketReportoBuyCancellation","deleteDirectBuy":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketDirectBuyCancellation/","deleteDirectSell":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketDirectSellCancellation","getReportoBands":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketBandsReportoQuery","getDirectBands":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketBandsDirectQuery/","getAuctionBands":"/asesoria-restful/api/asr/moneyMarket/v1_0/mMAuctionsQuery","getMoneyMarketCalculation":"/asesoria-restful/api/asr/moneyMarket/v1_0/mMBondPriceCalculationQuery/","getMoneyMarketRate":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketCalculationByRateQuery/","getMoneyMarketPrice":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketCalculationByDPriceQuery","getPortfolioBank":"/asesoria-restful/api/asr/portfolio/v1_0/bankInvstFundsAndMMPositionsQuery/","getPortfolioReporto":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketIntradayPositionQuery/","getAuctionsPrice":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketAuctionsPriceQuery/","getMaturityDateQuery":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketMaturityDateQuery/","getReportoConfirmLtr":"/asesoria-restful/api/asr/orchestrate/getReportoConfirmLetterQuery/","sendEmailReportoLtr":"/asesoria-restful/api/asr/orchestrate/sendEmailReportoConfirmLetter","getFundBank":"/asesoria-restful/api/asr/funds/v1_0/bankInvstFundsByContractQuery/","getCalendarBank":"/asesoria-restful/api/asr/funds/v1_0/bankInvstCalendarByFundsQuery/","bankFundBuyRequest":"/asesoria-restful/api/asr/investment/v1_0/bankFundBuyRequest","captureDirectBank":"/asesoria-restful/api/asr/moneyMarket/v1_0/mMDirectBondOrdersRegistration/","captureReportoBank":"/asesoria-restful/api/asr/moneyMarket/v1_0/mMReportoBondOrdersRegistration/","bankContractBalance":"/asesoria-restful/api/asr/balance/v1_0/bankContractBalance/","bankReportoBuyingPowerQuery":"/asesoria-restful/api/asr/portfolio/v1_0/bankReportoBuyingPowerQuery/","bankPortfolioQuery":"/asesoria-restful/api/asr/portfolio/v1_1/bankPortfolioQuery/","getPortfolioGlobalDetailQuery":"/asesoria-restful/api/asr/portfolio/v1_0/portfolioGlobalDetailQuery/","bankInvstUserInfoQuery":"/asesoria-restful/api/asr/funds/v1_0/bankInvstUserInfoQuery/","bankFundSellRequest":"/asesoria-restful/api/asr/investment/v1_0/bankFundSellRequest","bankFundBuyCancelationRequest":"/asesoria-restful/api/asr/investment/v1_0/bankFundBuyCancelation","bankFundSellCancelationRequest":"/asesoria-restful/api/asr/investment/v1_0/bankInvstFundOperationCancelation","getMoneyMarketIssuersSeriesQuery":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketIssuersSeriesQuery","getMoneyMarketAdviserContractsQuery":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketAdviserContractsQuery","getMoneyMarketContactMeansCatalogs":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketContactMeansCatalogs/","getMoneyMarketOrderQuotation":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketOrderQuotation","getMoneyMarketOrderRegistration":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketOrderRegistration","getQuestions":"/getQuestions","getVideos":"/getVideos","getPendingOperations":"/asesoria-restful/api/asr/contractManagemen/v1_0/eBPendingOpQuery/","PendingOperationsApprove":"/asesoria-restful/api/asr/contractManagemen/v1_0/eBPendingOpExecution/","PendingOperationsReject":"/asesoria-restful/api/asr/contractManagemen/v1_0/eBPendingOpModification/","PendingOperationsApproveNotification":"/asesoria-restful/api/asr/contractManagemen/v1_0/adviserPendingOpsExecution/","PendingOperationsRejectNotification":"/asesoria-restful/api/asr/contractManagemen/v1_0/adviserPendingOpsModification/","getPendingOperationsCat":"/asesoria-restful/api/cat/contractManagemen/v1_0/eBPendingOpQuery/","PendingOperationsApproveCat":"/asesoria-restful/api/cat/contractManagemen/v1_0/eBPendingOpExecution/","PendingOperationsRejectCat":"/asesoria-restful/api/cat/contractManagemen/v1_0/eBPendingOpModification/","PendingOperationsApproveCatNotification":"/asesoria-restful/api/cat/contractManagemen/v1_0/adviserPendingOpsExecution/","PendingOperationsRejectCatNotification":"/asesoria-restful/api/cat/contractManagemen/v1_0/adviserPendingOpsModification/","PendingOperationsHistoric":"/asesoria-restful/api/asr/contractManagemen/v1_0/eBHistoricalPendingOpQuery/","PendingOperationsHistoricCat":"/asesoria-restful/api/cat/contractManagemen/v1_0/eBHistoricalPendingOpQuery/","getPendingOperationsSent":"/asesoria-restful/api/asr/contractManagemen/v1_0/eBSentPendingOpQuery","getBankContractsByClientQuery":"/asesoria-restful/api/asr/contractInfo/v1_0/bankContractsByClientQuery/","rejectAdviser":"/api/operations/rejectAuth","approveAdviser":"/api/operations/requestAuth","orderTypeA2K":"/asesoria-restful/api/asr/orchestrate/orderTypeA2K/","getTemporal":"/asesoria/img/temp.json","getShortAndLargeReport":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketCashByAdviserQuery","getEmpleadoReport":"/asesoria-restful/api/asr/moneyMarket/v1_0/moneyMarketCashByAdviserQuery","getContractInfoDetail":"/asesoria-restful/api/asr/contractInfo/v1_0/simplifiedBankContractQuery/","getContractSelection":"/asesoria-restful/api/asr/orchestrate/contractSelection/","getMarketValidation":"/asesoria-restful/api/asr/clientConfigurations/v1_0/contractMarketValidation/","getDCInvestmentProspectQueryById":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCInvestmentProspectQueryById/","getDCInvestmentProspectQuery":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCInvestmentProspectQuery/","getDCScheduleQueryByDate":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCScheduleQueryByDate/","getDCScheduleQueryByDateDetails":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCScheduleQueryByDateDetails/","getDCDocumentQuery":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCDocumentQuery/","getDCDocumentQueryByClient":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCDocumentQueryByClient/","getDCScheduleQuery":"/asesoria-restful/api/dinnAsesoria/digitalChannelsManagment/v1_0/dCScheduleQuery/","getStrategy":"/asesoria-restful/api/asr/Asesores/Opportunity/getStrategy/","getSegment":"/asesoria-restful/api/asr/Asesores/Opportunity/getSegment/","saveOpportunity":"/asesoria-restful/api/asr/Asesores/Opportunity/saveOpportunity/","getListOpportunity":"/asesoria-restful/api/asr/Asesores/Opportunity/getOpportunity/","getOpportunityById":"/asesoria-restful/api/asr/Asesores/Opportunity/getOpportunityById/","updateContacted":"/asesoria-restful/api/asr/Asesores/Opportunity/updateContacted/","nextStage":"/asesoria-restful/api/asr/Asesores/Opportunity/nextStage/","updateOpportunity":"/asesoria-restful/api/asr/Asesores/Opportunity/updateOpportunity/","getOpportunityReport":"/asesoria-restful/api/asr/Asesores/Opportunity/getOpportunityReport/","getReportOpportunityDetail":"/asesoria-restful/api/asr/Asesores/Opportunity/getReportOpportunityDetail/","getReportOpportunityDetailFC":"/asesoria-restful/api/asr/Asesores/Opportunity/getReportOpportunityDetailFC/","outOfProfileContractQuery":"/asesoria-restful/api/asr/contractInfo/v1_0/outOfProfileContractQuery/","getCatalogEntityFederal":"/asesoria-restful/api/asr/insurance/v1_0/federalEntityQuery/","getCatalogMarksCars":"/asesoria-restful/api/asr/insurance/v1_1/carBrandQuery/","getCatalogModelsCars":"/asesoria-restful/api/asr/insurance/v1_1/carModelQuery/","getCatalogMunicipalityCars":"/asesoria-restful/api/asr/insurance/v1_0/municipalityQuery/","getCatalogBanksCars":"/asesoria-restful/api/asr/insurance/v1_0/insuranceBanksQuery/","getCatalogBanks":"/asesoria-restful/api/asr/insurance/v1_0/insuranceBanksQuery/","getServiceEmision":"/asesoria-restful/api/asr/insurance/v1_1/carInsurancePolicyRegistration/","getServiceCotizacion":"/asesoria-restful/api/asr/insurance/v1_1/carInsuranceQuotation/","getBankType":"/asesoria-restful/api/asr/insurance/v1_1/bankType/","sendCustomizedEmailNotificationSending":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingLifeInsurance/","sendEmailNotificationCotization":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCotizar/","sendEmailNotificationCompraSeguro":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCompraSeguro/","getStatementFiscal":"/asesoria-restful/api/asr/statement/v1_0/accountStatementAvailabilityQuery/","getStatementFiscalPormenorizadas":"/asesoria-restful/api/asr/statement/v1_0/fiscalCertificateAvailableQuery/","sendEmailNotificationStatementFiscalQuery":"/asesoria-restful/api/asr/orchestrate/sendEmailNotificationStatementFiscalQuery/","getAccountState":"/asesoria-restful/api/asr/orchestrate/getAccountState/","getAccountStateRh":"/asesoria-restful/api/rh/orchestrate/getAccountState/","getCatalogPostalCodeQuery":"/asesoria-restful/api/asr/insurance/v1_0/postalCodeQuery/","getCatalogInsuranceRiskTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceRiskTypeQuery/","getCatalogWallTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/wallTypeQuery/","getCatalogRoofTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/roofTypeQuery/","getCatalogStreetTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/streetTypeQuery/","getCatalogCardTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceCardTypeQuery/","getCatalogPaymentTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/PaymentTypeQuery/","getCatalogInsuranceCardTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/streetTypeQuery/","getServiceCotizacionHome":"/asesoria-restful/api/asr/insurance/v1_0/homeInsuranceQuotation/","getServiceEmisionHomegetServiceEmisionHome":"/asesoria-restful/api/asr/insurance/v1_0/homeInsurancePolicyRegistration/","getServiceEmisionPyme":"/asesoria-restful/api/asr/insurance/v1_0/homeInsurancePolicyRegistration/","getCatalogEntityFederalPyme":"/asesoria-restful/api/asr/insurance/v1_0/federalEntityQuery/","getCatalogMunicipalityPyme":"/asesoria-restful/api/asr/insurance/v1_0/municipalityQuery/","getCatalogBanksPyme":"/asesoria-restful/api/asr/insurance/v1_0/insuranceBanksQuery/","getServiceCotizacionPyme":"/asesoria-restful/api/asr/insurance/v1_0/homeInsuranceQuotation/","getCatalogClasificationQuery":"/asesoria-restful/api/asr/insurance/v1_0/streetTypeQuery/","getCoverage":"/asesoria-restful/api/asr/insuranceCoverageService/v1_0/insuranceCoverageQuery/","getCotizationAdd":"/asesoria-restful/api/asr/insuranceQuotationService/v1_0/insuranceQuotationAdd/","getCotizationSearch":"/asesoria-restful/api/asr/insuranceQuotationService/v1_0/insuranceQuotationQuery/","getCotizationUpdate":"/asesoria-restful/api/asr/insuranceQuotationService/v1_0/insuranceQuotationUpdateJson/","getCotizationProcedure":"/asesoria-restful/api/asr/insuranceQuotationService/v1_0/insuranceQuotationProcedureJson/","getCotizationCancel":"/asesoria-restful/api/asr/insuranceQuotationService/v1_0/insuranceQuotationCancelJson/","getAgentQuery":"/asesoria-restful/api/asr/insuranceJpaService/v1_0/insuranceAgentQuery/","getAgent":"/asesoria-restful/api/asr/insuranceJpaService/v1_0/insuranceAgent/","getAgentAddQuery":"/asesoria-restful/api/asr/insuranceJpaService/v1_0/insuranceAgentAdd/","getAgentUpdateQuery":"/asesoria-restful/api/asr/insuranceJpaService/v1_0/insuranceAgentUpdate/","getAgentDeleteQuery":"/asesoria-restful/api/asr/insuranceJpaService/v1_0/insuranceAgentDelete/","sendEmailNotificationCotizationHome":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCotizarHogar","sendEmailNotificationEmisionHome":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCompraSeguroHogar","sendEmailNotificationCotizationPyme":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCotizarHogar","sendEmailNotificationEmisionPyme":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCompraSeguroHogar","getMedicalExpenseInsuranceQuotation":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseInsuranceQuotation","getMedExpInsuranceDetailQuotationQuery":"/asesoria-restful//api/asr/insurance/v1_0/medExpInsuranceDetailQuotationQuery","getMedicalExpenseJobQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseJobQuery","getMedicalExpensePolicyHolderNumQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpensePolicyHolderNumQuery","getMedicalExpenseStateQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseStateQuery","getMedicalExpenseLocationQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseLocationQuery","getMedicalExpenseRelationshipQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseRelationshipQuery","sendEmailNotificationCotizationPMM":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceCotizarPMM","sendEmailNotificationEmisionPMM":"/asesoria-restful/api/asr/notificationsAndAlertsWS/1_2/customizedEmailNotificationSendingInsuranceEmisionPMM","getMedicalExpenseSportsQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseSportsQuery","getMedicalExpenseProfessionsQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseProfessionsQuery","getMedicalInsuranceFiscalIDNumberQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceFiscalIDNumberQuery","getMedicalExpenseDeductibleQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseDeductibleQuery","getMedicalExpenseCoinsuranceQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseCoinsuranceQuery","getMedicalExpenseDeductibleRedQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseDeductibleRedQuery","getMedicalExpenseMaxCoinsuranceQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseMaxCoinsuranceQuery","getMedicalExpenseInsuranceRequotationQuery":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseInsuranceRequotation","setMedicalExpenseDocsRegistration":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseDocsRegistration","getMedExpInsurancePolicyRegistration":"/asesoria-restful/api/asr/insurance/v1_0/medExpInsurancePolicyRegistration","getInsuranceCountryQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceCountryQuery","getInsuranceBusinessActivityQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceBusinessActivityQuery","getInsuranceIdentificationTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceIdentificationTypeQuery","getMedExpInsuranceQuestRegistration":"/asesoria-restful/api/asr/insurance/v1_0/medExpInsuranceQuestRegistration","getMedExpInsuranceQuestionnaireQuery":"/asesoria-restful/api/asr/insurance/v1_0/medExpInsuranceQuestionnaireQuery","getMedicalExpenseQuestValidation":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseQuestValidation","getInsuranceMaritalStatusQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceMaritalStatusQuery","getInsuranceSumQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceInsuredSumQuery","getCatalogCardTypeQueryLife":"{https://negociosuat.mapfre.com.mx/Zonaliados.Negocio/Api/_AYESalud/Identificacion?ramo=100","getLifeinsuranceNationalityQuery":"https://negociosuat.mapfre.com.mx/Zonaliados.Negocio/Api/_AYESalud/Pais?ramo=100","getLifeInsuranceQuotation":"/asesoria-restful/api/asr/insurance/v1_0/lifeInsuranceQuotation","getLifeInsuranceQuestionnaireQuery":"/asesoria-restful/api/asr/insurance/v1_0/lifeInsuranceQuestionnaireQuery","getinsuranceLifeHighRiskJobValidation":"/asesoria-restful/api/asr/insurance/v1_0/insuranceLifeHighRiskJobValidation","getLifeInsurancePolicyRegistration":"/asesoria-restful/api/asr/insurance/v1_0/lifeInsurancePolicyRegistration","getPoliza":"https://10.184.62.77/impresionSeGA/TWImpPolizaMarco.aspx","getSolicitud":"https://10.184.62.77/impresionSeGA/TWImpSolicitudMarco.aspx","getCondiciones":"https://zonaliados.mapfre.com.mx/zonaaliadosextra/vida/pdf/Plan%20de%20Vida%20Individual.pdf","getInsuranceBeneficiaryTypeQuery":"/asesoria-restful/api/asr/insurance/v1_0/insuranceBeneficiaryTypeQuery","getPolizasVida":"/asesoria-restful/api/asr/polizaVidaServiceController/v1_0/polizaVidaQueryOp","PolizaVidaUp":"/asesoria-restful/api/asr/polizaVidaServiceController/v1_0/polizaVidaUpOp","PolizaVidaAdd":"/asesoria-restful/api/asr/polizaVidaServiceController/v1_0/polizaVidaAddOp","PolizaVidaFindId":"/asesoria-restful/api/asr/polizaVidaServiceController/v1_0/polizaVidaFindIdOp","setMedicalExpenseProcessingRequest":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseProcessingRequest","getMedicalExpenseSignRegistration":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpenseSignRegistration","getMedicalExpensePackageRegistration":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpensePackageRegistration","getMedicalExpensePackageUpdate":"/asesoria-restful/api/asr/insurance/v1_0/medicalExpensePackageUpdate","getLifeInsuranceExpenseJobQuery":"/asesoria-restful/api/asr/insurance/v1_0/lifeInsuranceJobQuery","getLifeInsuranceRelationshipQuery":"/asesoria-restful/api/asr/insurance/v1_0/lifeInsuranceRelationshipQuery"};
                    return urls;
                }

                angular.module('actinver.constants')
                .constant('URLS', new url() );
            })();
        
(function() {
    "use strict";

    function userConfig() {
        var api = {};
        api.user = {};
        api.user_permissions = {};
        return api;
    }

    angular.module('actinver.services')
        .service('userConfig', userConfig);
})();

(function() {
    "use strict";

    auth.$inject = ['$sessionStorage', '$q', 'userConfig', 'loginSrvc'];
    function auth($sessionStorage, $q, userConfig, loginSrvc) {
        /**
         *  User profile resource
         */
        var Profile = {
            login: function(_credentials) {
                return loginSrvc.makeRequestLogin(_credentials);
            },
            permisos: function(_employeeNumber) {
                return loginSrvc.makeRequestPermissions(_employeeNumber);
            },
            csrf : function () {
                return loginSrvc.makeCsrfToken();
            },
            logout : function () {
                return loginSrvc.makeRequestLogout();
            }
        };

        var auth = {};

        var userHasPermissionForView = function(view) {
            if (!auth.isLoggedIn()) {
                return false;
            }

            if (!view.permissions || !view.permissions.length) {
                return true;
            }

            return auth.userHasPermission(view.permissions);
        };


         auth.currentUser = function() {
            return {
                user: JSON.parse($sessionStorage.user),
                user_permissions: JSON.parse($sessionStorage.user_permissions)
            };
        };


        /**
         *  Saves the current user in the root scope
         *  Call this in the app run() method
         */
        auth.init = function() {
            if (auth.isLoggedIn()) {
                userConfig.user =  auth.currentUser().user;
                userConfig.user_permissions =  auth.currentUser().user_permissions;
            }
        };

        auth.csrf = function () {
            return $q(function (resolve, reject) {
                Profile.csrf()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback () {
                    resolve(true);
                }

                function errorCallback(error){
                    reject(error);
                }
            });
        };


        auth.login = function(username, password) {
            return $q(function(resolve, reject) {
                auth.csrf()
                    .then(successCallBack)
                    .catch();

                function successCallBack () {
                    Profile.login({
                        username: username,
                        password: password
                    }).then(function successCallback(response) {
                        $sessionStorage.user = JSON.stringify(response.data);
                        userConfig.user = response.data;
                        resolve(
                            auth.permission(response.data.employeeID)
                        );
                    }).catch(function(error) {
                        reject(error);
                    });
                }

            });
        };

        auth.permission = function(employeeID) {
            return $q(function(resolve, reject) {
                Profile.permisos(
                    employeeID
                ).then(function successCallback(response) {
                    $sessionStorage.user_permissions = JSON.stringify(response.data);
                    userConfig.user_permissions = response.data;
                    resolve(response);
                }).catch(function(error) {
                    reject(error);
                });
            });
        };

        auth.logout = function() {
            loginSrvc.makeCsrfToken()
                .then(doLogout)
                .catch();

            function doLogout (csrf) {
                Profile.logout(csrf)
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback () {
                    // delete $sessionStorage.user;
                    // delete $sessionStorage.user_permissions;
                    // delete $sessionStorage.sclient;
                    // delete userConfig.user;
                    // delete userConfig.user_permissions;
                    sessionStorage.clear();
                    location.assign('/asesoria/login');
                }

                function errorCallback (error) {
                    //login for errors in server
                    console.error(error);
                }
            }
        };


        auth.checkPermissionForView = function(view) {
            if (!view.requiresAuthentication) {
                return true;
            }

            return userHasPermissionForView(view);
        };


        auth.userHasPermission = function(permissions) {

            if (!auth.isLoggedIn()) {
                return false;
            }

            var found = R.find(function(permission) {
                return userConfig.user_permissions.componentDTO.indexOf(permission) >= 0;
            }, permissions);

            return found;
        };


        auth.isLoggedIn = function() {
            return $sessionStorage.user !== null && $sessionStorage.user !== undefined;
        };

        return auth;
    }


    angular.module('actinver.services')
        .factory('Auth', auth);


})();

( function() {
    "use strict";

    binnacleInfo.$inject = ['URLS', '$http', '$q', 'moment'];
    function binnacleInfo( URLS, $http, $q, moment ) {

        return {

            /**
             * Get binnacle widget information
             * @param {string} employee - Employee ID
             * @return  {function}
             */
            getInfo: function( employee ){
                var date = moment().subtract( 1, 'months' ),
                    month = date.format( 'MM' ),
                    year = date.format( 'YYYY' );

                return $q(function(resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getBinnacleAdvGoal + employee + '/' + month + '/' + year,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success( response ) { 
                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            // Info
                            var info = response.data.result;
                            info.data = [info.clientsContacted, info.clientsToReach - info.clientsContacted];
                            info.percentage = parseInt( info.totalPercentage ) + '%';
                            info.colors = ['#7ed321', '#517cbd'];
                            resolve( { success: true, data: info, finish: true } );
                        }
                        else {
                            reject({success: false, finish: true});
                        }

                    }, function error(){

                        reject({success: false, finish: true});

                    });

                });
            },

            /**
             * Get information for setting blocks and chaarts
             * @param {object} response - Object with information to show in blocks and inside the chart.
             * @return  {object}
             */
            showInfo: function(response, type){
                var data = (type) ? response.result : response.data;
                return {
                    chart: data,
                    finish: true,
                    success: response.success
                };

            }

        };

    }

    angular
        .module( 'actinver.services' )
        .factory( 'binnacleInfo', binnacleInfo );

})();

(function () {
    "use strict";

    function binnacleStrategyCommercialFtr() {
        var state = {};       
        state.infoStrategyCommercial =null;
        state.saveState = function(reg){
            state.infoStrategyCommercial = reg;
        };

        return state;
    }

    angular
        .module('actinver.services')
        .factory('binnacleStrategyCommercialFtr', binnacleStrategyCommercialFtr);

})();

(function(){
    "use strict";
    angular
        .module('actinver.services')
        .factory('ErrorMessage',errorMessage);

    function errorMessage () {
        return {
            createError : createError
        };

        function createError (messages) {
            var _message = '';
            angular.forEach(messages, function(_value){
                _message += _value.responseMessage + '<br>';
            });
            return _message;
        }
    }

})();
( function() {
    "use strict";

    interceptor404.$inject = ['$q', '$injector', 'cfpLoadingBar'];
    function interceptor404( $q, $injector, cfpLoadingBar ) {
        var showModal = false;
        var done = function(){
            window.location = "/asesoria/login";
        };
        var flag;
        var interceptor404 ={
            'request': function( config ){
                flag = config.exclude;
                return config;
            },
            'responseError': function( rejection ) {
                if( flag ) return $q.reject(rejection );
                var CommonModalsSrv = $injector.get('CommonModalsSrv');
                //console.log( rejection );
                cfpLoadingBar.complete();
                if(rejection.status === 401){
                    CommonModalsSrv.info("Su sesión ha terminado.").result.then(
                        function(){
                            showModal = false;
                            done();
                        }
                    );
                   
                }else if(rejection.status !== 200 || rejection.status !== 404 || rejection.status !== 401){
                    if( !showModal ){
                        showModal = true;
                        CommonModalsSrv.systemError().result.then(function(){
                            },
                            function() {
                                showModal = false;
                        });

                    }
                }
                return $q.reject(rejection );
            }
        };

        return interceptor404;
    }

    angular
        .module( 'actinver.services' )
        .factory( 'interceptor404', interceptor404 );

})();

( function() {
    "use strict";

    interceptorToken.$inject = ['$q', '$injector', 'cfpLoadingBar'];
    function interceptorToken( $q, $injector, cfpLoadingBar ) {

        var BASE_PATH = (!window.location.port) ? window.location.protocol + '//' + window.location.hostname : window.location.protocol + '//' + window.location.hostname + ':' + window.location.port;
        var CONTEXT = "/asesoria-restful";

        return {
            request : request
        };

        function request(config) {

            cfpLoadingBar.complete();

            if ( (config.method === 'POST' || config.method === 'PUT' || config.method === 'DELETE') && !(config.url.indexOf('authentication/token') > 0 || config.url.indexOf('logout') > 0 ) ) {
                return getCsrf().then( function ( response ) {
                    config.headers["X-CSRF-TOKEN"] = response.csrf;
                    config.headers.Authorization = 'bearer ' + sessionStorage.getItem("__token") || '';
                    config.headers['Content-Type'] = config.headers && angular.isDefined(config.headers.ocupateMyHeader) && config.headers.ocupateMyHeader ? config.headers['Content-Type'] : 'application/x-www-form-urlencoded; charset=UTF-8';
                    return config;
                });
            }

            config.headers.Authorization = 'bearer ' + sessionStorage.getItem("__token") || '';
            config.headers['X-CSRF-TOKEN'] = sessionStorage.getItem("__csrf") || '';
            return config;
        }

        function getCsrf () {
            
            cfpLoadingBar.complete();

            return $injector.get ( '$http' ) ( {
                method: 'GET',
                url: BASE_PATH + CONTEXT + '/api/asesoria/validate'
            }).then ( function ( response ) {
                return {
                    csrf : response.headers('X-CSRF-TOKEN')
                };
            }).catch( function ( error) {
                console.log('Error', error);
            });
        }

    }

    angular
        .module( 'actinver.services' )
        .factory( 'interceptorToken', interceptorToken );

})();

(function () {
    'use strict';
    exportTableToExcel.$inject = ['$window'];
    function exportTableToExcel($window) {
        var uri = 'data:application/vnd.ms-excel;base64,',
            template = '<html  xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">  <head> <META http-equiv="Content-Type" content="text/html; charset=utf-8"> <!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
            base64 = function (s) {
                return $window.btoa(encodeURIComponent(s).replace(/%([0-9A-F]{2})/g, function (match, p1) {
                    return String.fromCharCode('0x' + p1);
                }));
            },
            format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }); };
        return {
            tableToExcel: function (tableId, worksheetName) {
                var table = $(tableId),
                    ctx = { worksheet: worksheetName, table: table.html() },
                    href = uri + base64(format(template, ctx));
                return href;
            }
        };
    }
    angular
        .module('actinver.services')
        .factory('exportTableToExcel', exportTableToExcel);
})();
( function() {
    "use strict";

    tableList.$inject = ['$resource', '$log', '$filter'];
    function tableList($resource, $log, $filter) {
        var obj = {};
        var vm = this;

        obj = {

            /**
             * Get resource information from certain URL
             * @param  {string}
             * @return  {function}
             */
            getResource: function(url){

                return $resource( url, {}, {
                        query: {
                            exclude : vm.exclude,
                            method: "GET",
                            ignoreLoadingBar: true
                        }
                    }
                );

            },

            /**
             * Get resource information from certain URL
             * @param {object} infoSettings - URL string or one data array.
             * @param {object} newParams - Set new parameters to returned table.
             * @param {object} newSettings - Set new settings to work with the table.
             * @see {@link http://ng-table.com|ngTable}
             * @return  {object}
             */
            tableSet: function(infoSettings, newParams, newSettings){
                var defaultParams = {
                        count: 7
                    },
                    defaultSettings = {
                        counts: []
                    },
                    initialParams, initialSettings;

                if(infoSettings.url || infoSettings.dataset){
                    //TODO omite error general en la peticiones
                    if(infoSettings.url.includes('consultarContratosPerfilVencer')){
                        vm.exclude=true;
                    }else if(infoSettings.url.includes('consultarContratosPerfilVencido')){
                        vm.exclude=true;
                    }else{
                        vm.exclude=false;
                    }

                    if(infoSettings.url){ 
                        defaultSettings.getData = function( params ){

                                        return obj.getResource( infoSettings.url ).query({


                                            language: 'SPA'
                                           
                                        }).$promise.then(function(data){

                                            if( data.result || data.contratosVencimientoTO ){
                                                var info = data.result || data.contratosVencimientoTO,
                                                    data_filtered = $filter( 'limitTo' )( info, 20 ),
                                                    ordered_data;

                                                // Information
                                                data.data = data_filtered;
                                                ordered_data = params.sorting() ? $filter( 'orderBy' )( data.data, params.orderBy() ) : data.data;
                                                params.total( ordered_data.length );
                                                data.data = ordered_data.slice( ( params.page() - 1 ) * params.count(), params.page() * params.count() );

                                            }  else {

                                                //data.total = 0;
                                                params.total(data.total);

                                            }

                                            if(data.data.constructor !== Array){
                                                data.data = [data.data];
                                            }

                                            if(params.total() === 0) {
                                                return {
                                                    loading: false,
                                                    validate: 'no-results'
                                                };
                                            }
                                           
                                            return data.data;

                                        }).catch(function(error){                                            
                                            
                                            $log.warn('Resource was not found',error);                                    
                                            return {
                                                loading: false,
                                                validate: 'error'
                                            };

                                        });

                                    };
      
                    } else {

                        defaultSettings.dataset = infoSettings.dataset;

                    }

                    // Set
                    initialParams = angular.merge({}, defaultParams, newParams);
                    initialSettings = angular.merge({}, defaultSettings, newSettings);

                    return {
                        loading: true,
                        initialParams: initialParams,
                        initialSettings: initialSettings
                    };

                } else {

                    $log.warn('You need to set a valid data resource');
                    return false;

                }
            }

        };

        return obj;

    }

    angular
        .module( 'actinver.services' )
        .factory( 'tableList', tableList );


})();

( function(){
    'use strict';

    function capitalize(){

		return function( text ) {
      		return ( !!text ) ? text.charAt(0).toUpperCase() + text.substr(1).toLowerCase() : '';
    	};
    }

    angular
        .module( 'actinver.filters' )
        .filter( 'capitalize', capitalize );

})();
(function(){
    'use strict';

    function filterCurrency(){
        return function( _number,  _index ){
            if( _number !== null && !isNaN(_number) ){
                var number = _number.toString();
                var index = number.indexOf('.');
                if( index === -1){
                    return number;
                }
                else if( _index === 0 ){
                    return number.substr( 0, index );
                }
                else{
                    return number.substr( 0, index + ( _index || 2 ) + 1 );
                }
            }
            return null;
        };
    }

    angular.module( 'actinver.filters' )
        .filter( 'currencyCustom', filterCurrency );
})();

( function(){
    'use strict';

    function groupJSON(){

        return function( xs, key ){

            return xs ? xs.reduce( function( rv, x ){
                ( rv[x[key]] = rv[x[key]] || [] ).push( x );
                return rv;
            }, {} ) : [];
        };
    }

    angular
        .module( 'actinver.filters' )
        .filter( 'groupJSON', groupJSON );

})();

( function(){
    'use strict';


    percentage.$inject = ['$window'];
    function percentage( $window ) {
        return function (input, decimals, suffix) {
            decimals = angular.isNumber(decimals)? decimals :  3;
            suffix = suffix || '%';
            if ($window.isNaN(input)) {
                return '';
            }
            return Math.round(input * Math.pow(10, decimals + 2))/Math.pow(10, decimals) + suffix;
        };
    }



    angular.module('percentage', [])
        .filter('percentage', percentage);


} )();






(function(){
    'use strict';

    function range(){
        return function(input, total) {
          total = parseInt(total);

          for (var i=0; i < total; i++) {
            input.push(i);
          }

          return input;
        };
    }

    angular.module( 'actinver.filters' )
        .filter( 'range', range );
})();

(function(){
    'use strict';

    function remainingTime(){
        return function(input) {
            function time( _time ){
                var hr = parseInt( _time/60);
                var min =  _time - (hr * 60);
                return  (hr < 10 ? ('0'+hr) : hr ) + ':'+ (min < 10 ? ('0'+min) : min );
            }

          return time( input );
        };
    }

    angular.module( 'actinver.filters' )
        .filter( 'remainingTime', remainingTime );
})();

(function () {

    'use strict';

    remarkText.$inject = ['$sce'];
    function remarkText($sce) {
        return function (text, phrase) {
            var cadena = angular.isString(text) ? text : ( text && text !== null ? text.toString() :'');
            if (phrase)
                cadena = cadena.replace(new RegExp('(' + phrase + ')', 'gi'), '<span class="search-find">$1</span>');
            return $sce.trustAsHtml(cadena);
        };
    }

    angular
        .module('actinver.filters')
        .filter('remarkText', remarkText);

})();
( function(){
    'use strict';

    function showAsDate(){

        return function( date ){
            return date ? date.substring(6,8) + '/' + date.substring(4,6) + '/' + date.substring(0,4) : '';
        };
    }

    angular
        .module( 'actinver.filters' )
        .filter( 'showAsDate', showAsDate );

})();

( function(){
    'use strict';

    function split(){

        return function( input, splitChar, splitIndex ){
            return input ? input.split( splitChar )[ splitIndex ] : '';
        };
    }

    angular
        .module( 'actinver.filters' )
        .filter( 'split', split );

})();

(function () {
    'use strict';

    function sumByColumn() {

        return function (collection, column) {
            var total = 0;

            collection.forEach(function (item) {
                total += parseFloat(item[column]);
            });

            return total;
        };
    }

    angular
        .module('actinver.filters')
        .filter('sumByColumn', sumByColumn);

})();
(function () {
    'use strict';

    function sumByColumnProp() {

        return function (collection, column) {
            var total = 0;
            collection.forEach(function (item) {
                total += parseFloat(item[column].valuation);
            });

            return total;
        };
    }

    angular
        .module('actinver.filters')
        .filter('sumByColumnProp', sumByColumnProp);

})();

( function(){
    "use strict";

    modals.$inject = ['$uibModal'];
    function modals( $uibModal) {

        var api  = {};
        api.detail = function( _array ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/account-contract.html',
                controller: 'accountContractCtrl',
                controllerAs: 'accountContract',
                resolve:{
                    info:function(){
                        return _array;
                    }
                },
            });
            return modal;
        };

        return api;
    }
    angular.module( 'actinver.services' )
        .service( 'accountContractModalSrv', modals );
})();
( function(){
    "use strict";

    modals.$inject = ['$uibModal'];
    function modals( $uibModal) {

        var api  = {};
        api.detail = function( _array ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/account-name.html',
                controller: 'accountNameCtrl',
                controllerAs: 'accountName',
                resolve:{
                    info:function(){
                        return _array;
                    }
                },
            });
            return modal;
        };

        return api;
    }
    angular.module( 'actinver.services' )
        .service( 'accountModalSrv', modals );
})();

( function(){
    "use strict";

    modals.$inject = ['$uibModal'];
    function modals( $uibModal ) {

        var api  = {};

        api.addActivity = function( title, it ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/activity/add.html',
                controller: 'addActivityCtrl',
                controllerAs: 'activity',
                resolve: {
                    title: function () {
                        return title || 'Actividad';
                    },
                    item: function(){
                        return it;
                    }
                }
            });
        };


        api.notice = function( it ){

            return $uibModal.open({
                templateUrl: '/scripts/modals/views/activity/notice.html',
                controller: 'noticeActivityCtrl',
                controllerAs: 'activity',
                resolve: {
                    item: function () {
                        return it;
                    }
                }
            });
        };


        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'modalActivity', modals );


})();

(function () {
    "use strict";

    addProspect.$inject = ['URLS', '$http', '$q', 'csrfSrv', '$filter', 'ErrorMessagesSrv', '$sessionStorage'];
    function addProspect(URLS, $http, $q, csrfSrv, $filter, ErrorMessagesSrv, $sessionStorage) {
        
        var user = JSON.parse($sessionStorage.user);

        return {
            setOpportunity: setOpportunity,
            getStrategy: getStrategy,
            getSegment : getSegment
        };

        function setOpportunity(_opportunity, _activity) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {

                    //var closeDate = $filter('date')(_prospect.closeDate, 'yyyy-MM-dd');
                    var idStage;
                    var comment='';
                    var clientNumber;
                    var segment;
                    if(_opportunity.strategy.idStrategy === 2){
                        idStage = 8;
                        comment = 'Se inicia como prospecto';
                        clientNumber = _opportunity.clientNumber;
                        segment = '';
                    }else {
                        idStage = 7;
                        comment = 'Se inicia como posibilidad';
                        clientNumber = 0;
                        segment = _opportunity.segment ? _opportunity.segment.segment : '';
                    }


                    var sendModel = {
                        nameOpportunity     : _opportunity.clientName,
                        idStrategy          : _opportunity.strategy.idStrategy,
                        phone               : _opportunity.phone,
                        mail                : _opportunity.email,
                        idStage             : idStage,
                        segment             : segment,
                        comment             : comment,
                        idEmployee          : user.employeeID,
                        clientNumber        : clientNumber,
                        language            : 'SPA'
                    };

                    
                    $http({
                        method: 'POST',
                        url: URLS.saveOpportunity,
                        data: $.param(sendModel)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        }else {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function (error) {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                        reject({ error: error.data });
                    });
                }

                function errorCsrf(error) {
                    //reject( { success: false } );
                    reject(error);
                }

            });
        }


       function getStrategy(){

            return $q( function( resolve, reject ){
               $http( {
                   method: 'GET',
                   url: URLS.getStrategy,
                   params: {
                       language: 'SPA'
                   }
               } ).then( function success( response ){

                   if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                       resolve( { success: true, data: response.data.result } );
                   } else {
                       reject( { success: false, data: [] } );
                   }

               }, function error(){

                   reject( { success: false, data: [] } );

               } );
           } );
       };

       function getSegment(){

        return $q( function( resolve, reject ){
           $http( {
               method: 'GET',
               url: URLS.getSegment,
               params: {
                   language: 'SPA'
               }
           } ).then( function success( response ){

               if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                   resolve( { success: true, data: response.data.result } );
               } else {
                   reject( { success: false, data: [] } );
               }

           }, function error(){

               reject( { success: false, data: [] } );

           } );
       } );
   };
        
    }

    angular.module('actinver.services')
        .service('addProspectSrv', addProspect);
})();

( function(){
    "use strict";

    administratorModalsSrv.$inject = ['$q', '$uibModal'];
    function administratorModalsSrv( $q, $uibModal ) {

        var api  = {};

        api.admonFactsheet = function( _title, _factsheet ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-factsheet.html',
                size: 'md',
                windowClass : 'administrator',
                //backdrop: 'static',
                //keyboard: false,
                controller: 'admonFactsheetModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    factsheet: function () {
                        return _factsheet;
                    }
                }
            });
            return modal.result;
        };


        api.admonGroup = function( _title, _group ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-group.html',
                size: 'sm',
                windowClass : 'administrator',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonGroupModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    group: function () {
                        return _group;
                    }
                }
            });
            return modal.result;
        };


        api.admonPresentations = function ( _title, _group ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-presentations.html',
                size: 'lg',
                windowClass : 'administrator',
                //backdrop: 'static',
                //keyboard : false,
                controller: 'admonPresentationsModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    presentations: function () {
                        return _group;
                    }
                }
            });
            return modal.result;
        };


        api.admonInvestment = function( _title, _investment ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-investment.html',
                windowClass : 'administrator investment',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonInvestmentModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    investment: function () {
                        return _investment;
                    }
                }
            });
            return modal.result;
        };


        api.admonFavorites = function( _title, _favorite ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-favorites.html',
                windowClass : 'administrator',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonFavoriteModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    favorite: function () {
                        return _favorite;
                    }
                }
            });
            return modal.result;
        }; 
        

        api.admonEmployee = function( _title, _employee ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-employee.html',
                windowClass : 'administrator',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonEmployeeModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    employee: function () {
                        return _employee;
                    }
                }
            });
            return modal.result;
        };


        api.admonProfiles = function( _title, _profile ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-profiles.html',
                windowClass : 'administrator',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonProfilesModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    profile: function () {
                        return _profile;
                    }
                }
            });
            return modal.result;
        };


        api.admonMessages = function( _title, _profile ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/administrator/admon-messages.html',
                windowClass : 'administrator',
                // backdrop: 'static',
                // keyboard : false,
                controller: 'admonProfilesModalCtrl',
                controllerAs: 'ctrl',
                resolve:{
                    title: function(){
                        return _title;
                    },
                    profile: function () {
                        return _profile;
                    }
                }
            });
            return modal.result;
        };


        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'administratorModalsSrv', administratorModalsSrv );


})();

( function(){
    'use strict';

    binnacleModalSrv.$inject = ['$uibModal'];
    function binnacleModalSrv( $uibModal ) {

        var api  = {};

        api.showClientInfo = function( client ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/binnacle/client-info.html',
                controller: 'clientInfoModalCtrl',
                controllerAs: 'client',
                backdrop: 'static',
                resolve: {
                    clientInfo: function(){
                        return {
                            info: client
                        };
                    }
                }
            }).result.finally( angular.noop ).then( angular.noop, angular.noop );
        };

        api.outlineClient = function( employee, contrato,tipoOrigen ,typeServicio,tipoPersona,typeoperation, investmentProfile){

            return $uibModal.open({
                templateUrl: '/scripts/modals/views/binnacle/outline-client.html',
                controller: 'outlineClientModalCtrl',
                controllerAs: 'outline',
                windowClass : 'outline-client-lb',
                resolve: {
                    outlineItemDetails: function(){
                        return {
                            employee: employee,
                            contrato: contrato,
                            tipoOrigen: tipoOrigen,
                            typeServicio: typeServicio,
                            tipoPersona: tipoPersona,
                            typeoperation:typeoperation,
                            investmentProfile : investmentProfile
                        };
                    }
                }
            }).result.finally( angular.noop ).then( angular.noop, angular.noop );
        };

        return api;
    }

    angular
        .module( 'actinver.services' )
        .service( 'binnacleModalSrv', binnacleModalSrv );

})();
( function(){
    "use strict";

    modals.$inject = ['$uibModal'];
    function modals( $uibModal ) {

        var api  = {};

        api.warning = function( message ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/commons/warning.html',
                size: 'sm',
                windowClass : 'commons warning',
                controller: 'warningModalCtrl',
                controllerAs: 'warning',
                resolve:{
                    message: function(){
                        return message;
                    }
                }
            });

            return modal;
        };
        
       api.confirm = function( message ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/commons/confirm.html',
                size: 'sm',
                windowClass : 'commons confirm',
                controller: 'warningModalCtrl',
                controllerAs: 'warning',
                resolve:{
                    message: function(){
                        return message;
                    }
                }
            });

            return modal;
        };
        

        api.done = function( message ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/commons/done.html',
                size: 'sm',
                windowClass : 'commons done',
                controller: 'doneModalCtrl',
                backdrop: 'static',
                keyboard : false,
                controllerAs: 'done',
                resolve:{
                    message: function(){
                        return message;
                    }
                }
            });

            return modal;
        };

        api.info = function( message ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/commons/info.html',
                size: 'sm',
                windowClass : 'commons info',
                controller: 'doneModalCtrl',
                backdrop: 'static',
                keyboard : false,
                controllerAs: 'done',
                resolve:{
                    message: function(){
                        return message;
                    }
                }
            });

            return modal;
        };

        api.error = function( message){
            var modal = $uibModal.open({
              templateUrl: '/scripts/modals/views/commons/error.html',
              size: 'sm',
              windowClass : 'commons error',
              controller: 'errorModalCtrl',
              controllerAs: 'error',
              resolve: {
                  message: function(){
                      return message;
                  }
              }
            }).result.catch(function(res){
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                    throw res;
                }
            });

            return modal;
        };

        api.systemError =  function( message ){
            return $uibModal.open({
              templateUrl: '/scripts/modals/views/commons/system-error.html',
              size: 'sm',
              windowClass : 'commons errorSystem',
              controller: 'errorSystemModalCtrl',
              controllerAs: 'error',
              resolve: {
                  message: function(){
                      return message;
                  }
              }
            }).result.catch(function(res) {
                if (!(res === 'cancel' || res === 'escape key press')) {
                    throw res;
                }
            });
        };


        api.user = {};

        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'CommonModalsSrv', modals );


})();

(function () {
    'use strict';

    outProfileModal.$inject = ['$uibModal'];
    function outProfileModal($uibModal) {

        var profile = {};
        profile.information = function () {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/contract-out-profile/contract-out-profile.html',
                windowClass: 'center-modal modal-center-contract-out-profile error',
                controller: 'outProfile',
                controllerAs: 'outProfile'
            }).result.catch(function (res) {
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                    throw res;
                }
            });
        };

        return profile;
    }

    angular.module('actinver.services')
        .service('outProfileSrv', outProfileModal);

})();
(function () {
    'use strict';

    directsBandsSrv.$inject = ['$uibModal'];
    function directsBandsSrv($uibModal) {

        var profile = {};
        profile.information = function (data, fn) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/money-market/directs-bands.html',
                windowClass: 'center-modal-bands-direct modal-center-contract-out-profile info',
                controller: 'directsBandsMdlCtrl',
                controllerAs: 'directsBandsMdlCtrl',
                backdrop: 'static',
                keyboard : false,
                resolve: {
                    data: function () {
                        return data;
                    },
                    fn:function(){
                        return fn;
                    }
                }
            });
            
        };

        return profile;
    }

    angular.module('actinver.services')
        .service('directsBandsSrv', directsBandsSrv);

})();
( function(){
    'use strict';

    goalsModalSrv.$inject = ['$uibModal'];
    function goalsModalSrv( $uibModal ) {

        var api  = {};

        api.showCenterDetail = function( type, employee, center, date ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/goals/center-detail.html',
                controller: 'centerDetailModalCtrl',
                controllerAs: 'center',
                resolve: {
                    centerInfo: function(){
                        return {
                            type: type,
                            employee: employee,
                            center: center,
                            date: date
                        };
                    }
                }
            }).result.finally( angular.noop ).then( angular.noop, angular.noop );
        };

        api.showAdviserDetail = function( adviserID, name, date ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/goals/adviser-detail.html',
                controller: 'adviserDetailModalCtrl',
                controllerAs: 'adviser',
                resolve: {
                    adviserInfo: function(){
                        return {
                            adviserID: adviserID,
                            name: name,
                            date: date
                        };
                    }
                }
            }).result.finally( angular.noop ).then( angular.noop, angular.noop );
        };

        return api;
    }

    angular
        .module( 'actinver.services' )
        .service( 'goalsModalSrv', goalsModalSrv );

})();
( function(){
    "use strict";

    modals.$inject = ['$uibModal', '$sce'];
    function modals( $uibModal, $sce ) {

        var api  = {};

        api.moreInfo = function( _model ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/detail.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'transfer-detail',
                resolve:{
                    info:function(){
                        return _model;
                    }
                }
            });
        };

        api.moreInfoMarketOrder = function( _model, _order){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/detailMarket.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'transfer-detail',
                resolve:{
                    info:function(){
                        _model.order = _order;
                        return _model;
                    }
                }
            });
        };


        api.moreInfoStations = function( _model, station ) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/detail-stations.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'table-detail',
                resolve:{
                    info:function(){
                        _model.station = station;
                        return _model;
                    }
                }
            });
        };

        api.moreInfoStationsBank = function( _model ) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/detail-stations.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'table-detail',
                resolve:{
                    info:function(){
                        return _model;
                    }
                }
            });
        };

        api.moreInfoMarket = function(_station ) {
            _station.url = $sce.trustAsResourceUrl('https://bursanet.actinver.com/static/ficha-valor/#/index?emisora=' + _station.issuer.issuerName + '&serie=' + _station.issuer.serie);
            return $uibModal.open({
                templateUrl: '/scripts/directives/table-stations-sockets/fichaValor.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'table-detail',
                resolve:{
                    info:function(){
                        return _station;
                    }
                }
            });
        };

        api.moreInfoTitles = function( _order ) {
            return $uibModal.open({
                templateUrl: '/scripts/directives/table-portfolio-investment/info-titles.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'table-detail',
                resolve:{
                    info:function(){
                        return _order;
                    }
                }
            });
        };

        api.moreInfoFundsBank = function (_order) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/investment/detail-funds-bank.html',
                controller: 'invModalCtrl',
                controllerAs: 'inv',
                windowClass : 'table-detail',
                resolve:{
                    info:function(){
                        return _order;
                    }
                }
            });

        };

        api.reportoConfirmLetter = function(opID, opDate, hold) {
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/money-market/reporto-letter.html',
                size: 'sm',
                windowClass : 'commons confirm',
                controller: 'reportoLetterModalCtrl',
                controllerAs: 'reportoLtr',
                resolve: { // estas variables se inyectan en el controlador
                    operation: function () {return opID;},
                    operDate: function () {return opDate;},
                    holder: function () {return hold;},
                    mailConfirm: function () {return false;}
                }
            });

            return modal;
        };

        return api;
    }

    angular.module( 'actinver.services' )
        .service( 'investmentModalSrv', modals );

})();

(function () {
    'use strict';

    luminaModalSrv.$inject = ['$uibModal'];
    function luminaModalSrv($uibModal) {

        var lumina = {};
        lumina.information = function (data) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/notification/lumina.html',
                windowClass: 'lumina modal-center-lumina done',
                controller: 'luminaModalCtrl',
                controllerAs: 'lumina',
                resolve: {
                    data: function () {
                        return data;
                    }
                }
            }).result.catch(function (res) {
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                    throw res;
                }
            });
        };

        return lumina;
    }

    angular.module('actinver.services')
        .service('LuminaModalsSrv', luminaModalSrv);

})();
(function () {
    'use strict';

    newsModalSrv.$inject = ['$uibModal'];
    function newsModalSrv($uibModal) {
        var news = {};
        news.showNews = function (data) {
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/news/news.html',
                windowClass: 'modal-center-news info',
                controller: 'newsModalCtrl',
                controllerAs: 'news',
                resolve: {
                    data: function () {
                        return data;
                    }
                }
            }).result.catch(function (res) {
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                    throw res;
                }
            });
        };

        return news;
    }

    angular.module('actinver.services')
        .service('newsModalSrv', newsModalSrv);

})();
(function () {
    'use strict';
    function popups() {
        var states = {};

        $.notify.addStyle('error', {
            html: "<div> <span data-notify-text/> </div>",
            classes: {
                base: {
                    "background-color": "white",
                    "padding": "5px",
                    "border": "2px solid #FA596D",
                    "border-radius": "5px",
                    "max-width":"300px"
                    
                },
                superblue: {
                    "color": "white",
                    "background-color": "blue"
                }
            }
        });

        $.notify.addStyle('warning', {
            html: "<div> <span data-notify-text/> </div>",
            classes: {
                base: {
                    "background-color": "white",
                    "padding": "5px",
                    "border": "2px solid #ffba3a",
                    "border-radius": "5px",
                    "max-width":"300px"
                },
                superblue: {
                    "color": "white",
                    "background-color": "blue"
                }
            }
        });

        $.notify.addStyle('done', {
            html: "<div> <span data-notify-text/> </div>",
            classes: {
                base: {
                    "background-color": "white",
                    "padding": "5px",
                    "border": "2px solid #00be66",
                    "border-radius": "5px",
                    "max-width":"300px"
                },
                superblue: {
                    "color": "white",
                    "background-color": "blue"
                }
            }
        });

        $.notify.addStyle('info', {
            html: "<div> <span data-notify-text/> </div>",
            classes: {
                base: {
                    "background-color": "white",
                    "padding": "5px",
                    "border": "2px solid #337ab7",
                    "border-radius": "5px",
                    "max-width":"300px"
                },
                superblue: {
                    "color": "white",
                    "background-color": "blue"
                }
            }
        });


        states.warning = function (message, config) {
            config= config||{};
            config.style='warning';
            //config.className= 'superblue'
            $.notify(message,  config);
        };
        states.done = function (message, config) {
            config= config||{};
            config.style='done';
            //config.className= 'superblue'
            $.notify(message,  config);
        };

        states.info = function (message, config) {
            config= config||{};
            config.style='info';
            //config.className= 'superblue'
            $.notify(message,  config);
        };
        states.error = function (message, config) {
            config= config||{};
            config.style='error';
            //config.className= 'superblue'
            $.notify(message,  config);
        };
        return states;
    }
    angular.module( 'actinver.services' )
    .service( 'popupsSrv', popups );
})();
( function(){
    "use strict";

    prospectModalsSrv.$inject = ['$uibModal'];
    function prospectModalsSrv( $uibModal ) {

        var api  = {};

        /** Add prospects **/
        api.addOpportunity = function( _message, _id ){
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/prospects/add.html',
                controller: 'prospectsModalCtrl',
                controllerAs: 'add',
                size : 'lg',
                resolve: {
                    msg: function(){
                        return _message;
                    },
                    IDOpportunity: function(){
                        return _id;
                    }
                }
            });
        };

        /** Add activity **/
        api.addActivity = function( _title, _activity ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/prospects/activity.html',
                size: 'lg',
                controller: 'addActivityProsModalCtrl',
                controllerAs: 'activity',
                resolve:{
                    activity:function() {
                        return _activity;
                    },
                    title: function(){
                        return _title;
                    }
                }
                });

            return modal;
        };



        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'prospectModalsSrv', prospectModalsSrv );


})();

( function(){
    "use strict";

    modals.$inject = ['$uibModal', '$http', 'URLS'];
    function modals( $uibModal, $http, URLS ) {

        var api  = {};

        api.accept = function( _info ){
            var modal = $uibModal.open({
              templateUrl: '/scripts/modals/views/transfers/confirm.html',
              controller: 'transferModalCtrl',
              controllerAs: 'transfer',
              backdrop: 'static',
              keyboard : false,
              windowClass : 'confirm-transfer',
              resolve:{
                  info:function(){
                      return _info;
                  }
              }
            });

            return modal;
        };

        api.detail = function( _contract, _orderReference ){
            var modal = $uibModal.open({
              templateUrl: '/scripts/modals/views/transfers/detail.html',
              controller: 'detailModalCtrl',
              controllerAs: 'detail',
            //   backdrop: 'static',
            //   keyboard : false,
              windowClass : 'transfer-detail',
              resolve:{
                info: function(){
                    return $http({
                        method: 'GET',
                        url: URLS.getOrderDetail + '/' + _contract +'/' + _orderReference + '?language=SPA',
                    });
                 }
                }
            
            });

            return modal;
        };

        api.detailTransfer = function( detail ){
            
                        var movementsDetail=[];
                        movementsDetail.push(detail);
                        var modal = $uibModal.open({
                          templateUrl: '/scripts/modals/views/transfers/detail.html',
                          controller: 'detailModalCtrl',
                          controllerAs: 'detail',
                        //   backdrop: 'static',
                        //   keyboard : false,
                          windowClass : 'transfer-detail',
                          resolve:{
                              info:function () {
                                return movementsDetail;
                                 }
                              }
                          
            
                        });
            
                        return modal;
        };
        
        api.detailTransferSPEI = function( detail ){
            
                        //var movementsDetail=[];
                        //movementsDetail.push(detail);
                        var modal = $uibModal.open({
                        templateUrl: '/scripts/modals/views/transfers/detailSPEI.html',
                        controller: 'detailModalCtrl',
                        controllerAs: 'detail',
                        //   backdrop: 'static',
                        //   keyboard : false,
                          windowClass : 'transfer-detail-SPEI',
                          resolve:{
                              info:function () {
                                return detail;
                                 }
                              }
                          
            
                        });
            
                        return modal;
        };


        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'transferModalSrv', modals );


})();

(function() {
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider', '$urlRouterProvider'];
    function routerProviderConfig($stateProvider, $urlRouterProvider) {
        $stateProvider

            .state('app', {
                abstract: true,
                templateUrl: '/app/app.html',
                controller: 'mainCtrl',
                resolve: {
                    'autenticacion': ['Auth', function(Auth) {
                        var data = Auth.currentUser(),
                            employeeId = data.user.employeeID;
                        return Auth.permission(employeeId).then(function successCallback() {
                            Auth.init();
                        });
                    }]
                },
            });


        $urlRouterProvider
            .otherwise('/dashboard');

    }


    angular.module('actinver')
        .config(routerProviderConfig);


})();

(function() {
    "use strict";

    administratorSrv.$inject = ['$http', '$q', 'URLS'];
    function administratorSrv ( $http, $q, URLS ) {

        var api = {};


        api.getAdvisersBinnacleMessage = function ( idMessage ) {
            var defered = $q.defer();
            var promise = defered.promise;
            $http.get( 
                URLS.getAdvisersBinnacleMessage + 
                idMessage + 
                '?language=SPA' 
            ).then(
                function ( _response ){
                    if( _response.data.status === 1 ) {
                        defered.resolve( _response.data.result );
                    }
                    defered.reject( _response.data.messages );
                },
                function ( _error ) {
                    defered.reject( _error );
                }
            );
            return promise;
        };


        api.getAdvisersBinnacleBinnacle = function (_idEmployee, _startDate, _endDate) {
            return $q(function () {
                $http({
                    method: 'GET',
                    url: URLS.getAdvisersBinnacleBinnacle + _idEmployee + '/' + _startDate + '/' + _endDate,
                    responseType: 'arraybuffer',
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    var blob = new Blob([response.data], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
                    saveAs(blob, 'Bitacora' +_startDate+'-'+_endDate+'.xlsx');
                });

                function saveAs(blob, fileName) {
                    if (window.navigator.msSaveOrOpenBlob) { // For IE:
                        navigator.msSaveBlob(blob, fileName);
                    } else { // For other browsers:
                        var link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.download = fileName;
                        link.click();
                        window.URL.revokeObjectURL(link.href);
                    }
                }

            });
        };

        return api;
    }

    angular.module('actinver.services')
        .service( 'administratorSrv', administratorSrv );
})();

(function () {
    "use strict";

    ContractTypeSrv.$inject = ['moment'];
    function ContractTypeSrv( moment ) {
        return {
            contractType :  contractType,
            sendBinnacle :  sendBinnacle
    };

        function contractType( _propia, _eligible, _discretionary  ) {
            if( _propia || _discretionary ){
                return true;
            }
        }

        function sendBinnacle( _contractType,  _sendModel , _model) {
            if( _contractType){
                _sendModel.instructionDate = moment(new Date()).format('DDMMYYYY');
                _sendModel.instructionTime =  '00:00:01';
                _sendModel.extensionNumber =  '0001';
                _sendModel.tracingKey =  '2';
                _sendModel.comments = 'Sin comentarios';
                _sendModel.instructionTimeNumber = '0001';
                _sendModel.requestType = '2';
                _sendModel.requestHour_RD = '00:00:01';
                _sendModel.requestType_RD = '2';
                _sendModel.extensionNumber_RD = '0001';
                _sendModel.userName = 'NO APLICA';
                _sendModel.instructionTimeNumber = '0001';
            }else{
                _sendModel.instructionDate = moment(_model.binnacle.date).format('DDMMYYYY');
                _sendModel.instructionTime = _model.media.type.text === 'TELEFONO' ? _model.binnacle.time + ':00' : '00:00:01';
                _sendModel.extensionNumber = _model.media.type.text === 'TELEFONO' ? _model.binnacle.phone : '0001';
                _sendModel.tracingKey = _model.media.type.id;
                _sendModel.comments = _model.binnacle.comments ? _model.binnacle.comments :'Sin comentarios';
                _sendModel.instructionTimeNumber = _model.media.type.text === 'TELEFONO' ? _model.binnacle.time + ':00' : '00:00:01';
                _sendModel.requestType =  _model.media.type.id;
                _sendModel.requestHour_RD = _model.binnacle.time ? _model.binnacle.time + ':00' : '00:00:01';
                _sendModel.requestType_RD = _model.media.type.identifier;
                _sendModel.extensionNumber_RD = _model.binnacle.phoneNumber ? _model.binnacle.phoneNumber : '0001';
                _sendModel.userName = _model.binnacle.usserName ? _model.binnacle.usserName : 'NO APLICA';
                _sendModel.instructionTimeNumber = '0001';
            }

            return _sendModel;
        }

    }
    angular.module('actinver.services')
        .service( 'contractTypeSrv', ContractTypeSrv );
})();
(function () {
    "use strict";
    csrfSrv.$inject = ['$http', '$q', 'URLS'];
    angular
        .module('actinver.services')
        .service( 'csrfSrv', csrfSrv );

    function csrfSrv ( $http, $q, URLS ) {
        return {
            csrfHead : csrfHead,
            csrfValidate : csrfValidate
        };

        function csrfHead () {
            return $q( function ( resolve, reject ) {
                $http.head(location.href)
                    .then( successCallback )
                    .catch( errorCallback );

                function successCallback (csrf) {
                    sessionStorage.setItem('__csrf',csrf.headers('X-CSRF-TOKEN'));
                    resolve({
                        success : true
                    });
                }

                function errorCallback (error) {
                    reject({
                        success: false,
                        data:{},
                        error : error,
                        message: "Ha ocurrido un error de seguridad"
                    });
                }
            } );
        }

        function csrfValidate () {
            return $q( function ( resolve, reject ) {
                $http.get(URLS.csrfRest)
                    .then( successCallback )
                    .catch( errorCallback );

                function successCallback (csrf) {
                    sessionStorage.setItem('__csrf',csrf.headers('X-CSRF-TOKEN'));
                    resolve({
                        success : true
                    });
                }

                function errorCallback (error) {
                    reject({
                        success: false,
                        data:{},
                        error : error,
                        message: "Ha ocurrido un error de seguridad"
                    });
                }
            });
        }
    }
})();
(function() {
    "use strict";

    ErrorMessagesSrv.$inject = ['CommonModalsSrv'];
    function ErrorMessagesSrv ( CommonModalsSrv ) {

        function ErrorMessages( _model ){
            var error = R.find( function( _val ){
                if( _val.responseType === 'N' ){
                    return _val.responseCategory === 'FATAL' || _val.responseCategory === 'ERROR';
                }
            } )( _model );

            var message = error ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';

            CommonModalsSrv.error( message );
        }


        return ErrorMessages;
    }
    angular.module('actinver.services')
        .service( 'ErrorMessagesSrv', ErrorMessagesSrv );
})();

(function() {
    "use strict";

    loginSrvc.$inject = ['$http', '$q', 'URLS', 'CommonModalsSrv'];
    function loginSrvc($http, $q, URLS, CommonModalsSrv) {
        /**
         *  Login service user and password are required
         */
        var ls = this;
        //var errorMessage;

        ls.makeCsrfToken = function() {
            return $q(function (resolve, reject) {
                var _url = location.href;
                $http.head(_url)
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback(csrf) {
                    var _csrf = csrf.headers('X-CSRF-TOKEN');
                    sessionStorage.setItem('__csrf',csrf.headers('X-CSRF-TOKEN'));
                    resolve({
                        success: true,
                        data: _csrf,
                        message: "Operación realizada con éxito"
                    });
                }

                function errorCallback(){
                    reject({
                        success: false,
                        data: {},
                        message: "Ha ocurrido un error de seguridad"
                    });
                }
            });
        };

        ls.makeRequestLogout = function () {
            return $q(function(resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.logout,
                    headers:{
                        'X-HTTP-Method-Override' : 'POST',
                        'Content-Type' : 'application/x-www-form-urlencoded'
                    }
                }).then(function successCallback(response) {
                    if (typeof response.data !== 'undefined') {

                        resolve({
                            success: true,
                            data : {},
                            message: "Operación realizada con éxito"
                        });
                    }
                    else {
                        reject({
                            success: false,
                            data: {},
                            message: "El usuario o contraseña que ingresaste es incorrecto, te pedimos volver a intentar."
                        });
                    }
                }, function errorCallback(error) {
                    reject({
                        success: false,
                        data: error,
                        message: "Falla en el servidor."
                    });
                });
            });
        };

        ls.makeDataUser  =function () {
            return $q(function ( resolve, reject ) {
                $http({
                    method: 'GET',
                    url : URLS.userInfo,
                    headers:{
                        'Authorization': 'bearer ' + sessionStorage.getItem('__token')
                    },
                    ignoreLoadingBar: true
                })
                    .then( successCallback )
                    .catch( errorCallback );
                function successCallback (response) {
                    resolve({
                        success : true,
                        user : response.data
                    });
                }
                function errorCallback (error) {
                    reject({
                        success : false,
                        error : error,
                        messagge : 'Ha ocurrido un error'
                    });
                }
            });
        };

        ls.makeRequestLogin = function(credentials) {
            return $q(function(resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.login,
                    data: $.param(credentials),
                    headers:{
                        'X-CSRF-TOKEN': sessionStorage.getItem('__csrf'),
                        'X-HTTP-Method-Override' : 'POST',
                        'Content-Type' : 'application/x-www-form-urlencoded'
                    }
                }).then(function successCallback(response) {
                    if (typeof response.data !== 'undefined' && response.data.access_token !== '') {
                        sessionStorage.setItem('__token',response.data.access_token);                    
                        ls.makeDataUser()
                            .then( function  (response) {

                                angular.forEach(response.user.scope,function(scope){
                                   
                                    if(scope === "INCOMPLETE"){
                                        reject({
                                            success: false,
                                            data: {},
                                            error : "error",
                                            message: "El usuario no está registrado en LDAP. Favor de comunicarse al CAT"
                                        });
    
                                    }else{
                                        var _user = {
                                            "name": response.user.firstName + ' ' + response.user.lastName,
                                            "mail": response.user.clientId + '@actinver.com.mx',
                                            "employeeID": "-2147483648",                                            
                                            "userName": credentials.username,
                                            "roles": response.user.scope,
                                            "enviroment":response.user.systemTO.profile

                                        };
                                        resolve({
                                            success: true,
                                            data: _user,
                                            message: "Operación realizada con éxito"
                                        });
    
                                    }

                                });                   


                            })
                            .catch(function (error) {
                                reject({
                                    success: false,
                                    data: {},
                                    error : error,
                                    message: "Ha ocurrido un error al obtener los datos de usuario"
                                });
                            });
                    }
                    else {
                        reject({
                            success: false,
                            data: {},
                            message: "El usuario o contraseña que ingresaste es incorrecto, te pedimos volver a intentar."
                        });
                    }
                }, function errorCallback(error) {
                    
                    //errorMesagge(error.data.error_description);
                    reject({
                        success: false,
                        data: error,
                        message: error.data.error_description ,
                    });
                });
            });
        };

        /*function errorMesagge(_message){
            if(_message === 'Bad Credentials'){
                errorMessage = "El usuario o contraseña que ingresaste es incorrecto, te pedimos volver a intentar.";
            }else if (_message === 'User account is locked'){
                errorMessage = "Ha rebasado el número de intentos disponibles";
            }else if( _message === 'Ya existe una sesión activa para este cliente único') {
                errorMessage = "Ya existe una sesión activa para este usuario";
            }else{
                errorMessage = _message;
            }

        }*/

        /**
         *  Permission service employye number is required
         */
        ls.makeRequestPermissions = function(_employeeNumber) {
            return $q(function(resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getPermiso + '/' + parseInt(_employeeNumber) + '?language=SPA',
                    headers:{
                       'X-CSRF-TOKEN': sessionStorage.getItem('__csrf'),
                       'Authorization' : 'bearer ' + sessionStorage.getItem("__token")
                   },
                   ignoreLoadingBar: true
                }).then(function successCallback(response) {
                    if (typeof response.data !== 'undefined' && response.data.status === 1) {
                        resolve({
                            success: true,
                            data: JSON.parse(response.data.result.restrictionsString),
                            message: "Operación realizada con éxito"
                        });
                    }
                    else {
                        reject({
                            success: false,
                            data: {},
                            message: "No se pudo obetener información del usuario consultado, intente más tarde"
                        });
                    }
                }, function errorCallback(error) {
                    window.location.href = "/asesoria/login.html";
                    CommonModalsSrv.systemError();
                    reject({
                        success: false,
                        data: error,
                        message: "Falla en el servidor."
                    });
                });
            });
        };

        ls.validateUserTokens = function () {
            return $q(function (resolve, reject) {
                $http({
                        method: 'GET',
                        url: URLS.validateUserTokens + "?language=SPA",
                        headers: {
                            'Authorization': 'bearer ' + sessionStorage.getItem('__token')
                        }
                    })
                    .then(function success(response) {
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve({
                                success: true,
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        } else {
                            reject({
                                success: false,
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        }
                    })
                    .catch(function error() {
                        reject({
                            success: false,
                            msg: 'Ha ocurrido un error'
                        });
                    });
            });
        };

        ls.saveAdviserNumber = function (adviserType, adviserNumber) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.saveAdviserNumber,
                    data: $.param({
                        adviserNumber: adviserNumber,
                        adviserType: adviserType,
                        language: 'SPA'
                    }),
                    headers: {
                        'X-HTTP-Method-Override': 'POST',
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }).then(function successCallback(response) {
                    if (typeof response.data !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                        resolve({
                            success: true,
                            data: {},
                            message: response.data.outCommonHeader.result.messages[0].responseMessage
                        });
                    } else {
                        reject({
                            success: false,
                            data: {},
                            message: response.data.outCommonHeader.result.messages[0].responseMessage
                        });
                    }
                }, function errorCallback(error) {
                    reject({
                        success: false,
                        data: error,
                        message: "Ha ocurrido un error !!"
                    });
                });
            });
        };
    }

    angular.module('actinver.services')
        .service('loginSrvc', loginSrvc);
})();

(function() {
    "use strict";

    proposalSrv.$inject = ['$http', '$q', '$filter', 'URLS', 'csrfSrv', 'loginSrvc'];
    function proposalSrv ( $http, $q, $filter, URLS, csrfSrv,loginSrvc  ) {

        var api = {};


        api.getActivityOffice = function (_date) {
            var defered = $q.defer();
            var promise = defered.promise;
            var date =  $filter('date')( _date, 'MM/yyyy');            
            var url;
            loginSrvc.makeDataUser().then( function( _response){                    
                for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                    var _element= _response.user.scope[pos];
                        if ( _element === 'ASESOR'){
                            url=URLS.getActivityRecord;
                            
                        }else 
                        if (_element === 'ADMINISTRADOR') {
                            url=URLS.getActivityRecordAdm;
                            
                        }

                }

                $http.get( url + '/getReport/'+date+'/6?language=SPA'  
                    ).then(
                    function ( _response ){
                        if( _response.data.status === 1 ) {
                            defered.resolve( _response.data.result );
                        }
                        defered.reject( _response.data.messages );
                    },
                    function ( _error ) {
                        defered.reject( _error );
                    }
                );

            
            
            
            });
            

            return promise;
        };

        api.validateAdviserContract = function ( _idEmployee, _idContract ) {
            return $http.get( URLS.getAdviserContract + _idEmployee + '/' + _idContract + '?language=SPA' )
                .then( function ( _response ) {
                    if ( typeof _response !== 'undefined' && _response.data.response.status === 1 ) {
                        return _response && _response.data;
                    } else {
                        return null;
                    }
                });
        };

        api.getContractIdClient = function ( _model ) {
            var parametros=null;
            if(_model.type === "contract"){ //tipo de busqueda contrato 
                if(_model.optionTypeContract.text === "Casa"){ //tipo casa
                    parametros='?bankingArea=998&clientNumber=&contractNumber='+_model.field +'&descripcion='+_model.field +'&language=SPA&titularFlag=true&typeQuery=2';
                }else if(_model.optionTypeContract.text === "Banco"){//tipo banco
                    parametros='?bankingArea=999&clientNumber=&contractNumber='+_model.field +'&descripcion='+_model.field +'&language=SPA&titularFlag=true&typeQuery=2';
                }              
            
            }else{///Cliente unico
                    parametros='?bankingArea=&clientNumber='+_model.field +'&contractNumber=&descripcion='+_model.field +'&language=SPA&titularFlag=true&typeQuery=1';
            }
           
          
            return $http.get( URLS.getClientInfo+ parametros )
            .then( function ( _response ) {

                    if ( typeof _response !== 'undefined' && _response.data.outCommonHeader.result.result === 1 ) {
                        return _response && _response.data;
                    } else {
                        return _response.data;
                    }
                });
        };

        api.getTracingClientByClient = function (  _idClient ) {     
           return $http.get( URLS.getContracts + '?bankingArea=&clientID='+_idClient+'&language=SPA' )
                .then( function ( _response ) {
                     if ( typeof _response !== 'undefined' && _response.data.outCommonHeader.result.result === 1 ) {
                        return _response && _response.data.outContractsBalancesByPortfolioQuery.contractInformation;
                    } else {
                        return null;
                    }
                });
        };

        api.getContractSummary = function (_idEmployee, _idClient) {

            // return $http.get( URLS.getContractSummary + '95356523/53883?language=SPA' )
            return $http.get(URLS.getContractSummary + _idClient + '/' + _idEmployee + '?language=SPA')
                .then(function (_response) {
                    if (typeof _response !== 'undefined' && _response.data.status === 1) {
                        return _response && _response.data.result;
                    } else {
                        return null;
                    }
                });
        };


        api.getDetailedSummaryContract = function ( _contractNumber,typeContract ) {
     
                return $q(function (resolve, reject) {
                    csrfSrv.csrfValidate()
                        .then(successCsrf)
                        .catch(errorCsrf);
                    function successCsrf() {                        

                        $http({
                            method: 'POST',
                            url: URLS.getDetailedSummary,
                            params:{
                                language:'SPA',
                                contracts: window.btoa(JSON.stringify([{ contract: _contractNumber, source: typeContract }]) ),
                                headers:{ 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }
                            }
                        }).then(function (_res) {
                           
                            if(_res.data.status === 1){
                                resolve({contractNumber:_contractNumber,result:_res.data.result});
                            }else{
                                resolve(null);
                            }
                            
                        });
                    }

                    function errorCsrf(error) {
                        reject(error);
                    }
                });

        };

        api.getPositionTypeBankAndHouse = function (_contractHouse, _contractBank) {
            var defered = $q.defer();
            var promise = defered.promise;
            var promiseHouse = api.getPosition(_contractHouse);
            var promiseBank = api.getPositionTypeBank(_contractBank);
            Promise.all([promiseHouse, promiseBank]).then(function (response) {                                   
                defered.resolve(response[0].concat(response[1]));
            }).catch(function ( ) {
                defered.resolve([]);
            });
            return promise;
        };

        api.getPosition = function (_contractNumbers) {
            var defered = $q.defer();
            var promise = defered.promise;
            $http.get(URLS.getTracingClient + '/Contract/getBrokerHousePositionList/' + _contractNumbers.join(',') + '?language=SPA')
                .then(function (_response) {
                        defered.resolve(_response.data.result);
                    },
                    function () {
                        defered.resolve([]);
                    });
            return promise;
        };       

        api.getPositionTypeBank = function (_contractNumbers) {
            var defered = $q.defer();
            var promise = defered.promise;
            var bankPosition = api.getBankPosition(_contractNumbers);
            var bankWarrantyPosition = api.getBankWarrantyPositionList(_contractNumbers);
            Promise.all([bankPosition, bankWarrantyPosition]).then(function (response) {
                var lista = response[0].concat(response[1]);
                lista.forEach(function (record) {
                    record.lastPrice = record.price;
                });
                defered.resolve(lista);
            }).catch(function () {
                defered.resolve([]);
            });
            return promise;
        };

        api.getBankPosition = function (_contractNumbers) {
            var defered = $q.defer();
            var promise = defered.promise;
            $http.get(URLS.getBankPositionList + _contractNumbers.join(',') + '?language=SPA')
                .then(function (_response) {
                    if (_response.data.status === 1)
                        defered.resolve(_response.data.result);
                    else
                        defered.resolve([]);
                })
                .catch(function () {
                    defered.resolve([]);
                });
            return promise;
        };

        api.getBankWarrantyPositionList = function(_contractNumbers){
            var defered = $q.defer();
            var promise = defered.promise;
            $http.get(URLS.getBankWarrantyPositionList + _contractNumbers.join(',') + '?language=SPA')
                .then(function (_response) {
                    if (_response.data.status === 1)
                        defered.resolve(_response.data.result);
                    else
                        defered.resolve([]);
                })
                .catch(function () {
                    defered.resolve([]);
                });
            return promise;
        };

        api.getDetailedCustomerTrackingReport=function(_model){
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {   
                    $http({
                        method: 'POST',
                        url: URLS.getDetailedCustomerTrackingReport,
                        data:$.param(_model),
                        responseType: 'arraybuffer'
                    }).then(function (response) {
                        resolve(response);                      
                    }).catch(function(error){
                        reject(error);
                    });
                }
                function errorCsrf(error) {
                    reject(error);
                }
                });
        };

        api.getCustomerTrackingReport=function(_model){
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {   
                    $http({
                        method: 'POST',
                        url: URLS.getCustomerTrackingReport,
                        data:$.param(_model),
                        responseType: 'arraybuffer'
                    }).then(function (response) {
                        resolve(response);                      
                    }).catch(function(error){
                        reject(error);
                    });
                }
                function errorCsrf(error) {
                    reject(error);
                }
                });
        };


        return api;
    }

    angular.module('actinver.services')
        .service( 'proposalSrv', proposalSrv );
})();

(function () {

    'use strict';

    function randomNamesSrv() {
        var vm = this;

        function randomString() {
            var text = "";
            var cadena = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 6; j++)
                    text += cadena.charAt(Math.floor(Math.random() * cadena.length));
                text += i === 4 ? '' : '-';
            }
            return text;
        }

        vm.getNameFile = function () {
            var array = [];
            var name = "";
            try {
                array = new Uint16Array(5);
                var values = window.crypto.getRandomValues(array);
                name = values.join('-');
            } catch (error) {
                name = randomString();
            }
            return name;
        };
    }
    angular.module('actinver.services')
        .service('randomNamesSrv', randomNamesSrv);
})();
(function () {
    "use strict";

    function workerConfig() {

        var vm = this;

        vm.principal = function () {
            
            var intentoconexion = 0;
            var config = null;
            var socket = {
                client: null
            };

            //evento que escucha al treed principal.
            onmessage = function (reg) {
                switch (reg.data.step) {
                    case 1: //open socket
                        config = reg.data.config;
                        loadResources(config.urlResource + "/bower/worker.js");
                        break;
                    case 2: //close socket                        
                        if (socket.client !== null) {
                            socket.client.disconnect();
                        }
                       console.log('disconnect socket CAPITALS');
                        break;
                    default:
                        break;
                }
            };

            function loadResources(urlResource) {
                importScripts(urlResource);

                function init() {
                    wsConnect();
                }
                init();
            };

            //Configuracion del WebSocket 
            function wsConnect() {
                intentoconexion++;
                var _socket = new SockJS(config.url);
                socket.client = Stomp.over(_socket);
                socket.client.debug = null;
                socket.client.connect({}, successWsConnect, failWsConnect);
            };

            //Intenta reestablecer la configuracion del webSocket
            function failWsConnect() {
                if (config.throwSocket && intentoconexion < 4) {
                    setTimeout(work.wsConnect, 3000);
                }
            };

            // Intenta establecer los endPoint a los cuales se va a conectar.
            function successWsConnect() {
                var data = removeDuplicateEmisorasEndPoint(config.emisoras);
                data.forEach(function (reg) {
                    socket.client.subscribe('/topic/capitales/bmvAll/' + reg, function (payload) {
                        var data = JSON.parse(payload.body);
                        searchRecordInEmisora(data);
                    });
                });
            };

            //removemos los ends points que estan duplicados
            // BIVA BMV
            function removeDuplicateEmisorasEndPoint(array) {
                var data = [];
                if (array) {
                    array.forEach(function (reg) {
                        if (data.indexOf(reg.issuer.issuerSerie) < 0) {
                            data.push(reg.issuer.issuerSerie);
                        }
                    });
                }
                return data;
            };

            //Busca actualizar los precios en el Array actual; y Envia un evento al controlador que lo invocó  
            function searchRecordInEmisora(_payload) {
                var indice = config.emisoras.findIndex(function (_val) {
                    return _val.issuer.issuerSerie === _payload.issuer.issuerSerie && _val.feed === _payload.feed;
                });
                if (indice >= 0) {
                    var reg = JSON.parse(JSON.stringify(config.emisoras[indice]));

                    config.emisoras[indice].averagePrice = _payload.averagePrice;
                    config.emisoras[indice].minPrice = _payload.minPrice;
                    config.emisoras[indice].maxPrice = _payload.maxPrice;
                    config.emisoras[indice].tradeDateTime = _payload.tradeDateTime;
                    config.emisoras[indice].tradeSell = _payload.tradeSell;
                    config.emisoras[indice].tradeSellPrice = _payload.tradeSellPrice;
                    config.emisoras[indice].tradeBuyPrice = _payload.tradeBuyPrice;
                    config.emisoras[indice].tradeBuy = _payload.tradeBuy;
                    config.emisoras[indice].lastPrice = _payload.lastPrice;
                    config.emisoras[indice].priceVar = _payload.priceVar;


                    if (reg.lastPrice > _payload.lastPrice || reg.lastPrice < _payload.lastPrice)
                        postMessage({
                            last: reg.lastPrice,
                            nuevo: _payload.lastPrice,
                            id: config.emisoras[indice].idIssuerSerie + "lastPrice",
                            lastRecord: reg,
                            newRecord: _payload,
                            indice: indice
                        });
                    if (reg.tradeBuyPrice > _payload.tradeBuyPrice || reg.tradeBuyPrice < _payload.tradeBuyPrice)
                        postMessage({
                            last: reg.tradeBuyPrice,
                            nuevo: _payload.tradeBuyPrice,
                            id: config.emisoras[indice].idIssuerSerie + "tradeBuyPrice",
                            lastRecord: reg,
                            newRecord: _payload,
                            indice: indice
                        });
                    if (reg.tradeSellPrice > _payload.tradeSellPrice || reg.tradeSellPrice < _payload.tradeSellPrice)
                        postMessage({
                            last: reg.tradeSellPrice,
                            nuevo: _payload.tradeSellPrice,
                            id: config.emisoras[indice].idIssuerSerie + "tradeSellPrice",
                            lastRecord: reg,
                            newRecord: _payload,
                            indice: indice
                        });

                   
                }
            };

        };
    }
    angular.module('actinver.services')
        .service('workerConfigSrv', workerConfig);
})();
( function(){
    'use strict';

    operationCtrl.$inject = ['$state', '$sessionStorage', 'CommonModalsSrv'];
    function operationCtrl(  $state, $sessionStorage, CommonModalsSrv ){
        var vm = this;

        // Get current client information
        vm.sclient = ( $sessionStorage.sclient ) ? $sessionStorage.sclient : {};
        vm.showSystemError = CommonModalsSrv.systemError;

        // Get selected client
        vm.getSelectedClient = function( state, _contract){
            localStorage.setItem('contractSelected', JSON.stringify(_contract));
            if( typeof vm.sclient.data !== 'undefined' ){
                vm.show_instructions = false;
                $state.go( state );
            }
        };

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'operationCtrl', operationCtrl );

})();
( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){

        $stateProvider

            .state('operations', {
                templateUrl: '/app/operations/operation.html',
                parent: 'app',
                controller: 'operationCtrl',
                controllerAs: 'operations',
                redirectTo: 'account',
                url: '/operations',
                ncyBreadcrumb: {
                  label: 'Operaciones',
                  parent: 'app.dashboard'
                },
            });

    }

    angular.module( 'actinver' )
        .config( routerProviderConfig );

})();

( function(){
    "use strict";

    addActivityCtrl.$inject = ['$uibModalInstance', 'title', 'item', '$filter', '$http', 'URLS', '$q', 'CommonModalsSrv'];
    function addActivityCtrl( $uibModalInstance, title, item, $filter, $http, URLS, $q, CommonModalsSrv){

        var vm = this;

        vm.title = title;
        vm.temporaryDate="";
        vm.temporaryTime="";
        vm.temporaryAssistants="";
        vm.multipleEmailRegex=/^[\W]*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4}[\W]*;{1}[\W]*)*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4})[\W]*$/;
        // vm.item = item || {};
        vm.newActivity={};

        function limit( _text, _size) {
            return $filter( 'limitTo' )( _text, _size );
        }

        function setup(){
            if( item ){
                vm.timeActivity = limit( item.start, 5 ) + " - " + limit( item.end, 5 );
                vm.text = item.subject;
            }
        }

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $uibModalInstance.close();
        };


        vm.submitActivity= function(){

            if(vm.temporaryDate!==""){
                vm.newActivity.date=$filter('date')(vm.temporaryDate._d,'yyyy-MM-dd');
            }
            else{
                vm.newActivity.date=$filter('date')(new Date(),'yyyy-MM-dd');
            }
            
            var res= vm.temporaryTime.split(" - ");

            vm.newActivity.startTime=res[0];
            vm.newActivity.endTime=res[1];
            

            if(vm.temporaryAssistants!==""){

                var emails = vm.temporaryAssistants.split(";");


                var temporaryObject=[];

                angular.forEach(emails, function(element){
                    if(element.length>0){
                        temporaryObject.push({email:element});
                    }
                });

                vm.newActivity.assistants=JSON.stringify(temporaryObject);
            }

            else{
                vm.newActivity.assistants=vm.temporaryAssistants;
            }
            

            $q(function( resolve, reject ){

                $http({
                    method: 'POST',
                    url: URLS.addNewActivity,
                    ignoreLoadingBar: true,
                    params:{
                        language: 'SPA'
                    },
                    data: $.param(vm.newActivity)
                })
                .then( function( _res){
                    if( _res.data.status === 1){
                        vm.done();
                        CommonModalsSrv.done("Actividad agregada correctamente");                    }
                    else{
                        vm.close();
                        CommonModalsSrv.error("Ocurrio un error al intentar agregar la actividad");
                    }
                }).catch( function () {
                    reject ( { error : 'Ha ocurrido un error' } );
                });
            });
        };

        setup();
    }

    angular.module( 'actinver.controllers' )
        .controller( 'addActivityCtrl', addActivityCtrl );


} )();

( function(){
    "use strict";

    noticeActivityCtrl.$inject = ['$uibModalInstance', 'item', 'FileSaver'];
    function noticeActivityCtrl( $uibModalInstance, item , FileSaver){
        var vm = this;

        vm.item = item;

        b64Decoder();

        vm.close = function(){
            $uibModalInstance.dismiss();
        };



        function b64Decoder(){
            if(item.fileContent){
                var temporaryByteChar=atob(item.fileContent);
                var temporaryByteArrays=[];
                var temporaryByteNumb= new Array (temporaryByteChar.length);
                for (var i = 0 ; i<temporaryByteChar.length;i++){
                    temporaryByteNumb[i] = temporaryByteChar.charCodeAt(i);
                }

                var temporaryByteArray= new Uint8Array(temporaryByteNumb);
                temporaryByteArrays.push(temporaryByteArray);

                vm.messageFile= new Blob(temporaryByteArrays, {type:item.contentType});

                if(vm.item.contentType.search("image")!==-1){

                    vm.messageImage = "data:"+vm.item.contentType+";base64,"+item.fileContent;

                }
            }
        }


        vm.downloadFile= function(){
           FileSaver.saveAs(vm.messageFile, "adjuntoMensaje"+item.idMessage); 
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'noticeActivityCtrl', noticeActivityCtrl );

} )();

( function(){
    "use strict";

    function administratorCtrl( ){
        // var vm = this;
    }


    angular.module('actinver.controllers')
    .controller('administratorCtrl', administratorCtrl );

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('administrator', {
                templateUrl: '/app/advisers/administrator/administrator.html',
                url: '/administrator',
                controller: 'administratorCtrl',
                controllerAs: 'ctrl',
                parent: 'app',
                ncyBreadcrumb: {
                    label: 'Administrador',
                    parent: 'app.dashboard'
                },
                redirectTo: 'administrator.factsheets'
            })


            .state('administrator.factsheets', {
                templateUrl: '/app/advisers/administrator/factsheets/factsheets.html',
                url: '/factsheets',
                controller: 'factsheetsCtrl',
                controllerAs: 'fact',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Factsheets',
                    parent: 'administrator'
                },
            })


            .state('administrator.group', {
                templateUrl: '/app/advisers/administrator/group/group.html',
                url: '/grupos',
                controller: 'groupCtrl',
                controllerAs: 'group',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Grupos',
                    parent: 'administrator'
                },
            })


            .state('administrator.presentations', {
                templateUrl: '/app/advisers/administrator/presentations/presentations.html',
                url: '/presentations',
                controller: 'presentationsAdminCtrl',
                controllerAs: 'pres',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Presentaciones',
                    parent: 'administrator'
                },
            })


            .state('administrator.eeuu', {
                templateUrl: '/app/advisers/administrator/eeuu/eeuu.html',
                url: '/EEUU',
                controller: 'eeuuCtrl',
                controllerAs: 'eeuu',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'EEUU',
                    parent: 'administrator'
                },
            })


            .state('administrator.mexico', {
                templateUrl: '/app/advisers/administrator/mexico/mexico.html',
                url: '/mexico',
                controller: 'mexicoCtrl',
                controllerAs: 'mx',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'México',
                    parent: 'administrator'
                },
            })


            .state('administrator.economic', {
                templateUrl: '/app/advisers/administrator/economic/economic.html',
                url: '/entorno-economico',
                controller: 'economicCtrl',
                controllerAs: 'economic',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Entorno económico',
                    parent: 'administrator'
                },
            })


            .state('administrator.legal', {
                templateUrl: '/app/advisers/administrator/legal/legal.html',
                url: '/aviso-legal',
                controller: 'legalCtrl',
                controllerAs: 'legal',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Aviso legal',
                    parent: 'administrator'
                },
            })


            .state('administrator.investment', {
                templateUrl: '/app/advisers/administrator/investment/investment.html',
                url: '/fondos-de-inversion',
                controller: 'adminInvestmentCtrl',
                controllerAs: 'invest',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Fondos de inversión',
                    parent: 'administrator'
                },
            })


            .state('administrator.favorites', {
                templateUrl: '/app/advisers/administrator/favorites/favorites.html',
                url: '/favoritos',
                controller: 'favoritesCtrl',
                controllerAs: 'fav',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Favoritos',
                    parent: 'administrator'
                },
            })

            /* //se se quiere habilitar se tiene que descomentar aqui y en el archivo administrator.pug
            .state('administrator.employee', {
                templateUrl: '/app/advisers/administrator/employee/employee.html',
                url: '/numero-de-mapeo-de-empleado',
                controller: 'employeeCtrl',
                controllerAs: 'empl',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Mapeo de números de empleado',
                    parent: 'administrator'
                },
            })
            */


            .state('administrator.profiles', {
                templateUrl: '/app/advisers/administrator/profiles/profiles.html',
                url: '/asignacion-de-perfiles',
                controller: 'profilesCtrl',
                controllerAs: 'profiles',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Asignación de perfiles',
                    parent: 'administrator'
                },
            })


            .state('administrator.advisers_binnable', {
                templateUrl: '/app/advisers/administrator/advisers-binnacle/advisers-binnacle.html',
                url: '/bitacora-de-asesores',
                controller: 'advisersBinnacleCtrl',
                controllerAs: 'ctrl',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Bitacora de asesores',
                    parent: 'administrator'
                },
            })


            .state('administrator.messages', {
                templateUrl: '/app/advisers/administrator/messages/messages.html',
                url: '/mensajes',
                controller: 'messagesCtrl',
                controllerAs: 'msgs',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Mensajes',
                    parent: 'administrator'
                },
            })

            .state('administrator.derivatives', {
                templateUrl: '/app/advisers/administrator/derivatives/derivatives.html',
                url: '/derivatives',
                controller: 'derivativesCtrl',
                controllerAs: 'dvts',
                parent: 'administrator',
                ncyBreadcrumb: {
                    label: 'Derivados',
                    parent: 'administrator'
                },
            });

    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

(function () {
    "use strict";

    agentCtrl.$inject = ['URLS', '$q', '$http', 'CommonModalsSrv'];
    function agentCtrl (URLS,$q,$http,CommonModalsSrv) {
        var vm = this;
        vm.pageSize = 25;
        vm.currentPage = 1;
        vm.totalPages;
        vm.selectAll = false;
        vm.openSearch = true;
        vm.agentes = [];
        vm.buttonTextToggle = "AGREGAR";
        vm.editToggle = false;
        vm.posicionPaginado = 10;
        getAgent();
        vm.indexEdit;
        vm.listBussines = [
            {id:1, text:"ARRENDAMIENTO"},
            {id:2, text:"CB Y BANCO"},
            {id:3, text:"CREDITO"}
        ];
        vm.columns = [{
                name: 'asesor',
                value: 'Nombre Asesor'
            }, {
                name: 'claveMapfre',
                value: 'ID Mapfre'
            }, {
                name: 'idEmpleado',
                value: 'ID Asesor'
            }, {
                name: 'puesto',
                value: 'Puesto'
            }, {
                name: 'idNegocio',
                value: 'Negocio'
            }];
        
        vm.checkAll = function () {
            if (vm.selectAll) {
                vm.agentsArray = [];
                angular.forEach(vm.agents, function(val, key) {
                    console.log("key: ", key);
                    console.log("value: ", val);
                    //vm.agentsArray.push(val);
                });
            } else {
                vm.agentsArray = [];
            }
        };

         vm.getAgent = getAgent
         function getAgent(param) {
             return $q(function (resolve, reject) {
                 $http({
                     method: 'POST',
                     url: URLS.getAgentQuery,
                     params: {
                            language: 'SPA',
                            operation: 'PARAMS',
                            idEmpleado: param === undefined ? "" : param.idEmpleado ,
                            claveMapfre: param === undefined ? "" : param.claveMapfre,
                            idNegocio: param === undefined ? "" : param.idNegocio,
                            asesor:param === undefined ? "" : param.asesor,
                            puesto:param === undefined ? "" : param.puesto
                     }
                 }).then(function success(response) {
                     if (response.data.return.status === 1) {
                        vm.responseAgente = response.data.return.data.insuranceAgentBeanList;
                        vm.totalPages = parseInt(vm.responseAgente.length / 5);
                        if(vm.totalPages === 0){
                            vm.totalPages = 1
                        }
                         resolve({success: true, info: vm.responseAgente});
                     } else {
                         reject({success: false, info: response.data.return.message});
                     }
                 }, function error() {
                     reject({success: false, type: 'not-found'});
                 });
             });
         }

          vm.getAgentAdd = getAgentAdd
          function getAgentAdd(_idEmpleado,_claveMapfre,_negocio,_asesor,_puesto) {
              return $q(function (resolve, reject) {
                  $http({
                      method: 'POST',
                      url: URLS.getAgentAddQuery,
                      params: {
                          language: 'SPA',
                         operation: 'PARAMS',
                          idEmpleado:_idEmpleado ,
                          claveMapfre:_claveMapfre,
                          idNegocio: _negocio,
                          asesor:_asesor,
                          puesto:_puesto
                      }
                  }).then(function success(response) {
                      if (response.data.return.status === 1) {
                         vm.responseAgenteAdd = response.data.return.data.insuranceAgentBeanList;
                          getAgent();
                          CommonModalsSrv.done("Se agrego agente con exito");
                          resolve({success: true, info: vm.responseAgenteAdd});
                      } else {
                          reject({success: false, info: response.data.return.message});
                      }
                  }, function error() {
                      reject({success: false, type: 'not-found'});
                  });
              });
          }

         vm.getAgentDelete = getAgentDelete
         function getAgentDelete(_idEmpleado, _idNegocio) {
             return $q(function (resolve, reject) {
                 $http({
                     method: 'POST',
                     url: URLS.getAgentDeleteQuery,
                     params: {
                         language: 'SPA',
                         idEmpleado: _idEmpleado,
                         idNegocio: _idNegocio,
                     }
                 }).then(function success(response) {
                     if (response.data.return.status === 1) {
                        vm.responseAgenteDelete = response.data.return.data.insuranceAgentBeanList;
                         getAgent();
                         CommonModalsSrv.done("Borrado exitoso");
                         resolve({success: true, info: vm.responseAgenteDelete});
                     } else {
                         reject({success: false, info: response.data.return.message});
                     }
                 }, function error() {
                     reject({success: false, type: 'not-found'});
                 });
             });
         }

         vm.getAgentUpdate = getAgentUpdate
         function getAgentUpdate(_idEmpleado,_claveMapfre,_idNegocio,_asesor,_puesto) {
             return $q(function (resolve, reject) {
                 $http({
                     method: 'POST',
                     url: URLS.getAgentUpdateQuery,
                     params: {
                        language: 'SPA',
                        idEmpleado: _idEmpleado,
                        claveMapfre: _claveMapfre,
                        idNegocio: _idNegocio,
                        asesor:_asesor,
                        puesto:_puesto
                     }
                 }).then(function success(response) {
                     console.log(response)
                     if (response.data.return.status === 1) {
                        vm.responseAgenteUpdate = response.data.return.data.insuranceAgentBeanList;
                         getAgent();
                         CommonModalsSrv.done("Actualización exitosa");
                         resolve({success: true, info: vm.responseAgenteUpdate});
                     } else {
                         reject({success: false, info: response.data.return.message});
                     }
                 }, function error() {
                     reject({success: false, type: 'not-found'});
                 });
             });
         }


        vm.selectAgent = function (idEmpleado, idNegocio) {
            /*vm.operacion = operacion;
            var _id = parseInt(id);
            var _index = vm.po.indexOf(_id);
            if (_index > -1) {
                vm.po.splice(_index, 1);
            }else{
                    vm.po.push(_id);
            }
            if (vm.po.length === 0) {vm.selectAll    = false; } */
            console.log("Empleado Seleccionado: " + idEmpleado + ", Negocio: " + idNegocio);
        };
        vm.submitSearch = function () {

        };

        vm.editRow = function () {

        };

        vm.deleteRow = function () {

        };

        vm.nextPage = function () {
            if(vm.responseAgente.length > vm.posicionPaginado){
                vm.posicionPaginado += 5;
                vm.currentPage++
            }
        };
        vm.soloNumero = soloNumero;
        function soloNumero(event) {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        vm.prevPage = function () {
            if(vm.posicionPaginado > 10){
                vm.posicionPaginado -= 5;
                vm.currentPage--
            }
        };
        vm.addAgents = function () {
            if(vm.editToggle){
                getAgentUpdate(vm.idEmpleado,vm.claveMapfre,vm.negocio.text,vm.asesor,vm.puesto);
                vm.editToggle = false;
                vm.buttonTextToggle = "AGREGAR";
            }else{
                getAgentAdd(vm.idEmpleado,vm.claveMapfre,vm.negocio.text,vm.asesor,vm.puesto);
            }
            vm.limpiarAgentes();
        };

        vm.deleteAgents = function (_idEmpleado,_idNegocio) {
            vm.editToggle = false;
            vm.buttonTextToggle = "AGREGAR";
            getAgentDelete(_idEmpleado,_idNegocio);
            // vm.agentes.splice(index,1)
            vm.limpiarAgentes();
        };

        vm.modifyAgents = function (_idEmpleado,_claveMapfre,_idNegocio,_asesor,_puesto) {
            vm.editToggle = true;
            vm.idEmpleado = _idEmpleado;
            vm.claveMapfre =_claveMapfre;
            vm.asesor = _asesor;
            vm.puesto = _puesto;
            vm.negocio = {
                text:_idNegocio
            }
            //vm.indexEdit= index;
            vm.buttonTextToggle = "EDITAR";
        };

        vm.limpiarAgentes = function(){
            vm.idEmpleado = "";
            vm.claveMapfre = "";
            vm.asesor = "";
            vm.puesto = "";
            vm.negocio = "";
        };

        vm.buscarAgente = function(){
            var params = {
                idEmpleado: vm.idEmpleado,
                claveMapfre: vm.claveMapfre,
                idNegocio: vm.negocio === undefined? "" : vm.negocio.text,
                asesor:vm.asesor === undefined ? "" : vm.asesor.toUpperCase(),
                puesto:vm.puesto === undefined ? "" : vm.puesto.toUpperCase()

            }
            getAgent(params)
            // vm.claveMapfre,vm.negocio,vm.asesor,vm.puesto
        }
    }

    angular
        .module('actinver.controllers')
        .controller('agentCtrl', agentCtrl);

})();

(function () {
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig($stateProvider) {

        $stateProvider
            .state('agent', {
                url: '/agent',
                parent: 'app',
                templateUrl: '/app/advisers/agent/agent.html',
                controller: 'agentCtrl',
                controllerAs: 'agent',
                ncyBreadcrumb: {
                  label: 'Agentes',
                  parent: 'app.dashboard'
                }
            });

    }

    angular.module('actinver')
           .config(routerProviderConfig);

})();

//   (function () {
//       'use strict';

//       function insuranceAgentSrv(URLS, $q, $http, $filter) {
//           /**
//            *  prospect service
//            */
//           function InsuranceAgentSrv() {}

//            InsuranceAgentSrv.prototype.getAgent = function () {
//               return $q(function (resolve, reject) {
//                   $http({
//                       method: 'POST',
//                       url: URLS.getAgentQuery,
//                       params: {
//                           language: 'SPA',
//                           operation: 'PARAMS'
//                       }
//                   }).then(function success(response) {
//                       var _response;
//                       console.log(response)
//                       if (response.data.return.status === 1) {
//                           _response = response.data;
//                           resolve({success: true, info: _response});
//                       } else {
//                           reject({success: false, info: response.data.return.message});
//                       }
//                   }, function error() {
//                       reject({success: false, type: 'not-found'});
//                   });
//               });
//           }

//           return new InsuranceAgentSrv();
//       }
//       angular
//           .module('actinver.controllers')
//           .service('insuranceAgentSrv', insuranceAgentSrv);
//   })()
( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){
        var tpl = '/app/advisers/binnacle';

        $stateProvider

            .state('binnacle', {
                templateUrl: tpl + '/binnacle.html',
                url: '/bitacora',
                parent: 'app',
                ncyBreadcrumb: {
                  label: 'Bitácora',
                  parent: 'app.dashboard'
                },
                controller: 'binnacleCtrl',
                controllerAs: 'binnacle'
            })

            .state('binnacle.commercial', {
                templateUrl: tpl + '/views/commercial/commercial.html',
                url: '/comercial',
                ncyBreadcrumb: {
                    label: 'Comercial',
                }
            })

            .state('binnacle.commercial.strategy', {
                templateUrl: tpl + '/views/commercial/strategy/strategy.html',
                url: '/estrategia',
                controller: 'binnacleStrategyCtrl',
                controllerAs: 'strategy',
                ncyBreadcrumb: {
                    label: 'Estrategia',
                }
            })

            .state('binnacle.commercial.strategy.id', {
                templateUrl: tpl + '/views/commercial/strategy/id.html',
                url: '/{sponsor}/{id:[0-9]+}/{clasificacion}',
                controller: ['$scope', '$stateParams', function($scope, $stateParams){
                    $scope.client_id = $stateParams.id;
                }],
                ncyBreadcrumb: {
                    label: 'Cliente: {{client_id}}'
                }
            })

            .state('binnacle.commercial.reports', {
                templateUrl: tpl + '/views/commercial/reports/reports.html',
                controller: 'binnacleReportsCtrl',
                controllerAs: 'reports',
                url: '/reportes',
                ncyBreadcrumb: {
                    label: 'Reporte de Metas',
                }
            })

            .state('binnacle.commercial.reports.id', {
                templateUrl: tpl + '/views/commercial/reports/id.html',
                url: '/{id:[0-9]+}/{estado:[0-9]+}/{action:[0-9]+}/{employee}',
                controller: 'binnacleReportsCtrl',
                controllerAs: 'reports',
                requiresAuthentication: true,
                permissions: ['asesores.AdministradorMenu.'],
                ncyBreadcrumb: {
                    label: 'Asesor: {{adviser.id}}'
                }
            })

            .state('binnacle.commercial.outline', {
                templateUrl: tpl + '/views/commercial/outline/outline.html',
                controller: 'binnacleOutlineCtrl',
                controllerAs: 'outline',
                url: '/reperfilamiento',
                ncyBreadcrumb: {
                    label: 'Reperfilamiento',
                }
            })

            .state('binnacle.operative', {
                templateUrl   : tpl + '/views/operative/main.html',
                url           : '/operativa',
                ncyBreadcrumb : {
                    label : 'Operativa'
                }
            })

            .state('binnacle.operative.bank', {
                templateUrl   : tpl + '/views/operative/bank.html',
                url           : '/banco',
                ncyBreadcrumb : {
                    label : 'Banco'
                },
                controller: 'binnacleBankCtrl',
                controllerAs: 'ctrl'
            })

            .state('binnacle.operative.stock_exchange', {
                templateUrl   : tpl + '/views/operative/stock-exchange.html',
                url           : '/casa-de-bolsa',
                ncyBreadcrumb : {
                    label: 'Casa de Bolsa'
                },
                controller: 'binnacleStockExchangeCtrl',
                controllerAs: 'ctrl'
            });


    }

    angular
        .module( 'actinver' )
        .config( routerProviderConfig );

})();
(function() {
    "use strict";

    binnacleSrv.$inject = ['$http', '$q', 'URLS', 'FileSaver'];
    function binnacleSrv ( $http, $q, URLS, FileSaver ) {

        var api = {};


        api.getOperativeBank = function ( start, end, employeeID ) {
            var defered = $q.defer();
            var promise = defered.promise;
            var url= URLS.getBinnacleOperativeBank + '/' + start + '/' + end + '/' + employeeID + '?language=SPA';
            //var url= URLS.getBinnacleOperativeBank;
            $http.get( url ).then(
                function ( _response ){
                    if(_response && _response.data && _response.data.status === 1){
                        defered.resolve( _response.data.result );
                    }else{
                        defered.reject({});
                    }   
                },
                function ( _error ) {
                    defered.reject( _error );
                }
            );
            return promise;
        };


        api.getOperativeStockExchange = function ( start, end, employeeID ) {
            var defered = $q.defer();
            var promise = defered.promise;
            var url = URLS.getBinnacleOperativeStockExchange + '/' + start + '/' + end + '/' + employeeID + '?language=SPA';
            //var url = URLS.getBinnacleOperativeStockExchange ;

            $http.get(url).then(
                function ( _response ){
                    defered.resolve( _response.data.result );
                },
                function ( _error ) {
                    defered.reject( _error );
                }
            );
            return promise;
        };


        api.downloadPDF = function( _startDate, _endDate ){
            return $q( function( resolve, reject){
                $http.post(
                    URLS.getAdvisersBinnacleBinnacle,
                    { start: _startDate , end:_endDate},
                    { responseType: "arraybuffer" }
                ).then(
                    function ( _response ) {
                        var type = _response.headers('Content-Type');
                        var blob = new Blob([_response.data], { type: type });
                        FileSaver.saveAs(blob, 'bitacora_' + _startDate + '_' + _endDate );
                        resolve();
                    }, function ( _error ) {
                        reject( _error );
                    }
                );
            });
        };

        return api;
    }

    angular.module('actinver.services')
        .service( 'binnacleSrv', binnacleSrv );
})();

(function () {
    'use strict';

    binnacleBirthdaysSrv.$inject = ['URLS', '$q', '$http', '$filter', 'moment', 'ErrorMessagesSrv', 'csrfSrv'];
    function binnacleBirthdaysSrv(URLS, $q, $http, $filter, moment, ErrorMessagesSrv, csrfSrv) {

        function getListaFechas() {
            var listaDates = {
                today: [],
                nextWeek: [],
                lastWeek: []
            };
            //rellenamos la lista de Hoy
            listaDates.today.push({
                fecha: moment().valueOf(),
                records: [{ isHeader: true, fecha: moment().valueOf() }]
            });

            for (var i = 1; i < 8; i++) {
                //Rellenamos la Lista de 7 dias despues y
                listaDates.nextWeek.push({
                    fecha: moment().add(i, 'days').valueOf(),
                    records: [{ isHeader: true, fecha: moment().add(i, 'days').valueOf() }]
                });
                //Rellenamos la lista de 7 dias antes
                listaDates.lastWeek.push({
                    fecha: moment().subtract(i, 'days').valueOf(),
                    records: [{ isHeader: true, fecha: moment().subtract(i, 'days').valueOf() }]
                });
            }

            return listaDates;
        }

        var obj = {

            /**
             * Get binnacle birthday list
             * @param {string} employee - ID of current employee             
             * @return  {object}
             */
            getInfo: function (employee) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getBirthDays + employee,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {                        
                        if (typeof response !== 'undefined' && response.data.status === 1) {
                            resolve({ success: true, data: obj.setBirthday(getListaFechas(), response.data.result), finish: true });
                        } else {
                            reject({ success: false, data: obj.setBirthday(getListaFechas(), []), finish: true });
                        }
                    }, function error() {
                        reject({ success: false, data: obj.setBirthday(getListaFechas(), []), finish: true });
                    });
                });
            },

            /**
             * Set birthday information in a single date object
             * @param {array} info - Birthdays information
             * @param {object} dates - Object with range of dates
             * @return  {object}
             */
            setBirthday: function (listaDates, listBirthday) {
                var i = 0, j = 0;
                var flag = { hasBirhtdayToday: false, hasBirthdayLastweek: false, hasBirthdayNextweek: false };
                //dia actual                
                for (i = 0; (angular.isArray(listBirthday.currentWeek)) && (i < listBirthday.currentWeek.length); i++) {
                    for (j = 0; j < listaDates.today.length; j++) {
                        if (moment(listBirthday.currentWeek[i].birthDate).format('DD/MM') === moment(listaDates.today[j].fecha).format('DD/MM')) {
                            listaDates.today[j].records.push(Object.assign(listBirthday.currentWeek[i], { isHeader: false }));
                            flag.hasBirhtdayToday = true;
                        }
                    }
                }
                //Semana pasada                
                for (i = 0; (angular.isArray(listBirthday.lastWeek)) && (i < listBirthday.lastWeek.length); i++) {
                    for (j = 0; j < listaDates.lastWeek.length; j++) {
                        if (moment(listBirthday.lastWeek[i].birthDate).format('DD/MM') === moment(listaDates.lastWeek[j].fecha).format('DD/MM')) {
                            listaDates.lastWeek[j].records.push(Object.assign(listBirthday.lastWeek[i], { isHeader: false }));
                            j = listaDates.lastWeek.length;
                            flag.hasBirthdayLastweek = true;
                        }
                    }
                }
                //Semana Siguiente                
                for (i = 0; (angular.isArray(listBirthday.nextWeek)) && (i < listBirthday.nextWeek.length); i++) {
                    for (j = 0; j < listaDates.nextWeek.length; j++) {
                        if (moment(listBirthday.nextWeek[i].birthDate).format('DD/MM') === moment(listaDates.nextWeek[j].fecha).format('DD/MM')) {
                            listaDates.nextWeek[j].records.push(Object.assign(listBirthday.nextWeek[i], { isHeader: false }));
                            j = listaDates.nextWeek.length;
                            flag.hasBirthdayNextweek = true;
                        }
                    }
                }
                return { lista: listaDates, flag: flag };
            },


            /**
             * Send congratulations
             * @param {object} info - message information
             * @return  {object}
             */
            sendMessage: function (_info) {
                return $q(function (resolve, reject) {

                    console.info("MODEL:", _info);

                    csrfSrv.csrfValidate()
                        .then(successCsrf)
                        .catch(errorCsrf);

                    function successCsrf() {
                        $http({
                            method: 'POST',
                            url: URLS.sendMessangeBirthday,
                            data: $.param(_info),
                        }).then(function (_res) {
                            resolve(_res.data);
                        });
                    }

                    function errorCsrf(error) {
                        reject(error);
                    }
                });

            }

        };

        return obj;

    }

    angular.module('actinver.services')
        .service('binnacleBirthdaysSrv', binnacleBirthdaysSrv);

})();

( function(){
    'use strict';

    binnacleOutlineSrv.$inject = ['URLS', '$q', '$http'];
    function binnacleOutlineSrv( URLS, $q, $http ){

        var obj = {

            /**
             * Get clients soon / expired contacted info
             * @param {string} employeeID - User ID
             * @param {type} employeeID - Filter to get information about clients
             * @return  {object}
             */
            getClientsInfo: function( employeeID, type ){

                return $q( function( resolve, reject ){
                    var infotype = ( type === 'soon' ) ? 'consultarContratosPerfilVencer' : 'consultarContratosPerfilVencido';

                    $http( {
                        method: 'GET',
                        url: URLS.getOutlineInfo + infotype + '/' + employeeID,
                      //  url: URLS.getOutlineInfo + infotype + '/53883',
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.resultadoOperacionServicioTO.status === 1 ) {
                            resolve( { success: true, data: response.data.contratosVencimientoTO } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get sells practice url
             * @return  {object}
             */
            getSellsPracticeUrl: function(parametros){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getSellsPracticeUrl,
                        params: parametros 
                    } ).then( function success( response ){

                        resolve(response);
                       /* if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }*/

                    }, function error(){

                         reject( { success: false, data: [] } );

                    } );
                } );
            },

        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'binnacleOutlineSrv', binnacleOutlineSrv );

})();
// Call controller from tooltip chart
function showAdvisersInfo( id ,mes,anio){
    'use strict';

    var scope = angular.element( $( '#goals-report' )[0] ).scope();
    scope.$apply( function(){
        scope.reports.showAdvisersInfo( id ,mes,anio);
        $( 'html, body' ).animate( {
            scrollTop: $( '.details-wrapper' ).offset().top - 100
        }, 500 );
    } );
}

( function(){
    'use strict';

    binnacleReportsSrv.$inject = ['URLS', '$q', '$http'];
    function binnacleReportsSrv( URLS, $q, $http ){

        function setTooltipInfo( info, range, filter ){
            function getIndiceMes(mes){
                mes = mes.trim();
                var arrayMonths = ["ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];
                var indice = arrayMonths.indexOf(mes.toUpperCase());
                return indice + 1;
            }

            var btn = '', opts = '';
            var fecha=info.fecha.split('/');


            if( filter[0] !== 'single' ) {
                btn = "<p><a href='javascript:void(0);' onclick='showAdvisersInfo( " + range +" , "+ getIndiceMes(fecha[0])+","+fecha[1]+ " )'>VER DETALLE</a></p>";
                opts = "<li><strong>Total de asesores:</strong> "+ info.asesores +"</li><li><strong>Total de clientes a contactar:</strong> "+info.clientes+"</li>";
            } else {
                opts = "<li><strong>Clientes a contactar:</strong> "+info.clientes+"</li>";
            }
            return "<div class='dashboard-tooltip report-tooltip top'><div class='tooltip-arrow'></div><div class='tooltip-inner'><ul>" + opts + "<li><strong>Meta por día:</strong>"+info.meta+"</li><li><strong>Clientes contactados:</strong>"+info.numContactos+"</li><li><strong>Alcance:</strong> "+info.alcance+"%</li></ul>" + btn + "</div></div>";
        }

        var obj = {

            /**
             * Search field types
             */
            search_types: [
                {
                    id: 1,
                    text: 'Número de cliente único',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '11'
                    }
                },
                {
                    id: 2,
                    text: 'Número de contrato',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '11'
                    }
                },
                {
                    id: 3,
                    text: 'Nombre de cliente único',
                    typeahead: true,
                    validation: {
                        pattern: '',
                        maxlength: '60'
                    }
                }
            ],

            /**
             * Get chart information
             * @param {string} adviser - Array with information to operate goals report.
             * @return  {object}
             */
            getInfo: function( adviser ){

                return $q( function( resolve, reject ){
                    var urlRest = null;
                    var paramsUrl = { language: 'SPA' };
                    if (adviser.type === "profile") {
                        urlRest = URLS.getDetailGraph + "/true";
                    } else if (adviser.type === "advisers") {
                        urlRest = URLS.getDetailGraph + "/false";
                    }
                    //profileFlag: true
                    if(adviser && adviser.show_info && adviser.show_info !== '')
                        paramsUrl.employeeID  = adviser.show_info;

                    

                    $http( {
                        method: 'GET',
                        url: urlRest,
                        params: paramsUrl,
                        ignoreLoadingBar: true
                    } ).then( function success( response ){
                        var info=[];
                        var datos;

                        if(adviser.type==="profile"){
                            datos = response.data.result.myProfile;

                        }else if(adviser.type === "advisers"){
                            datos = response.data.result.advisors;
                        }

                        angular.forEach(datos, function (_res) {  
                                var infoToolTip={
                                    asesores: _res.totalAdvisors,
                                    clientes:_res.clientsToReach,
                                    meta:_res.targetPerDay,
                                    alcance:_res.totalPercentage,
                                    numContactos:_res.clientsContacted,
                                    fecha:_res.month
                                };   

                                var position=[_res.month ,_res.totalPercentage,setTooltipInfo( infoToolTip, adviser.show_info, adviser.filter )];
                                info.push(position);
                        });

                        if ( typeof response !== 'undefined' ) {
                            // Info ultimo
                            var dataa = response.data.result.myProfile;
                            if (adviser.type === "profile") {
                                dataa = dataa[dataa.length - 1];
                                dataa.data = [dataa.clientsContacted, dataa.clientsToReach - dataa.clientsContacted];
                                dataa.percentage = parseInt(dataa.totalPercentage) + '%';
                                dataa.colors = ['#7ed321', '#517cbd'];
                            }                            
                          
                            resolve( { success: true, data: obj.displayChart( info ), finish: true, result: dataa} );
                        } else {
                            reject( { success: false, data: [], finish: true } );
                        }

                    }, function error(){

                        reject( { success: false, data: [], finish: true } );

                    } );
                } );
            },

            /**
             * Set chart styles and information
             * @param {object} chart_data - Object with chart setting.
             * @return  {object}
             */
            displayChart: function( chart_data ){
                var idxs = [],
                    data = [],
                    labels = [],
                    colors = [];

                chart_data.forEach( function( item, idx ){
                    idxs.push( idx );
                    data.push( item[ 1 ] );
                    labels.push( item[ 0 ] );
                    if( idx !== ( chart_data.length - 1 ) ){
                        colors.push( '#00bebe' );
                    } else {
                        colors.push( '#0f3f88' );
                    }
                } );

                return {
                    section: 'binnnacle-reports',
                    labels: labels,
                    data: data,
                    datasetOverride: {
                        pointBackgroundColor: colors,
                        pointHoverBackgroundColor: colors,
                        pointBorderColor: colors,
                        pointHoverBorderColor: colors
                    },
                    options: {
                        maintainAspectRatio: false,
                        animation : false,
                        events: ['click'],
                        chartArea: {
                            backgroundColor: 'rgba(0, 190, 190, .1)'
                        },
                        scales: {
                            yAxes: [{
                                display: true,
                                ticks: {
                                    beginAtZero: true,
                                    padding: 10,
                                    fontSize: 13,
                                    fontFamily: 'Proxima Regular',
                                    fontColor: '#1a5dc4',
                                    stepSize: 10,
                                    suggestedMax: 105,
                                    callback: function(value) {
                                        return ( value !== 0 && value !== 110 ) ? value + '%' : '';
                                    }
                                },
                                gridLines: {
                                    drawBorder : false,
                                    color: '#a2e6e6',
                                    borderDash: [ 2, 0, 2 ],
                                    zeroLineColor: 'rgba(0, 0, 0, 0)',
                                }
                            }],
                            xAxes: [{
                                ticks: {
                                    fontFamily: 'Proxima Semibold',
                                    fontColor: '#00bebe',
                                    fontSize: 15,
                                },
                                gridLines: {
                                    display: false,
                                },
                            }]
                        },
                        elements: {
                            line: {
                                fill: false,
                                tension: 0,
                                borderWidth: 2,
                                borderColor: '#00bebe'
                            },
                            point: {
                                radius: 8,
                                hitRadius: 8,
                                hoverRadius: 8
                            },
                        },
                        tooltips: {
                            enabled: false,
                            custom: true,
                            idxs: idxs,
                            data: chart_data,
                        },
                    }
                };
            },

            /**
             * Get report by advisers
             * @return  {object}
             */
            getAdvisersInfo: function( id ,fecha){

                return $q( function( resolve, reject ){
                    
                    $http( {
                        method: 'GET',
                        url: URLS.getAdvisersDetails + id,
                        //url: URLS.getAdvisersDetails+'53883/',
                        params:{
                            date: fecha,
                            language:'SPA'

                        }
                    } ).then( function success( response ){
                        
                        
                        if ( !!response.data.result ) {                            
                            resolve( { success: true, data: response.data.result, finish: true } );
                        } else {
                            reject( { success: false, data: [], finish: true } );
                        }

                    }, function error(){

                        reject( { success: false, data: [], finish: true } );

                    } );
                } );
            },

        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'binnacleReportsSrv', binnacleReportsSrv );

})( showAdvisersInfo );

( function(){
    'use strict';

    binnacleStrategySrv.$inject = ['URLS', '$q', '$http', 'moment', 'csrfSrv'];
    function binnacleStrategySrv( URLS, $q, $http, moment ,csrfSrv){

        var obj = {

            /**
             * Search field types
             */
            search_types: [
                {
                    id: 1,
                    text: 'Nombre del cliente',
                    field: 'nombreCliente',
                    validation: {
                        maxlength: '60'
                    }
                },
                {
                    id: 2,
                    text: 'Número de contrato',
                    field: 'numContrato',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '11'
                    }
                },
                {
                    id: 3,
                    text: 'Clasificación',
                    field: 'clasification',
                    validation: {
                        maxlength: '60'
                    }
                },
                {
                    id: 4,
                    text: 'Tipo de contrato',
                    //field: 'origen',
                    field:'typeOrigin',
                    validation: {
                        maxlength: '60'
                    }
                },
                {
                    id: 5,
                    text: 'Estatus',
                    field:'contactNameStatus',
                    //field: 'contactStatus',
                    validation: {
                        maxlength: '60'
                    }
                },
                {
                    id: 6,
                    text: 'Todos'
                }
            ],

            /**
             * Get binnacle for searching clients to contact
             * @param {string} employee - Adviser ID number
             * @return  {object}
             */
            getBinnacleClients: function( employee ){
                var month = moment().format( 'M' ),
                    year = moment().format( 'YYYY' );

                return $q( function( resolve, reject ){
                     $http( {
                        method: 'GET',
                        url: URLS.getBinnacleClients + employee + '/' + month + '/' + year + '/TODOS/',
                        //url: URLS.getBinnacleClients,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.response.status === 1 ) {
                            if(response.data.response.result){
                                resolve( { success: true, data: response.data.response.result.sponsorList } );
                            }else{
                                reject( { success: false, data: [] } );
                            }
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get client information
             * @param {string} employee - Adviser ID number
             * @param {string} contract - Client contract number
             * @return  {object}
             */
            getClientDetails: function( employee, sponsor, contract ){
                var month = moment().format( 'M' ),
                year = moment().format( 'YYYY' );
                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getClientDetails + employee + '/' + sponsor + '/' + contract + '/' + month + '/' + year,                        
                        //url: URLS.getClientDetails + '53883' + '/' + sponsor + '/' + contract + '/' + month + '/' + year,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){
                        
                        if ( typeof response !== 'undefined' && response.data.response.status === 1 && !R.isEmpty( response.data.response.result ) ) {
                            resolve( { success: true, data: response.data.response.result, type: 'details' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get client type
             * @param {string} employee - Adviser ID number
             * @param {string} contract - Client contract number
             * @return  {object}
             */
            getClientType: function( employee, contract ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getClientType + employee + '/' + contract,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.response.status === 1 ) {
                            resolve( { success: true, data: response.data.response.result, type: 'type' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get client profile
             * @param {string} contract - Client contract number
             * @return  {object}
             */
            getClientProfile: function( contract ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getClientProfile + contract + '/2/2',
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outProfileByContractQuery.contractResult, type: 'profile' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get binnacle catalog
             * @return  {object}
             */
            getBinnacleCatalog: function(){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getBinnacleCatalog,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get binnacle child catalog
             * @param {number} item - ID of parent activity
             * @return  {object}
             */
            getBinnacleCatalogChild: function( item ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getBinnacleCatalogChild + item,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get comments by contract
             * @param {number} contract - ID
             * @return  {object}
             */
            getCommentsDetailsByContract: function(employeeID, sponsor, _contract, month, year ){                
                return $q( function( resolve, reject ){
                   // var month = moment().format( 'M' ),
                   // year = moment().format( 'YYYY' );
                    
                    $http( {
                        method: 'GET',
                        
                        //url: URLS.getCommentsDetailsByContract + '53883' +'/'+sponsor+'/'+_contract+'/'+month+'/'+year+'/',
                        url: URLS.getCommentsDetailsByContract + employeeID +'/'+sponsor+'/'+_contract+'/'+month+'/'+year+'/',
                       // url: URLS.getCommentsDetailsByContract + _contract +'/732/3029939/10/2017/',
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){
                        if ( typeof response !== 'undefined' &&  response.data &&  response.data.response !== null && response.data.response.status === 1 ) {
                            resolve( response.data.response.result );
                        } else {
                            reject( { success: false } );
                        }

                    }, function error(){

                        reject( { success: false } );

                    } );
                } );
            },

            /**
             * Post binnacle comment on some
             * @param {object} info - Array with all information to post inside binnacle
             * @return  {object}
             */
            doBinnacleComment: function( info ){

                return $q( function( resolve, reject ){

                    csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                    function successCsrf(){
                        $http( {
                            method: 'POST',
                            url: URLS.doBinnacleComment,
                            data:  $.param(info),
                        } ).then( function success( response ){
                            
                            if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                                resolve( { success: true, msg:"El mensaje se ha enviado exitosamente." } );
                            } else {
                                reject( { success: false, msg:response.data.messages[0].description  } );
                            }
    
                        }, function error(){
    
                            reject( { success: false, msg:'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' } );
    
                        } );

                    }

                    function errorCsrf(error){
                        reject(error);
                    }


                } );
            }
        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'binnacleStrategySrv', binnacleStrategySrv );

})();

( function(){
    "use strict";

    genericCtrl.$inject = ['URLS', 'userConfig', 'tableList'];
    function genericCtrl( URLS, userConfig, tableList ){
        var vm = this,
            sadviser = userConfig.user.employeeID;

        // Schedule info list
        vm.scheduleInfo = tableList.tableSet({
            url: URLS.dashboardSchedule + sadviser
        });
            // Outline soon expired info list
        vm.outlineSoonInfo = tableList.tableSet({
            url: URLS.getOutlineInfo + 'consultarContratosPerfilVencer' + '/' + sadviser
        }, {
            count: 2
        });

        // Outline expired info list
        vm.outlineExpiredInfo = tableList.tableSet({
            url: URLS.getOutlineInfo + 'consultarContratosPerfilVencido' + '/' + sadviser
        }, {
            count: 2
        });


    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'genericCtrl', genericCtrl );

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('app.generic', {
                controller: 'genericCtrl',
                controllerAs: 'generic',
                templateUrl: '/app/advisers/generic/generic.html',
                url: '/generic',
                requiresAuthentication: true,
                ncyBreadcrumb: {
                    label: ' '
                },
                parent:'app',
            });


    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

( function(){
    "use strict";

    dashboardCtrl.$inject = ['URLS', 'userConfig', 'tableList'];
    function dashboardCtrl( URLS, userConfig, tableList ){
        var vm = this, sadviser = userConfig.user.employeeID;
        vm.fdc = /access/i.test(navigator.userAgent);

        // Schedule info list
        vm.scheduleInfo = tableList.tableSet({
            url: URLS.dashboardSchedule + sadviser
        });

        // Outline soon expired info list
        vm.outlineSoonInfo = tableList.tableSet({
            url: URLS.getOutlineInfo + 'consultarContratosPerfilVencer' + '/' + sadviser
        }, {
            count: 2
        });

        // Outline expired info list
        vm.outlineExpiredInfo = tableList.tableSet({
            url: URLS.getOutlineInfo + 'consultarContratosPerfilVencido' + '/' + sadviser
        }, {
            count: 2
        });

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'dashboardCtrl', dashboardCtrl );

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('app.dashboard', {
                controller: 'dashboardCtrl',
                controllerAs: 'dashboard',
                templateUrl: '/app/advisers/dashboard/dashboard.html',
                url: '/dashboard',
                requiresAuthentication: true,
                ncyBreadcrumb: {
                    label: 'Módulo de Asesoría'
                },
                parent:'app',
            });


    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

( function(){
    'use strict';

    accountStateSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv'];
    function accountStateSrv( URLS, $q, $http, csrfSrv ){

        function AccountEstate(){}

        AccountEstate.prototype.getAccountState = function ( month, year , employeeId, userName, password, isReport ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {

                    var parametersSubmit = { 
                        month : month,
                        year : year,
                        employeeId : employeeId,
                        userName : userName,
                        password : password,
                        language : 'SPA',
                        isReport :isReport
                    };

                    $http({
                        method: 'POST',
                        url: URLS.getAccountState,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {                      
                        resolve(response);                        
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
                
            });
        };

        AccountEstate.prototype.getAccountStateRh = function ( month, year , employeeId, userName, password, isReport ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {

                    var parametersSubmit = { 
                        month : month,
                        year : year,
                        employeeId : employeeId,
                        userName : userName,
                        password : password,
                        language : 'SPA',
                        isReport :isReport
                    };

                    $http({
                        method: 'POST',
                        url: URLS.getAccountStateRh,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {                      
                        resolve(response);                        
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
                
            });
        };

        return new AccountEstate();

    }

    angular
    	.module( 'actinver.services' )
        .service( 'accountStateSrv', accountStateSrv );

})();
( function(){
    'use strict';

    goalsCustomSrv.$inject = ['URLS', '$q', '$http'];
    function goalsCustomSrv( URLS, $q, $http ){

        var obj = {

            /**
             * Get groups by employee
             * @param {number} employeeID - Employee ID number
             * @return {object}
             */            
            getGroupsByEmployeeRpt: function( employeeID, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getGroupsByEmployeeRpt + '?idEmployee=' + employeeID + '&language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get information by group
             * @param {number} group - Group ID number
             * @return {object}
             */        
            getInfoByGroupRpt: function( group, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getInfoByGroupRpt + group + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get center details
             * @param {number} center - Center ID number
             * @param {string} date - Filter information date
             * @return {object}
             */        
            getCustomCenterInfoRpt: function( center, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getCustomCenterInfoRpt + center + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-positions' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },


            /**
             * Get center products
             * @param {number} center - Center ID number
             * @param {string} date - Filter information date
             * @return {object}
             */           
            getCustomCenterProductsRpt: function( center, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getCustomCenterProductsRpt + center + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-contracts' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            }

        };

        return obj;

    }

    angular
    	.module( 'actinver.services' )
        .service( 'goalsCustomSrv', goalsCustomSrv );

})();
( function(){
    'use strict';

    goalsReportsSrv.$inject = ['URLS', '$q', '$http'];
    function goalsReportsSrv( URLS, $q, $http ){

        function validateRol(roleSearch){
			var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
            var indice = -1;
            if (angular.isDefined(user.roles) && angular.isArray(user.roles)) {
                indice = user.roles.findIndex(function (rol) {
                    return rol.toUpperCase() === roleSearch;
                });
            }
            return indice > -1;
		}

        var obj = {

            /**
             * Get goals position information
             * @param {number} employeeID - Employee ID number
             * @param {string} date - Filter information date
             * @return {object}
             */            
            getGoalsPositionsRpt: function( employeeID, date ){
                var url = validateRol("ASESOR") ? URLS.getGoalsPositions : URLS.getGoalsPositionsRpt;

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( url + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-positions' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get sum information about goals positions
             * @param {number} employeeID - Employee ID number
             * @param {string} date - Filter information date
             * @return {object}
             */            
            getSumGoalsPositionsRpt: function( employeeID, date ){
                var url = validateRol("ASESOR") ? URLS.getSumGoalsPositions : URLS.getSumGoalsPositionsRpt;
                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( url + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'sum-goals-positions' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get contracts for goals
             * @param {number} employeeID - Employee ID number
             * @param {string} date - Filter information date
             * @return {object}
             */        
            getGoalsContractsRpt: function( employeeID, date ){
                var url = validateRol("ASESOR") ? URLS.getGoalsContracts : URLS.getGoalsContractsRpt;
                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( url + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-contracts' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            }

        };

        return obj;

    }

    angular
    	.module( 'actinver.services' )
        .service( 'goalsReportsSrv', goalsReportsSrv );

})();
( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){
        var tpl = '/app/advisers/goals';

        $stateProvider

            .state('goals', {
                templateUrl: tpl + '/goals.html',
                url: '/reporte-metas',
                parent: 'app',
                ncyBreadcrumb: {
                  label: 'Reporte de metas',
                  parent: 'app.dashboard'
                },
                controller: 'goalsCtrl',
                controllerAs: 'goals'
            })

            .state('goals.report', {
                templateUrl: tpl + '/views/report/report.html',
                url: '/reporte',
                ncyBreadcrumb: {
                    label: 'Reporte',

                },
                controller: 'reportCtrl',
                controllerAs: 'report'
            })

            .state('goals.supervisor', {
                templateUrl: tpl + '/views/supervisor/supervisor.html',
                url: '/reporte-supervisor',
                ncyBreadcrumb: {
                    label: 'Reporte de Supervisor',

                },
                controller: 'supervisorCtrl',
                controllerAs: 'supervisor'
            })

            .state('goals.custom', {
                templateUrl: tpl + '/views/custom/custom.html',
                url: '/reporte-personalizado',
                ncyBreadcrumb: {
                    label: 'Reporte Personalizado',

                },
                controller: 'customCtrl',
                controllerAs: 'custom'
            })

            .state('goals.manager', {
                templateUrl: tpl + '/views/report/manager.html',
                url: '/reporte-manager',
                ncyBreadcrumb: {
                    label: 'Reporte de Gestión',

                },
                controller: 'managerCtrl',
                controllerAs: 'manager'
            })

            .state('goals.reportLargeAndShort', {
                templateUrl: tpl + '/views/report/reportLargeAndShort.html',
                url: '/reporte-reportLargeAndShort',
                ncyBreadcrumb: {
                    label: 'Reporte de largos y cortos',

                },
                controller: 'reportLargeAndShortCtrl',
                controllerAs: 'reportLargeAndShort'
            })

            .state('goals.accountStatus', {
                templateUrl: tpl + '/views/accountState/accountState.html',
                url: '/account-state',
                ncyBreadcrumb: {
                    label: 'Estados de cuenta',

                },
                controller: 'accountStateCtrl',
                controllerAs: 'accountState'
            });

    }

    angular
        .module( 'actinver' )
        .config( routerProviderConfig );

})();

( function(){
    'use strict';

    goalsSupervisorSrv.$inject = ['URLS', '$q', '$http'];
    function goalsSupervisorSrv( URLS, $q, $http ){

        var obj = {

            /**
             * Search filter types
             */
            search_filter_types: [
                {
                    id: 1,
                    text: 'Todos',
                },
                {
                    id: 2,
                    text: 'Top 10+ Asesores',
                },
                {
                    id: 3,
                    text: 'Top 10- Asesores',
                },
                {
                    id: 4,
                    text: 'Top 10+ Centros Financieros',
                },
                {
                    id: 5,
                    text: 'Top 10- Centros Financieros',
                }
            ],

            /**
             * Get supervisor information
             * @param {number} employeeID - Employee ID number
             * @param {string} date - Filter information date
             * @return {object}
             */
            getSupervisorInfo: function( employeeID, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getSupervisorInfo + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get center details
             * @param {number} employeeID - Employee ID number
             * @param {number} center - Center ID number
             * @param {string} date - Filter information date
             * @return {object}
             */
            getCenterInfo: function( employeeID, center, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getCenterInfo + center + '/' + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-positions' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get center products
             * @param {number} employeeID - Employee ID number
             * @param {number} center - Center ID number
             * @param {string} date - Filter information date
             * @return {object}
             */
            getCenterProducts: function( employeeID, center, date ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: decodeURIComponent( URLS.getCenterProducts + center + '/' + employeeID + '?language=SPA&fechaTransaccion=' + date ),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'goals-contracts' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            }

        };

        return obj;

    }

    angular
    	.module( 'actinver.services' )
        .service( 'goalsSupervisorSrv', goalsSupervisorSrv );

})();
(function () {
    'use strict';
    reportLargeAndShortSrv.$inject = ['URLS', '$q', '$http'];
    function reportLargeAndShortSrv(URLS, $q, $http) {

        function reportLargeAndShort() {

        }

        reportLargeAndShort.prototype.getListaLargeAndShort = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'Get',
                    url: URLS.getShortAndLargeReport,
                    params: {
                        language: 'SPA'
                    }
                }).then(function succees(response) {
                    if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                        resolve({ success: true, lista: response.data.outMoneyMarketCashByAdviserQuery.contractList.contract, msg: '' });
                    } else if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 2) {
                        reject({ success: false, lista: [], msg: response.data.outCommonHeader.result.messages[0] });
                    }
                }).catch(function failed() {
                    reject({ success: false, lista: [], msg: 'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk' });
                });
            });
        };

        return new reportLargeAndShort();
    }
    angular
        .module('actinver.services')
        .service('reportLargeAndShortSrv', reportLargeAndShortSrv);

})();
( function(){
    "use strict";

    helpCtrl.$inject = ['PresentationSrv', '$state', 'HelpModals', 'CommonModalsSrv', 'HelpSrv'];
    function helpCtrl( PresentationSrv, $state, HelpModals, CommonModalsSrv, HelpSrv ){
        var vm = this;

        function setup(){
            getVideos();
            getQuestions();
        }

        vm.showVideo = function( _id){
            HelpModals.show( _id );
        };

        vm.sendComment = function(){
            var message = "Tu pregunta se ha enviado de manera correcta. Agradecemos tu participación en esta sección.";

            HelpSrv.sendComment().then(function(){
                CommonModalsSrv.done( message ).result.then(function(){
                    vm.comments = '';
                });
            });
        };


        function getVideos(){
            HelpSrv.getVideos().then(function( _res ){
                vm.videos = _res;
            });
        }

        function getQuestions(){
            vm.loadingQuestions = true;
            HelpSrv.getQuestions().then(function( _res ){
                vm.questions = _res;
                vm.loadingQuestions = false;
            })
            .finally(function(){
                vm.loadingQuestions = false;
            });


        }

        setup();

    }


    angular.module('actinver.controllers')
    .controller('helpCtrl', helpCtrl );

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('help', {
                templateUrl: '/app/advisers/help/help.html',
                parent: 'app',
                controller: 'helpCtrl',
                controllerAs: 'help',
                url: '/help',
                ncyBreadcrumb: {
                  label: 'Ayuda',
                  parent: 'app.dashboard'
                },
            });

    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();


(function() {
    "use strict";

    HelpSrv.$inject = ['URLS', '$q', '$http'];
    function HelpSrv( URLS, $q, $http ) {
        /**
         *  prospect service
         */
        function Help(){}


        Help.prototype.getVideos = function ( ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getVideos,
                }).then(function(response) {
                    if( response.data.status === 1 ){
                        resolve( response.data.result );
                    }
                    else{
                        reject();
                    }
                })
                .catch( reject );
            });
        };

        Help.prototype.getQuestions = function ( ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getQuestions,
                }).then(function(response) {
                    if( response.data.status === 1 ){
                        resolve( response.data.result );
                    }
                    else{
                        reject();
                    }
                })
                .catch( reject );
            });
        };


        Help.prototype.sendComment = function ( ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'POST',
                    url: URLS.genericPost,
                }).then(function(response) {
                    if( response.data.status === 1 ){
                        resolve( response.data.result );
                    }
                    else{
                        reject();
                    }
                })
                .catch( reject );
            });
        };



        return new Help();
    }

    angular.module('actinver.services')
        .service('HelpSrv', HelpSrv);
})();

(function () {
    'use strict';
    insuranceCtrl.$inject = ['insuranceSrv', '$scope', '$sessionStorage'];
    angular
            .module('actinver.controllers')
            .controller('insuranceCtrl', insuranceCtrl);

    function insuranceCtrl(insuranceSrv, $scope, $sessionStorage) {
        var vm = this;
        var user = JSON.parse($sessionStorage.user);
        vm.role = user.roles.includes('SEGUROS'); 
        vm.agentList = [];
        $scope.agentDisabled = false;
        
        if ($scope.agentLength === undefined) {
            insuranceSrv.getAgent().then(function (_res) {
                if(_res.success) {
                    $scope.agentLength = 0;
                    angular.forEach(_res.info, function (value) {
                        vm.agentList.push({
                            id: value.claveMapfre,
                            text: value.claveMapfre + ' | ' + value.idNegocio
                        });
                        if (value.idNegocio.toString().toUpperCase().startsWith("CB"))
                            $scope.agentSelected = vm.agentList[$scope.agentLength];
                        ++$scope.agentLength;
                    });
                    if ($scope.agentLength === 0) 
                        vm.agentList.push({
                            id: 5988,
                            text: '5988' + ' | ' + 'Actinver'
                        });
                    if ($scope.agentSelected === undefined)
                        $scope.agentSelected = vm.agentList[0];
                } else {
                    vm.agentList = [];
                    $scope.agentSelected = [];
                }
            });
        }
    }
})();

(function () {

    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig($stateProvider) {

        $stateProvider
            .state('insurance', {
                templateUrl: '/app/advisers/insurance/insurance.html',
                url: '/insurance',
                ncyBreadcrumb: {
                    label: 'Seguros',
                    parent: 'app.dashboard'
                },
                controller: 'insuranceCtrl',
                controllerAs: 'insCtrl',
                parent: 'app',
                redirectTo: 'insurance.main'
            })
            .state('insurance.main', {
                templateUrl: '/app/advisers/insurance/main/insurance-main.html',
                url: '/main',
                params: {
                    model: null
                },
                controller: 'insuranceMainCtrl',
                controllerAs: 'insMainCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'Cuenta',
                    parent: 'insurance'
                },

            })
            .state('insurance.cars', {
                templateUrl: '/app/advisers/insurance/cars/insurance-cars.html',
                url: '/cars',
                params: {
                    model: null
                },
                controller: 'insuranceCarsCtrl',
                controllerAs: 'carsCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'Automóviles',
                    parent: 'insurance'
                }
            })
            .state('insurance.houses', {
                templateUrl: '/app/advisers/insurance/houses/insurance-houses.html',
                url: '/houses',
                params: {
                    model: null
                },
                controller: 'insuranceHousesCtrl',
                controllerAs: 'housesCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'Hogar',
                    parent: 'insurance'
                }
            })
            .state('insurance.medical', {
                templateUrl: '/app/advisers/insurance/medical/insurance-medical.html',
                url: '/medical',
                params: {
                    model: null
                },
                controller: 'insuranceMedicalCtrl',
                controllerAs: 'medicalCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'PMM',
                    parent: 'insurance'
                }
            })
            .state('insurance.life', {
                templateUrl: '/app/advisers/insurance/life/insurance-life.html',
                url: '/life',
                params: {
                    model: null
                },
                controller: 'insuranceLifeCtrl',
                controllerAs: 'lifeCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'Vida',
                    parent: 'insurance'
                }
            })
            .state('insurance.repor', {
                templateUrl: '/app/advisers/insurance/main/views/reporte/misreportes.html',
                url: '/reporte',
                controller: 'misreportesCtrl',
                controllerAs: 'misreportes',
                ncyBreadcrumb: {
                    label: 'Reportes'
                }

            })
            .state('insurance.pyme', {
                templateUrl: '/app/advisers/insurance/pyme/insurance-pyme.html',
                url: '/pyme',
                params: {
                    model: null
                },
                controller: 'insurancePymeCtrl',
                controllerAs: 'pymeCtrl',
                parent: 'insurance',
                ncyBreadcrumb: {
                    label: 'PYMES',
                    parent: 'insurance'
                }
            })
            ;
    }
    angular.module('actinver')
        .config(routerProviderConfig);

})();
(function () {
    'use strict';

    insuranceSrv.$inject = ['URLS', '$q', '$http'];
    angular
            .module('actinver.controllers')
            .service('insuranceSrv', insuranceSrv);

    function insuranceSrv(URLS, $q, $http) {

        var obj = {

            getAgent: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.getAgent,
                        params: {
                            language: 'SPA',
                            operation: 'AGENT'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader === undefined) {
                            if (response.data.return.status === 1) {
                                resolve({success: true, info: response.data.return.data.insuranceAgentBeanList});
                            } else {
                                reject({success: false, info: response.data.return.messages[0].description});
                            }    
                        } else {
                            reject({success: false, info: response.data});
                        }
                    }, function error() {
                        reject({success: false, info: response.data});
                    }).catch(function error() {
                        reject({success: false, info: "***ERROR*** Catch getAgentSvc"});
                    });
                });
            }

        };

        return obj;
    }

})();

(function () {

    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ) {

        $stateProvider
            .state('notification', {                
                templateUrl: '/app/advisers/notification/notification.html',
                url: '/notification',
                ncyBreadcrumb: {
                    label: 'Notificaciones',
                    parent: 'app.dashboard'
                },
                parent: 'app',
                redirectTo: 'notification.lumina'                
            })
            .state('notification.lumina', {
                templateUrl: '/app/advisers/notification/lumina/lumina-notification.html',
                url: '/Lumina',
                controller: 'luminaNotificationCtrl',
                controllerAs: 'lumina',
                parent: 'notification',
                ncyBreadcrumb: {
                    label: 'Lumina',
                    parent: 'notification'
                }
            })
            ;
    }
    angular.module('actinver')
        .config(routerProviderConfig);

})();
( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider

            .state('presentations', {
                templateUrl: '/app/advisers/presentations/presentations.html',
                url: '/presentations',
                parent: 'app',
                //redirectTo: 'presentations.id',
                controller: 'presentationsCtrl',
                controllerAs: 'presentations',
                ncyBreadcrumb: {
                label: 'Presentaciones',
                parent: 'app.dashboard'
                },
            })

            .state('presentations.id', {
                templateUrl: '/app/advisers/presentations/list.html',
                url: '/{id:int}',
                //redirectTo: 'presentations.institute',
                controller: 'presentationsCtrl',
                controllerAs: 'presentations',
                ncyBreadcrumb: {
                  label: ' ',
                },
            });

    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

( function(){
    "use strict";

    presentationsCtrl.$inject = ['PresentationSrv', '$state', '$stateParams'];
    function presentationsCtrl( PresentationSrv, $state, $stateParams ){
        var vm = this;
       
        function setup () {
            var selectedTab = $stateParams.id ? $stateParams.id: 1;
            $state.go('presentations.id',{id:selectedTab});
            getClassifications();
            vm.getPresentationsByType(selectedTab);
            setupVars();
        }
        function setupVars () {
            vm.selectedTab = 1;
            vm.groupSelectedTab = 0;
        }
        vm.nextTab = function () {
            vm.groupSelectedTab++;
        };

        vm.beforeTab = function () {           
           vm.groupSelectedTab--;
        };


        function orderPresentation( _presentations ){
            var categories = {};
            _presentations.map(function( _val ){
                var category = _val.idPresentationSubType || 'generica';
                var name = _val.presentations[0].descriptionSubType || 'generica';

               
                if( !categories[category] ){
                    categories[category] = {
                        name: name,
                        list: []
                    };
                }

                categories[category].list = _val.presentations;
            });
            vm.presentationsList = categories;
            //return categories;
        }


        function getClassifications(){
            vm.loadingProducts = true;
            PresentationSrv.getTypesAsr().then( function( _res ){
                vm.products = _res;
            }, function(){
                vm.errorLoadingProducts = true;
            })
            .finally(function(){
                vm.loadingProducts = false;
            });
        }


         vm.getPresentationsByType = function( _id ){
            vm.loadingSubProducts = true;
            vm.loadingPres = true;
            vm.subProducts = [];

            PresentationSrv.getPresentations ( _id ).then(function( _listProduct ){
                
                angular.forEach( _listProduct, function( item ){
                    vm.subProducts.push( item );
                } );
                vm.loadingSubProducts = false;
                vm.loadingPres = false;
                orderPresentation( vm.subProducts );
            }).catch(function(){
                vm.loadingSubProducts = false;
                vm.loadingPres = false;
            });
        };

        vm.done = function ( _id ){
            PresentationSrv.getPresentationsFile( _id ).then(function( ){
            });
        };

        setup();
    }


    angular.module('actinver.controllers')
    .controller('presentationsCtrl', presentationsCtrl );

})();


(function() {
    "use strict";

    PresentationSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'loginSrvc'];
    function PresentationSrv( URLS, $q, $http, ErrorMessagesSrv,loginSrvc ) {
        /**
         *  prospect service
         */
        function Presentations(){}

        Presentations.prototype.getTypesAsr = function () {
            var url;

            return $q(function( resolve, reject ){
                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'ADMINISTRADOR') {
                                url=URLS.getTypes;
                                break;
                            }else if ( _element === 'ASESOR'){
                                url=URLS.getTypesAsr;
                                break;
                            } 
                    }
                             
                    $http({
                        method: 'GET',
                        url: url,
                        params:{
                            language: 'SPA'
                        }
                    }).then(function(response) {
                        if( !!response.data.status ){
                            resolve( response.data.result );
                        }
                        else{
                            ErrorMessagesSrv( response.data.messages );
                            reject();
                        }
                    })
                    .catch(reject);
                        

                }); 
            });                     
        };

        Presentations.prototype.getPresentations = function ( _id ) {
            return $q(function( resolve, reject ){
                var url;
                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'ADMINISTRADOR') {
                                url=URLS.getPresentationsByType;
                                break;
                            }else if ( _element === 'ASESOR'){
                                url=URLS.getPresentations;
                                break;
                            } 
                    }
                    $http({
                        method: 'GET',
                        url: url + _id,    
                        params:{
                            language: 'SPA'
                        }
                    }).then(function(response) {
                        if( response.data.status === 1 ){
                            resolve( response.data.result );
                        }
                        else{
                            //reject( {error:null} );
                            reject();
                        }
                    });
                });    
            });
        };  

        Presentations.prototype.getPresentationsFile = function ( _id ) {
            return $q(function (resolve, reject) {
                var url;
                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'ADMINISTRADOR') {
                                url=URLS.getPresentationFileAdm;
                                break;
                            }else if ( _element === 'ASESOR'){
                                url=URLS.getPresentationFile;
                                break;
                            } 
                    }
                    $http({
                        method: 'GET',
                        url:    url + _id,
                        responseType: 'arraybuffer',
                        params: {
                            language: 'SPA'
                        }
                    }).then(function (response) {
                            var file = new Blob([response.data], {type: 'application/pdf'});
                            var fileURL = URL.createObjectURL(file);
                            window.open(fileURL,'_blank', 'Presentación');

                            resolve({ response: response.data });
                        }).catch(function (error) {
                            reject({ error: error.data });
                    });
                });        

            });
        };



        return new Presentations();
    }

    angular.module('actinver.services')
        .service('PresentationSrv', PresentationSrv);
})();

( function(){
    'use strict';

    proposalsProposalSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv', 'loginSrvc'];
    function proposalsProposalSrv( URLS, $q, $http ,csrfSrv,loginSrvc){ 

        var obj = {

            /**
             * Search field types
             */
            client_types: [
                {
                    'key': 1,
                    'description': 'Física'
                }, {
                    'key': 2,
                    'description': 'Moral'
                }
            ],

            /**
             * Get information about issuers
             * @return {object}
             */
            getIssuersInfo: function(){

                return $q( function( resolve, reject ){
                    var url;
                    loginSrvc.makeDataUser().then( function( _response){  
                        for(var pos=0 ;pos< _response.user.scope.length; pos++) {        
                            var _element= _response.user.scope[pos];        
                                if (_element === 'ADMINISTRADOR') {        
                                    url=URLS.getIssuersProposal;        
                                    break;        
                                }else if ( _element === 'ASESOR'){        
                                    url=URLS.getIssuersInfo;        
                                    break;        
                                } 
                        }

                        $http( {
                            method: 'GET',
                            url: url,
                            params: {
                                language: 'SPA'
                            }
                        } ).then( function success( response ){
    
                            if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                                resolve( { success: true, data: response.data.result } );
                            } else {
                                reject( { success: false, data: [] } );
                            }
    
                        }, function error(){
    
                            reject( { success: false, data: [] } );
    
                        } );





                    });
                } );
            },

            /**
             * Get information about issuers
             * @return {object}
             */
            getProducts: function(){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getProducts,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get information about issuers
             * @return {object}
             */
            getSubProducts: function( product ){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getSubProducts + product,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get available types of profiles
             * @return {object}
             */
            getProfiles: function(){

                return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getProfiles,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result.outClientProfileCatalog.profileList } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get available strategies
             * @return {object}
             */
            getStrategies: function( profile ){
                var promises = [];

                function promise( type ){

                    return $q( function( resolve, reject ){
                        $http( {
                            method: 'GET',
                            url: URLS.getStrategies + type,
                            params: {
                                language: 'SPA'
                            }
                        } ).then( function success( response ){

                            if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                                resolve( { success: true, data: response.data.outModelPortfolioByCriterionQuery.modelPortfolios } );
                            } else {
                                reject( { success: false, data: [] } );
                            }

                        }, function error(){

                            reject( { success: false, data: [] } );

                        } );

                    } );
                }

                for( var i = profile; i > 0; i-- ){

                    promises.push( promise( i ) );
                }

                return $q.all( promises );
            },

            /**
             * Get available strategies
             * @return {object}
             */
            getStrategyDetail: function( strategy ){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getStrategyDetail + strategy,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outModelPortfolioDetailQuery.modelPortfolios } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },


            /**
             * Get investment issuers catalog
             * @param {string} type - Person type key
             * @return {object}
             */
            getInvIssuersCatalog: function( type ){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getInvIssuersCatalog + type,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outInvestmentIssuersProspectQuery.issuer, topic: 'invIssuersCatalog' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get bands catalog
             * @param {string} type - Person type key
             * @return {object}
             */
            getBandsCatalog: function( type ){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getBandsCatalog + type,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outBondMarketBandsProspectQuery.band, topic: 'bandsCatalog' } );
                            //resolve( { success: true, data: [], topic: 'bandsCatalog' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get issuers catalog
             * @param {string} type - Person type key
             * @return {object}
             */
            getIssuersCatalog: function( type ){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getIssuersCatalog + type,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outBondMarketIssuerProspectQuery.issuer, topic: 'issuersCatalog' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            getDerivativesCatalog: function( type ){

                return $q( function( resolve, reject ){
                   $http( {
                       method: 'GET',
                       url: URLS.getDerivativesAsr ,
                       params: {
                           language: 'SPA'
                       }
                   } ).then(function(response) {

                       if ( typeof response !== 'undefined'  ) {
                           var data  = response.data;
                           resolve( { success: true, data: data, topic: 'derivatives' } );
                       } else {
                           reject( { success: false, data: [] } );
                       }

                   }, function error(){

                       reject( { success: false, data: [] } );

                   } );
               } );
           },


            /**
             * Get all issuers information
             * @return {object}
             */
            getAllIssuers: function(){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getAllIssuers,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ) {
                            resolve( { success: true, data: response.data.outClientIssuersMarketInfoQuery.marketDataTuple, topic: 'issuers' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get favorites information
             * @return {object}
             */
            getFavorites: function(){

                 return $q( function( resolve, reject ){
                    $http( {
                        method: 'GET',
                        url: URLS.getFavoritesAsr,
                        params: {
                            language: 'SPA'
                        }
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: response.data.result, topic: 'favorites' } );
                        } else {
                            reject( { success: false, data: [] } );
                        }

                    }, function error(){

                        reject( { success: false, data: [] } );

                    } );
                } );
            },

            /**
             * Get classification favorites information
             * @return {object}
             */
            getClassificationFav: function(){

                return $q( function( resolve, reject ){
                   $http( {
                       method: 'GET',
                       url: URLS.getClassificationFav,
                       params: {
                           language: 'SPA'
                       }
                   } ).then( function success( response ){

                       if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                           resolve( { success: true, data: response.data.result, topic: 'classificationFav' } );
                       } else {
                           reject( { success: false, data: [] } );
                       }

                   }, function error(){

                       reject( { success: false, data: [] } );

                   } );
               } );
           },

            /**
             * Post proposal document
             * @param {object} info - Array with all information to post inside proposal
             * @return  {object}
             */
            doProposal: function( info ){

                return $q( function( resolve, reject ){
                    csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                    function successCsrf(){
                        $http( {
                            method: 'POST',
                            url: URLS.doProposal,
                            data: (info),
                    } ).then( function success( response ){

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true } );
                        } else {
                            reject( { success: false } );
                        }

                    } );
                    }

                    function errorCsrf(error){
                        reject( error);

                    }




                } );
            },

            generaReportePropuesta: function( model ){                
                return $q( function( resolve, reject ){
                    csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                    function successCsrf(){
                        $http( {
                            method: 'POST',
                            url: URLS.getCustomerProposal,
                            data: $.param(model),
                            responseType: 'arraybuffer'
                    } ).then(function (response) {
                        resolve(response);                      
                    }).catch(function(error){
                        console.error(error);
                        reject(error);
                    });
                    }

                    function errorCsrf(error){
                        reject( error);

                    }
                } );
            }




        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'proposalsProposalSrv', proposalsProposalSrv );

})();
(function () {
    'use strict';

    proposalsPropTracingSrv.$inject = ['$filter', 'URLS', '$q', '$http', 'csrfSrv', '$sessionStorage'];
    function proposalsPropTracingSrv($filter, URLS, $q, $http, csrfSrv, $sessionStorage /*,ErrorMessagesSrv*/) {

        var issuers;

        function getDescripcion(issuer) {

            for (var pos = 0; pos < issuers.length; pos++) {
                if (issuers[pos].name.trim() === issuer.trim()) {
                    return issuers[pos].description;
                }
            }

            return '';
        }

        function doJsonData(_array, montoTotal) {
            var json = [];
            var jsonSubGroup = {};
            var jsonBase = {};

            angular.forEach(_array, function (value, key) {

                if (key === 'Fondo de Fondos') {
                    angular.forEach(value, function (value2) {
                        angular.forEach(value2, function (value3) {
                            jsonBase = {
                                name: key,
                                subGroups: []
                            };
                            jsonSubGroup = {
                                name: value3.subGroup.name,
                                instruments: []

                            };
                            angular.forEach(value3.productLimits, function (instrument) {
                                var jsonInstrument = {
                                    percentage: instrument.percentage,
                                    issuer: instrument.product.issuer.name,
                                    amount: montoTotal * (instrument.percentage) / 100,
                                    description: getDescripcion(instrument.product.issuer.name)
                                };

                                jsonSubGroup.instruments.push(jsonInstrument);
                            });
                            jsonBase.subGroups.push(jsonSubGroup);
                            json.push(jsonBase);
                        });
                    });

                } else if (key === 'Renta Variable') {
                    angular.forEach(value, function (value2) {
                        angular.forEach(value2, function (value3) {
                            jsonBase = {
                                name: key,
                                subGroups: []
                            };
                            jsonSubGroup = {
                                name: unescape(encodeURIComponent(value3.subGroup.name)),
                                instruments: []

                            };
                            angular.forEach(value3.productLimits, function (instrument) {
                                var jsonInstrument = {
                                    percentage: instrument.percentage,
                                    issuer: instrument.product.issuer.name,
                                    amount: montoTotal * (instrument.percentage) / 100,
                                    description: getDescripcion(instrument.product.issuer.name)
                                };

                                jsonSubGroup.instruments.push(jsonInstrument);
                            });
                            jsonBase.subGroups.push(jsonSubGroup);
                            json.push(jsonBase);
                        });
                    });

                } else if (key === 'Fibras') {
                    angular.forEach(value, function (value2) {
                        angular.forEach(value2, function (value3) {
                            jsonBase = {
                                name: key,
                                subGroups: []
                            };
                            jsonSubGroup = {
                                name: value3.subGroup.name,
                                instruments: []

                            };
                            angular.forEach(value3.productLimits, function (instrument) {
                                var jsonInstrument = {
                                    percentage: instrument.percentage,
                                    issuer: instrument.product.issuer.name,
                                    amount: montoTotal * (instrument.percentage) / 100,
                                    description: getDescripcion(instrument.product.issuer.name)
                                };

                                jsonSubGroup.instruments.push(jsonInstrument);
                            });
                            jsonBase.subGroups.push(jsonSubGroup);
                            json.push(jsonBase);
                        });
                    });

                } else if (key === 'Riesgo Cambiario') {
                    angular.forEach(value, function (value2) {
                        angular.forEach(value2, function (value3) {
                            jsonBase = {
                                name: key,
                                subGroups: []
                            };
                            jsonSubGroup = {
                                name: value3.subGroup.name,
                                instruments: []

                            };
                            angular.forEach(value3.productLimits, function (instrument) {
                                var jsonInstrument = {
                                    percentage: instrument.percentage,
                                    issuer: instrument.product.issuer.name,
                                    amount: montoTotal * (instrument.percentage) / 100,
                                    description: getDescripcion(instrument.product.issuer.name)
                                };

                                jsonSubGroup.instruments.push(jsonInstrument);
                            });
                            jsonBase.subGroups.push(jsonSubGroup);
                            json.push(jsonBase);
                        });
                    });


                } else if (key === 'Deuda') {
                    angular.forEach(value, function (value2) {
                        angular.forEach(value2, function (value3) {
                            jsonBase = {
                                name: key,
                                subGroups: []
                            };
                            jsonSubGroup = {
                                name: value3.subGroup.name,
                                instruments: []

                            };

                            angular.forEach(value3.productLimits, function (instrument) {
                                var jsonInstrument = {
                                    percentage: instrument.percentage,
                                    issuer: instrument.product.issuer.name,
                                    amount: montoTotal * (instrument.percentage) / 100,
                                    description: getDescripcion(instrument.product.issuer.name)
                                };

                                jsonSubGroup.instruments.push(jsonInstrument);
                            });
                            jsonBase.subGroups.push(jsonSubGroup);
                            json.push(jsonBase);
                        });

                    });


                }

            });

            return json;
        }

        //var options = ['Sociedades de Inversión', 'Reportos', 'Mercado de dinero', 'Acciones'];
        function doJson(_array) {
            var json = [];
            angular.forEach(_array, function (value, key) {
                angular.forEach(value, function (value2) {
                    if (key === 'invest') {
                        json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'descripcion': value2.description, 'instrumento': 'SOCIEDADES DE INVERSION' });
                    } else if (key === 'actions') {
                        json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'ACCIONES' });
                    } else if (key === 'money') {
                        json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'MERCADO DE DINERO' });
                    } else if (key === 'reportos') {
                        json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'REPORTOS' });
                    }
                });
            });
            return json;
        }

        var obj = {

            /**
             * Post proposal tracing document
             * @param {object} info - Array with all information to post inside proposal
             * @return  {object}
             */

            doProposalTracing: function (info) {
                
                issuers = info.issuers;

                return $q(function (resolve, reject) {
                    var user = JSON.parse($sessionStorage.user);
                    var productsSent = [];
                    
                    if (info.products) {
                        angular.forEach(info.products, function (value) {
                            if (value) {
                                angular.forEach(value.subproducts, function (subproducts, id) {
                                    productsSent.push({ "product": id, "value": 1 });
                                });
                            }
                        });
                    }
                    
                    var dataSent;
                    var dataSentPortafolio=[];
                    
                    if(info.brief.form.portfolio[0].type==='model'){
                        dataSent=doJsonData(info.brief.form.portfolio[0]?info.brief.form.portfolio[0].strategyItems:[],info.brief.form.portfolio[0].value);				
                    }else if(info.brief.form.portfolio[0].type==='manual'){
                        dataSent = doJson(info.brief.form.portfolio[0] ? info.brief.form.portfolio[0].invest : []);				
                    }

                    if(info.brief.form.portfolio[1] && info.brief.form.portfolio[1].type === 'model'){
                        dataSentPortafolio=doJsonData(info.brief.form.portfolio[1] ? info.brief.form.portfolio[1].strategyItems : [] ,info.brief.form.portfolio[1].value);
                    }else if(info.brief.form.portfolio[1] && info.brief.form.portfolio[1].type === 'manual'){
                        dataSentPortafolio = doJson(info.brief.form.portfolio[1] ? info.brief.form.portfolio[1].invest : []);
                    }

                    csrfSrv.csrfValidate()
                        .then(successCsrf)
                        .catch(errorCsrf);

                    function successCsrf() {
                        var sendModel = {
                            language: 'SPA',
                            data:dataSent.length === 0 ? 0:window.btoa(unescape(encodeURIComponent(JSON.stringify(dataSent)))),
                            contract: info.tracing.form.scontract.numContrato ? info.tracing.form.scontract.numContrato : '',
                            confidential: info.tracing.form.confidential && info.tracing.form.confidential === true ? 1 : 0,
                            startDate:info.tracing.form.scontract.origen=== 'CB' ? ($filter('date')(info.tracing.form.tir.startDate._d, 'ddMMyyyy')):'',
                            endDate:info.tracing.form.scontract.origen=== 'CB' ? ($filter('date')(info.tracing.form.tir.endDate._d, 'ddMMyyyy')):'',
                            valorPortafolio: info.brief.form.portfolio[0] ? info.brief.form.portfolio[0].value : '0',
                            name: user.name ? user.name : '',
                            mail: user.mail ? user.mail : '',
                            ext: info.adviser.form.adviser_ext ? info.adviser.form.adviser_ext : '0',
                            mobile: info.adviser.form.adviser_mobile ? info.adviser.form.adviser_mobile : '0',
                            phone: info.adviser.form.adviser_phone ? info.adviser.form.adviser_phone : '0',
                            clientType: info.tracing.form.person_type && info.tracing.form.person_type === true ? 1 : 0,
                            serviceType: info.tracing.form.service_type && info.tracing.form.service_type === true ? 1 : 0,
                            comments: info.tracing.form.comment_tracing ? info.tracing.form.comment_tracing : '',
                            commentsProposal: info.brief.form.portfolio[0].comment ? info.brief.form.portfolio[0].comment : '',
                            source: info.tracing.form.scontract.origen ? info.tracing.form.scontract.origen : '',
                            clientName: info.tracing.form.scontract.nombreCliente ? info.tracing.form.scontract.nombreCliente : '',
                            products: productsSent.length === 0 ? 0 : window.btoa(unescape(encodeURIComponent(JSON.stringify(productsSent)))),
                            plusvalia: info.tracing.form.capital_gain && info.tracing.form.capital_gain === true ? '1' : '0',
                            portfolio:(dataSentPortafolio && dataSentPortafolio.length === 0) ? 0:window.btoa(unescape(encodeURIComponent(JSON.stringify(dataSentPortafolio)))),
                            valorPortafolio2: info.brief.form.portfolio[1] ? info.brief.form.portfolio[1].value : '0',
                            comments2: info.brief.form.portfolio[1] ? info.brief.form.portfolio[1].comment : '',
                            idEmployee: user.employeeID ? user.employeeID : 0,
                            portfolioType1: info.brief.form.portfolio[0] && info.brief.form.portfolio[0].type === 'manual' ? 1 : 2,
                            portfolioType2: info.brief.form.portfolio[1] && info.brief.form.portfolio[1].type && info.brief.form.portfolio[1].type === 'manual' ? 1 : 2,
                            createEnvironment: true,
                            createForecast: true
                        };
                        $http({
                            method: 'POST',
                            url: URLS.getCustomerTrackingAndProposal,
                            data: $.param(sendModel),
                            responseType: 'arraybuffer'
                        }).then(function (response) {
                            resolve(response);
                        }).catch(function (error) {
                            reject(error);
                        });
                        /*.then(function (response) {
                            if (response.data.status === 1) {
                                resolve({ success: true, data: response.data.messages[0].description });
                            }else {
                                resolve({ success: false, data: response.data.messages[0].description });
                            }
                        }).catch(function (error) {
                            ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                            reject({ error: error.data });
                        });*/
                    }

                    function errorCsrf(error) {
                        //reject( { success: false } );
                        reject(error);
                    }

                });
            },


            getCurrentPortfolio: function (_employeeID, _contract, _sr) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCurrentPortfolio + _employeeID + '/' + _contract + '/' + _sr,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {

                        if (!!response.data.status) {
                            resolve(response.data.result);
                        } else {
                            reject({ success: false });
                        }

                    }, function error() {

                        reject({ success: false });

                    });
                });
            }
        };

        return obj;

    }

    angular
        .module('actinver.controllers')
        .service('proposalsPropTracingSrv', proposalsPropTracingSrv);

})();

( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){
        var tpl = '/app/advisers/proposals';

        $stateProvider
            .state('proposals', {
                templateUrl: tpl + '/proposals.html',
                url: '/propuestas',
                parent: 'app',
                ncyBreadcrumb: {
                    label: 'Propuestas',
                    parent: 'app.dashboard'
                }//,redirectTo: 'proposals.proposal'
            })

            .state('proposals.proposal', {
                templateUrl: tpl + '/views/proposal/proposal.html',
                url: '/propuesta',
                ncyBreadcrumb: {
                    label: 'Propuesta'
            },
            controller: 'proposalCtrl',
            controllerAs: 'proposal'
            })

            .state('proposals.tracing', {
                templateUrl: tpl + '/views/tracing/tracing.html',
                url: '/seguimiento',
                ncyBreadcrumb: {
                    label: 'Seguimiento'
                },
                controller: 'tracingCtrl',
                controllerAs: 'tracing'
            })

            .state('proposals.proposal-tracing', {
                templateUrl: tpl + '/views/proposal-tracing/proposal-tracing.html',
                url: '/propuesta-seguimiento',
                ncyBreadcrumb: {
                    label: 'Propuesta Seguimiento'
                },
                controller: 'propTracingCtrl',
                controllerAs: 'propTracing'
            })

            .state('proposals.tracing-client', {
                templateUrl: tpl + '/views/tracing-client.html',
                url: '/seguimiento-cliente-unico',
                ncyBreadcrumb: {
                    label: 'Seguimiento por cliente único'
                },
                controller: 'tracingClientCtrl',
                controllerAs: 'ctrl'
            })

            .state('proposals.activity', {
                templateUrl: tpl + '/views/activity.html',
                url: '/registro-actividades',
                ncyBreadcrumb: {
                    label: 'Registro de actividades'
                },
                controller: 'activityCtrl',
                controllerAs: 'ctrl'
            });

    }

    angular
        .module( 'actinver' )
        .config( routerProviderConfig );

})();

(function () {
    'use strict';

    proposalsTracingSrv.$inject = ['URLS', '$q', '$http', 'userConfig', '$filter', '$sessionStorage', 'csrfSrv'];
    function proposalsTracingSrv(URLS, $q, $http, userConfig, $filter, $sessionStorage, csrfSrv) {

        var obj = {

            /**
             * Get contract information
             * @return {object}
             */
            getContractInfo: function (contract, bankingArea) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getContractInfo + contract + '/' + bankingArea,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve({ success: true, data: response.data.result, message: response.data.outCommonHeader.result.messages[0].responseMessage });
                        } else {
                            resolve({ success: false, data: [], message: response.data.outCommonHeader.result.messages[0].responseMessage });
                        }

                    }, function error() {
                        reject({ success: false, data: [], message: 'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk' });
                    });
                });
            },

            /**
             * Post tracing document
             * @param {object} info - Array with all information to post inside proposal
             * @return  {object}
             */
            doTracing: function (info) {
                var products = [];
                var y = {};
                for (var x in info.products) {
                    for (y in info.products[x].subproducts) {
                        var z = {
                            product: y,
                            value: 1
                        };
                        products.push(z);
                    }
                }
                var user = JSON.parse($sessionStorage.user);

                var parametros = {
                    language: 'SPA',
                    contract: (info.scontract.numContrato).toString(),
                    name: user.name,
                    mail: user.mail,
                    ext: info.adviser_ext,
                    confidential: info.confidential && info.confidential === true ? 1 : 0,
                    startDate:info.scontract.origen === 'CB' ?($filter('date')(info.tir.startDate._d, 'ddMMyyyy')): '',
                    endDate: info.scontract.origen === 'CB' ? ($filter('date')(info.tir.endDate._d, 'ddMMyyyy')): '',
                    mobile: info.adviser_mobile ? info.adviser_mobile : 0,
                    phone: info.adviser_phone ? info.adviser_phone : 0,
                    clientType: info.person_type && info.person_type === true ? 1 : 0,
                    serviceType: info.service_type && info.service_type === true ? 1 : 0,
                    comments: info.comment_tracing,
                    source: info.scontract.origen ? info.scontract.origen : '',
                    clientName: info.scontract.nombreCliente,
                    startDate2: info.tir2 ? ($filter('date')(info.tir2.startDate._d, 'ddMMyyyy')) : '00000000',
                    endDate2: info.tir2 ? ($filter('date')(info.tir2.endDate._d, 'ddMMyyyy')) : '00000000',
                    products: products.length === 0 ? 0 : window.btoa(JSON.stringify(products)),
                    plusvalia: info.capital_gain && info.capital_gain === true ? 1 : 0,
                    idEmployee: user.employeeID,
                    createEnvironment: true,
                    createForecast: true
                };

                return $q(function (resolve, reject) {
                    csrfSrv.csrfValidate()
                        .then(successCsrf)
                        .catch(errorCsrf);

                    function successCsrf() {

                        $http({
                            method: 'POST',
                            url: URLS.getCustomerTracking,
                            data: $.param(parametros),
                            responseType: 'arraybuffer'
                        }).then(function success(response) {
                            resolve(response);
                        }, function error(error) {
                            reject(error);
                        });

                    }

                    function errorCsrf(error) {
                        //reject( { success: false } );
                        reject(error);
                    }
                });

            }
        };

        return obj;

    }

    angular
        .module('actinver.controllers')
        .service('proposalsTracingSrv', proposalsTracingSrv);

})();
( function(){
    "use strict";

    function prospectsCtrl( /*prospectSrv*/ ){
        //var vm = this;

        function setup(){
            getCatalogSearch();
        }

        function getCatalogSearch(){
            /*prospectSrv.getCatalogSearch().then(function( _res ){
                vm.options = _res;
            });*/
        }

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'prospectsCtrl', prospectsCtrl );

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('prospects', {
                templateUrl: '/app/advisers/prospects/prospects.html',
                url: '/prospects',
                controller: 'prospectsCtrl',
                controllerAs: 'prospect',
                redirectTo: 'prospects.myProfile',
                ncyBreadcrumb: {
                  label: 'Prospectos',
                  parent: 'app.dashboard'
                },
                parent: 'app',
            })


            .state('prospects.myProfile', {
                templateUrl: '/app/advisers/prospects/my-profile/my-profile.html',
                url: '/myProfile',
                controller: 'prospectsProfileCtrl',
                controllerAs: 'myProfile',
                ncyBreadcrumb: {
                    label: 'Mi perfil',
                },
            })

            .state('prospects.id', {
                templateUrl: '/app/advisers/prospects/detail/detail-prospect.html',
                url: '/myProfile/{id:int}',
                controller: 'prospectsDetailCtrl',
                controllerAs: 'detail',
                ncyBreadcrumb: {
                    label: 'Datos del prospecto',
                },
            })

            .state('prospects.reactivate', {
                templateUrl: '/app/advisers/prospects/reactivate/reactivate.html',
                url: '/myProfile/reactivate',
                controller:'prospectsReactivateCtrl',
                controllerAs:'reactivate',
                ncyBreadcrumb: {
                    label: 'Reactivar',
                },
                params:{
                    model:null
                },
            })


            .state('prospects.team', {
                templateUrl: '/app/advisers/prospects/team/team.html',
                url: '/team',
                controller: 'prospectsTeamCtrl',
                controllerAs: 'admin',
                ncyBreadcrumb: {
                    label: 'Mi equipo',
                },
            })

            .state('prospects.report', {
                templateUrl: '/app/advisers/prospects/report/report.html',
                url: '/report',
                controller: 'reportOppCtrl',
                controllerAs: 'rep',
                ncyBreadcrumb: {
                    label: 'Reportes',
                },
            })

            .state('prospects.team.idTeam', {
                templateUrl: '/app/advisers/prospects/my-profile/my-profile.html',
                url: '/adviser/:id',
                controller: 'prospectsProfileCtrl',
                controllerAs: 'myProfile',
                ncyBreadcrumb: {
                    label: 'Perfil',
                },
            });


    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

(function () {
    "use strict";

    prospectSrv.$inject = ['URLS', '$q', '$http', '$filter', 'FileSaver', 'ErrorMessagesSrv', 'csrfSrv', 'userConfig'];
    function prospectSrv(URLS, $q, $http, $filter, FileSaver, ErrorMessagesSrv, csrfSrv, userConfig) {

        var userID = userConfig.user.employeeID;
        /**
         *  prospect service
         */
        function Prospects() { }

        Prospects.prototype.nextStage = function (_model) {

            return $q(function (resolve) {
                $http({
                    method: 'POST',
                    url: URLS.nextStage,
                    data: $.param(_model),
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status) {
                        resolve();
                    }
                });
            });
        };

        Prospects.prototype.downloadPDF = function () {
            return $q(function (resolve, reject) {
                $http.post(
                    URLS.downloadPDF,
                    {},
                    { responseType: "arraybuffer" }
                ).then(
                    function (_response) {
                        var type = _response.headers('Content-Type');
                        var blob = new Blob([_response.data], { type: type });
                        FileSaver.saveAs(blob, 'bitacora_');
                        resolve();
                    }, function (_error) {
                        reject(_error);
                    }
                    );
            });
        };

        Prospects.prototype.getDetailProspect = function (_id, _band) {
            var newUrl = _band ? (_id + '/' + _band) : _id;
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getDetailProspect + newUrl,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status) {
                        response.data.result.stage = {};
                        response.data.result.stage.idStage = _band;
                        resolve(response.data.result);
                    }
                });
            });
        };
        Prospects.prototype.getInfoClient = function(model){
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getClientInfo,
                    params: {            
                        typeQuery: model.type,                                    
                        language : 'SPA',                        
                        titularFlag: true,
                        bankingArea : model.bankingArea,
                        contractNumber : model.contractNumber,
                        clientNumber :  model.clientNumber
                    }
                }).then(function success( response ) {
                    var _response;
                    var _msg = '';
                    if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outClientOrContractClientInfoQuery.client;                        
                        _msg = response.data.outCommonHeader.result.messages[0].responseMessage;
                        resolve({ success: angular.isArray(_response) && _response.length > 0, data: _response, msg: _msg });
                    } else {                        
                        _msg = response.data.outCommonHeader.result.messages[0].responseMessage;
                        resolve({ success: false, data: [], msg: _msg });
                    }

                }, function error(){
                    reject( {success: false, data:[], msg:'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk'} );
                });
            });
        };

        Prospects.prototype.getStages = function () {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getStages,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    resolve(response.data.result);
                });
            });
        };

        Prospects.prototype.getListByEmployee = function (_id) {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getListOpportunity + _id,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    resolve(response.data.result);
                });
            });
        };

        Prospects.prototype.getStageProspect = function (_id , _idProspect) {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getListByEmployee + _id,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    var listProspect = response.data.result.prospects;
                    var detailProspect = {};
                    listProspect.forEach(function(element) {
                            if (element.idProspect === _idProspect){
                                detailProspect = element;
                            }              
                    }, this);

                    resolve(detailProspect);
                });
            });
        };   

        Prospects.prototype.getOpportunityById = function (idOpportunity) {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getOpportunityById + idOpportunity,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    resolve(response.data.result);
                });
            });
        };

        Prospects.prototype.updateContacted = function (_id) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.updateContacted,
                    params: {
                        idOpportunity : _id,
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.getCatalogSearch = function () {
            return $q(function (resolve) {

                $http({
                    method: 'GET',
                    url: URLS.getCatalogSearch,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    resolve(response.data);
                });
            });
        };

        Prospects.prototype.getTableProspects = function (_item) {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getTableProspects + _item,
                }).then(function (response) {
                    resolve(response.data.results);
                });
            });
        };

        Prospects.prototype.prospecsPT = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.prospecsPT,
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outTelephoneTypeCatalog);
                    }
                    else {
                        reject(true);
                    }
                });
            });
        };

        Prospects.prototype.getProspectTPC = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getProspectTPC,
                }).then(function (response) {

                    if (response.data.status === 1) {
                        resolve(response.data.result);
                    }
                    else {
                        reject(null);
                    }
                });
            });
        };

        Prospects.prototype.getProspectProfile = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getProspectProfile,
                }).then(function (response) {
                    if (response.data.length > 0) {
                        resolve(response.data);
                    }
                    else {
                        reject(null);
                    }
                });
            });
        };

        Prospects.prototype.getPrincipalgraphics = function (_type1, _type2, _userID) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getProsGraphics  + _type1 + '/' + _type2 + '/' + _userID,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data.payload);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.getProsReports = function (_date, _type, _userID) {
            var newDate = $filter('date')(_date, 'MM-yyyy');
            var type = _type === 'mes' ? 0 : 1;
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getProsReports + newDate + '/' + type + '/' + _userID,
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data.payload);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.getReportOpportunity = function ( _userID, _date) { 
            var date =  $filter('date')( _date, 'MM/yyyy');         
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getOpportunityReport + _userID +'/'+ date,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.getReportOpportunityDetail = function ( _userID, _date) {
            var date =  $filter('date')( _date, 'MM/yyyy');           
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getReportOpportunityDetail + _userID +'/'+ date,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.getReportOpportunityDetailFC = function ( _idFC, _date) {
            var date =  $filter('date')( _date, 'MM/yyyy');           
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getReportOpportunityDetailFC + _idFC +'/'+ date,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        Prospects.prototype.saveActivity = function (_activity) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate().
                    then(successCsrf).
                    catch(errorCsrf);
                function successCsrf() {

                    $http({
                        method: 'POST',
                        url: URLS.saveActivity,
                        data: $.param(_activity)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve(response.data.payload);
                        }
                        else {
                            reject(false);
                        }
                    }).catch(function (error) {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                        reject({ error: error.data });
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Prospects.prototype.updateOpportunity = function (_opportunity, _IDOpportunity) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate().
                    then(successCsrf).
                    catch(errorCsrf);

                var comment='';    
                if(_opportunity.stage.idStage === 8){
                    comment = 'Cambio a Prospecto';
                }else if(_opportunity.stage.idStage === 9) {
                    comment = 'Cambio a Apertura';
                }else if(_opportunity.stage.idStage === 10){
                     comment = _opportunity.lowMotive.text;
                }

                var sendModel = {
                    language: 'SPA',
                    idOpportunity: _IDOpportunity,
                    nameOpportunity: _opportunity.clientName,
                    phone: _opportunity.phone,
                    mail: _opportunity.email,
                    idStage: _opportunity.stage.idStage,
                    segment: _opportunity.segment.text,
                    comment: comment 

                };

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.updateOpportunity,
                        data: $.param(sendModel)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        }else {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function (error) {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                        reject({ error: error.data });
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Prospects.prototype.removeActivity = function (_model) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate().
                    then(successCsrf).
                    catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.deleteActivity,
                        data: $.param( _model)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve(response.data.payload);
                        }
                        else {
                            reject(false);
                        }
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Prospects.prototype.updateActivity = function (_model) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate().
                    then(successCsrf).
                    catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.updateActivity,
                        data: $.param( _model)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve(response.data.payload);
                        }
                        else {
                            reject(false);
                        }
                    }).catch(function (error) {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                        reject({ error: error.data });
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        }; 

        Prospects.prototype.completeActivity = function (_id) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.closeActivity,
                    params: {
                        idActivityStage : _id,
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status === 1) {
                        resolve(response.data.payload);
                    }
                    else {
                        reject(false);
                    }
                });
            });
        };

        function generateOptions(_total, isDiferent) {
            var options = [];
            var total = 0;
            var remaining = 0;

            R.mapObjIndexed(function (_val, id) {
                if (isDiferent) {
                    options.push(_val);
                    total += _val;
                    if (id === 'clients') {
                        remaining += _val;
                    }
                }
                else {
                    if (id === "value") {
                        options.push(_val);
                    }
                }
            }, _total);

            return {
                "options": options,
                "percentage": isDiferent ? total : (_total.value + _total.quantity),
                "remaining": remaining
            };
        }

        Prospects.prototype.generateDataChart = function (_data, isDiferent) {
            var options = generateOptions(_data, isDiferent);

            var config = {
                chart: {
                    data: options.options,
                    percentage: options.percentage,
                    cutoutPercentage: 70,
                    colors: [
                        "#00bebe",
                        "#f5f047"
                    ],
                },
                remaining: options.remaining,
            };

            if (isDiferent) {
                config.chart.pieceLabel = {
                    fontFamily: "Proxima Semibold",
                    mode: "value",
                    fontSize: 10,
                    fontStyle: 'bold',
                    fontColor: '#0f3f88',
                    arc: true,
                };
            }

            return config;
        };

        return new Prospects();
    }

    angular.module('actinver.services')
        .service('prospectSrv', prospectSrv);
})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider


            .state('simulators', {
                templateUrl: '/app/advisers/simulators/simulators.html',
                url: '/simulators',
                parent: 'app',
                ncyBreadcrumb: {
                  label: 'Simuladores',
                  parent: 'app.dashboard'
                },
                redirectTo: 'simulators.performance',
            })

            .state('simulators.performance', {
                templateUrl: '/app/advisers/simulators/performance/performance.html',
                url: '/performance',
                controller: 'performanceCtrl',
                controllerAs: 'per',
                ncyBreadcrumb: {
                  label: 'Rendimiento histórico',
                },
            })

            .state('simulators.details', {
                templateUrl: '/app/advisers/simulators/performance/details.html',
                url: '/details',
                params:{
                    model:null
                },
                controller: 'detailPerformCtrl',
                controllerAs: 'detail',
                ncyBreadcrumb: {
                  label: 'Rendimiento',
                },
            })


            .state('simulators.credit', {
                templateUrl: '/app/advisers/simulators/credit/credit.html',
                controller: 'creditCtrl',
                controllerAs: 'credit',
                url: '/credit',
                ncyBreadcrumb: {
                  label: 'Crédito',
                },
            });



    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

(function () {
    'use strict';

    accountCtrl.$inject = ['$uibModal', '$state', 'pResumeSrv', '$scope', '$q', '$sessionStorage', 'CommonModalsSrv', 'accountSrv', 'accountModalSrv', '$rootScope', 'ErrorMessage', 'accountContractModalSrv'];
    function accountCtrl($uibModal, $state, pResumeSrv, $scope, $q, $sessionStorage, CommonModalsSrv, accountSrv, accountModalSrv, $rootScope, ErrorMessage, accountContractModalSrv) {
        var vm = this;
        vm.type_contract = {
            id: 0
        };

        $scope.operations.show_instructions = true;

        // Search types
        vm.search_types = accountSrv.search_types;
        vm.contract_type = accountSrv.type_contract;
        vm.person_type = accountSrv.type_person;

        // Selected type
        /*vm.selected_type = {};*/

        // Contract search
        vm.contracts_search = {
            finish: false,
            sent: false
        };

        vm.portfolioTable = [
            {"topic": "totalSD", "name": "Fondos de Deuda", "nom": "SD", "abbr": "FD", "totalDebtInstruments": 0, "percent": 0, "color": "#00bebe"},
            {"topic": "totalSI", "name": "Fondos de Renta Variable", "nom": "SI", "abbr": "RV", "totalPledgedValues": 0, "percent": 0, "color": "#fa596d"},
            {"topic": "totalSC", "name": "Fondos de Cobertura", "nom": "SC", "abbr": "FC", "notDefined2": 0, "percent": 0, "color": "#f9be00"},
            {"topic": "totalMD", "name": "Mercado de Dinero", "nom": "MD", "abbr": "MD", "notDefined": 0, "percent": 0, "color": "#7ed321"},
            {"topic": "totalMC", "name": "Mercado de Capitales", "nom": "MC", "abbr": "MC", "totalCapitalInstruments": 0, "percent": 0, "color": "#e21599"},
            {"topic": "totalSettlementOperations", "name": "Pendientes por Liquidar", "nom": "OL", "abbr": "OL", "totalSettlementOperations": 0, "percent": 0, "color": "#ccc"},
            {"topic": "totalBlockedBalance", "name": "Efectivo en Tránsito", "nom": "ET", "abbr": "ET", "totalBlockedBalance": 0, "percent": 0, "color": "#B39DDB"},
            {"topic": "totalIP", "name": "CEDES y Pagarés", "nom": "IP", "abbr": "IP", "totalIP": 0, "percent": 0, "color": "#fa596d"},
            {"topic": "totalVG", "name": "Valores en Garantía", "nom": "VG", "abbr": "VG", "totalVG": 0, "percent": 0, "color": "#00bebe"},
            {"topic": "totalCash", "name": "Efectivo", "nom": "EF", "abbr": "EF", "totalCash": 0, "percent": 0, "color": "#3c86f6"},
        ];

        initChart();

        function initChart () {
            if( localStorage.getItem('__chart') !== ''){
                vm.chart_info = JSON.parse(localStorage.getItem('__chart'));
                if($sessionStorage.sclient){
                    getClientContracts($sessionStorage.sclient.data.clientNumber, $sessionStorage.sclient.data, $sessionStorage.sclient.contracts_list);
                }
            }
        }

        vm.clean = function () {
            vm.client = '';
            vm.person = {};
        };

        vm.showDetail = function (contract) {
            var model = {
                contractNumber: contract.contractNumber,
                clientNumber:  $scope.operations.sclient.data.clientNumber,
                bankingArea: contract.bankingArea
            };

            accountSrv.getContractInfoDetail(model).then(function (data) {
                $uibModal.open({
                    templateUrl: '/app/operations/account/detail/detail-contract.html',
                    controller: 'detailContractCtrl',
                    controllerAs: 'detailContract',
                    windowClass: 'table-detail',
                    resolve: {
                        data: function () {
                            return data;
                        }
                    }
                });
            }).catch(function () {
                CommonModalsSrv.error("No se pudo consultar el detalle del contrato");
            });
        };

        // Available colors
        vm.chart_line_colors = accountSrv.displayChart(null).options.colors;

        vm.cleanForm = function () {
            vm.contract = null;
            vm.client = null;
            vm.person = null;
        };

        function sendContract(response) {
            if(response.length === 2){
                accountContractModalSrv.detail({
                    list: response,
                    contract : vm.contract
                }).result.then(function () {
                    getMoney($rootScope.selectedContact.clientNumber);
                });
            }else if(response.length === 1){
                getMoney(response[0].clientNumber);
            }
        }

        function getMoney(_client){
            accountSrv.getContractByAdviser(_client).then(function successCallback(response) {
                if (response.success) {
                    $scope.operations.sclient.contracts_adviser = response.data.contract;
                    getClientContracts(response.data.client[0].clientNumber, response.data.client[0], response.data.contract, 998);
                } else {
                    CommonModalsSrv.error(response.msg);
                }
            }, function errorCallback(error) {
                var message;
                if (error.type === 'not-found') {
                    $scope.operations.showSystemError();
                } else {
                    message = error.info.error.responseMessage ? error.info.error.responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                    CommonModalsSrv.error(message);
                }
                deleteCurrentClient();
            });
        }

        // Submit search form
        vm.submitSearch = function () {
            deleteCurrentClient();
            vm.contracts_search.sent = true;
            var _contractType = vm.type_contract.id || '';

            if (vm.client) {
                accountSrv.getContractByAdviser(vm.client)
                    .then(function successCallback(response) {
                        if (response.success) {
                            $scope.operations.sclient.contracts_adviser = response.data.contract;
                            getClientContracts(vm.client, response.data.client[0], response.data.contract, _contractType);
                        } else {
                            CommonModalsSrv.error(response.msg);
                        }
                    }, function errorCallback(error) {
                        if (error.type === 'not-found') {
                            $scope.operations.showSystemError();
                        } else {
                            CommonModalsSrv.error(ErrorMessage.createError(error.messages));
                        }
                        deleteCurrentClient();
                    });
            } else if (vm.contract) {
                var _list = [];
                //BANCO
                accountSrv.getClientInfo(vm.contract, vm.contract, 999)
                    .then(function successCallback(response) {
                        response.info[0].areaType = 'Banco';
                        _list.push(response.info[0]);
                        accountSrv.getClientInfo(vm.contract, vm.contract, 998)
                            .then(function successCallback(response) {
                                response.info[0].areaType = 'Casa';
                                _list.push(response.info[0]);
                                sendContract(_list);
                            }, function errorCallback() {
                                sendContract(_list);
                                //CommonModalsSrv.error(error.info.error.responseMessage);
                                //deleteCurrentClient();
                            });
                    }, function errorCallback(error) {
                        //CASA
                        accountSrv.getClientInfo(vm.contract, vm.contract, 998)
                            .then(function successCallback(response) {
                                response.info[0].areaType = 'Casa';
                                _list.push(response.info[0]);
                                sendContract(_list);
                            }, function errorCallback(_error) {
                                CommonModalsSrv.error(error.info.error.responseMessage);
                                deleteCurrentClient();
                            });
                    });

            } else if (vm.person) {
                var message;
                if (vm.person.name ) {
                    var search = (vm.person.name ? vm.person.name.toUpperCase() : "");
                    accountModalSrv.detail({
                        list: [],
                        wordToSearch: search,
                        personType: '1'
                    }).result.then(function () {
                        accountSrv.getContractByAdviser($rootScope.selectedClient.uniqueClientNumber)
                            .then(function successCallback(response) {
                                if (response.success) {
                                    $scope.operations.sclient.contracts_adviser = response.data.contract;
                                    getClientContracts(response.data.client[0].clientNumber, response.data.client[0], response.data.contract, _contractType);
                                } else {
                                    CommonModalsSrv.error(response.msg);
                                }
                            }, function errorCallback(error) {
                                var message;
                                if (error.type === 'not-found') {
                                    $scope.operations.showSystemError();
                                } else {
                                    message = error.info.error.responseMessage ? error.info.error.responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                    CommonModalsSrv.error(message);
                                }
                                deleteCurrentClient();
                            });
                        //getClientContracts( $rootScope.selectedClient.clientNumber, $rootScope.selectedClient, '' );
                    });

                } else {
                    accountSrv.getClientName(vm.person)
                        .then(function successCallback(response) {
                            if (response.info[0]) {
                                accountModalSrv.detail({
                                    list: response.info,
                                    wordToSearch: '',
                                    personType: '2'
                                }).result.then(function () {
                                    accountSrv.getContractByAdviser($rootScope.selectedClient.clientNumber)
                                        .then(function successCallback(response) {
                                            if (response.success) {
                                                $scope.operations.sclient.contracts_adviser = response.data.contract;
                                                getClientContracts(response.data.client[0].clientNumber, response.data.client[0], response.data.contract, _contractType);
                                            } else {
                                                CommonModalsSrv.error(response.msg);
                                            }
                                        }, function errorCallback(error) {
                                            var message;
                                            if (error.type === 'not-found') {
                                                $scope.operations.showSystemError();
                                            } else {
                                                message = error.info.error.responseMessage ? error.info.error.responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                                CommonModalsSrv.error(message);
                                            }
                                            deleteCurrentClient();
                                        });
                                    //getClientContracts( $rootScope.selectedClient.clientNumber, $rootScope.selectedClient, '' );
                                });
                            } else {
                                message = 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                CommonModalsSrv.error(message);
                                deleteCurrentClient();
                            }
                        }, function errorCallback(error) {
                            if (error.type === 'not-found') {
                                $scope.operations.showSystemError();
                            } else {
                                message = error.info.messages ? error.info.messages[0].responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                CommonModalsSrv.error(message);
                            }
                            deleteCurrentClient();
                        });

                }
            }
        };

        // Delete current selected user
        function deleteCurrentClient() {
            vm.contracts_search = {
                finish: false,
                sent: false
            };
            $scope.operations.sclient = {};
            delete $sessionStorage.sclient;
        }

        vm.contractSelection = function(_contract, _type) {
            var _model = {
                bankingArea: _contract.bankingArea,
                contractNumber: _contract.contractNumber,
                clientNumber:  $scope.operations.sclient.data.clientNumber
            }, marketType = _type; 
            _contract.isDinn = false;
            
            if(_contract.bankingArea === '999' && _type === 'MC')
                marketType = 'CM';
            
            accountSrv.getContractInfoDetail(_model).then(function (_res) {
                if(_res.contractType.contractID == '14' && _res.contractSubType.subtype == '02')
                    _contract.isDinn = true;
            }).catch(function () {
                CommonModalsSrv.error("No se pudo obtener el detalle del contrato");
            });
            
            localStorage.setItem('_marketType', JSON.stringify(marketType));
            localStorage.setItem('contractSelected', JSON.stringify(_contract));
            $state.go('investment.funds');
        };
        // Get client contracts information
        function getClientContracts(client, _user, _contracts) {
            pResumeSrv.getContractResume(  client  ).then( function( contracts ) {
                vm.exchange_rates = [];
                vm.portfolio_totals = 0;
                vm.portfolio_totals = contracts.data.result.totalValue;
                var _percent = contracts.data.result.positionHousePercentage;

                angular.forEach( vm.portfolioTable, function ( item, key ) {
                    vm.portfolioTable [ key ].percent = _percent [item.topic];
                } );

                vm.chart_info = {
                    chart:  pResumeSrv.setChartInfo(vm.portfolioTable)
                };

                localStorage.setItem('__chart',JSON.stringify(vm.chart_info));

                var promises = [];
                angular.forEach(contracts.data.result.contract, function ( contract ) {
                    var _bankingArea = contract.bankingArea;
                    if (client === 'nosaldo') {
                        contract = 'nosaldo';
                    } else if (client === 'nosaldo2') {
                        contract = 'nosaldo' + contract.contractNumber;
                    } else {
                        contract = contract.contractNumber;
                    }
                    if (_bankingArea === '998') {
                        promises.push(accountSrv.getContractHistorical(contract));
                    } else {
                        promises.push(accountSrv.getBrokerHistoricalBalanceQuery(contract, 12));
                    }
                });

                return $q.all(promises).then(function (contract) {
                    vm.porfolio = contracts.data.result.contract;
                    var _validContract = [];
                    angular.forEach(contracts.data.result.contract, function (item) {
                        R.forEach(function (value) {
                            if (value.contractNumber === item.contractNumber) {
                                if(item.portfolio !== null){
                                    value.portfolio = item.portfolio;
                                    value.totalBalance = item.portfolio.totalFinal;
                                }
                            }
                        }, _contracts);
                    });

                    angular.forEach(contract, function (item) {
                        if ( item.historical) {
                            _validContract.push(item);
                        }
                    });

                    var _contracts2 = [];
                    var emptyList;
                    vm.contracts_search.finish = true;
                    $scope.operations.sclient.contracts_list = _contracts;
                    $scope.operations.sclient.balance = true;

                    vm.colors_chart = [];
                    R.forEach(function (value) {
                        var indexcolor = 0;
                        R.forEach(function (contract) {
                            if (contract.contractNumber === value.historical.contractNumber) {
                                if (contract.totalBalance) {
                                    value.empty = false;
                                    vm.colors_chart.push(vm.chart_line_colors[indexcolor]);
                                } else {
                                    value.empty = true;

                                }
                            }
                            indexcolor++;
                        }, _contracts);

                        if (!value.empty) {
                            _contracts2.push(value);
                        }
                    }, _validContract);
                    // Set client information
                    emptyList = _contracts2.length === 0 ? true : R.find(function (_val) {
                        return _val.empty;
                    }, _contracts2);
                    if (emptyList) {
                        $scope.operations.sclient.checked_all_contracts = true;
                        $scope.operations.sclient.balance = false;
                    }
                    // ******Once fixed the service "brokerHistoricalBalanceQuery", delete this part****
                    angular.forEach(_contracts2, function (some) {
                        if(some.historical && some.historical.historicalInfo && some.historical.historicalInfo.length >= 1 && some.historical.historicalInfo.length <= 11 ){
                            var lastNumber = some.historical.historicalInfo.length;
                            var lastValue = some.historical.historicalInfo[lastNumber-1];
                            var year = lastValue.paymentPeriod.substring(0,4);
                            var month = lastValue.paymentPeriod.substring(4,6);
                            var newDate = new Date (parseInt(year),parseInt(month-1),parseInt("01"));

                            while(lastNumber < 12){
                                newDate.setMonth( newDate.getMonth() - 1 );
                                lastNumber++;
                                var dateTwo = moment( newDate ).format( 'YYYYMM' );
                                some.historical.historicalInfo.push({paymentPeriod: dateTwo, amount: null});
                            }
                            some.historical.historicalInfo.reverse();
                        }
                    });
                    // **************************** Delete until here ******************************

                    if(_user.personType === "1"){
                        $scope.operations.sclient.data = _user;
                    }else{
                        _user.name = _user.companyName;
                        $scope.operations.sclient.data = _user;
                    }

                    for(var i=0; i< $scope.operations.sclient.contracts_list.length; i++){
                        if($scope.operations.sclient.contracts_list[i].bankingArea === "998"){
                            $scope.operations.sclient.contracts_list[i].companyName = 'Casa';
                        }else{
                            $scope.operations.sclient.contracts_list[i].companyName = 'Banco';
                        }
                    }

                    // Check all contracts balance
                    $scope.operations.sclient.chart = _contracts2;

                    $sessionStorage.sclient = $scope.operations.sclient;

                }).catch(function (error) {
                    CommonModalsSrv.error(ErrorMessage.createError(error.data.messages));
                });

            }, function errorCallback( info ){
                var message;
                if( info.type === 'not-found' ){
                    $scope.operations.showSystemError();
                } else {
                    vm.portfolio_totals = 0;
                    message = info.result ? info.result : 'Se Encontró Un Error Favor De Intentarlo Más Tarde';
                    CommonModalsSrv.error( message );
                }
            } );
        }

    }

    angular
        .module('actinver.controllers')
        .controller('accountCtrl', accountCtrl);

})();

( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){

        $stateProvider

            .state('account', {
                templateUrl: '/app/operations/account/account.html',
                url: '/account',
                controller: 'accountCtrl',
                controllerAs: 'account',
                parent: 'operations',
                ncyBreadcrumb: {
                  label: 'Cuenta',
                }
            });

    }

    angular.module( 'actinver' )
        .config( routerProviderConfig );

})();

( function(){
    'use strict';

    accountSrv.$inject = ['URLS', '$q', '$http', '$filter'];
    function accountSrv( URLS, $q, $http, $filter ){
        var chart_line_colors = ['#517cbd','#f5f047','#3366cc','#dc3912','#ff9900','#109618','#990099','#0099c6','#dd4477','#66aa00','#b82e2e','#316395','#994499','#22aa99','#aaaa11','#6633cc','#e67300','#8b0707','#651067','#329262','#5574a6','#3b3eac','#b77322','#16d620','#b91383','#f4359e','#9c5935','#a9c413','#2a778d','#668d1c','#bea413','#0c5922','#743411'],
            tooltip_set = {'type': 'string', 'role': 'tooltip', 'p': {'html': true}};

        function setTooltipInfo( info ){
            return "<div class='operations-account-tp'><span>" + info.month + "</span><div>" + info.id + ": " + $filter('currency')(info.amount) + "</div></div>";
        }

        function getMonthsYears(){
            var history =[],
                fechaActual = new Date();
            var fechaMes = fechaActual.getMonth() + 1;
            var anio = fechaActual.getFullYear() - 1;

            for (var i = 1; i <= 13; i++) {
                history.push({
                    paymentPeriod: fechaMes < 10 ? anio + '0' + fechaMes : anio + '' + fechaMes,
                    amount: null
                });
                if (fechaMes < 12) {
                    fechaMes++;
                } else {
                    fechaMes = 1;
                    anio = anio + 1;
                }
            }
            return history;
        }

        var obj = {

            /**
             * Search field types
             */

            type_contract : [
                {
                    id: 999,
                    text: 'Banco'
                },
                {
                    id: 998,
                    text: 'Casa'
                }
            ],

            type_person : [
                {
                    text: 'Física'
                },
                {
                    text: 'Moral'
                }
            ],

            /**
             * Search field types
             */
            search_types: [
                {
                    id: 1,
                    text: 'Número de cliente único',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '10'
                    }
                },
                {
                    id: 2,
                    text: 'Número de contrato',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '10'
                    }
                },
                {
                    id: 3,
                    text: 'Nombre de cliente único',
                    typeahead: true,
                    validation: {
                        pattern: '',
                        maxlength: '60'
                    }
                }
            ],

            /**
             * Set chart styles and information
             * @param {object} chart_data - Object with chart setting.
             * @return  {object}
             */
            displayChart: function( chart_data ){

                return {
                    data: chart_data,
                    options: {
                        colors: chart_line_colors,
                        vAxis: {
                            gridlines: {
                                color: '#7fdade'
                            },
                            textStyle : {
                                color: '#333333',
                                fontSize: 10,
                                fontName: 'Proxima Regular'
                            },
                        },
                        hAxis: {
                            textStyle : {
                                color: '#333333',
                                fontSize: 10,
                                fontName: 'Proxima Regular'
                            }
                        },
                        chartArea: {
                            left: 70,
                            right: 20,
                            backgroundColor: {
                                fill: '#f4f8ff',
                            },
                        },
                    }
                };
            },
            /**
             * Get client information
             * @param {string} type - Search type
             * @param {string} search item - Searched client
             * @return  {object}
             */

            getClientName: function( _client){
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getClientName,
                        params: {
                            language : 'SPA',
                            lastName :  _client.lastName ? _client.lastName.toUpperCase() : ' ',
                            surname : _client.surname ? '' : '',
                            name : _client.name ? _client.name.toUpperCase() : ' ',
                            companyName: _client.companyName,
                            personType: _client.name ? 1 : 2,
                            tIN: _client.fiscalIDNumber
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outClientInfoQuery.clientList.client;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },

            getContractByAdviser: function( _clientNumber ){
                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getContractByAdviser + _clientNumber,
                        params: {
                            language : 'SPA',

                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({
                                success: true,
                                data: response.data.result,
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        } else {
                            resolve({
                                success: false,
                                data: [],
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found',
                            data: [],
                            msg: 'Ha ocurrido un error Interno'
                        });
                    });
                });
            },

            getClientInfo: function (type, search, contractType) {
                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getClientInfo,
                        params: {
                            descripcion: search,
                            typeQuery: type,
                            language: 'SPA',
                            titularFlag: true,
                            bankingArea: contractType,
                            contractNumber: type === 1 ? '' : search,
                            clientNumber: type === 1 ? search : ''
                        }
                    }).then(function success(response) {
                        var _response;
                        var _clientId;
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.messages[0].responseCategory !== 'ERROR') {
                            _response = response.data.outClientOrContractClientInfoQuery.client;
                            _clientId = response.data.outClientOrContractClientInfoQuery.client[0].clientNumber;
                            resolve({
                                success: true,
                                info: _response,
                                clientId: _clientId
                            });
                        } else {
                            response.data = {
                                error: {
                                    responseMessage: response.data.outCommonHeader.result.messages[0].responseMessage
                                }
                            };
                            reject({
                                success: false,
                                info: response.data,
                                type: 'empty'
                            });
                        }

                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });

                });

            },

            /**
             * Get current contracts list
             * @param {string} client - Search item
             * @return  {object}
             */
            getContracts: function (client, contractType) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContracts,
                        params:{
                            language: 'SPA',
                            bankingArea : contractType || 999,
                            clientID : client
                        }
                    }).then(function success( response ) {
                       if (typeof response !== 'undefined' && response.data.outContractsBalancesByPortfolioQuery) {
                            resolve( {success: true, contracts: response.data.outContractsBalancesByPortfolioQuery.contractInformation} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });

                });

            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getContractHistorical: function( contract ){

                return $q(function( resolve, reject ){
                    $http({

                        method: 'GET',
                        url: URLS.getContractHistorical,
                        params: {
                            language: 'SPA',
                            contractNumber: '[{"idContrato":"' + contract + '"}]'
                        }
                    }).then(function success( response ){

                        if(response.data.outCommonHeader.result.result === 1){

                            var info = response.data.outBrokerMonthlyBalanceQuery.clients.client[0],
                                empty = true, historicalInfo=[];
                                //generamos los meses para el año
                            historicalInfo = getMonthsYears();                            
                            angular.forEach( info.historicalInfo, function( data ){
                                if( empty && data.amount !== 0 ){
                                    empty = false;
                                }
                                for(var j=0; j<historicalInfo.length;j++){                                    
                                    if(historicalInfo[j].paymentPeriod === data.paymentPeriod){
                                        historicalInfo[j].amount = parseFloat(data.amount);
                                        j = historicalInfo.length;
                                    }
                                }
                            } );
                            info.historicalInfo = historicalInfo;
                            resolve( {success: true, historical: info, empty: empty} );
                        }else{
                            resolve( {success: false, data: response.data.outCommonHeader.result} );
                        }
                    }, function error(){
                        reject( {success: false} );
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getBrokerHistoricalBalanceQuery: function (_contractNumber, _numberPeriods) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getBrokerHistoricalBalanceQuery + '/' + _contractNumber + '/' + _numberPeriods,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {

                            var info = response.data.outBrokerHistoricalBalanceQuery.balanceFound,
                                empty = true, historicalInfo = [], historical={},contractNumbre;

                            historicalInfo = getMonthsYears();

                            angular.forEach(info, function (data) {
                                if (empty && data.contractBalance !== 0) {
                                    empty = false;
                                }
                                for(var j=0; j<historicalInfo.length;j++){                                    
                                    if(historicalInfo[j].paymentPeriod === data.period){
                                        historicalInfo[j].amount = parseFloat(data.contractBalance);
                                        j = historicalInfo.length;
                                    }
                                }                                
                                contractNumbre=data.contractNumber;
                            });
                           
                            historical={contractNumber:contractNumbre,historicalInfo:historicalInfo};
                            resolve({ success: true, historical: historical, empty: empty });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getBankContractBalance: function (_contractNumber ) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.bankPortfolioQuery  + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1 && response.data.outBankPortfolioQuery.bankPortfolio !== null ) {
                            resolve({ success: true, contractNumber :_contractNumber, totalBalance: response.data.outBankPortfolioQuery.bankPortfolio.bankPortfolioElement[10].actualValue });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getPortfolioGlobalDetailQuery: function (_contractNumber) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getPortfolioGlobalDetailQuery  + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({ success: true, contractNumber :_contractNumber, totalBalance: response.data.outPortfolioGlobalDetailQuery.totalValuation });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Set account information in array
             * @return  {object}
             */
            setInfo: function( historical ){
                var chart_data = [],
                    months = historical[0].historicalInfo;
                for( var i = 0; i <= months.length; i++ ){
                    if( i === 0 ){
                        chart_data[i] = ['Mes'];
                    } else {
                        var date = months[i - 1].paymentPeriod,
                            year = parseInt( date.substr( 0, 4 ) ),
                            month = parseInt( date.substr( 4, 2 ) ),
                            current = new Date( year,month - 1 );

                        chart_data[i] = [$filter( 'date' )( current, 'MMM' ).toUpperCase() + '.' + $filter( 'date' )( current, 'yy' )];
                    }
                }

                for( var x = 0; x < historical.length; x++ ){
                    chart_data[0].push( historical[x].contractNumber );
                    chart_data[0].push( tooltip_set );

                    for( var y = 0; y < historical[x].historicalInfo.length; y++ ){
                        var info = {
                                id: historical[x].contractNumber,
                                month: chart_data[y + 1][0],
                                amount: historical[x].historicalInfo[y].amount
                            };
                        chart_data[y + 1].push( info.amount );
                        chart_data[y + 1].push( setTooltipInfo( info ) );
                    }
                }

                return obj.displayChart( chart_data );

            },

            getContractInfoDetail: function (_model) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContractInfoDetail + _model.contractNumber + '/' + _model.bankingArea,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {


                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve(response.data.outSimplifiedBankContractQuery.contract);
                        } else {
                            reject(response.data.outCommonHeader.result);
                        }
                    }, function error(error) {
                        reject(error);
                    });

                });

            },
            getBankContractsByClientQuery:function(wordToSearch, page, rowsByPage ){
                return $q(function(resolve, reject){

                    $http({
                        method: 'GET',
                        url: URLS.getBankContractsByClientQuery + wordToSearch + '/1/Modulo Asesor/' + page + '/' + rowsByPage,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var record = {
                            success: true,
                            data: null,
                            msg: response.data.outCommonHeader.result.messages[0].responseMessage
                        };
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            record.data = response.data.outBankContractsByClientQuery;
                            resolve(record);
                        } else {
                            record.success = false;
                            resolve(record);
                        }
                    }, function error( ) {
                        reject({success:false, data:null, msg:"Error Interno"});
                    });
                });
            }

        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'accountSrv', accountSrv );

})();



(function () {
    "use strict";

    investmentCtrl.$inject = ['$scope', '$state', 'investmentSrv', 'CommonModalsSrv', 'loginSrvc', '$rootScope', 'outProfileSrv'];
    function investmentCtrl($scope, $state, investmentSrv, CommonModalsSrv, loginSrvc,$rootScope, outProfileSrv) {
        var vm = this;
        vm.contract = null;
        vm.tabSelect = null;
        vm.markets = null;
        vm.url = false;

        vm.loadContract = loadContract;
        vm.changeContract = function(contract){
            localStorage.setItem('contractSelected', JSON.stringify(contract));
            init();

        };

        init();
        function init() {
            var contract = JSON.parse(localStorage.getItem('contractSelected'));
            var _type = JSON.parse(localStorage.getItem('_marketType'));
            if(contract !== '' && _type !== null){
                vm.contractS = contract;
                if(vm.contractS.bankingArea === '999' && _type === 'MC'){
                    _type = 'CM';
                }else if(vm.contractS.bankingArea === '998' && _type === 'CM'){
                    _type = 'MC';
                }
                loadContract(_type);
            }
        }

        angular.forEach($scope.operations.sclient.contracts_adviser, function (value, key) {
            $scope.operations.sclient.contracts_adviser[key].contractNumber = value.contractNumber;
        });

        vm.contracts = R.map(function (_val) {
            _val.text = _val.contractNumber;
            return _val;
        }, $scope.operations.sclient.contracts_adviser);


        vm.selectedTab = function(_item) {
            localStorage.setItem('_marketType', JSON.stringify(_item.shortname));
        }

        function messageOutContractProfile(){
            var clientSearch = JSON.parse(sessionStorage["ngStorage-sclient"]);
            var name = clientSearch.data.personType === "1" ? (clientSearch.data.name + " " + clientSearch.data.lastName + " " + clientSearch.data.lastName) : clientSearch.data.companyName;
            var modelOutOfProfileContractQuery = {
                bankingArea: vm.contract.bankingArea,
                clientNumber:vm.contract.clientNumber,
                clientName:name,
                contractNumber: vm.contract.contractNumber
            };

            //aqui va el nuevo servicio
            investmentSrv.outOfProfileContractQuery(modelOutOfProfileContractQuery).then(function(response){
                if(response.data.outOutOfProfileContractQuery.outOfProfileContractFlag)
                    outProfileSrv.information();
            });
        }
        function loadContract (_type) {

            vm.contract = vm.contractS;
            localStorage.setItem('contractSelected', JSON.stringify(vm.contract));
            vm.iscuentapropia = vm.contractS.isPropia;
            vm.tabSelect = 3;
            vm.navInvestment = [];

            var model = {
                contractNumber: vm.contract.contractNumber,
                bankingArea: vm.contract.bankingArea
            };

            var modelmv = {
                businessType: vm.contract.bankingArea === '999' ? '01' : '02',
                contractNumber: vm.contract.contractNumber,
                marketType: 'TD'
            };

            //llamado sincrono
            investmentSrv.getContractSelection(model).then(function (response) {                
                if(response.data.outCommonHeader.result.result === 1){                                         
                    investmentSrv.getMarketValidation(modelmv).then(function (_res) {                        
                        messageOutContractProfile();
                        if (_res.data.outContractMarketValidation !== null && _res.data.outContractMarketValidation.market && _res.data.outCommonHeader.result.result === 1 && _res.data.outContractMarketValidation.market.length ) {
                            vm.markets = _res.data.outContractMarketValidation.market;
                            var viewMarketsByVisible = [];
                            angular.forEach(vm.markets, function (value) {
                                if(value.marketType === 'SI'){
                                    viewMarketsByVisible[0] = value.operativeFlag;
                                } else if(value.marketType === 'MD'){
                                    viewMarketsByVisible[1] = value.operativeFlag;
                                } else if(value.marketType === 'CM'){
                                    viewMarketsByVisible[2] = value.operativeFlag;
                                }
                            });

                            $rootScope.viewMarketsByVisible = viewMarketsByVisible;

                            if (vm.contract) {
                                switch (vm.contract.bankingArea) {
                                    case '998':
                                        vm.navInvestment = [
                                            {
                                                name: 'Fondos de inversión',
                                                state: 'investment.funds',
                                                shortname: 'SI'
                                            },
                                            {
                                                name: 'Mercado de dinero',
                                                state: 'investment.money',
                                                shortname: 'MD'
                                            },
                                            {
                                                name: 'Mercado de capitales',
                                                state: 'investment.capitals',
                                                shortname: 'MC'
                                            }
                                        ];

                                        switch (_type){
                                            case 'SI':
                                                $state.go('investment.funds');
                                                break;
                                            case 'MD':
                                                $state.go('investment.money');
                                                break;
                                            case 'MC':
                                                $state.go('investment.capitals');
                                                break;
                                            default:
                                                $state.go('investment.funds');
                                                break;
                                        }
                                        //  localStorage.setItem('_marketType', JSON.stringify(null));
                                        break;

                                    case '999':
                                        vm.navInvestment = [
                                            {
                                                name: 'Fondos de inversión',
                                                state: 'investment.fundsBank',
                                                shortname: 'SI'
                                            },
                                            {
                                                name: 'Mercado de dinero',
                                                state: 'investment.moneyBank',
                                                shortname: 'MD'
                                            },
                                            {
                                                name: 'Mercado de capitales',
                                                state: 'investment.capitalsLumina',
                                                shortname: 'CM'
                                            }
                                        ];

                                        switch (_type){
                                            case 'SI':
                                                $state.go('investment.fundsBank');
                                                break;
                                            case 'MD':
                                                $state.go('investment.moneyBank');
                                                break;
                                            case 'CM':
                                             $state.go('investment.capitalsLumina');
                                             break;
                                            default:
                                                $state.go('investment.fundsBank');
                                                break;
                                        }
                                        //localStorage.setItem('_marketType', JSON.stringify(null));
                                        break;
                                }
                            }
                            vm.getUrlPracticasV();
                        }else{
                            CommonModalsSrv.error( _res.data.outCommonHeader.result.messages[0].responseMessage );
                            vm.markets = null;
                        }
                    }, function () {

                    });

                } else if(response.data.outCommonHeader.result.result === 2){
                    CommonModalsSrv.error( response.data.outCommonHeader.result.messages[0].responseMessage);
                    vm.markets = null;
                }else{
                    CommonModalsSrv.error( response.data.result);
                    vm.markets = null;
                }                
            }).catch(function () {

            });


        }
        $scope.mostrarcapitales = false;
        loginSrvc.makeDataUser().then(function (_response) {
            console.log('_response.user.systemTO.profile', _response.user.systemTO.profile);
            if (_response.user.systemTO.profile === 'local' || _response.user.systemTO.profile === 'qa') {
                $scope.mostrarcapitales = true;
            }
        });

        $scope.filterfn = function (car) {

            var resp = false;
            if (car.shortname === 'MC' && vm.contract.bankingArea === '999') {

                return $scope.mostrarcapitales;
            }
            vm.markets.forEach(function (_item) {
                if (_item.marketType === car.shortname && _item.operativeFlag === true) {
                    resp = true;
                }
            });
            return resp;
        };

        vm.getUrlPracticasV = function () {
            vm.url = true;
            investmentSrv.getUrlPracticasVenta(vm.contract.contractNumber,vm.contract.bankingArea).then(function (_res) {
                if (_res) {
                    vm.urlPracticaVenta = _res.data.result.url;
                    vm.paramsPracticaVneta = _res.data.result.params;
                }
            }, function () {

            });
        };

        $scope.goPV = function () {
            document.LANSA.action = vm.urlPracticaVenta ;
            document.LANSA.submit();
        };

        vm.getMarkets = function (modelmv) {
            investmentSrv.getMarketValidation(modelmv).then(function (_res) {
                if (_res.data.outCommonHeader.result.result === 1) {
                    if (_res.data.outContractMarketValidation !== null && _res.data.outContractMarketValidation.market) {
                        vm.markets = _res.data.outContractMarketValidation.market;
                    }
                }
            }, function () {

            });
        };
    }

    angular.module('actinver.controllers')
        .controller('investmentCtrl', investmentCtrl);

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider

            .state('investment', {
                templateUrl: '/app/operations/investment/investment.html',
                url: '/investment',
                controller: 'investmentCtrl',
                controllerAs: 'investment',
                parent: 'operations',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Inversiones',
                },
            })

            .state('investment.funds', {
                templateUrl: '/app/operations/investment/investment-society/funds.html',
                url: '/funds',
                controller: 'fundsCtrl',
                controllerAs: 'funds',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Fondos de inversión',
                },
            })

            .state('investment.capitals', {
                templateUrl: '/app/operations/investment/capitals/capitals.html',
                url: '/capitals',
                controller: 'capitalsCtrl',
                controllerAs: 'capitals',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Mercado de Capitales',
                },

            })

            .state('investment.money', {
                templateUrl: '/app/operations/investment/money/money.html',
                url: '/money',
                controller: 'moneyCtrl',
                controllerAs: 'money',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Mercado de Dinero',
                },
            })

            .state('investment.moneyBank',{
                templateUrl: '/app/operations/investment/money-bank/moneyBank.html',
                url: '/moneyBank',
                controller: 'moneyBankCtrl',
                controllerAs: 'moneyBank',
                data:{
                    needClient: true
                },
                ncyBreadcrumb:{
                    label: 'Mercado de Dinero',
                },
            })

            .state('investment.fundsBank', {
                templateUrl: '/app/operations/investment/investment-society-bank/fundsBank.html',
                url: '/fundsBank',
                controller: 'fundsBankCtrl',
                controllerAs: 'fundsBank',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                    label: 'Fondos de inversión',
                },
            })
            
            .state('investment.capitalsLumina', {
                templateUrl: '/app/operations/investment/capitals-lumina/capitals-lumina.html',
                url: '/capitalsLumina',
                controller: 'capitalsLuminaCtrl',
                controllerAs: 'capitalsLumina',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Mercado de Capitales',
                },
            })

            .state('investment.statementFiscal',{
                templateUrl: '/app/operations/investment/investment-statementFiscal/statement-fiscal.html',
                url: '/statementFiscal',
                controller: 'statementFiscalCtrl',
                controllerAs: 'statementFiscal',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Constancias Fiscales',
                },
            });


    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

(function () {
    'use strict';

    investmentSrv.$inject = ['$http', 'URLS', '$filter', 'csrfSrv', '$q'];
    function investmentSrv($http, URLS, $filter, csrfSrv, $q) {

        /**
        *  investment Service
        */
        function Investment() { }

        Investment.prototype.getDetailStations = function (_station, _serie) {
            return $http({
                method: 'get',
                url: URLS.getDetailStations + _station + '/' + _serie + '?language=SPA'
            });
        };

        Investment.prototype.getUrlPracticasVenta = function (_contracto, _bankingarea) {
            return $http({
                method: 'get',
                url: URLS.geturlpracticasventa + _contracto + '/' + _bankingarea +'?language=SPA'
            });
        };

        Investment.prototype.getStations = function (_contract, _id) {
            return $http({
                method: 'GET',
                url: URLS.getInvestmentSocietyRest + _contract + '/' + _id + '/0/0/0/0?language=SPA'
            });
        };

        Investment.prototype.getStationsBank = function (_contract) {
            return $http({
                method: 'GET',
                // url: URLS.getFundBank+ '2638112' +'/1/0?language=SPA'
                url: URLS.getFundBank + _contract + '/1/0?language=SPA'

            });
        };

        Investment.prototype.getPortfolioInvestment = function (_id, type) {
            type = type || 'SI';
            if (type === 'MC') {
                return $http({
                    method: 'GET',
                    url: URLS.getPortfolio + _id + '/' + type + '?language=SPA'
                });
            }
            else {
                return $http({
                    method: 'GET',
                    url: URLS.getPortfolio + _id + '/' + type + '?language=SPA'
                });
            }
        };

        Investment.prototype.getPortfolioInvestmentLumina = function (_id, type) {
            type = type || 'MC';
            var date = new Date(),
                filterDate = $filter('date')(date, 'ddMMyyyy');

            if (type === 'MC') {
                return $http({
                    method: 'POST',
                    url: URLS.getAccionesLumina + '?language=SPA&contractNumber=' + _id + '&date=' + filterDate
                });
            }
        };

        Investment.prototype.getOrders = function (_id, type, startDate,endDate) {
            var date = new Date(),filterDate,filterDateEnd,parameterDate;

            type = (typeof type === 'undefined') ? 'SI' : type;



            if(startDate && endDate){
                parameterDate=_id + '/' + startDate + '/' + type +'/'+endDate+ '?language=SPA&r='+Math.random();
            }else{
                filterDate = $filter('date')(date, 'ddMMyyyy');
                filterDateEnd = $filter('date')(date, 'ddMMyyyy');
                parameterDate=_id + '/' + filterDate + '/' + type +'/'+filterDateEnd+ '?language=SPA&r='+Math.random();
            }


            return $http({
                method: 'GET',
                url: URLS.getOrders + parameterDate
            });
        };

        Investment.prototype.getOrdersLumina = function (_id, type, datecalendario) {

            datecalendario= (typeof datecalendario === 'undefined') ? new Date() : new Date(datecalendario);
            var date = new Date(datecalendario),
                filterDate = $filter('date')(date, 'ddMMyyyy');

            type = (typeof type === 'undefined') ? 'SI' : type;

            return $http({
                method: 'POST',
                url: URLS.getOrdersLumina + '?language=SPA&contractNumber=' + _id + '&startDate=' + filterDate + '&endDate=' + filterDate
            });
        };

        Investment.prototype.getOrdersBank = function (_id, type, startDate, endDate) {
            var _type = (typeof type === 'undefined') ? '1' : type;
            return $http({
                method: 'GET',
                url: URLS.getOrdersBank + '/' + _id + '/' + startDate + '/' + endDate + '/' + _type + '/99',
                params: {
                    language: 'SPA',
                }
            });
        };

        Investment.prototype.getOrdersMoneyMarketBank = function (_id, startDate, endDate) {
            return $http({
                method: 'GET',
                url: URLS.getOrdersMoneyMarketBank,
                params: {
                    language: 'SPA',
                    contractNumber: _id,
                    startDate: startDate,
                    endDate: endDate,
                    marketType: 'MD'
                }
            });
        };

        Investment.prototype.getPortfolioInvestmentBank = function (_id, _type) {
            return $http({
                method: 'GET',
                url: URLS.getPortfolioBank + _id + '/' + _type + '/0',
                params: {
                    language: 'SPA'
                }
            });
        };

        Investment.prototype.getPortfolioReportoBank = function (_id, _date) {
            return $http({
                method: 'GET',
                url: URLS.getPortfolioReporto + _id + '/' + _date,
                params: {
                    language: 'SPA'
                }
            });
        };

        Investment.prototype.moreInfo = function (_contract, _id) {
            return $http({
                method: 'GET',
                url: URLS.getMoreInfo + _contract + '/' + _id + '?language=SPA',
            });
        };

        Investment.prototype.moreInfoCapital = function (_contract, _id) {
            return $http({
                method: 'GET',
                url: URLS.getMoreInfoCapital + _id + '/' + _contract + '?language=SPA',
            });
        };

        Investment.prototype.delete = function (_contract, _order) {
            var _sendModel = {
                contractNumber: _contract,
                settlementType: 'C',
                operationReference: _order.order.orderReference
            };

            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {

                    $http({
                        method: 'POST',
                        url: URLS.cancellation,
                        data: $.param(_sendModel),
                        params: {
                            language: 'SPA'
                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };

        Investment.prototype.deleteMarket = function (_order) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {
                    $http({
                        method: 'POST',
                        url: URLS.cancellationMarket,
                        params: {
                            orderSubReference: '0',
                            orderReference: _order.order.orderReference,
                            language: 'SPA'
                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };

        Investment.prototype.deleteOrderLumina = function (_order) {
            var _orderTypeDesc;
            if(_order.movementConcept === 'DIRECTOS'){
                _orderTypeDesc = 'FIXED_INCOME_ORDER';
            }else if(_order.movementConcept === 'REPORTO'){
                _orderTypeDesc = 'REPO_ORDER';
            }else{
                _orderTypeDesc = 'EQUITY_ORDER';
            }

            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {
                    var _ordersend = {
                        language: 'SPA',
                        orderTypeDesc: _orderTypeDesc,
                        orderID: _order.orderReference || _order.operationID
                    };
                    $http({
                        method: 'POST',
                        url: URLS.cancellationLumina,
                        data: $.param(_ordersend)
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };


        Investment.prototype.deleteStopLoss = function (_contract, _order) {
            var _sendModel = {
                contractNumber: _contract,
                operationReference: _order.share.operationReference,
                multiAccountManager: 0
            };

            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {

                    $http({
                        method: 'POST',
                        url: URLS.cancellationStopLoss,
                        data: $.param(_sendModel),
                        params: {
                            language: 'SPA'
                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });

        };

        Investment.prototype.deleteDirectBuy = function (_order) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {
                    $http({
                        method: 'POST',
                        url: URLS.deleteDirectBuy,
                        params: {
                            language: 'SPA',
                            operationReference: _order.orderReference,
                            transactionType: _order.transactionType,
                            consecutive: 1,
                            orderCancellationReason: ''
                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };

        Investment.prototype.deleteDirectSell = function (_order, _contractNumber) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {
                    $http({
                        method: 'POST',
                        url: URLS.deleteDirectSell,
                        params: {
                            language: 'SPA',
                            amount: _order.amount,
                            consecutive: 1,
                            operationReference: _order.orderReference,
                            orderCancellationReason: '',
                            transactionType: _order.transactionType,
                            bankingArea: '001',
                            contractNumber: _contractNumber,

                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };

        Investment.prototype.deleteReportoBuy = function (_order, _contractNumber) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback() {
                    $http({
                        method: 'POST',
                        url: URLS.deleteReportoBuy,
                        params: {
                            language: 'SPA',
                            consecutive: 1,
                            operationReference: _order.orderReference,
                            orderCancellationReason: '',
                            transactionType: _order.transactionType,
                            bankingArea: '001',
                            contractNumber: _contractNumber,

                        }
                    })
                        .then(function (response) {
                            if (response.data.outCommonHeader.result.result === 1) {
                                resolve({ success: true, data: response.data });
                            } else {
                                reject({ success: false, data: response.data, message: response.data.outCommonHeader.result.messages });
                            }
                        })
                        .catch(function (error) {
                            reject({ success: false, data: error.data, message: error.data.outCommonHeader.result.messages });
                        });
                }

                function errorCallback(error) {
                    reject({ success: false, data: error.data });
                }


            });
        };

        Investment.prototype.getContractSelection = function (_model) {
            return $http({
                method: 'GET',
                url: URLS.getContractSelection + _model.contractNumber + '/' + _model.bankingArea + '?language=SPA',
            });
        };

        Investment.prototype.getMarketValidation = function (_model) {
            return $http({
                method: 'GET',
                url: URLS.getMarketValidation +_model.businessType + '/' + _model.contractNumber + '/' + _model.marketType + '?language=SPA',
            });
        };

        Investment.prototype.outOfProfileContractQuery = function(_model){
            return $http({
                method: 'GET',
                url: URLS.outOfProfileContractQuery + _model.bankingArea + '/' + _model.clientNumber + '/' + _model.clientName + '/' + _model.contractNumber + '?language=SPA',
            });

        }

        return new Investment();
    }

    angular
        .module('actinver.services')
        .service('investmentSrv', investmentSrv);

})();

( function(){
    'use strict';

    pDetailCtrl.$inject = ['$scope', '$q', 'CommonModalsSrv', 'pDetailSrv'];
    function pDetailCtrl( $scope, $q, CommonModalsSrv, pDetailSrv ){
        var vm = this,
            contract_types = [ 'common', 'asset' ],
            contracts_reqs = [];

        // Settings
        vm.contracts = {
            common: false,
            asset: false
        };

        // Set all request
        angular.forEach( vm.contracts, function( val, type ){
                contracts_reqs.push( pDetailSrv.getAllContractsDetails( type, $scope.operations.sclient.contracts_list ) );

        } );

        // Make all requests
        $q.all( contracts_reqs ).then( function successCallback( response ){
                var types_counter = 0;

                // Assign information
                angular.forEach( response, function( info ){
                    var type = contract_types[types_counter];
                    vm.contracts[ type ] = info;
                    types_counter++;
                } );

            }, function errorCallback( info ){
                var message;

                // Hide preloader
                vm.contracts = {
                    common: [],
                    asset: []
                };

                if( info.type === 'not-found' ){
                    $scope.operations.showSystemError();
                } else {

                    var error = R.find(function( val ){
                        if( val.responseType === 'N' ){
                            return val.responseCategory === 'ERROR' || val.responseCategory === 'FATAL';
                        }
                    } )( info.data.outCommonHeader.result.messages );

                    message = error ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';
                    CommonModalsSrv.error( message );

                }

            } );

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'pDetailCtrl', pDetailCtrl );

})();
( function(){
    'use strict';

    pDetailSrv.$inject = ['URLS', '$q', '$http'];
    function pDetailSrv( URLS, $q, $http ){

        var obj = {

            /**
             * Available contracts
             * @param {array} contracts - Array with all available contracts by client
             * @return  {object}
             */
            getAllContractsDetails: function( type, contracts ){
                var detail_reqs = [];
                // Get detail by contract
                angular.forEach( contracts, function( contract ){
                    if(contract.companyName === 'Casa'){
                        detail_reqs.push( obj.getContractDetail( type, contract.contractNumber ) );
                    }else{
                        detail_reqs.push( obj.getContractDetailBank( contract.contractNumber ) );
                    }

                } );

                // When all information is available
                return $q.all( detail_reqs );
            },

            getContractDetailBank: function ( contractNumber ) {
                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getContractDetailBank + contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then( function success( response ) {
                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                            resolve( {success: true, data: response.data.outFIXISSecuritiesPortfolioQuery.fundsList[0].fundPortfolioList} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    } );

                });
            },

            /**
             * Get contract detail info
             * @param {string} contract - Desired contract ID
             * @return  {object}
             */
            getContractDetail: function( type, contract ){

                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getContractDetail + contract.toString() + '/TM',
                        params: {
                            type: type,
                            language: 'SPA'
                        }
                    }).then( function success( response ) {
                        if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                            resolve( {success: true, data: response.data.outPortfolioDetailQuery.details} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    } );

                });
            },

            /**
             * Set totals by topic and by contract
             * @return  {object}
             */
            setTotals: function( contracts, currency_resume ){

                angular.forEach( contracts, function( contract ){

                    for( var y = 0; y < currency_resume.length; y++ ){

                        var item = contract.data.portfolioValue.portfolioValueByCurrency[y];
                        currency_resume[y][1][0].totalDebtInstruments += item.totalDebtInstruments;
                        currency_resume[y][1][1].totalPledgedValues += item.totalPledgedValues;
                        currency_resume[y][1][2].totalCapitalInstruments += item.totalCapitalInstruments;
                        currency_resume[y][1][3].notDefined += 0;
                        currency_resume[y][1][4].totalSettlementOperations += item.totalSettlementOperations;
                        currency_resume[y][1][5].totalCash += item.totalCash;
                        currency_resume[y][1][6].notDefined2 += 0;
                        currency_resume[y][1][7].totalPortfolioValue += item.totalPortfolioValue;

                    }

                } );

                return currency_resume;
            },

            /**
             * Get percent of an amount
             * @param {number} total - Total amount
             * @param {number} amount - Portion we want to know percent
             * @return  {number}
             */
            getPercentage: function( total, amount ){
                return ( ( amount * 100 ) / total ).toFixed(2);
            }

        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'pDetailSrv', pDetailSrv );

})();
( function(){
    'use strict';

    portfolioCtrl.$inject = ['$sessionStorage', 'pResumeSrv'];
    function portfolioCtrl( $sessionStorage, pResumeSrv ){
        var vm = this;
        var _clientId = $sessionStorage.sclient.data.clientNumber;
        // Portfolio topics
        vm.topics = [
            {"topic": "totalSD", "name": "Fondos de Deuda", "nom": "SD", "abbr": "FD", "totalDebtInstruments": 0, "percent": 0},
            {"topic": "totalSI", "name": "Fondos de Renta Variable", "nom": "SI", "abbr": "RV", "totalPledgedValues": 0, "percent": 0},
            {"topic": "totalMC", "name": "Mercado de Capitales", "nom": "MC", "abbr": "MC", "totalCapitalInstruments": 0, "percent": 0},
            {"topic": "totalMD", "name": "Mercado de Dinero", "nom": "MD", "abbr": "MD", "notDefined": 0, "percent": 0},
            {"topic": "totalSettlementOperations", "name": "Órdenes por Liquidar", "nom": "OL", "abbr": "OL", "totalSettlementOperations": 0, "percent": 0},
            {"topic": "totalCash", "name": "Efectivo", "nom": "EF", "abbr": "EF", "totalCash": 0, "percent": 0},
            {"topic": "totalDerivative", "name": "Derivados", "nom": "DV", "abbr": "DV", "notDefined2": 0, "percent": 0},
            {"topic": "totalPortfolioValue", "totalPortfolioValue": 0},
        ];

        // Credits
        vm.resume_credits = false;
         pResumeSrv.getCreditsList( _clientId )
            .then( function successCallback( response ){
                vm.resume_credits = response.data.result.outBankClientLoansQuery.currentLoans.bankLoan;
            }, function errorCallback(){
                vm.resume_credits = 'no-data';
            } );

        // Insurances
        vm.resume_insurances = false;
        /*pResumeSrv.getInsurancesList( _clientId )
            .then( function successCallback( response ){
                vm.resume_insurances = response.data.insurances;
            }, function errorCallback(){
                vm.resume_insurances = 'no-data';
            } );*/
    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'portfolioCtrl', portfolioCtrl );

})();
( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){

        $stateProvider

            .state('portfolio', {
                templateUrl: '/app/operations/portfolio/portfolio.html',
                url: '/portfolio',
                controller: 'portfolioCtrl',
                controllerAs: 'portfolio',
                parent: 'operations',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Portafolio',
                },
                redirectTo: 'portfolio.resume'
            })

            .state('portfolio.resume', {
                templateUrl: '/app/operations/portfolio/presume.html',
                url: '/resume',
                controller: 'pResumeCtrl',
                controllerAs: 'presume',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Resumen',
                }
            })

            .state('portfolio.detail', {
                templateUrl: '/app/operations/portfolio-detail/portfolio-detail.html',
                url: '/detail',
                controller: 'portfoli-detail.controller',
                controllerAs: 'pdetailCtrl',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Detalle',
                }
            });

    }

    angular.module( 'actinver' )
        .config( routerProviderConfig );

})();

( function(){
    'use strict';

    pResumeCtrl.$inject = ['$scope', '$q', 'CommonModalsSrv', 'pResumeSrv', '$sessionStorage'];
    function pResumeCtrl( $scope, $q, CommonModalsSrv, pResumeSrv, $sessionStorage ){
        var vm = this,
//            resume_reqs = [],
            resume_mock = $scope.portfolio.topics;
        vm.clientNumber = $sessionStorage.sclient.data.clientNumber;
        vm.topics = resume_mock;
        // Get resume by contract
        pResumeSrv.getContractResume(  vm.clientNumber   ).then( function( contracts ) {


            vm.exchange_rates = [];
            vm.portfolio_totals = 0;
            vm.portfolio_totals = contracts.data.result.totalValue;
            var _mn = contracts.data.result.positionHouseMN;
            var _eur = contracts.data.result.positionHouseEUR;
            var _dlls = contracts.data.result.positionHouseDLLS;
            var _percent = contracts.data.result.positionHousePercentage;
            vm.totlaMXN = _mn.totalFinal;
            vm.totalDLL = _dlls.totalFinal;
            vm.totalEUR = _eur.totalFinal;
            vm.exchangeRateDLL = _dlls.exchangeRate;
            vm.exchangeRateEUR = _eur.exchangeRate;

            var _tablePortafolio = [
                {"topic": "totalSD", "name": "Fondos de Deuda", "nom": "SD", "abbr": "FD", "totalDebtInstruments": 0, "percent": 0},
                {"topic": "totalSI", "name": "Fondos de Renta Variable", "nom": "SI", "abbr": "RV", "totalPledgedValues": 0, "percent": 0},
                {"topic": "totalSC", "name": "Fondos de Cobertura", "nom": "SC", "abbr": "FC", "notDefined2": 0, "percent": 0},
                {"topic": "totalMD", "name": "Mercado de Dinero", "nom": "MD", "abbr": "MD", "notDefined": 0, "percent": 0},
                {"topic": "totalMC", "name": "Mercado de Capitales", "nom": "MC", "abbr": "MC", "totalCapitalInstruments": 0, "percent": 0},
                {"topic": "totalSettlementOperations", "name": "Pendientes por Liquidar", "nom": "OL", "abbr": "OL", "totalSettlementOperations": 0, "percent": 0},
                {"topic": "totalBlockedBalance", "name": "Efectivo en Tránsito", "nom": "ET", "abbr": "ET", "totalBlockedBalance": 0, "percent": 0},
                {"topic": "totalCash", "name": "Efectivo", "nom": "EF", "abbr": "EF", "totalCash": 0, "percent": 0},
                {"topic": "totalPortfolioValue", "totalPortfolioValue": 0},
            ];

            angular.forEach( _tablePortafolio, function ( item, key ) {
                _tablePortafolio [ key ].mn =  _mn [item.topic];
                _tablePortafolio [ key ].eur =  _eur [item.topic];
                _tablePortafolio [ key ].dlls =  _dlls [item.topic];
                _tablePortafolio [ key ].percent = _percent [item.topic];
            } );
            vm.portfolioTable = _tablePortafolio;
            vm.chart_info = {
                chart:  pResumeSrv.setChartInfo(vm.portfolioTable)
            };

        }, function errorCallback( info ){
                var message;
                if( info.type === 'not-found' ){
                    $scope.operations.showSystemError();
                } else {
                    vm.portfolio_totals = 0;
                    message = info.result ? info.result : 'Se Encontró Un Error Favor De Intentarlo Más Tarde';
                    CommonModalsSrv.error( message );
                }
            } );
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'pResumeCtrl', pResumeCtrl );

})();

( function(){
    'use strict';

    pResumeSrv.$inject = ['URLS', '$q', '$http', '$filter'];
    function pResumeSrv( URLS, $q, $http, $filter ){
        var chart_colors = ['#00bebe','#fa596d','#f9be00','#7ed321','#e21599','#ccc', '#B39DDB', '#3c86f6','#f5f047','#ff6f00' ],
            tooltip_set = {'type': 'string', 'role': 'tooltip', 'p': {'html': true}};

        function setTooltipInfo( info ){
            return "<div class='operations-portfolio-tp " + $filter( 'lowercase' )( info.abbr ) + "'><span>" + info.name + "</span><br />" + info.percent + "%</div>";
        }

        var obj = {

            /**
             * Set chart styles and information
             * @param {object} chart_data - Object with chart setting.
             * @return  {object}
             */
            displayChart: function( chart_data ){
                var idxs = [],
                    data = [],
                    colors = [],
                    labels = [];

                chart_data.forEach( function( item, idx ){
                    if( idx > 0 && item[ 1 ] > 0 ){
                        idxs.push( idx );
                        data.push( item[ 1 ] );
                        colors.push( chart_colors[ idx - 1 ] );
                        labels.push( item[ 0 ] );
                    }
                } );

                return {
                    data: data,
                    colors: colors,
                    cutoutPercentage: 60,
                    labels: labels,
                    pieceLabel: {
                        mode: 'label',
                        fontFamily: 'Proxima Semibold',
                    },
                    tooltips: {
                        custom: true,
                        idxs: idxs,
                        data: chart_data
                    }
                };
            },

            /**
             * Get contract resume list
             * @param {string} contract - Desired contract ID
             * @return  {object}
             */
            getContractResume: function( contract ){

                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getPortfolioResume + contract,
                        params: {
                            language: 'SPA'
                        }
                    }).then( function success( response ) {
                        if(response.data.status === 1){
                            resolve( {success: true, data: response.data} );
                        }else{
                            reject( response.data );
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    } );

                });
            },

            /**
             * Set information for display section chart
             * @param {array} info - All information to display inside the chart
             * @return  {object}
             */
            setChartInfo: function( info ){
                var chart_info = [];

                angular.forEach( info, function( item, index ){
                    var chart_percent = ( Number( item.percent ) > 0 ) ? Number( item.percent ) : 0;

                    if( index === 0 ){
                        chart_info.push( [ 'Tarea', 'Porcentaje', tooltip_set ] );
                    }

                    if( item.abbr ){
                        chart_info.push( [ item.abbr, chart_percent, setTooltipInfo( item ) ] );
                    }
                });

                return obj.displayChart( chart_info );
            },

            /**
             * Get credits list
             * @param {string} client - Desired client ID
             * @return  {object}
             */
            getCreditsList: function( client ){

                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getCreditsList + client + '?language=SPA',
                    }).then( function success( response ) {
                        if (response.data.status === 1) {
                            resolve( {success: true, data: response.data} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    } );

                });
            },

            /**
             * Get insurances list
             * @param {string} client - Desired client ID
             * @return  {object}
             */
           /* getInsurancesList: function( client ){

                return $q(function( resolve, reject ){

                    $http({
                        method: 'GET',
                        url: URLS.getInsurancesList + client,
                    }).then( function success( response ) {

                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve( {success: true, data: response.data.outInsurancePortfolioQuery} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    } );

                });
            },*/

        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'pResumeSrv', pResumeSrv );

})();
( function () {
    "use strict";

    portfolioDetail.$inject = ['$scope', 'portfolioDetailService', 'pResumeSrv', '$filter', 'moment'];
    function portfolioDetail ( $scope, portfolioDetailService, pResumeSrv, $filter, moment ) {
        var vm = this;
        vm.showDetail = showDetails;
        vm.typeFundsFilter=['DEUDA','VARIABLE','COBERTURA'];
         getDetail();

        function showDetails(topic){
            topic.show = topic.show ? false : true;
        }

        function getDetail(){
            var _contractList = $scope.operations.sclient.contracts_list;
            var _detail = [];
            var _detailBank = [];


            angular.forEach( _contractList, function( contract ){
                if( contract.companyName === 'Casa' ){
                    var _groupOrders = [];
                    portfolioDetailService.detail( contract.contractNumber ).then( function ( response ){
                       var fundsTypeDesk=[];
                        angular.forEach ( _.groupBy( response.data, 'marketTypeDesc' ) , function( value){
                           // Si es FONDOS DE INVERSIÓN clasifica
                            if(value[0].marketType === '1'){
                                //sub-clasifica para fondos por fundsTypeDesk para A2k
                                angular.forEach ( value , function( emisora){
                                    var subClassication=emisora.fundTypeDesc !==''? emisora.fundTypeDesc:'SIN CLASIFICAR';
                                    fundsTypeDesk.push({
                                        title : subClassication,
                                        emisora : emisora,
                                        show : false
                                    });
                                });
                            }

                            _groupOrders.push({
                                title : value[0].marketTypeDesc,
                                marketType:value[0].marketType,
                                ordersValue : value,
                                fundsTypeDesk:fundsTypeDesk,
                                show : false
                            });


                        });
                        _detail.push( {
                            detail : _groupOrders,
                            contractNumber : contract.contractNumber
                        } );
                    }).catch( function ( ) {
                        //console.log( error.data.outCommonHeader.result.messages);
                        //CommonModalsSrv.error( ErrorMessage.createError(  error.data.outCommonHeader.result.messages  ));
                    });



                }else{
                    var _groupOrdersBank = [];
                    portfolioDetailService.detailsBanks( contract.contractNumber , '2').then( function ( response ){
                        angular.forEach ( _.groupBy( response.data, 'valueTypeDesc' ) , function( value){
                            _groupOrdersBank.push({
                                title : 'FONDOS DE INVERSIÓN',
                                typeOp: '2',
                                ordersValue : value
                            });
                        });

                    }).catch( function ( ) {
                        //console.log( error.data.outCommonHeader.result.messages);
                        //CommonModalsSrv.error( ErrorMessage.createError(  error.data.outCommonHeader.result.messages  ));
                    });

                    var _date =  moment(new Date()).format('YYYYMMDD');
                    portfolioDetailService.detailsBanksMoney( contract.contractNumber , _date ).then( function ( response ){
                        angular.forEach ( _.groupBy( response.data, 'valueTypeDesc' ) , function( value){
                            _groupOrdersBank.push({
                                title : 'MERCADO DE DINERO',
                                typeOp: '1',
                                ordersValue : value
                            });
                        });
                    }).catch( function ( ) {
                        //console.log( error.data.outCommonHeader.result.messages);
                        //CommonModalsSrv.error( ErrorMessage.createError(  error.data.outCommonHeader.result.messages  ));
                    });

                    var _date =  $filter('date')(new Date(), 'ddMMyyyy');
                    portfolioDetailService.detailsBanksLumina( contract.contractNumber , _date ).then( function ( response ){
                        angular.forEach ( _.groupBy( response.data, 'valueTypeDesc' ) , function( value){
                            _groupOrdersBank.push({
                                title : 'MERCADO DE CAPITALES',
                                typeOp: '3',
                                ordersValue : value
                            });
                        });
                    }).catch( function ( ) {
                        //console.log( error.data.outCommonHeader.result.messages);
                        //CommonModalsSrv.error( ErrorMessage.createError(  error.data.outCommonHeader.result.messages  ));
                    });
                    _detailBank.push( {
                        detail : _groupOrdersBank,
                        contractNumber : contract.contractNumber
                    });
                }
            } );

            vm.detailBank = _detailBank;
            vm.detail = _detail;
            //groupDetail(_detailBank.detail,'fundType');
        }

        vm.resume_credits = false;
        pResumeSrv.getCreditsList($scope.operations.sclient.data.clientNumber)
            .then( function successCallback( response ){
                vm.resume_credits = response.data.result.outBankClientLoansQuery.currentLoans.bankLoan;
            }, function errorCallback(){
                vm.resume_credits = 'no-data';
            } );

        /*function groupDetail ( detail, type ){
            var _groupOrders = [];
            angular.forEach ( _.groupBy( detail, type ) , function( value, key ){
                _groupOrders.push({
                    title : value[0].marketTypeDesc,
                    type: value[0].portfolioTypeDesc,
                    ordersValue : value
                });
            });

            console.log('_groupOrders',_groupOrders);
        }*/

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'portfoli-detail.controller', portfolioDetail );
})();
( function () {
    "use strict";

    portfolioDetailService.$inject = ['$http', '$q', 'URLS'];
    function portfolioDetailService ( $http, $q, URLS ) {
        return {
            detailsBanks : detailsBanks,
            detailsBanksLumina : detailsBanksLumina,
            detailsBanksMoney : detailsBanksMoney,
            detail : detail
        };

        function detailsBanks ( contractNumber, _type ) {

            return $q( function ( resolve, reject ) {
                $http({
                    method: 'GET',
                    url: URLS.getPortfolioBank + contractNumber + '/' + _type + '/0',
                    params: {
                        language: 'SPA'
                    }
                }).then( function success( response ) {
                    if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                        resolve( {success: true, data: response.data.outBankInvstFundsAndMMPositionsQuery.positions.positionInformation, contract: contractNumber});
                    } else {
                        reject( {success: false, data: response.data, type: 'empty' } );
                    }

                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                } );

            });

        }

        function detailsBanksMoney ( contractNumber, _date ) {
            return $q( function ( resolve, reject ) {
                return $http({
                    method: 'GET',
                    url: URLS.getPortfolioReporto + contractNumber + '/' + _date,
                    params: {
                        language: 'SPA'
                    }
                }).then( function success( response ) {
                    if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                        resolve( {success: true, data: response.data.outMoneyMarketIntradayPositionQuery.positionData, contract: contractNumber});
                    } else {
                        reject( {success: false, data: response.data, type: 'empty' } );
                    }

                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                } );

            });

        }

        function detailsBanksLumina ( contractNumber, _date ) {
            return $q( function ( resolve, reject ) {
                return $http({
                    method: 'POST',
                    url: URLS.getAccionesLumina + '?contractNumber=' + contractNumber + '&date=' + _date,
                    params: {
                        language: 'SPA'
                    }
                }).then( function success( response ) {
                    if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                        resolve( {success: true, data: response.data.outCapitalMarketPositionQuery.positionData, contract: contractNumber});
                    } else {
                        reject( {success: false, data: response.data, type: 'empty' } );
                    }

                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                } );

            });

        }

        function detail ( contract ) {
            return $q( function ( resolve, reject ) {
                $http({
                    method: 'GET',
                    url: URLS.getContractDetail + contract.toString() + '/TM',
                    params: {
                        language: 'SPA'
                    }
                }).then( function ( response ) {
                    if ( typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1 ){
                        resolve( {success: true, data: response.data.outPortfolioDetailQuery.portfolios.portfolioDetail, contract: contract} );
                    } else {
                        reject( {success: false, data: response.data, type: 'empty' } );
                    }

                }).catch( function (){
                    reject( {success: false, type: 'not-found'} );
                });
            });
        }
    }

    angular
        .module( 'actinver.controllers' )
        .service( 'portfolioDetailService', portfolioDetailService );
})();
(function(){
    'use strict';

    /*function adviserForm( proposalSrv, CommonModalsSrv ){*/
    function adviserForm(){
        function link( scope ){

            function setup() {
             /*   proposalSrv.getActivityOffice()
                    .then( function ( _res ){

                        scope.offices = _res.map( function( _element ){
                            _element.text = _element.financialCenter;
                            return _element;
                        });

                    }, function(){
                        CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
                    } );*/
            }

            // Delete properties on false
            scope.resetChilds = function( parent, child ){
                if( !scope.model.form[ parent ] ){
                    delete scope.model.form[ child ];
                }
            };

            setup();

        }

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/adviser-form/adviser-form.html',
            scope: {
                model: '='
            },
            link: link
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'adviserForm', adviserForm );

} )();
( function(){
    "use strict";


    myAccountsCtrl.$inject = ['$scope', 'transfersSrv', 'CommonModalsSrv', 'transferModalSrv', 'REGEX', 'ErrorMessage', 'fundBankDollSrv'];
    function myAccountsCtrl( $scope, transfersSrv, CommonModalsSrv, transferModalSrv, REGEX, ErrorMessage, fundBankDollSrv ){
        var vm = this;

        vm.title = 'Traspasos';
        vm.pattern = REGEX;
        vm.viewTransactions = true;

        vm.cmd ={
            transfer: {
                bank : '01',
            },
        };

        vm.contracts = R.map(function(_val){
            _val.text = _val.contractNumber;
            return _val;
        }, $scope.operations.sclient.contracts_list);

       
        vm.viewMoreDetail=transferModalSrv.detailTransfer;
        vm.loadContract = loadContract;
        init();

        function init() {
            var contract = JSON.parse(localStorage.getItem('contractSelected'));
            if(contract !== ''){
                vm.cmd.contract = contract;
                loadContract();
            }
        }
        function getTotal() {
            if(vm.cmd.contract.companyName === "Casa"){
                transfersSrv.getBalance( vm.cmd.contract.contractNumber ).then(function(response){
                    if(response.data.outCommonHeader.result.result === 1){
                        $scope.transferLoading = true;
                        $scope.loadAccountsTransferNull = false;
                        vm.dataContract = response.data.outCashByDate.cashSettlement[0].cashAmount;
                        vm.base = angular.copy( vm.cmd.contract.contractNumber );
                        loadAccounts(vm.cmd.contract.contractNumber);
                    }else{
                        $scope.transferLoading = false;
                        $scope.loadAccountsTransferNull = true;
                        CommonModalsSrv.error( ErrorMessage.createError(response.data.outCommonHeader.result.messages) );
                    }
                });
            }else{
                fundBankDollSrv.bankContractBalance( vm.cmd.contract.contractNumber, '001')
                    .then(function (response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            $scope.transferLoading = true;
                            $scope.loadAccountsTransferNull = false;
                            vm.dataContract = response.data.outBankContractBalance.balanceData.availableBalance;
                            vm.base = angular.copy( vm.cmd.contract.contractNumber );
                            loadAccounts(vm.cmd.contract.contractNumber);
                        }else{
                            $scope.transferLoading = false;
                            $scope.loadAccountsTransferNull = true;
                            CommonModalsSrv.error( ErrorMessage.createError(response.data.outCommonHeader.result.messages) );
                        }
                    });
            }
        }

        vm.makeTransfer = function(){
            vm.cmd.typeTrans = '1';
            transferModalSrv.accept( vm.cmd ).result
                .then( function( _res ){
                    if( _res.outCommonHeader.result.result === 1 ){
                        var message;
                        if(_res.outTransferExecution){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el folio de la operación <b>'+
                                _res.outTransferExecution.transferResult.operationReference + '</b>' ;
                        }else if (_res.outAdviserPendingOpRegistration){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el ID Solicitud <b>'+
                                _res.outAdviserPendingOpRegistration.operationsDetails[0].operationID + '</b>' ;
                        }
                        CommonModalsSrv.done( message ).result.then(function() {
                            vm.cmd.transfer = {
                                bank : '01',
                            };
                            loadTransfers();
                            getTotal();
                        });
                    } else{
                        CommonModalsSrv.error( ErrorMessage.createError(_res.outCommonHeader.result.messages) );
                    }
                });
        };

       function loadContract(){
            $scope.$ctrl.contract = vm.cmd.contract.contractNumber;
            $scope.transferLoading = true;
            vm.cmd.transfer = {
                bank : '01',
            };
            getTotal();
       }


        function loadTransfers(){
            $scope.spinnerTransfers = true;
            transfersSrv.getTransfers( vm.cmd.contract.contractNumber , vm.cmd.contract.companyName ).then(function(res){
                if( res.data.outCommonHeader.result.result === 1){
                    if(res.data.outContractMovementsQuery.movementsList.length > 0 ){
                        vm.transfers = res.data.outContractMovementsQuery.movementsList;
                    }else{
                        vm.transfers = [];
                    }
                }
                else {
                    vm.transfers = [];
                }
                $scope.spinnerTransfers = false;
            } ,function() {
                vm.transfers = [];
                $scope.$ctrl.showSystemError();
                $scope.spinnerTransfers = false;
            });
        }

        function loadAccounts(_contract) {
            vm.accounts = [];
            vm.accounts = refactorAccounts( $scope.operations.sclient.contracts_list, _contract.contractNumber);
            $scope.transferLoading = false;
            loadTransfers();
        }

        function refactorAccounts( _accounts, _contract ) {
            _accounts = _accounts || [];
            return R.map( function(val){
                if(val.contractNumber !== _contract){
                    val.text = val.contractNumber;
                    return val;
                }
            }, _accounts );
        }

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'myAccountsCtrl', myAccountsCtrl );

})();

( function(){
    "use strict";

    otherAccountsCtrl.$inject = ['transfersSrv', 'fundBankDollSrv', 'transferModalSrv', 'REGEX', '$scope', 'CommonModalsSrv', '$sessionStorage', 'ErrorMessage'];
    function otherAccountsCtrl( transfersSrv, fundBankDollSrv, transferModalSrv, REGEX, $scope, CommonModalsSrv, $sessionStorage, ErrorMessage ){
        var vm= this;

        vm.title = 'Transferencias';
        vm.pattern = REGEX;
        vm.viewSPEI=false; 
        vm.viewTransactions=true;
        vm.viewSPEITag=true;

        vm.cmd ={
            transfer: {
                bank : '02',
            },
        };

      
        vm.viewMoreDetail=transferModalSrv.detailTransfer;
        vm.viewMoreDetailSPEI=transferModalSrv.detailTransferSPEI;

        $scope.contractso = R.map(function(_val){
            _val.text = _val.contractNumber;
            if( _val.bankingArea === "999"){
            return _val;
            }
        }, $scope.operations.sclient.contracts_list);

        vm.makeTransfer = function(){            
            vm.cmd.typeTrans = '2';
            transferModalSrv.accept( vm.cmd ).result.then(function( _res ) {
                var message;
                    if( _res.outCommonHeader.result.result === 1 ){
                        if( _res.outTransferRequest ){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el folio de la operación <b>'+
                                _res.outTransferRequest.transferResult.operationReference + '</b>' ;
                        }else if(_res.outBrokerSPEITransfer){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el folio de la operación <b>'+
                                _res.outBrokerSPEITransfer.transferResult.operationReference + '</b>' ;
                        }else if(_res.outTransferExecution){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el folio de la operación <b>'+
                                _res.outTransferExecution.transferResult.operationReference + '</b>' ;
                        }else if (_res.outAdviserPendingOpRegistration){
                            message = 'La transferencia se realizó de manera correcta. <br> Con el ID Solicitud <b>'+
                                _res.outAdviserPendingOpRegistration.operationsDetails[0].operationID + '</b>' ;
                        }

                        CommonModalsSrv.done( message ).result.then(function() {
                            vm.cmd.transfer = {
                                bank : '02',
                            };
                            loadTransfers();
                            if(vm.cmd.contract.companyName === "Casa"){
                                transfersSrv.getBalance( vm.cmd.contract.text ).then(function(response){
                                    vm.dataContract = response.data.outCashByDate.cashSettlement[0].cashAmount;
                                    vm.base = angular.copy( vm.cmd.contract );
                                    loadAccounts(vm.cmd.contract);
                                },function() {
                                    $scope.$ctrl.showSystemError();
                                    $scope.transferLoading = false;
                                });
                            }else{
                                fundBankDollSrv.bankContractBalance(vm.cmd.contract.text, '001')
                                    .then(function (response) {
                                        if (response.data.outCommonHeader.result.result === 1) {
                                            vm.dataContract = response.data.outBankContractBalance.balanceData.availableBalance;
                                            vm.base = angular.copy( vm.cmd.contract );
                                            loadAccounts(vm.cmd.contract);
                                        }
                                    },function() {
                                        $scope.$ctrl.showSystemError();
                                        $scope.transferLoading = false;
                                    });
                            }
                        });
                    }
                    else{
                        CommonModalsSrv.error( ErrorMessage.createError(_res.outCommonHeader.result.messages) );
                    }
                });
        };

        vm.loadContract = function(){
            $scope.$ctrl.contract = vm.cmd.contract.contractNumber;
            $scope.transferLoading = true;
            vm.cmd.transfer = {
                bank : '01',
            };
            if(vm.cmd.contract.companyName === "Casa"){
                transfersSrv.getBalance( vm.cmd.contract.text ).then(function(response){
                    if(response.data.outCommonHeader.result.result === 1){
                        $scope.transferLoading = true;
                        $scope.loadAccountsTransferNull = false;
                        vm.dataContract = response.data.outCashByDate.cashSettlement[0].cashAmount;
                        vm.base = angular.copy( vm.cmd.contract.contractNumber );
                        loadAccounts(vm.cmd.contract.contractNumber);
                    }else{
                        $scope.transferLoading = false;
                        $scope.loadAccountsTransferNull = true;
                        CommonModalsSrv.error( ErrorMessage.createError(response.data.outCommonHeader.result.messages) );
                    }
                });
            }else{
                fundBankDollSrv.bankContractBalance(vm.cmd.contract.text, '001')
                    .then(function (response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            $scope.transferLoading = true;
                            $scope.loadAccountsTransferNull = false;
                            vm.dataContract = response.data.outBankContractBalance.balanceData.availableBalance;
                            vm.base = angular.copy( vm.cmd.contract );
                            loadAccounts(vm.cmd.contract);
                        }else{
                            $scope.transferLoading = false;
                            $scope.loadAccountsTransferNull = true;
                            CommonModalsSrv.error( ErrorMessage.createError(response.data.outCommonHeader.result.messages) );
                        }
                    });
            }
        };

        function loadAccounts(_contract) {
            var _clientId = $sessionStorage.sclient.data.clientNumber;
            $scope.loadAccountsTransferNull = false;
            transfersSrv.getOtherAccounts( _contract , _clientId)
                .then(function(response){
                    vm.accounts = [];
                    if( response.data.status === 1 ){
                        vm.accounts = refactorAccounts( response.data.result.bankAccountsListFilter);
                        $scope.transferLoading = false;
                        loadTransfers();
                    }else{
                        $scope.transferLoading = false;
                        $scope.loadAccountsTransferNull = true;
                    }
            },function() {
                $scope.$ctrl.showSystemError();
                $scope.transferLoading = false;
            }).catch(function (_error) {
                var message = '';
                angular.forEach(_error, function(_value){
                    message += _value.responseMessage + '<br>';
                });

                CommonModalsSrv.error( message );
            });
        }

        function loadTransfers(){
            $scope.spinnerTransfers = true;
            transfersSrv.getTransfers( vm.cmd.contract.text , vm.cmd.contract.companyName ).then(function(res){
                if( res.data.outCommonHeader.result.result === 1){
                    if(res.data.outContractMovementsQuery.movementsList.length > 0 ){
                        vm.transfers = res.data.outContractMovementsQuery.movementsList;
                    }else{
                        vm.transfers = [];
                    }
                }
                else {
                    vm.transfers = [];
                }
                $scope.spinnerTransfers = false;
            },function() {
                vm.transfers = [];
                $scope.$ctrl.showSystemError();
                $scope.spinnerTransfers = false;
            } );
        }

        function refactorAccounts( _accounts ) {
            _accounts = _accounts || [];            
            var bankAccounts = R.map(function( _val ){
                //_val.text = _val.alias + '-' + _val.bankName;
                _val.text =  ((_val.alias !==null && _val.alias !=="" ? _val.alias + "-" : ""  ) + _val.accountNumber) ;
                _val.contractNumber = vm.cmd.contract.contractNumber;
                return _val;
            }, _accounts );

            /*var A2kBankAccounts = R.map(function( _val ){
                _val.text = _val.bankAccounts.bankName + ' - ' + _val.bankAccounts.clabe;
                return _val;
            }, _accounts.outA2KBankAccountsQuery.bankAccountsList );

            return vm.cmd.contract.companyName === "Casa" ? A2kBankAccounts : bankAccounts;*/

            return vm.cmd.contract.companyName === "Casa" ? '' : bankAccounts;

        }
        vm.loadSPEI = function(){
                vm.transfersSPEI=[];
                vm.viewSPEI=true;
                vm.viewTransactions=false;
                $scope.loadAccountsTransferNull = false;                
                var model={
                    contractNumber:vm.cmd.contract.text,
                    bankingArea: vm.cmd.contract.companyName === "Banco" ? 999 :998 ,
                    requirementFlag:0,
                    language:'SPA'

                };


                transfersSrv.getBankContractSPEIMovementsQuery( model)
                    .then(function(res){
                       if( res.data.outCommonHeader.result.result === 1){
                            if(res.data.outBankContractSPEIMovementsQuery.speitransactionsList.length > 0 ){
                                vm.transfersSPEI = res.data.outBankContractSPEIMovementsQuery.speitransactionsList;
                            }else{
                                vm.transfersSPEI = [];
                        }
                    }
                        
                        
                }).catch(function (_error) {
                    var message = '';
                    angular.forEach(_error, function(_value){
                        message += _value.responseMessage + '<br>';
                    });
    
                    CommonModalsSrv.error( message );
                });

                

        };
        vm.loadTransactions = function(){           
            vm.viewSPEI=false;
            vm.viewTransactions=true;
    };

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'otherAccountsCtrl', otherAccountsCtrl );

})();

(function () {
    "use strict";

    transfersCtrl.$inject = ['transfersSrv', 'CommonModalsSrv', '$scope'];
    function transfersCtrl(transfersSrv, CommonModalsSrv, $scope) {
        var vm = this;
        transfersSrv.getMedia().then(function (_res) {
            var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
            var _mediaType = [];
            angular.forEach(_media, function (value) {
                if (value.key !== '4') {
                    if (value.key !== '5') {
                        _mediaType.push({
                            id: value.key,
                            text: value.description
                        });
                    }
                }
            });
            vm.Media = _mediaType;
        });

        vm.showSystemError = CommonModalsSrv.systemError;

        $scope.contractso = R.map(function(_val){
            _val.text = _val.contractNumber;
            return _val;
        }, $scope.operations.sclient.contracts_list);
    }

    angular
        .module('actinver.controllers')
        .controller('transfersCtrl', transfersCtrl);

})();

( function(){
    "use strict";

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){


        $stateProvider

            .state('transfers', {
                // abstract: true,
                templateUrl: '/app/operations/transfers/transfers.html',
                url: '/transfers',
                controller: 'transfersCtrl',
                controllerAs: '$ctrl',
                parent: 'operations',
                redirectTo: 'transfers.myAccounts',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'Transferencias',
                },
            })

            .state('transfers.myAccounts', {
                controller: 'myAccountsCtrl',
                controllerAs: 'accounts',
                templateUrl: '/app/operations/transfers/accounts.html',
                url: '/myAccounts',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'A cuentas actinver',
                },
            })

            .state('transfers.otherAccounts', {
                controller: 'otherAccountsCtrl',
                controllerAs: 'accounts',
                templateUrl: '/app/operations/transfers/accounts.html',
                url: '/otherAccounts',
                data: {
                    needClient: true
                },
                ncyBreadcrumb: {
                  label: 'A otras cuentas',
                },
            })


            .state('transfers.reports', {
                template: '<h2>h2</h2>',
                url: '/reports',
                data: {
                    needClient: true
                }
            });


    }


    angular.module( 'actinver' )
        .config( routerProviderConfig );


})();

(function() {
    "use strict";

    transfersSrv.$inject = ['$http', '$q', 'URLS', 'csrfSrv', '$filter'];
    function transfersSrv($http, $q, URLS, csrfSrv, $filter) {

        /**
         *  Login service user and password are required
         */
        function Transfers(){}

        Transfers.prototype.getBalance = function ( _id ) {
            var currency = 0;
            var settlementKey = 1;
            return $http({
                method: 'GET',
                url: URLS.getBalance + _id +'/'+currency+'/'+settlementKey +'?language=SPA'
            });
        };

        Transfers.prototype.getAccounts = function( _id ) {
            return $http({
                method: 'GET',
                url: URLS.getAccounts + _id + '/0/1/',
            });
        };


        Transfers.prototype.makeTransfer = function( _infoTransfer, date, _clientId, _user) {
                var time = $filter('date')(date, 'yyyy/dd/MM' );
                var dateNow = $filter('date')(date, 'HH:mm:ss' );
                var originAccount = _infoTransfer.contract.companyName;
                var destinationAccount =_infoTransfer.transfer.account.companyName ;
                var _destinationAccountTypeID;
                var _contract = _infoTransfer.transfer.account.contractNumber;

                if(originAccount === 'Casa' && destinationAccount === 'Casa' || originAccount === 'Banco' && destinationAccount === 'Banco'){
                    _destinationAccountTypeID = '01';
                }else if(originAccount === 'Casa' && destinationAccount === 'Banco' || originAccount === 'Banco' && destinationAccount === 'Casa'){
                    _destinationAccountTypeID = '04';
                }else if(_infoTransfer.transfer.account.destinationAccountType === 1){
                    _destinationAccountTypeID = '02';
                    _contract =  _infoTransfer.transfer.account.accountNumber;
                }else{
                    _destinationAccountTypeID = '03';
                    _contract =  _infoTransfer.transfer.account.accountNumber;
                }

                var _json = {
                    Contrato: _infoTransfer.contract.contractNumber,
                    Movimiento: 'Retiro',
                    Importe:  _infoTransfer.transfer.import,
                    Concepto: _infoTransfer.transfer.concepto
                };
                _json = JSON.stringify(_json);

                var json= {
                    businessType: _infoTransfer.contract.companyName === 'Casa' ? '02' : '01', // _infoTransfer.transfer.bank, 01=Banco 02=Casa
                    destinationAccountTypeID: _destinationAccountTypeID, // Tipo de transferencia
                    clientID: _clientId, //Cliente unico
                    contractNumber: _infoTransfer.contract.contractNumber, //Contrato origen
                    name: _user,                    
                    beneficiaryName:  (_infoTransfer.transfer.account.alias && _infoTransfer.transfer.account.alias !=="") ? _infoTransfer.transfer.account.alias : _infoTransfer.transfer.account.beneficiaryName , //opcional para terceros
                    destinationAccount: _contract, //accountNumber
                    amount: _infoTransfer.transfer.import, //Cantidad a transferir
                    currency: 1,
                    transferDetails: _infoTransfer.transfer.concepto, //Detalles capturados por cliente
                    notificationFlag: 0,
                    comments:  _infoTransfer.transfer.binnacle.observation,
                    instructionDate: dateNow,
                    instructionTime: time,
                    sPEIReference: '1',
                    bankID : _infoTransfer.transfer.account.bankID,
                    extensionNumber: _infoTransfer.transfer.media.text === 'TELEFONO' ? _infoTransfer.transfer.media.phone : null,
                    tracingKey: _infoTransfer.transfer.media.id,
                    jsonDetails: _json
                };

                return $q(function( resolve, reject ){
                    csrfSrv.csrfValidate()
                        .then(successCsrf)
                        .catch(errorCsrf);
                    function successCsrf() {
                        $http({
                            method: 'POST',
                            url: URLS.makeTransfer,
                            data: $.param(json),
                        })
                            .then(function( _res ){
                                resolve( _res.data );
                            });
                    }
                    function errorCsrf(error) {
                        reject(error);
                    }
                });
        };

        Transfers.prototype.makeTransferOtherAccount = function( _infoTransfer, date, _clientId, _user) {
            var time = $filter('date')(date, 'ddMMyyyy' );
            var dateNow = $filter('date')(date, 'HH:mm:ss' );

            var _json = {
                Contrato: _infoTransfer.contract.contractNumber,
                Movimiento: 'Retiro',
                Importe:  _infoTransfer.transfer.import,
                Concepto: _infoTransfer.transfer.concepto
            };
            _json = JSON.stringify(_json);

            var json= {
                contractNumber : _infoTransfer.contract.contractNumber, //Contrato origen
                amount :_infoTransfer.transfer.import, //Cantidad a transferir
                CLABE: _infoTransfer.transfer.account.bankAccounts.clabe ? _infoTransfer.transfer.account.bankAccounts.clabe : _infoTransfer.transfer.account.bankAccounts.accountNumber,
                observations: _infoTransfer.transfer.concepto, //Detalles capturados por cliente
                name : _user,
                transactionDate: time,
                transactionTime : dateNow,
                extensionNumber : _infoTransfer.transfer.media.text === 'TELEFONO' ? _infoTransfer.transfer.media.phone : null,
                key : _infoTransfer.transfer.media.id,
                comments : _infoTransfer.transfer.binnacle.observation,
                tracingKey: _infoTransfer.transfer.media.id,
                jsonDetails: _json
            };

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.makeTransferOtherAccount,
                        data: $.param(json),
                    }).then(function( _res ){
                        resolve( _res.data );
                    });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        Transfers.prototype.getOtherAccounts = function( _contract, _clientId ) {
            var _type = _contract.companyName === 'Casa' ? '02' : '01'; //01 banco, 02 casa
            return $http({
                method: 'GET',
                url: URLS.getOtherAccounts + _type + '/' + _clientId + '/' +  _contract.contractNumber  + '?language=SPA&accountStatus=1',
            });
        };


        Transfers.prototype.getTransfers = function( _id , _contractType) {
            var _type =   _contractType === 'Casa' ? '02' : '01';
            var date= new Date();
            var day = date.getDate() < 10 ? '0'+date.getDate() : date.getDate();
            var month = (date.getMonth()+1) < 10 ? '0'+ (date.getMonth() +1 ) : (date.getMonth() +1);
            //var monthB = (date.getMonth()+1) < 10 ? '0'+ (date.getMonth() -1 ) : (date.getMonth() -1);
            var stringDate = day  +'' + month +''+ date.getFullYear();
            //var stringLastDate = day  +'' + monthB +''+ date.getFullYear();

            return $http({
                method: 'GET',
                url: URLS.getTransfers + _id  + '/' + stringDate + '/' + stringDate + '/' + _type +'?language=SPA',
            });
        };


        Transfers.prototype.getMedia = function( ) {
            return $http({
                method: 'GET',
                url: URLS.getMedia,
            });
        };

        Transfers.prototype.getMediaBnak = function( ) {
            return $http({
                method: 'GET',
                url: URLS.getMediaBank + '?language=SPA'
            });
        };


        Transfers.prototype.getBankContractSPEIMovementsQuery = function( _model) {
            return $http({
                method: 'GET', 
                url: URLS.getBankContractSPEIMovementsQuery,
               // url:URLS.getTemporal,
                params:{
                    contractNumber:_model.contractNumber,
                    bankingArea:_model.bankingArea,
                    requirementFlag:_model.requirementFlag,
                    language:'SPA'

                } 
            });
        };

        return new Transfers();
    }

    angular.module('actinver.services')
        .service('transfersSrv', transfersSrv);
})();

( function(){
    "use strict";

    binnacleWidgetCtrl.$inject = ['userConfig', 'binnacleInfo', 'binnacleReportsSrv'];
    function binnacleWidgetCtrl( userConfig, binnacleInfo, binnacleReportsSrv ){
        var vm = this;

        // Binnacle
        vm.details = {
            finish: false
        }; 

        var adviser = {
            type        : 'profile',
            show_info   : '',
            filter      : ''
        };

        binnacleReportsSrv.getInfo( adviser )
        .then( function successCallback( response ){ 
            vm.details = binnacleInfo.showInfo( response, 1 );
        }, function errorCallback( error ){
            vm.details = error;
        } );

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'binnacleWidgetCtrl', binnacleWidgetCtrl );

})();

(function(){
    "use strict";

    function binnacle(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/binnacle/binnacle.html',
            controller: 'binnacleWidgetCtrl',
            controllerAs: 'binnacleWidget'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'binnacle', binnacle );
} )();
(function() {
    'use strict';

    CalendarSrv.$inject = ['$http', 'URLS', '$q', 'ErrorMessagesSrv'];
    function CalendarSrv( $http, URLS, $q, ErrorMessagesSrv ) {

        var urls = {
            BirthDays: URLS.getBirthDays,
            messages: URLS.getCurrentMessages,
        };
        /**
        *  Calendar
        */
        function Calendar(){}

        Calendar.prototype.getMessages = function ( _type, _id ) {
            return $q(function( resolve, reject ){

                $http({
                    method: 'GET',
                    url: urls[_type] + _id,
                    params:{
                        language:'SPA'
                    },
                    ignoreLoadingBar: true
                })
                .then( function( _res){
                    if( _res.data.status === 1){
                        resolve(
                            _res.data.result
                        );
                    }
                    else{
                        reject(

                        );
                    }
                });
            });
        };

        Calendar.prototype.getAppointments = function ( _model ) {
            return $q(function( resolve, reject ){

                $http({
                    method: 'POST',
                    url: URLS.getAppointments,
                    ignoreLoadingBar: true,
                    params:{
                        language: 'SPA'
                    },
                    data: $.param(_model)
                })
                .then( function( _res){
                    if( _res.data.status === 1){
                        resolve(
                            _res.data.result
                        );
                    }
                    else{
                        reject();
                    }
                }).catch( function () {
                    reject ( { error : 'Ha ocurrido un error' } );
                });
            });
        };

        Calendar.prototype.getMessageDetail = function(idEmployee,idMessage){
            return $q(function(resolve,reject){
                $http({
                    method:'POST',
                    url:URLS.getMessageDetail,
                    params:{
                        language:'SPA'
                    },
                    data:$.param({
                        idEmployee:idEmployee,
                        idMessage:idMessage
                    })
                }).then(function(response){
                    if(response.data.status===1){
                        resolve(response.data.result[0]);
                    }
                    else{
                        ErrorMessagesSrv(response.data.messages);
                        reject();                        
                    }
                }).catch(reject);
            });
        };

        Calendar.prototype.getClientDetail = function(contract, origen ){
            var parametros = null;
                
            if(origen === "CB"){ //tipo casa
                parametros='?bankingArea=998&clientNumber=&contractNumber='+contract +'&descripcion=&language=SPA&titularFlag=true&typeQuery=2';
            }else if(origen === "BANCO"){//tipo banco
                parametros='?bankingArea=999&clientNumber=&contractNumber='+contract +'&descripcion=&language=SPA&titularFlag=true&typeQuery=2';
            }              
            
            return $http.get( URLS.getClientInfo+ parametros )
            .then( function ( _response ) {

                    if ( typeof _response !== 'undefined' && _response.data.outCommonHeader.result.result === 1 ) {
                        return _response && _response.data;
                    } else {
                        return _response.data;
                    }
                }, function error(){
                    reject( {success: false, data:[], msg:'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk'} );
                });
          };
          
        return new Calendar();
    }

    angular
        .module( 'actinver.services' )
        .service( 'CalendarSrv', CalendarSrv ) ;

})();

(function(){
    "use strict";

    actCalendar.$inject = ['modalActivity', 'CommonModalsSrv', 'CalendarSrv', 'userConfig', '$filter', 'binnacleModalSrv', '$uibModal'];
    function actCalendar( modalActivity, CommonModalsSrv, CalendarSrv, userConfig, $filter, binnacleModalSrv, $uibModal ){

        var link = function( scope ){

            function setup(){
                loadBirthDays();
                loadMessages();
                loadAppointments( new Date() );
                scope.tooltip={
                    data: false
                };
            }


            function loadAppointments( _date ){
                scope.appointmentFilterIsToday=true;
                var newDate = $filter('date')( _date, 'yyyy-MM-dd');
                var modelAppointments = {
                    languaje: 'SPA',
                    mail    : userConfig.user.mail,
                    date    : newDate,
                    temp    : ''
                };
                CalendarSrv.getAppointments(  modelAppointments ).then(function(_res){
                    scope.appointments = _res;
                }).catch( function () {
                    scope.appointments = [];
                    //console.error( 'Error de parametros' );
                });
            }

            scope.appointmentFilterIsToday=true;

            scope.toggleAppointmentFilter= function(){
                if(scope.appointmentFilterIsToday){
                    scope.updateCalendar();
                    scope.appointmentFilterIsToday=!scope.appointmentFilterIsToday;
                }
                else{
                    scope.updateCalendar();
                }
            };

            scope.isInAppointmentFilter= function(appointment){
                if(appointment.group==="Today" && scope.appointmentFilterIsToday){
                    return appointment;
                }
                else{
                    if(appointment.group!=="Today" && scope.appointmentFilterIsToday===false){
                        return appointment;
                    }
                }
            };

            function concantWeeks( _weeks ){
                return R.concat(
                    R.concat( _weeks.lastWeek, _weeks.currentWeek  ),
                    _weeks.nextWeek
                );
            }

            function loadBirthDays(){
                CalendarSrv.getMessages( 'BirthDays', userConfig.user.employeeID ).then(function(_res){
                    scope.birthdaysCurrentWeek = _res.currentWeek;
                    scope.BirthDays = concantWeeks( _res );
                });
            }

            function loadMessages(){
                CalendarSrv.getMessages( 'messages', userConfig.user.employeeID ).then(function(_res){
                    scope.messages = _res;
                });
            }


            scope.updateCalendar = function(){
                loadAppointments( scope.dateCalendar );
            };


            scope.addActivity=function(){

                var modalInstance = $uibModal.open({
                    templateUrl: '/scripts/modals/views/activity/add.html',
                    controller: 'addActivityCtrl',
                    controllerAs: 'activity',
                    resolve: {
                        title: function () {
                            return 'Agregar Actividades del día';
                        },
                        item: function(){
                            return undefined;
                        }
                    }
                }).closed.then(function(){
                    scope.updateCalendar();
                });
            };

            //scope.addActivity= R.curry( modalActivity.addActivity)( 'Agregar Actividades del día' );
            scope.editActivity= R.curry( modalActivity.addActivity)( 'Editar Actividades del día' );
            scope.notice=  modalActivity.notice;
            scope.deleteActivity= CommonModalsSrv.warning;


            scope.showNotice= function(message){
                CalendarSrv.getMessageDetail(userConfig.user.employeeID, message.idMessage)
                    .then(function(result){
                    modalActivity.notice(result).closed.then(function(){
                        loadMessages();
                    });
                });
            };

            scope.more = function(){
                scope.mores = true;
            };

            scope.close = function(){
                scope.mores = false;
            };

            scope.showClientInfo = function (client){               
              
                var message='';
                var _error='';

                CalendarSrv.getClientDetail(client.contract, client.origen.trim())
                .then(function(result){
                    if(result.outCommonHeader.result.result === 2){
                        _error=result.outCommonHeader.result.messages;
                       angular.forEach(_error, function (_res) {
                           if (_res.responseMessage) {
                               message += _res.responseMessage + '<br>';
                           }
                       });
                       CommonModalsSrv.error(message);
                       return;
                   }
  
                if( result.outClientOrContractClientInfoQuery && result.outClientOrContractClientInfoQuery.client && result.outClientOrContractClientInfoQuery.client.length != 0
                  && result.outClientOrContractClientInfoQuery.client[0].email.length != 0 ){
                   client.email = result.outClientOrContractClientInfoQuery.client[0].email[0].email;
                   client.phoneNumber =  result.outClientOrContractClientInfoQuery.client[0].telephoneData.length != 0 ? Number(result.outClientOrContractClientInfoQuery.client[0].telephoneData[0].phoneNumber) : '';
                   binnacleModalSrv.showClientInfo( client );
                }else{
                    CommonModalsSrv.error('No se encontró información del cliente.');
                }

                }, function (error) {
                    CommonModalsSrv.error(error.msg);
                }).finally(function () {

                });

               
            };

            setup();
        };

        return {
            restrict: 'EA',
            replace: true,

            templateUrl: '/scripts/directives/calendar/calendar.html',
            scope: true,
            link : link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actCalendar', actCalendar );


} )();

( function(){
    'use strict';

    capitalsDollCtrl.$inject = ['$rootScope', '$scope', 'capitalsDollSrv', 'contractTypeSrv', 'moneyDollSrv', 'transfersSrv', 'TableStationsSrv', '$log', 'CommonModalsSrv', 'investmentSrv', '$sessionStorage', 'ErrorMessage', 'moment', 'loginSrvc'];
    function capitalsDollCtrl( $rootScope, $scope, capitalsDollSrv, contractTypeSrv, moneyDollSrv, transfersSrv, TableStationsSrv, $log, CommonModalsSrv, investmentSrv, $sessionStorage, ErrorMessage , moment, loginSrvc){
        var vm = this;
        var titlesForOrders;
        var userName = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
        vm.regex = '\\d+MK|\\d+mk|\\d+mK|\\d+Mk|\\d+K|\\d+k|\\d';

        var sendModel;
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);
        vm.isPropia = contract.isPropia;
        vm.isEligible = contract.isEligible;

        vm.validateTitles = function (_orderType, _titles) {
            vm.LPmessage = false;
            vm.VOmessage = false;
            if(_orderType !== undefined) {
                if ((_orderType.shortKey.trim() === 'LP' || _orderType.shortKey.trim() === 'DC') && _titles < 100) {
                    vm.LPmessage = true;
                    vm.VOmessage = false;
                } else if ((_orderType.shortKey.trim() === 'VO' || _orderType.shortKey.trim() === 'MA') && _titles < 2000) {
                    vm.VOmessage = true;
                    vm.LPmessage = false;
                }
            }
        };
        vm.tipoMedio={
            msg : '',
            showMsg:false
        };

        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 4
            if(_new.id === "4"){
                loginSrvc.validateUserTokens().then(function success(response){
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error){
                    resetTipoMedio(error.success, error.msg);
                });
            }else{
                resetTipoMedio(true, '');
            }
        };

        function resetTipoMedio(success, msg){
            vm.tipoMedio.msg =  success ? '': msg;
            vm.tipoMedio.showMsg = !success;
        }

        function setup(){
            setupVars();
            getAllStations(); //carga todas la emisoras para el filtro
            initLoads();
            getTitles();
        }

        vm.cleanModels = function(){
            newState( false );
            /*resetTipoMedio(true, '');
            //se resetea el tipo de media
            vm.cmd.media.type = null;*/
            vm.cmd.station = null;
            vm.cmd.priceStation = null;
            vm.cmd.binnacle.comments = null;
        };

        $scope.$watch( 'stations', function () {
            if ( $scope.stations ) {
                vm.stations = $scope.stations;
            }
        });

        //determina si el clic fue venta o compra del stations
        $rootScope.$watch( 'actionStation', function(){
            if( $rootScope.actionStation && $rootScope.actionStation.operationType === 'Casa'){
                    vm.confirmationModel = null;
                    vm.loading = true;
                    vm.AddStation($rootScope.actionStation.station );                
                    vm.changeTab($rootScope.actionStation.type);
                }
            }
        );


        vm.getOrderValidity = function (_id) {            
            vm.cmd.orderValidity = undefined;
            vm.orderValidity = undefined;
            if(_id === 'BMV'){
                _id = '1';
            }else if(_id === 'BIVA'){
                _id = '2';
            }else if(vm.cmd.order.value.stockMarketValueType.trim() == '0'){
                _id = '0';
            }

            capitalsDollSrv.getOrderValidity(_id, vm.cmd.order.value.shortKey).then(function( _res ){
                var _order = _res.data.outOrderValidityQuery.orderType;
                var _orderValidity = [];
                angular.forEach(_order,function(value){
                    _orderValidity.push({id : value.key, text : value.businessKey});
                });
                vm.orderValidity = _orderValidity;
            });
        };

        vm.changeOperationType = function (_order) {

            if($rootScope.actionStation !== undefined){
                vm.cmd.typeStock = $rootScope.actionStation.station.feed;
            }else{
                vm.cmd.typeStock = '0';
            }

            if(_order.stockMarketValueType === '99' &&  vm.cmd.typeStock === 'BMV'){
                vm.cmd.typeStock = '1';
            }else if(_order.stockMarketValueType === '99' &&  vm.cmd.typeStock === 'BIVA'){
                vm.cmd.typeStock = '2';
            }else if(_order.stockMarketValueType === '99' &&  vm.cmd.typeStock === 'SOR'){
                vm.cmd.typeStock = '0';    
            }else if( _order.stockMarketValueType === '2'){
                vm.cmd.typeStock = '2';
            }else if( _order.stockMarketValueType === '1' || _order.stockMarketValueType === '99'){
                vm.cmd.typeStock = '1';
            }else if( _order.stockMarketValueType === '0' ){
                vm.cmd.typeStock = '0';
            }

            if(vm.cmd.order.value.shortKey.trim() !== 'SL' && vm.cmd.order.value.shortKey.trim() !== 'TS'){
                vm.getOrderValidity(vm.cmd.typeStock);
            }
            vm.showPrice = false;
            vm.showLimitPrice = false;
            vm.showVolume = false;
            vm.showVolMin = false;
            vm.cmd.operatorTypeRL = false;
            vm.cmd.operatorTypeRO = false;


            if(vm.cmd.order.value.shortKey.trim() === 'LP' || vm.cmd.order.value.shortKey.trim() === 'VO' ||
                vm.cmd.order.value.shortKey.trim() === 'BQ' || vm.cmd.order.value.shortKey.trim() === 'ET' ||
                vm.cmd.order.value.shortKey.trim() === 'EV' || vm.cmd.order.value.shortKey.trim() === 'PA'){
                vm.showPrice = true;
            }

            if(vm.cmd.order.value.shortKey.trim() === 'PR' || vm.cmd.order.value.shortKey.trim() === 'MA' ||
                vm.cmd.order.value.shortKey.trim() === 'MP' || vm.cmd.order.value.shortKey.trim() === 'LO' ||
                vm.cmd.order.value.shortKey.trim() === 'MO' || vm.cmd.order.value.shortKey.trim() === 'PA' ||
                vm.cmd.order.value.shortKey.trim() ==='XM'){
                vm.showLimitPrice = true;
            }

            if(vm.cmd.order.value.shortKey.trim() === 'VO' || vm.cmd.order.value.shortKey.trim() === 'LO' ){
                vm.showVolume = true;
            }

            if( vm.cmd.order.value.shortKey.trim() ==='XM'){
                vm.showVolMin = true;
            }

            if( vm.cmd.order.value.shortKey.trim() === 'BQ' || vm.cmd.order.value.shortKey.trim() === 'ET' ||
                vm.cmd.order.value.shortKey.trim() === 'EV' || vm.cmd.order.value.shortKey.trim() === 'LO' ||
                vm.cmd.order.value.shortKey.trim() === 'LP' || vm.cmd.order.value.shortKey.trim() === 'MC' ||
                vm.cmd.order.value.shortKey.trim() === 'PA' || vm.cmd.order.value.shortKey.trim() ==='XM' ||
                vm.cmd.order.value.shortKey.trim() === 'ML'){
                vm.cmd.operatorTypeRO = true;
            }

            if(vm.cmd.order.value.shortKey.trim() === 'HC' || vm.cmd.order.value.shortKey.trim() === 'LO' ||
                vm.cmd.order.value.shortKey.trim() === 'LP' || vm.cmd.order.value.shortKey.trim() === 'MA' ||
                vm.cmd.order.value.shortKey.trim() === 'MC' || vm.cmd.order.value.shortKey.trim() === 'MP' ||
                vm.cmd.order.value.shortKey.trim() === 'PA' || vm.cmd.order.value.shortKey.trim() === 'VO' ||
                vm.cmd.order.value.shortKey.trim() === 'XM' || vm.cmd.order.value.shortKey.trim() === 'ML'){
                vm.cmd.operatorTypeRL = true;
            }

            if(vm.cmd.operatorTypeRO === true && vm.cmd.operatorTypeRL === true){
                vm.cmd.operatorType = 'RL';
            }else if(vm.cmd.operatorTypeRO === true){
                vm.cmd.operatorType = 'RO';
            }else if(vm.cmd.operatorTypeRL === true){
                vm.cmd.operatorType = 'RL';
            }
        };

        function validateStation( _station){
            var name;
            var newStation = angular.copy( _station );
            if( typeof newStation.issuer !== 'object'){
                name = newStation.issuer;
                newStation.issuer ={
                    issuerName: name,
                    serie: newStation.serie
                };
            }
            return newStation;
        }

        vm.AddStation = function( _station ){
            var _id = '0';
            if( _station){
                vm.cmd.station = validateStation(_station);
                if(_station.issuer && _station.issuer.issuerName){
                    vm.cmd.priceStation = _station.lastPrice;
                    vm.cmd.order.model.maxPrice = _station.tradeBuyPrice;
                }else{
                    vm.cmd.priceStation = _station.weightedLastPrice;
                    vm.cmd.order.model.maxPrice = _station.weightedLastPrice;
                }
                searchTtitles();
                changeEmisora();
            
                if(_station.feed === 'BMV'){
                    _id = '1';
                }else if(_station.feed === 'BIVA'){
                    _id = '2';
                }
                vm.cmd.typeStock = _id;
            }
        };

        function changeEmisora () {
            $rootScope.$broadcast('select-emisora-toTable-cb', vm.cmd.station);
        }

        vm.modify = function(){
            vm.confirmationModel = null;
        };

        vm.changeTab = function( _tab ){
            vm.tab = _tab;
            newState(false);
            vm.cmd.evtentType = _tab;
            $scope.columnsExpand= false;
            $scope.focusElement();
            vm.cmd.order.type = 'basic';
            vm.dataListTipoOrdenesFilter = vm.statusOrders;
            vm.dataListTipoOrdenesFilterSell = vm.statusOrdersSell;

            var _orders;
            if(vm.tab === 'sell'){
                _orders = vm.statusOrdersSell;
            }else{
                _orders = vm.statusOrders;
            }
            if( _orders.length > 0){
                var item = R.find(function(_val){
                    return  _val.orderType === 'LP';
                },  _orders);
                vm.cmd.order.value = item;
                vm.cmd.typeStock = '1';
                vm.getOrderValidity('1');
                vm.changeOperationType(item);
            }
        };


        function getTitleValue( _str) {
            var str = _str;
            var _title;
            str.toUpperCase();
            if((/MK/i.test(str))){
                _title = str.replace(/\D+/g,'');
                _title = parseInt(_title)  * 1000000;
            }else if((/K/i.test(str))){
                _title = str.replace(/\D+/g,'');
                _title = parseInt(_title);
                _title = _title * 1000;
            }else{
                _title =  vm.cmd.order.model.titles;
            }
            return _title;
        }
        vm.confirm = function(){
            vm.cmd.titlesMK = getTitleValue(vm.cmd.order.model.titles);
            vm.loading = true;
            if(vm.cmd.order.value.shortKey === 'SL' || vm.cmd.order.value.shortKey === 'TS'){
                sendModel = {
                    contractNumber : $scope.contract,
                    coupon: 0,
                    issuerName: vm.cmd.station.issuer.issuerName,
                    serie: vm.cmd.station.issuer.serie,
                    movement: vm.cmd.order.value.shortKey.trim(),
                    lowerPercentage: vm.cmd.order.value.shortKey.trim() === 'TS' ? vm.cmd.order.model.floorPricePercentage : 0,
                    higherPercentage: vm.cmd.order.value.shortKey.trim() === 'TS' ? vm.cmd.order.model.ceilingPricePercentage : 0,
                    lowerPrice: vm.cmd.order.value.shortKey.trim() === 'SL' ? vm.cmd.order.model.floorPrice : 0,
                    higherPrice: vm.cmd.order.value.shortKey.trim() === 'SL' ? vm.cmd.order.model.ceilingPrice : 0,
                    stopType: 'MA',
                    sellingTitles: vm.cmd.titlesMK,
                    name: $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName,
                    /*instructionDate: moment(vm.cmd.date).format('DDMMYYYY'),
                    instructionTime: vm.cmd.media.type.text === 'TELEFONO' ? vm.cmd.binnacle.time + ':00' : null,
                    extensionNumber: vm.cmd.media.type.text === 'TELEFONO' ? vm.cmd.binnacle.phone : null,
                    tracingKey: vm.cmd.media.type.id,
                    comments: vm.cmd.binnacle.comments,*/
                };
                sendModel = contractTypeSrv.sendBinnacle(vm.contractType, sendModel , vm.cmd);
                vm.confirmationModel = sendModel;
                vm.loading = false;
            }else{
                capitalsDollSrv.confirmDoll( vm.cmd, $scope.contract, userName, vm.contractType)
                    .then(function( _res ){
                        vm.confirmationModel = _res.outCMOrderManagement.capitalMarketOrder;
                    })
                    .catch( function(_res){
                        var error = R.find( function( _val ){
                            if( _val.responseType === 'N' ){
                                return _val.responseCategory === 'FATAL' || _val.responseCategory === 'ERROR' || _val.responseCategory === 'INFO' ;
                            }
                        } )( _res);

                        var message = error ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';
                        CommonModalsSrv.error( message );
                    })
                    .finally(function(){
                        vm.loading = false;
                    });
            }
        };

        vm.capture = function(){
            vm.loading = true;
            if(vm.cmd.order.value.shortKey === 'SL' || vm.cmd.order.value.shortKey === 'TS'){
                confirmStop ();
            }else{
                capitalsDollSrv.captureDoll( vm.cmd, $scope.contract, userName, vm.confirmationModel, vm.contractType)
                    .then(function( _res ){
                        vm.titlesMK  = getTitleValue(vm.cmd.order.model.titles);
                        var _total = (vm.cmd.priceStation * vm.cmd.titlesMK).toFixed(2);
                        var message;
                        if(_res.outCommonHeader.operationName === 'CMOrderManagement'){
                            vm.captureModel = {
                                res : _res.outCMOrderManagement.capitalMarketOrder,
                                outCMOrderManagement : {
                                    capitalMarketOrder : {
                                        netAmount : _total
                                    }
                                }
                            };
                            message = 'La '+ ( vm.tab==='buy' ? 'compra' : 'venta' ) +' se envió  de manera correcta.';
                            message += '<br>Con el folio de la operación <b>' +vm.captureModel.res.operationReference +'</b>';
                        }else{
                            vm.captureModel = vm.confirmationModel;
                            message =  _res.outAdviserPendingOpRegistration.operationsDetails[0].message;
                            message += '<br>Con el ID Registro <b>' +_res.outAdviserPendingOpRegistration.operationsDetails[0].operationID+'</b>';
                        }
                        $scope.$emit('updateCapitalsTab');
                        CommonModalsSrv.done(message);
                        vm.confirmationModel = null;
                        vm.captureModel = null;
                        newState(false);
                        if(vm.cmd.binnacle){
                            vm.cmd.binnacle = {
                                date: vm.cmd.binnacle.date
                            };
                        }
                    }).catch(function (_error) {
                    vm.loading = false;
                    var message = '';
                    angular.forEach(_error, function(_value){
                        message += _value.responseMessage + '<br>';
                    });
                    CommonModalsSrv.error(message);
                })
                    .finally(function(){
                        vm.loading = false;
                    });
            }


        };

        //recibe el evento que ha cambiado de tabs
        $rootScope.$on('select-emisora-toTable-changeTab-cb',function(){
            changeEmisora();
        });

        function confirmStop () {
            vm.loading = true;
            capitalsDollSrv.confirmStopLoss( sendModel )
                .then(function( _res ){
                    vm.captureModel = _res;
                    $scope.$emit('updateCapitalsTab');
                    var message = 'La venta se realizó de manera correcta.';
                    message += '<br>Con el folio de la operación <b>' +vm.captureModel.stopLoss[0].shares.operationReference +'</b>';
                    CommonModalsSrv.done(message);
                })
                .catch(function (_error) {
                    vm.loading = false;
                    var message = '';
                    angular.forEach(_error, function(_value){
                        message += _value.responseMessage + '<br>';
                    });

                    CommonModalsSrv.error(message);
                })
                .finally(function(){
                    vm.loading = false;
                });
        }

        vm.finish = function() {
            vm.confirmationModel = null;
            vm.captureModel = null;
            newState(false);
            vm.cmd.binnacle = {
                date: vm.cmd.binnacle.date
            };
        };

        function getTitles(){
            investmentSrv.getPortfolioInvestment( $scope.contract, 'MC')
            .then(function( _res ){
                if( _res.data.outCommonHeader.result.result === 1 ){
                    titlesForOrders = _res.data.outPortfolioDetailQuery.portfolios.portfolioDetail;
                }
            });
        }

        function searchTtitles(){
            if(titlesForOrders !== undefined){
                vm.titlesForSell = R.find( function( _station){
                    return _station.issuerName === vm.cmd.station.issuer.issuerName && vm.cmd.station.issuer.serie === _station.serie;
                }, titlesForOrders );
            }
        }

        function setupVars(){
            vm.statusOrders={
                close: [],
                advance: [],
                basic: [],
                stops: []
            };

            vm.confirmationModel = false;
            vm.captureModel = false;
            vm.cmd = {
                order:{
                    options:{
                        type: 'any'
                    },
                    model:{
                        term: 1,
                        maxPrice: '0'
                    }
                }
            };
        }

        function initLoads(){
            // Get current media list
            transfersSrv.getMedia().then(function( _res ){
                var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
                var _mediaType = [];
                angular.forEach(_media,function(value){
                    if(value.key !== '5'){
                        _mediaType.push({id : value.key,text : value.description});
                    }
                });
                vm.Media = _mediaType;
            });
            loadStations();
        }

        function getCurrentCash(){
            moneyDollSrv.getCurrentCash( $scope.contract ).then(function( _res ) {
                if( _res.data.outCommonHeader.result.result === 1 ){
                    vm.currentCash = _res.data.outA2KContractBalance.balance.buyingPowerData.cash48;
                    $rootScope.currentCash = vm.currentCash;
                }
            })
            .finally(function(){
                vm.loading = false;
            });
        }

        function getOrderCatalog(){
            capitalsDollSrv.getOrderCatalog().then(function(_res){
                refactorSelect(_res);
            }).catch(function (error) {
                CommonModalsSrv.error( ErrorMessage.createError( error.result.messages ) );
                vm.statusOrders = null;
            });
        }

        function loadStations(){
                vm.cmd.station = $scope.station; 
                getOrderCatalog();
        }

        function refactorSelect( _types ) {
            vm.statusOrders = _types.orderType;
            vm.statusOrdersSell = [];
            vm.statusRouting = _types.stockMarketType;
            R.forEach( function( _val ){
                _val.shortKey = _val.orderType;
                _val.description = _val.orderDescription;
            }, _types.orderType );

            R.forEach( function( _val ){
                vm.statusOrdersSell.push(_val);
            }, vm.statusOrders );
            vm.statusOrdersSell.push({areaKey: 1, key: "-1", shortKey: "TS", description: "TRAILING STOP"}, {areaKey: 1, key: "-1", shortKey: "SL", description: "STOP LOSS"});
        }

        function newState( _newState ) {
            vm.cmd.orderValidity = undefined;
            vm.orderValidity = undefined;
            if( vm.cmd.station ){
                searchTtitles();
            }
            if( _newState ){
                vm.tab = null;
                vm.cmd.media ={};
            }
            vm.newState = _newState;
            getCurrentCash();
            // vm.cmd.binnacle = {
            //     date: vm.cmd.binnacle.date
            // };
            vm.cmd.order = {
                options:{
                    type: 'any'
                },
                model:{
                    term: 1,
                    maxPrice: vm.cmd.order.model.maxPrice
                }
            };

        }


        /** obtiene todas la emisoras para el el filtro del muñeco */
        function getAllStations(){
            TableStationsSrv.getStations( $scope.contract,1 ,5 ).then(function( _arrayStations ){
                $rootScope.statiosnTable = _arrayStations;    
                //console.info("Total Emisoras:"+_arrayStations.length);
                //console.info("Emisoras por pestaña:"+(vm.stations?vm.stations.length:0));          
            })
            .catch( function(){
                $log.info('get stations error');
                $scope.stations = [];
            } )
            .finally(function(){
                //getOrderCatalog();
            });

        }

        setup();
    }

    angular.module( 'actinver.controllers')
        .controller( 'capitalsDollCtrl', capitalsDollCtrl);


})();

(function() {
    'use strict';

    capitalsDollSrv.$inject = ['$http', 'URLS', '$q', 'csrfSrv', 'contractTypeSrv', '$filter'];
    function capitalsDollSrv( $http, URLS, $q, csrfSrv, contractTypeSrv, $filter) {

        var volOculto, price, priceLimit, minimumVolume;
        var date = $filter('date')(new Date(), 'yyyy-MM-dd' );
        /**
        *  capitalsDoll
        */
        function capitalsDoll(){}

        // Get current catalog type order
        capitalsDoll.prototype.getOrderCatalog = function(){
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getOrderCatalog + '?language=SPA'
                })
                .then( function( _res){
                    if( _res.data.outCommonHeader.result.result === 1){
                        resolve(
                            _res.data.outOrdersTypeQuery.orderTypeCatalogData
                        );
                    }
                    else{
                        reject(
                            _res.data.outCommonHeader
                        );
                    }
                });
            });
        };

        capitalsDoll.prototype.confirmStopLoss = function (  sendModel ) {
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmStopLoss,
                        data: $.param(sendModel),
                    })
                        .then(function( _res ){
                            if( _res.data.outCommonHeader.result.result === 1 ){
                                resolve( _res.data.outStopLossTrailingStopRegistration );
                            }
                            else{
                                reject( _res.data.outCommonHeader.result.messages);
                            }
                        })
                        .catch(function (_error) {
                            reject(_error);
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        function validationType ( _type, _model ) {
            if(_type === 'LP' || _type === 'BQ' || _type === 'ET' || _type === 'EV' || _type === 'PA'){
                price = _model.priceStation ? _model.priceStation : _model.station.tradeSellPrice;
            }else if(_type === 'ML' ||_type === 'PD'||_type === 'XM'||_type === 'MP' ||_type === 'MC' || _type === 'MO' || _type === 'PR' || _type === 'MA' || _type === 'HC' || _type === 'LO' || _type === 'HC' || _type ==='DC'){
                price = 0;
            }else if(_type === 'VO'){
                price =_model.priceStation;
            }

            if(_type === 'VO' || _type === 'LO'){
                volOculto = _model.order.model.volOculto;
            }else{
                volOculto = 0;
            }

            if(_type === 'XM' || _model.orderValidity.text === 'MINFI'){
                minimumVolume = _model.order.model.volMin;
            }else{
                minimumVolume = 0;
            }

            if(_type === 'XM'|| _type === 'PR' || _type === 'MA' || _type === 'MP' || _type === 'LO' || _type === 'PA' || _type === 'MO' || _type === 'MP'){
               priceLimit  = _model.order.model.maxPrice;
            }else{
                priceLimit = 0;
            }

        }

        capitalsDoll.prototype.getOrderValidity = function (_id, _type){
            return $http({
                method: 'GET',
                url: URLS.getOrderValidity + _type + '/' + _id + '?language=SPA',
            });
        };

        capitalsDoll.prototype.confirmDoll = function ( _model, _contract, _user, _contractType ) {
            validationType(_model.order.value.shortKey, _model );
            var _sendModel = {
                contractNumber: _contract,
                issuerName:_model.station.issuer.issuerName,
                serie:_model.station.issuer.serie,
                iMovement: _model.evtentType === 'buy' ? 1 : 2,
                orderType: _model.order.value.shortKey,
                term: _model.order.model.term,
                securities:_model.titlesMK,
                price:price,
                priceLimit:priceLimit,
                percentage: volOculto,
                hiddenVolume:volOculto,
                minimumVolume: minimumVolume,
                fillOrKill:'N',
                actionType:'1', //Cotizacion
                agreementType: _model.order.value.agreementType,
                brokerageID: _model.typeStock,
                routing:_model.operatorType,
                name: _user,validityOrderTime: _model.order.options.time !== undefined ?  _model.order.options.time + ':00' : '00:00:00',
                validityType: _model.orderValidity.id,
                jsonDetails : ''
            };

            _sendModel = contractTypeSrv.sendBinnacle(_contractType, _sendModel , _model);

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmCapitalDoll,
                        data: $.param(_sendModel),
                    })
                        .then(function( _res ){
                            if( _res.data.outCommonHeader.result.result === 1 ){
                                resolve( _res.data );
                            }
                            else{
                                reject( _res.data.outCommonHeader.result.messages);
                            }
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        capitalsDoll.prototype.captureDoll = function (  _model, _contract, _user, _contractType) {
            var tipooperacion = '';
            if(_model.evtentType === 'buy'){
                tipooperacion = 'Compra';
            }else if(_model.evtentType === 'sell'){
                tipooperacion = 'Venta';
            }

            var _json = {
                Contrato: _contract,
                "Tipo de orden": tipooperacion,
                Emisora: _contractType.issuerName ,
                Precio: _contractType.price,
                Títulos: _contractType.titlesQty
                //Plazo: _model.order.model.term,
                //Comisión: _confirmModel.stockMarketOrderQuotation.orderQuotation.operationFeeAmount,
                //IVA: _confirmModel.stockMarketOrderQuotation.orderQuotation.vat
            };
            _json = JSON.stringify(_json);

            validationType(_model.order.value.shortKey, _model );
            var _sendModel = {
                contractNumber: _contract,
                issuerName:_model.station.issuer.issuerName,
                serie:_model.station.issuer.serie,
                iMovement: _model.evtentType === 'buy' ? 1 : 2,
                orderType: _model.order.value.shortKey,
                term: _model.order.model.term,
                securities:_model.titlesMK,
                price:price,
                priceLimit:priceLimit,
                percentage: volOculto,
                hiddenVolume:volOculto,
                minimumVolume: minimumVolume,
                fillOrKill:'N',
                actionType:'2',
                agreementType: _model.order.value.agreementType,
                brokerageID: _model.typeStock ? _model.typeStock : '0',
                routing:_model.operatorType,
                name: _user,
                validityOrderTime: _model.order.options.time !== undefined ?   _model.order.options.time + ':00' :  '00:00:00',
                validityType: _model.orderValidity.id, 
                jsonDetails : _json
            };
             //_model, _contract, _user, _contractType  var contract = JSON.parse(localStorage.getItem('contractSelected'));
            
            var contract =JSON.parse(localStorage.getItem('contractSelected'));
            _contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);
            _sendModel = contractTypeSrv.sendBinnacle(_contractType, _sendModel , _model);

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf () {
                    $http({
                        method: 'POST',
                        url: URLS.confirmCapitalDoll,
                        data: $.param(_sendModel),
                    })
                        .then(function( _res ){
                            if( _res.data.outCommonHeader.result.result === 1 ){
                                resolve( _res.data );
                            }
                            else{
                                reject( _res.data.outCommonHeader.result.messages );
                            }
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };


        return new capitalsDoll();
    }

    angular
        .module( 'actinver.services' )
        .service( 'capitalsDollSrv', capitalsDollSrv ) ;

})();

(function(){
    "use strict";

    station.$inject = ['$timeout'];
    function station( $timeout ){

        function link( scope, $element ){
            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#station').focus();
                }, 200);
            };
        }


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/capitals-doll/capitals-doll.html',
            scope: {
                contract: '@',
                station: '=',
                ids: '=',
            },
            controller: 'capitalsDollCtrl',
            controllerAs: 'doll',
            link: link
        };

    }


    angular.module( 'actinver.directives' )
    .directive( 'actCapitalsDoll', station );


} )();

( function(){
    'use strict';

    function chartTooltip(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/chart-tooltip/chart-tooltip.html',
            scope: {
                tooltipData: '='
            },
            link: function( scope ){
                var tp = scope.tooltipData;

                function init( tooltip ){

                    // Tooltip element
                    var tooltipEl = document.getElementById( scope.tooltipData.id ),
                        positionY = this._chart.canvas.offsetTop,
                        positionX = this._chart.canvas.offsetLeft;

                    // Hide if no tooltip
                    if( tooltip.opacity === 0 ){
                        tooltipEl.style.opacity = 0;
                        return;
                    }

                    // Set Text
                    if( tooltip.dataPoints ){
                        tooltipEl.style.opacity = 1;
                        tooltipEl.style.left = positionX + tooltip.caretX + 'px';
                        tooltipEl.style.top = positionY + tooltip.caretY + 'px';
                        tooltipEl.innerHTML = tp.idxs ? tp.data[ tp.idxs[ tooltip.dataPoints[ 0 ].index ] ][ 2 ] : '';
                    }

                    return tooltipEl;

                }

                // Init custom tooltip
                scope.tooltipData.id = tp.id || 'chartjs-tooltip';
                tp.custom = init;

            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'chartTooltip', chartTooltip );

} )();

( function(){
    "use strict";

    capitalsIpcCtrl.$inject = ['$stomp', '$scope', 'URLS', '$log', '$timeout', 'capitalsIpcSrv', '$state'];
    function capitalsIpcCtrl( $stomp, $scope, URLS, $log, $timeout, capitalsIpcSrv, $state ){
        var vm = this;
        var timeoutPromise;
        // var subscribe;

        vm.ipcFact = {};

        function setup() {
            initCommision();
            initLastIPC();
            initSocket();
        }


        function initCommision(){
            var contract = JSON.parse( $scope.contract );
            capitalsIpcSrv.getCommission( contract.contractNumber ).then(function( _response ){            
                vm.amount1 = _response.commissionPercentage + '0';
            });
        }
        
        function initLastIPC() {
            capitalsIpcSrv.getLastIPC().then(function( _response ){

                if(angular.isArray(_response) && _response.length>0){
                    var initRecord = JSON.parse(JSON.stringify(_response[0]));
                    _response.forEach(function(reg){
                        if(new Date (initRecord.operationDate) < new Date (reg.operationDate) ){
                            initRecord = JSON.parse(JSON.stringify(reg));
                        }
                    });
                    vm.ipcFact.percentage = initRecord.percentage;
                    vm.ipcFact.index = initRecord.index;
                }
            });
        }


        function initSocket() {
            $stomp.setDebug(function (args) {
                $log.debug(args);
            });
            wsConnect();
        }

        function wsConnect() {
            // $stomp.disconnect();
            var _url = URLS.CapitalsWebSocket + '?access_token=' + sessionStorage.getItem("__token");
            $stomp.connect(_url, {}).then(successWsConnect, failWsConnect);
        }

        $scope.$on( 'disconnectCapitals', function() {
            // subscribe.unsubscribe();
            $stomp.disconnect().then(function () {
                //$log.info('disconnect socket capitals ipc');
            });
        });

        function calculateIpc( _payload ) {
            var percentage = _payload.tendency === 'B' ? _payload.percentage *-1 : _payload.percentage;
            return {
                "index": _payload.index,
                "percentage": percentage,
            };
        }

        function successWsConnect(){
            //$log.info(' connect socket capitals ipc');

            $timeout(function(){
                $stomp.subscribe('/topic/capitales/bmvIpcFacts', function(payload){
                    $scope.$apply(function (){
                        var newIpc= calculateIpc( payload );
                        vm.ipcFact.index = newIpc.index;
                        vm.ipcFact.percentage = newIpc.percentage;
                    });
                });
            },1000);
        }

        function failWsConnect() {
            $timeout.cancel( timeoutPromise );
            if( $state.is('investment.capitals') ){
                timeoutPromise = $timeout(wsConnect, 3000);
                $log.info('STOMP: Reconecting in 3 seconds');
            }
        }


        setup();
    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'capitalsIpcCtrl', capitalsIpcCtrl );

})();

(function() {
    "use strict";

    capitalsIpcSrv.$inject = ['$http', 'URLS', '$q'];
    function capitalsIpcSrv($http, URLS, $q ) {

        /**
        *  investment Service
        */
        function Capitals(){}

        Capitals.prototype.getLastIPC = function( ){
            return $q(function(resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getLastIPC + '?language=SPA',
                }).then(function(_response){
                    try{
                        if ( _response.data.outCommonHeader.result.result === 1) {
                            resolve( _response.data.outStockMarketIndexQuery.stockMarketIndexTuple );
                        }
                        else{
                            reject(
                                _response.data.outCommonHeader.messages
                            );
                        }
                    }
                    catch(err){
                        console.log( 'reference error: ' + err );
                    }
                });
            });
        };

        Capitals.prototype.getCommission = function( _contractId ){
            return $q(function(resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCommission + _contractId + '?language=SPA',
                }).then(function(_response){
                    try{
                        if ( _response.data.outCommonHeader.result.result === 1) {
                            resolve( _response.data.outContractCommissionAndValuationQuery );
                        }
                        else{
                            reject(
                                _response.data.outCommonHeader.messages
                            );
                        }
                    }
                    catch(err){
                        console.log( 'reference error: ' + err );
                    }
                });
            });
        };

        Capitals.prototype.getCommission34 = function( _contractId ){
            return $q(function(resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCommission34 + _contractId + '?language=SPA',
                })
                .then( function( _res ){
                    if( _res.data && _res.data.outCapitalBandCatalog.capitalBand ){

                        resolve(
                            _res.data.outCapitalBandCatalog.capitalBand
                        );
                    }
                    else{
                        reject(
                            _res.data.outCommonHeader.messages
                        );
                    }
                });
            });
        };


        return new Capitals();
    }

    angular.module('actinver.services')
        .service('capitalsIpcSrv', capitalsIpcSrv);
})();

(function(){
    "use strict";

    function capitalsIpc(){

        return {
            restrict: 'A',
            replace: true,
            scope: {
                contract : '@',
            },
            templateUrl: '/scripts/directives/capitals-ipc/ipc.html',
            controller: 'capitalsIpcCtrl',
            controllerAs: 'ipc'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'capitalsIpc', capitalsIpc );
} )();

(function () {
    'use strict';

    capitalsLuminaDollCtrl.$inject = ['$scope', '$rootScope', 'capitalsLuminaDollSrv', 'ErrorMessage', 'TableStationsSrv', '$log', 'CommonModalsSrv', '$sessionStorage', 'loginSrvc'];
    function capitalsLuminaDollCtrl($scope, $rootScope, capitalsLuminaDollSrv, ErrorMessage, TableStationsSrv, $log, CommonModalsSrv, $sessionStorage, loginSrvc) {
        var vm = this;
        //var titlesForOrders;
        var statusOrders = [
            { value: 'LP', type: 'basic' },
            { value: 'MC', type: 'basic' }
        ];
        vm.stepA = true;
        vm.bankingArea = '999';
        var contractSelected = JSON.parse(localStorage.getItem('contractSelected'));
        $scope.iscuentapropia = contractSelected.isPropia;
        vm.listTypeOperation  = [];
        vm.tipoMedio={
            msg : '',
            showMsg:false
        };

        setup();

        //recibe el evento que ha cambiado de tabs
        $rootScope.$on('select-emisora-toTable-changeTab',function(){
            changeEmisora();
        });

        function resetTipoMedio(success, msg){
            vm.tipoMedio.msg =  success ? '': msg;
            vm.tipoMedio.showMsg = !success;
        }

        function setup() {
            vm.stepA = true;
            setupVars();
            initLoads();
            getCurrentCash();
            searchTitles();
            getAllStations();
            loadTypeOperation();
        }

        vm.changeSelect = function () {
            vm.dataListTipoOrdenesFilter = vm.statusOrders[ 'basic'];
            vm.cmd.order.model = {
                term: 1
            };
        };

        vm.cleanModels = function () {
            setupVars();
            newState(false);
            resetTipoMedio(true, '');
        };

        vm.recalcularMontoAprox = function () {
            vm.montoaprox = vm.cmd.order.model.titles * vm.cmd.priceStation;
        };

        vm.changeOrdeType = function(){
            if(vm.cmd && vm.cmd.order && vm.cmd.order.value && vm.cmd.order.value.key !== 3 && vm.cmd.libroomesa === 'Desk'){ //si no es mercado
                vm.cmd.order.orderTypeOperation = null;               
            }
            vm.recalcularMontoAprox();

        };

        function changeEmisora () {
            $rootScope.$broadcast('select-emisora-toTable', vm.cmd.station);
        }

        $rootScope.$watch( 'actionStation', function(){
            if( $rootScope.actionStation && $rootScope.actionStation.operationType === 'Banco' ){
                vm.confirmationModel = null;
                vm.loading = false;
                vm.AddStation($rootScope.actionStation.station);
                $scope.contract = $rootScope.actionStation.contract;
                vm.changeTab($rootScope.actionStation.type);
            }
        });


        vm.changeTime = function () {
            $scope.time = true;
            if (parseInt(vm.cmd.order.model.term) > 1) {
                $scope.time = false;
            }
        };

        function validateStation(_station) {
            var name;
            var newStation = angular.copy(_station);
            if (typeof newStation.issuer !== 'object') {
                name = newStation.issuer;
                newStation.issuer = {
                    issuerName: name,
                    serie: newStation.serie
                };
            }
            return newStation;
        }

        vm.AddStation = function (_station) {
            if (_station) {
                vm.cmd.typeStock = '0'; //SE DEJA SOLO '0' ya que solo aplica para SOR --MC BCO
                vm.cmd.station = validateStation(_station);
                vm.cmd.priceStation = _station.tradeBuyPrice !== undefined ? _station.lastPrice : _station.weightedLastPrice;
                vm.cmd.ultimoecho = _station.lastPrice;
                //vm.tab = $rootScope.actionStation ? $rootScope.actionStation.type : ( vm.tab ? vm.tab : 'sell');
                vm.cmd.evtentType = vm.tab;
                vm.cmd.modify = _station.modify;
                vm.cmd.orderReference = _station.orderReference;
                searchTitles();
            }
        };


        function searchTitles(){
            if($rootScope.capitalsPortfolioBank !== undefined){
                vm.titlesForSell = R.find( function( _station){
                    if(vm.cmd.station !== undefined){
                        if(vm.cmd.station.weightedLastPrice ){
                            return _station.instrumentDesc.operationType === vm.cmd.station.issuer.issuerName;
                        }else{
                            return _station.instrumentDesc.operationType === vm.cmd.station.instrumentDesc;
                        }
                    }
                }, $rootScope.capitalsPortfolioBank );
            }
        }

        vm.AddStationfromdoll = function (_station) {
            vm.AddStation(_station);
            changeEmisora();
            getOrderCatalog();
        };

        vm.modify = function () {
            vm.confirmationModel = null;
        };

        vm.changeTab = function (_tab) {
            vm.tab = _tab;
            newState(false);
            vm.cmd.evtentType = _tab;
            $scope.columnsExpand = false;
            $scope.focusElement();
        };

        vm.cambioBolsaOperar = function (tipo){
            vm.typeStock = tipo.feed;
            vm.montoaprox = tipo === 'SOR' ? vm.montoaprox : null ;
            if($rootScope.statiosnTableBank && vm.cmd.station){
                var record = $rootScope.statiosnTableBank.filter(function(reg){
                    return reg.issuer.issuerSerie ===  vm.cmd.station.issuer.issuerSerie && reg.feed === tipo;
                });
                if(record && record.length>0){
                   vm.AddStationfromdoll(record[0]);
                }
            }
        };

        vm.confirm = function () {
            vm.loading = true;
            if (vm.cmd.order.type === 'stops') {
                confirmStop();
            } else {
                capitalsLuminaDollSrv.confirmDoll(vm.cmd, $scope.contract)
                    .then(function (_res) {
                        vm.confirmationModel = _res;
                    })
                    .catch(function (_res) {
                        var error = null;
                        if (_res.length >= 2) {
                            error = _res[1];
                        } else {
                            error = R.find(function (_val) {
                                if (_val.responseType === 'N' || _val.responseType === 'T') {
                                    return _val.responseCategory === 'FATAL' || _val.responseCategory === 'ERROR' || _val.responseCategory === 'INFO';
                                }
                            })(_res);
                        }


                        var message = error !== null ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';
                        CommonModalsSrv.error(message);
                    })
                    .finally(function () {
                        vm.loading = false;
                    });
            }
        };

        vm.capture = function () {
            vm.loading = true;
            // var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            capitalsLuminaDollSrv.captureDoll(vm.cmd, $scope.contract)
                .then(function (_res) {
                    var _total = (vm.cmd.priceStation * vm.cmd.order.model.titles).toFixed(2);
                    var message;

                    if (_res.outCommonHeader.operationName === 'CMEquityOrderRegistration') {
                        vm.captureModel = {
                            res: _res.outCMEquityOrderRegistration.orderDetail,
                            CMEquityOrderRegistration: {
                                orderDetail: {
                                    netAmount: _total
                                }
                            }
                        };
                        message = 'Orden enviada con folio: ' + _res.outCMEquityOrderRegistration.orderDetail.orderID;
                        getCurrentCash();
                    } else {
                        vm.captureModel = vm.confirmationModel;
                        message = _res.outAdviserPendingOpRegistration.operationsDetails[0].message;
                        message += '<br>Con el ID Registro <b>' + _res.outAdviserPendingOpRegistration.operationsDetails[0].operationID + '</b>';
                    }
                    $scope.$emit('updateCapitalsTab');
                    CommonModalsSrv.done(message);
                    vm.confirmationModel = null;
                    vm.captureModel = null;
                    newState(false);
                    vm.cmd.binnacle = {
                        date: vm.cmd.binnacle.date
                    };
                }).catch(function (_error) {
                    vm.loading = false;
                    var message = '';
                    angular.forEach(_error, function (_value) {
                        message += _value.responseMessage + '<br>';
                    });
                    CommonModalsSrv.error(message);
                })
                .finally(function () {
                    vm.loading = false;
                });
        };

        function confirmStop() {
            vm.loading = true;
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            capitalsLuminaDollSrv.confirmStopLoss(vm.cmd, $scope.contract, _user)
                .then(function (_res) {
                    vm.captureModel = _res;
                    $scope.$emit('updateCapitalsTab');
                    var message = 'La venta se envió de manera correcta.';
                    CommonModalsSrv.done(message);
                })
                .catch(function (_error) {
                    vm.loading = false;
                    var message = '';
                    angular.forEach(_error, function (_value) {
                        message += _value.responseMessage + '<br>';
                    });

                    CommonModalsSrv.error(message);
                })
                .finally(function () {
                    vm.loading = false;
                });
        }

        vm.finish = function () {
            vm.confirmationModel = null;
            vm.captureModel = null;
            newState(false);
            vm.cmd.binnacle = {
                date: vm.cmd.binnacle.date
            };
        };

        function setupVars() {
            vm.statusOrders = {
                close: [],
                advance: [],
                basic: [],
                stops: []
            };

            vm.confirmationModel = false;
            vm.captureModel = false;
            vm.cmd = {
                order: {
                    type: 'basic',
                    options: {
                        type: 'any'
                    }
                }
            };
            vm.dataListTipoOrdenesFilter = vm.statusOrders[vm.cmd.order.type];
            vm.cmd.libroomesa = 'Book';
            vm.elegible = contractSelected.isEligible;
        }

        function initLoads() {
            // Get current media list
            capitalsLuminaDollSrv.getMediaBank().then(function (_res) {
                var _media = _res.data.result;
                var _mediaType = [];
                angular.forEach(_media, function (value) {
                    if(value.key !== "5"){
                    _mediaType.push({
                        id: value.identifier,
                        text: value.instructionTypeDescription
                    });
                }
                });
                vm.Media = _mediaType;
            });
            if($scope.iscuentapropia){
                vm.cmd.media =
                {
                    type : {"id":"7","text":"E-MAIL"}
                };
            }
            //loadStations();
        }

        function getCurrentCash() {
            var contractBalance = null;
            capitalsLuminaDollSrv.bankContractBalance($scope.contract, vm.bankingArea)
                .then(function (_res) {
                    if (_res.data.outCommonHeader.result.result === 1) {
                        contractBalance = _res.data.outBankContractBalance.balanceData;
                        vm.balance = contractBalance;
                    } else {
                        CommonModalsSrv.error(ErrorMessage.createError(_res.data.outCommonHeader.result.messages));
                        vm.newStateInit = true;
                        vm.confirmationModel = false;
                        vm.loading = false;
                    }
                }).catch(function (_res) {
                    CommonModalsSrv.error(ErrorMessage.createError(_res.data.outCommonHeader.result.messages));
                    vm.newStateInit = true;
                    vm.confirmationModel = false;
                    vm.loading = false;
                });
        }



        function getOrderCatalog() {
            var orderType = [];
            /*if (vm.tab === 'sell') {
                orderType = [
                    { areaKey: 1, key: "2", shortKey: "LP", description: "LIMITADA POR PRECIO " },
                    { areaKey: 1, key: "3", shortKey: "MC", description: "A MERCADO " }
                ];
                refactorSelect(orderType);
            } else {
                if (vm.cmd.station) {
                    capitalsLuminaDollSrv.getOrderCatalog(vm.cmd.station, $scope.contract, vm.bankingArea)
                        .then(function (_res) {
                            orderType = _res;
                            refactorSelect(orderType);
                        })
                        .catch(function (_error) {
                            //vm.loading = false;
                            var message = '';
                            angular.forEach(_error, function (_value) {
                                message += _value.responseMessage + '<br>';
                            });
                            CommonModalsSrv.error(message);
                        });
                }
            }*/

            if (vm.cmd.station) {
                capitalsLuminaDollSrv.getOrderCatalog(vm.cmd.station, $scope.contract, vm.bankingArea)
                    .then(function (_res) {
                        orderType = _res;
                        refactorSelect(orderType);
                    })
                    .catch(function (_error) {
                        //vm.loading = false;
                        var message = '';
                        angular.forEach(_error, function (_value) {
                            message += _value.responseMessage + '<br>';
                        });
                        CommonModalsSrv.error(message);
                    });
            }

        }

        function getAllStations(){
            TableStationsSrv.getStationsLumina( $scope.contract, $scope.ids.val1 ,"EQUITY","B")
                .then(function( _arrayStations ){
                    $rootScope.statiosnTableBank = _arrayStations;
                }).catch( function(){
                    $log.info('get stations error');
                    $scope.stations = [];
                } );
        }

        function loadStations() {
            TableStationsSrv.getStationsLumina( $scope.contract, $scope.ids.val1, "EQUITY","B")
                .then(function (_arrayStations) {
                // vm.cmd.station = $scope.station;
                vm.stations = _arrayStations;
            })
                .catch(function () {
                    $log.info('get stations error');
                    $scope.stations = [];
                })
                .finally(function () {
                    getOrderCatalog();
                });
        }

        function refactorSelect(_types) {
            vm.statusOrders.basic = [];
            R.forEach(function (_val) {
                var item = R.find(R.propEq('value', _val.shortKey.trim()))(statusOrders);
                if (item) {
                    vm.statusOrders[item.type].push(_val);
                }
            }, _types);
            vm.dataListTipoOrdenesFilter = vm.statusOrders[vm.cmd.order.type];
            getOrderType();
        }

        function newState(_newState) {
            vm.stepA = false;
            if (_newState) {
                //vm.tab = null;
                vm.cmd.media = {};
                //getOrderCatalog();
            }
            searchTitles();
            getOrderCatalog();
            vm.newState = _newState;
            getCurrentCash();
            vm.montoaprox = null;
            vm.cmd.order = {
                type: 'basic',
                model: {
                    term: 1,
                    titles: null
                },
                options: {
                    type: 'any'
                }
            };
            vm.dataListTipoOrdenesFilter = vm.statusOrders[vm.cmd.order.type];
            getOrderType();
        }

        function  getOrderType() {
            if($scope.ids.text === 'SIC'){
                vm.cmd.order.value = vm.dataListTipoOrdenesFilter[0];
            }
        }

        function loadTypeOperation(){
            TableStationsSrv.getOptionsTypeOperation().then(function(response){
                vm.listTypeOperation = response;
            }).catch(function(){
                vm.listTypeOperation = [];
            });
        }

        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 10 o 4
            if (_new.id === "10") {
                loginSrvc.validateUserTokens().then(function success(response) {
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error) {
                    resetTipoMedio(error.success, error.msg);
                });
            } else {
                resetTipoMedio(true, '');
            }
        };

    }

    angular.module('actinver.controllers')
        .controller('capitalsLuminaDollCtrl', capitalsLuminaDollCtrl);


})();

(function () {
    'use strict';

    capitalsLuminaDollSrv.$inject = ['$http', 'URLS', '$q', 'csrfSrv', 'moment'];
    function capitalsLuminaDollSrv($http, URLS, $q, csrfSrv, moment) {

        var volOculto, price, priceLimit;
        /**
        *  capitalsLuminaDoll
        */
        function capitalsLuminaDoll() { }

        // Get current catalog type order
        capitalsLuminaDoll.prototype.getOrderCatalog = function (_issuer, _contract, _bankingArea) {
            var serie, issuerName;
            if(_issuer.issuer.issuerSerie){
                issuerName = _issuer.issuer.issuerName;
                serie = _issuer.issuer.serie;
            }else{
                issuerName = _issuer.issuerName;
                serie = _issuer.serie;
            }



            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getOrdertypeCatalog + issuerName + '/' + serie +'/' +_contract + '/' + _bankingArea + '?language=SPA'
                })
                    .then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            resolve(
                                _res.data.result
                            );
                        }
                        else {
                            reject(
                                _res.data.outCommonHeader
                            );
                        }
                    });
            });
        };

        capitalsLuminaDoll.prototype.bankContractBalance = function (_contract, _bankingArea) {
            return $http({
                method: 'GET',
                url: URLS.bankContractBalance + _contract + '/' + _bankingArea,
                params: {
                    language: 'SPA'
                }
            });
        };

        capitalsLuminaDoll.prototype.getClientElegible = function (_contract, _bankingArea) {
            return $http({
                method: 'GET',
                url: URLS.getClientElegible + _contract + '/' + _bankingArea,
                params: {
                    language: 'SPA'
                }
            });
        };


        capitalsLuminaDoll.prototype.confirmStopLoss = function (_model, _contract, _user) {
            var sendModel = {
                contractNumber: _contract,
                coupon: 0,
                issuerName: _model.station.issuer.issuerName,
                serie: _model.station.issuer.serie,
                movement: _model.order.value.shortKey.trim(),
                lowerPercentage: _model.order.value.shortKey.trim() === 'TS' ? _model.order.model.floorPricePercentage : 0,
                higherPercentage: _model.order.value.shortKey.trim() === 'TS' ? _model.order.model.ceilingPricePercentage : 0,
                lowerPrice: _model.order.value.shortKey.trim() === 'SL' ? _model.order.model.floorPrice : 0,
                higherPrice: _model.order.value.shortKey.trim() === 'SL' ? _model.order.model.ceilingPrice : 0,
                stopType: 'MA',
                sellingTitles: _model.order.model.titles,
                name: _user,
                instructionDate: moment(_model.date).format('DDMMYYYY'),
                instructionTime: _model.media.type.text === 'TELEFONO' ? _model.binnacle.time + ':00' : null,
                extensionNumber: _model.media.type.text === 'TELEFONO' ? _model.binnacle.phone : null,
                tracingKey: _model.media.type.id,
                comments: _model.binnacle.comments,
            };

            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmStopLoss,
                        data: $.param(sendModel),
                    })
                        .then(function (_res) {
                            if (_res.data.outCommonHeader.result.result === 1) {
                                resolve(_res.data.outStopLossTrailingStopRegistration);
                            }
                            else {
                                reject(_res.data.outCommonHeader.result.messages);
                            }
                        })
                        .catch(function (_error) {
                            reject(_error);
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        function validationType(_type, _model) {
            if (_type === 'LP') {
                price = _model.priceStation ? _model.priceStation : _model.station.tradeSellPrice;
            } else if (_type === 'MC' || _type === 'PR' || _type === 'MA' || _type === 'MP' || _type === 'LO' || _type === 'HC' || _type === 'DC') {
                price = 0;
            } else if (_type === 'MO') {
                price = _model.order.model.maxPrice;
            } else if (_type === 'VO') {
                price = _model.priceStation;
            }

            if (_type === 'VO' || _type === 'LO') {
                volOculto = _model.order.model.volOculto;
            } else {
                volOculto = 0;
            }

            if (_type === 'PR' || _type === 'MA' || _type === 'MP' || _type === 'LO') {
                priceLimit = _model.order.model.maxPrice;
            } else {
                priceLimit = 0;
            }

        }


        capitalsLuminaDoll.prototype.confirmDoll = function (_model, _contract) {
            var _modelSend = {
                requestType: _model.media.type.id,
                language: 'SPA',						//requerido	 	lenguaje de consulta
                clientID: _contract,					//				Identificador del cliente. Dependerá de la definicion del campo de CLIENT_ID_TYPE
                clientTypeID: 'CLIENT_ID',				//				Indica si en el cliente se informara el CLIENT_ID o el SHORT_NAME del contrato
                eventID: 'ADD',					//requerido		Determina que acción debe realizar lumina con la información recibida compra/venta/modif
                action: 'VALIDATE',						//requerido		Indica si solo se debe validar o si se debe realizar la captura de la orden										
                legalEntity: 'BCO ACTINVER',					//requerido		Nombre Corto de la Entidad Legal												 	por default
                operationType: _model.evtentType === 'buy' ? 'B' : 'S',						//requerido		Compra o Venta															
                orderType: 'Single',					//requerido		Indica si es una orden global o una captura individual								por default
                destination: _model.libroomesa,					//requerido		Indica si la orden sera enviada al libro o mesa
                motive: '',							//				Indica el motivo por el cual una orden a la mesa para un cliente no elegible						
                //market: _model.typeStock ? (_model.typeStock === '1' ? 'BMV' : (_model.typeStock === '2' ? 'BIVA' : 'SOR' ) ) : 'BMV', //requerido		Código (o abreviatura) del mercado en el que opera
                market: 'SOR',
                equityOrderType: 'Lot',					//requerido		Tipo de orden de Equity																Que es este tipo de orden? 
                instrumentID: _model.station.instrumentDesc ? _model.station.instrumentDesc : _model.station.issuer.issuerName,				//requerido		Identificador del instrumento
                instrumentType: 'SHORT_NAME',			//				Indica si se usa el nombre corto , nombre largo o ISIN del instrumento en el tag SECURITY_ID					
                titlesQty: _model.order.model.titles,						    //requerido		Cantidad de títulos para la orden						
                comments: moment(_model.binnacle.date).format('YYYY-MM-DD') + ' | ' + _model.media.type.text + ' ' + (_model.media.type.id === "10" ? (_model.binnacle.phone + ' ' + _model.binnacle.time) : ' ') + ' | ' + _model.binnacle.comments,	 						//				Campo para comentarios
                // captureDate : '05092017', //moment(_model.binnacle.date).format('DDMMYYYY'),
                clientIDD: 'CLIENT_01',				//requerido		Indica el código del contrato del desglose											Que es el contrato ? 
                quantity: 0,						//antes tenia 1500 se removio por cero; requerido		Indica la cantidad por desglose
                fillOrKillFlag: _model.order.orderTypeOperation && _model.order.orderTypeOperation.id === 1 ? true : false, //indica que si es Fak(id=2) agrega 1 en caso contrario es 0
                executionFlag: _model.order.orderTypeOperation && _model.order.orderTypeOperation.id === 2 ? true : false, //indica que si es Fok(id=1) agrega 1 en caso contrario es 0
                jsonDetails: '',// 													cantidad de desglose ?
            };

            /*if (_model.modify) {
                _modelSend.eventID = 'MODIFY';
                _modelSend.orderID = _model.orderReference;
            }*/

            if (_model.order.value.shortKey !== 'MC') {
                _modelSend.titlePrice = _model.priceStation;
            }



            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmCapitalDollLumina,
                        data: $.param(_modelSend)
                    })
                        .then(function (_res) {
                            if (_res.data.outCommonHeader.result.result === 1) {
                                resolve(_res.data);
                            }
                            else {
                                reject(_res.data.outCommonHeader.result.messages);
                            }
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };


        capitalsLuminaDoll.prototype.captureDoll = function (_model, _contract) {

            var tipooperacion = '';
            if(_model.evtentType === 'buy'){
                tipooperacion = 'Compra';
            }else if(_model.evtentType === 'sell'){
                tipooperacion = 'Venta';
            }
            var _json = {
                Contrato: _contract,
                Movimiento: tipooperacion,
                "Tipo de orden": _model.order.value.description,
                Emisora: _model.station.instrumentDesc ? _model.station.instrumentDesc : _model.station.issuer.issuerName,
                Precio: _model.order.value.shortKey !== 'MC' ? _model.priceStation : '0.0',
                Títulos: _model.order.model.titles,
                Plazo: 1,
            };

            validationType(_model.order.value.shortKey.trim(), _model);

            var _modelSend = {
                requestType: _model.media.type.id,
                language: 'SPA',						//requerido	 	lenguaje de consulta
                clientID: _contract,				//				Identificador del cliente. Dependerá de la definicion del campo de CLIENT_ID_TYPE
                clientTypeID: 'CLIENT_ID',				//				Indica si en el cliente se informara el CLIENT_ID o el SHORT_NAME del contrato
                eventID: 'ADD',					//requerido		Determina que acción debe realizar lumina con la información recibida compra/venta/modif
                action: 'SAVE',						//requerido		Indica si solo se debe validar o si se debe realizar la captura de la orden										
                legalEntity: 'BCO ACTINVER',					//requerido		Nombre Corto de la Entidad Legal												 	por default
                operationType: _model.evtentType === 'buy' ? 'B' : 'S',						//requerido		Compra o Venta															
                orderType: 'Single',					//requerido		Indica si es una orden global o una captura individual								por default
                destination: _model.libroomesa,					//requerido		Indica si la orden sera enviada al libro o mesa
                motive: '',							//				Indica el motivo por el cual una orden a la mesa para un cliente no elegible						
                //market:  _model.typeStock ? (_model.typeStock === '1' ? 'BMV' : (_model.typeStock === '2' ? 'BIVA' : 'SOR' ) ) : 'BMV',							//requerido		Código (o abreviatura) del mercado en el que opera
                market: 'SOR',
                equityOrderType: 'Lot',					//requerido		Tipo de orden de Equity																Que es este tipo de orden? 						//				Volumen Minimo						
                instrumentID: _model.station.instrumentDesc ? _model.station.instrumentDesc : _model.station.issuer.issuerName,
                instrumentType: 'SHORT_NAME',			//				Indica si se usa el nombre corto , nombre largo o ISIN del instrumento en el tag SECURITY_ID					
                titlesQty: _model.order.model.titles,						    //requerido		Cantidad de títulos para la orden						
                comments: moment(_model.binnacle.date).format('YYYY-MM-DD') + ' | ' + _model.media.type.text + ' ' + (_model.media.type.id === "1" ? _model.binnacle.phone + ' ' + _model.binnacle.time : ' ') + ' | ' + _model.binnacle.comments,	 						//				Campo para comentarios 						
                clientIDD: 'CLIENT_01',				//requerido		Indica el código del contrato del desglose											Que es el contrato ? 
                quantity: 1500,						//requerido		Indica la cantidad por desglose														cantidad de desglose ?
                fillOrKillFlag: _model.order.orderTypeOperation && _model.order.orderTypeOperation.id === 1 ? true : false, //indica que si es Fak(id=2) agrega 1 en caso contrario es 0
                executionFlag: _model.order.orderTypeOperation && _model.order.orderTypeOperation.id === 2 ? true : false, //indica que si es Fok(id=1) agrega 1 en caso contrario es 0
                jsonDetails: JSON.stringify(_json),
            };

            if (_model.order.value.shortKey !== 'MC') {
                _modelSend.titlePrice = _model.priceStation;
            }

            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmCapitalDollLumina,
                        data: $.param(_modelSend),
                    })
                        .then(function (_res) {
                            if (_res.data.outCommonHeader.result.result === 1) {
                                resolve(_res.data);
                            }
                            else {
                                reject(_res.data.outCommonHeader.result.messages);
                            }
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        capitalsLuminaDoll.prototype.getMediaBank = function () {
            return $http({
                method: 'GET',
                url: URLS.getMediaBank + '?language=SPA',
            });
        };

        return new capitalsLuminaDoll();
    }

    angular
        .module('actinver.services')
        .service('capitalsLuminaDollSrv', capitalsLuminaDollSrv);

})();

(function(){
    "use strict";

    station.$inject = ['$timeout'];
    function station( $timeout ){

        function link( scope, $element ){
            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#station').focus();
                }, 200);
            };
        }


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/capitals-lumina-doll/capitals-lumina-doll.html',
            scope: {
                contract: '@',
                station: '=',
                ids: '=',
                iscuentapropia: '='
            },
            controller: 'capitalsLuminaDollCtrl',
            controllerAs: 'doll',
            link: link
        };

    }


    angular.module( 'actinver.directives' )
    .directive( 'actCapitalsLuminaDoll', station );


} )();

/*global Chart */

(function(){
    'use strict';

    function columnBarChart(){

        function setChart( opts ){
            var defaults = {
                layout: {
                    padding: {
                        top: 20
                    }
                },
                animation: {
                    duration: 0,
                    onComplete: function(){
                        var chartInstance = this.chart,
                            ctx = chartInstance.ctx;

                        // Annotation style
                        ctx.font = Chart.helpers.fontString( 12, 'normal', 'Proxima Semibold' );
                        ctx.fillStyle = '#0e539a';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'bottom';

                        // Loop through all items
                        this.data.datasets.forEach( function ( dataset, i ){
                            var meta = chartInstance.controller.getDatasetMeta( i );

                            // Get value
                            meta.data.forEach( function( bar, index ){
                                var data = dataset.data[ index ] + '%';
                                ctx.fillText( data, bar._model.x, bar._model.y - 2 );
                            } );
                        } );

                    }
                },
                hover: false,
                tooltips: {
                    enabled: false
                },
                scales: {
                    xAxes: [{
                        categoryPercentage: 1,
                        barPercentage: 0.75,
                        gridLines: {
                            display: false,
                            zeroLineColor: '#9b9b9b'
                        },
                        ticks: {
                            fontSize: 9,
                            fontFamily: "'Proxima Regular'",
                            fontColor: "#0f3f88"
                        }
                    }],
                    yAxes: [{
                        display: false,
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                },
                elements: {
                    rectangle: {
                        borderWidth: 0
                    }
                }
            };

            return angular.merge ({}, defaults, opts);
        }

        function link(scope){
            scope.chartSettings = setChart(scope.model.chart);
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/charts/column-bar.html',
            link: link,
            scope: {
                model: '='
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'columnBarChart', columnBarChart );

} )();
(function(){
    'use strict';

    function donutChart(){

        function setChart(opts){
            var defaults = {
                animation: {
                    animateRotate: false
                },
                cutoutPercentage: 92,
                hover: false,
                tooltips: {
                    enabled: false
                },
                elements: {
                    arc: {
                        borderWidth: 0
                    }
                }
            };

            return angular.merge ({}, defaults, opts);
        }

        function link( scope ){
            scope.setChart = function(){
                scope.chartInfo = scope.model.chart;
                scope.chartSettings = setChart( scope.chartInfo );
                scope.tooltipSettings = scope.tooltip;
                scope.ready();
            };

            scope.ready = function(){
                scope.showGraphic = true;
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/charts/donut.html',
            link: link,
            scope: {
                model: '=',
                tooltip: '=',
                ready: '=?',
                custom: '@'
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'donutChart', donutChart );

} )();

(function(){
    'use strict';

    lineChart.$inject = ['$filter'];
    function lineChart( $filter ){



        function link($scope){
            // $scope.onClick = function (points, evt) {
            //     console.log(points, evt);
            // };

            var arrayMonths = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            var series = [];
            var months = [];
            var dataChart = [];
            var datasetOverride = [];
            var yAxes =[];
            var minValue=0;
            var maxValue=0;

            function dataOverride( _contract, _index ){
                var idAxes = 'y-axis-'+_contract;
                datasetOverride.push({
                    label: _contract,
                    yAxisID: idAxes,
                    fill: false,
                    pointRadius: 5,
                });
                
                yAxes.push({
                    id: idAxes,
                    type: 'linear',
                    display: _index < 1 ? true : false,
                    position: 'left',
                    ticks: {
                        fontFamily: 'Proxima Semibold',
                        min: parseInt(minValue),
                        max: (parseInt(parseInt(maxValue)/50000)+1)*50000
                    }
                });
            }

            function setMonth( _date ) {
                var newDate = _date.substring( 4 );
                var year = _date.substring(2, 4 );
                var newMonth = arrayMonths[ newDate - 1];

                newDate = newMonth.substring(0, 3).toUpperCase() + '. ' + year;
                if( months.indexOf( newDate ) === -1 ){
                    months.push( newDate );
                }
            }

            function setData( _amount, _index ) {
                if( !dataChart[_index] ){
                    dataChart[_index] = [];
                }
                dataChart[_index].push( _amount );
            }

            function setupChart( data, index ){
                data.map(function( _val ){
                    setMonth( _val.paymentPeriod );
                    setData( _val.amount, index );
                });
            }

            function setup( data ){
   
                if( typeof data.chart.section === 'undefined' ){

                    data.chart.map( function( _val){
                        if(_val && _val.historical && _val.historical.historicalInfo){
                            _val.historical.historicalInfo.forEach(function(element) {
                                maxValue = (element.amount > maxValue && element.amount !== null) ? element.amount : maxValue;
                                minValue = (element.amount < minValue && element.amount !== null) ? element.amount : minValue;
                            });
                        }
                    });

                    data.chart.map( function( _val, _index){
                        if( !_val.empty ){
                            var contract = _val.historical;
                            series.push( contract.contractNumber );
                            dataOverride( contract.contractNumber, _index );
                            setupChart( contract.historicalInfo, _index );
                        }
                    });

                    $scope.colors = $scope.color;
                    $scope.labels = months;
                    $scope.data = dataChart;
                    $scope.series = series;
                    $scope.datasetOverride = datasetOverride;
                    $scope.options = {
                        // hoverMode: 'index',

                        scales: {
                            yAxes: yAxes,
                            xAxes: [{
                                ticks: {
                                    fontSize: 10,
                                    fontFamily: "Proxima Bold",
                                }
                            }]
                        },
                        tooltips: {
                            caretSize: 0,
                            custom: function( tooltipModel ){
                                tooltipModel.backgroundColor = 'rgba(41, 215, 135, 0.4)';
                                tooltipModel.yPadding = 10;
                                tooltipModel.height = 55;
                                tooltipModel.titleFontSize = 14;
                                tooltipModel.width = 194;
                                tooltipModel.xPadding = 10;
                                tooltipModel.bodyFontColor = '#0f3f88';
                                tooltipModel.titleFontColor = '#0f3f88';
                                tooltipModel.displayColors = false;

                                // tooltipModel.xAlign = 'center';
                                // tooltipModel._bodyAlign = 'center';
                                // tooltipModel._footerAlign = 'center';
                                // tooltipModel._titleAlign = 'right';
                            },
                            callbacks: {
                                label: function( tooltipModel, data){
                                        return data.datasets[ tooltipModel.datasetIndex].label + ' : ' + $filter('currency')(tooltipModel.yLabel , '$' );
                                },
                            },
                            mode: 'single',
                       }
                    };

                } else {

                    $scope.labels = data.chart.labels;
                    $scope.data = data.chart.data;                   
                    $scope.options = data.chart.options;
                    $scope.datasetOverride = data.chart.datasetOverride;

                }

            }

            setup( $scope.model );
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/charts/line.html',
            link: link,
            scope: {
                model: '=',
                color: '=',
                custom: '@?'
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'lineChart', lineChart );

} )();

(function () {
    'use strict';

    lineChartSimulator.$inject = ['$filter'];
    function lineChartSimulator($filter) {

        function link($scope) {

            var arrayMonths = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            var series = [];
            var months = [];
            var dataChart = [];
            var datasetOverride = [];
            var yAxes = [];

            function dataOverride(_contract, _index) {
                var idAxes = 'y-axis-' + _contract;
                datasetOverride.push({
                    label: _contract,
                    yAxisID: idAxes,
                    fill: false,
                    pointRadius: 5,
                });

                yAxes.push({
                    id: idAxes,
                    type: 'linear',
                    display: _index < 1 ? true : false,
                    position: 'left',
                    ticks: {
                        fontFamily: 'Proxima Semibold',
                    }
                });
            }

            function setMonth(_date) {
                var newDate = _date.substring(4, 6);
                var year = _date.substring(2, 4);
                var day = _date.substring(6, 8);
                var newMonth = arrayMonths[newDate - 1];
                newDate = day + '. ' + newMonth.substring(0, 3).toUpperCase() + '. ' + year;
                months.push(newDate);
            }

            function setData(_amount, _index) {
                if (!dataChart[_index]) {
                    dataChart[_index] = [];
                }
                dataChart[_index].push(_amount);
            }

            function setupChart(data, index) {
                data.map(function (_val) {
                    setMonth(_val.paymentPeriod);
                    setData(_val.amount, index);
                });
            }

            function setup(data) {
                if (typeof data.chart.section === 'undefined') {
                    data.chart.map(function (_val, _index) {
                        if (!_val.empty) {
                            var contract = _val.historical;
                            series.push(contract.contractNumber);
                            dataOverride(contract.contractNumber, _index);
                            setupChart(contract.historicalInfo, _index);
                        }
                    });

                    $scope.colors = $scope.color;
                    $scope.labels = months;
                    $scope.data = dataChart;
                    $scope.series = series;
                    $scope.datasetOverride = datasetOverride;
                    $scope.options = {
                        scales: {
                            yAxes: yAxes,
                            xAxes: [{
                                ticks: {
                                    fontSize: 10,
                                    fontFamily: "Proxima Bold",
                                }
                            }]
                        },
                        tooltips: {
                            caretSize: 0,
                            custom: function (tooltipModel) {
                                tooltipModel.backgroundColor = 'rgba(41, 215, 135, 0.4)';
                                tooltipModel.yPadding = 10;
                                tooltipModel.height = 55;
                                tooltipModel.titleFontSize = 14;
                                tooltipModel.width = 194;
                                tooltipModel.xPadding = 10;
                                tooltipModel.bodyFontColor = '#0f3f88';
                                tooltipModel.titleFontColor = '#0f3f88';
                                tooltipModel.displayColors = false;
                            },
                            callbacks: {
                                label: function (tooltipModel, data) {
                                    return data.datasets[tooltipModel.datasetIndex].label + ' : ' + $filter('currency')(tooltipModel.yLabel, '$');
                                },
                            },
                            mode: 'single',
                        }
                    };
                } else {
                    $scope.labels = data.chart.labels;
                    $scope.data = data.chart.data;
                    $scope.options = data.chart.options;
                    $scope.datasetOverride = data.chart.datasetOverride;
                }
            }
            setup($scope.model);
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/charts/lineSimulator.html',
            link: link,
            scope: {
                model: '=',
                color: '=',
                custom: '@?'
            }
        };
    }

    angular
        .module('actinver.directives')
        .directive('lineChartSimulator', lineChartSimulator);
})();

(function () {
    "use strict";

    function classFocus( ) {
        return {
            restrict: 'A',
            scope: {
                classFocus: '@'
            },
            link: function (scope, element) {
                scope.$watch(function () {
                    return element.attr('class');
                }, function () {
                    if (element.hasClass(scope.classFocus)) {
                        element.focus();
                    }
                });
            }
        };
    }
    
    angular.module('actinver.directives')
        .directive('classFocus', classFocus);
})();

(function(){

    "use strict";

    function datesRangePiker( ){

        function link($scope){

            //Para actualizar la fecha Max que puede utilizar el calendario
            $scope.$watch('options.maxDate', function () {
                if ($scope.options && $scope.options.maxDate) {
                    $scope.options2.maxDate = $scope.options.maxDate;
                }
            });

            //Actualizamos la fecha Minina en el Calendario
            $scope.$watch('options.minDate', function () {
                if ($scope.options && $scope.options.minDate) {
                    $scope.options2.minDate = $scope.options.minDate;
                }
            });

            //Actualizamos El cambio de l fecha
            $scope.$watch('date', function (_oldValue, _newValue) {
                if ( _oldValue === _newValue) {
                    return;
                }
                if ($scope.auxDate) {
                    $scope.auxDate.newDate = $scope.date;
                }
            });  
                                


            function setup () {
                setupVars();
                setupOptions();
                setListenChangeDate();
            }

            function setupOptions(){
                var options = {
                    autoApply: true,
                    showDropdowns: true,
                    locale: {
                        format: "DD/MM/YYYY",
                        daysOfWeek: [
                            "DO",
                            "LU",
                            "MA",
                            "MI",
                            "JU",
                            "VI",
                            "SA"
                        ],
                        monthNames: [
                            "Enero",
                            "Febrero",
                            "Marzo",
                            "Abril",
                            "Mayo",
                            "Junio",
                            "Julio",
                            "Agosto",
                            "Septiembre",
                            "Octubre",
                            "Noviembre",
                            "Diciembre"
                        ],
                        firstDay: 0
                    },
                };
                if( $scope.isSingle ){
                    options.singleDatePicker= true;
                }

                $scope.options2 =  $scope.options ? angular.merge( {}, options, $scope.options): options;         
            }


            function setupVars () {
                if( $scope.date ){
                    $scope.auxDate = {
                        newDate : $scope.date
                    };
                }

                else{

                    $scope.auxDate ={
                        newDate:{
                            startDate: null,
                            endDate: null
                        }
                    };
                }
            }


            function setListenChangeDate () {
                $scope.$watch('auxDate.newDate', function ( _old, _new ) {                    
                    if ( _new === _old) {
                        return;
                    }
                    if( angular.isFunction( $scope.onChange ) ) {
                        $scope.onChange( $scope.auxDate.newDate );
                    }
                    $scope.date = $scope.auxDate.newDate;
                });
            }


            setup();
        }


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/dates-range-picker/dates-range-picker.html',
            scope:{
                label: '@',
                placeholder: '@',
                date: '=?',
                options: '=?',
                onChange: '=?',
                ngRequired: '=?',
                isSingle: '=?',
            },
            link:link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'datesRangePicker', datesRangePiker );


} )();

(function(){
    "use strict";

    function actCalendar(){

        var link = function( scope ){
            scope.models = {
                modl1: null,
                modl2: null,
            };

            scope.modelInput ={
                value: scope.ngModel
            };

            var timeForSelect = [];
            scope.timeForSelect2 = [];
            var i,hour;

            if( scope.type === "HH" ){
                loadTime();
                scope.maskInput = '29:69';
            }
            else {
                loadRange();
                scope.maskInput = '29:69 - 29:69';
            }

            function loadTime() {
                for( i = 0; i< 24; i++ ){
                    hour = i < 10 ? ('0'+''+i) : i;
                    timeForSelect.push( { text: (i < 10 ? '0'+i : i) } );
                }

                for( i = 0; i< 60; i++ ){
                    scope.timeForSelect2.push( { text: (i < 10 ? '0'+i : i) } );
                }
            }


            scope.loadEndTime = function (){


                var position = (timeForSelect.indexOf(scope.models.modl1)+1);

                var temporaryArray = [];

                if(position>timeForSelect.length){
                    temporaryArray.push({text: "20:30"});
                }
                else{
                    temporaryArray = timeForSelect.slice(position);
                    temporaryArray.push({text: "20:30"});
                }

                scope.timeForSelect2=temporaryArray.slice();
            };


            function loadRange() {
                for( i = 6; i<= 20; i++ ){
                    hour = i < 10 ? ('0'+''+i) : i;
                    timeForSelect.push( { text: hour +':00' } );
                    if(hour!==20){
                        timeForSelect.push( { text: hour +':30'} );
                    }
                    
                    // timeForSelect2.push( { text: hour +':00' } );
                    // timeForSelect2.push( { text: hour +':30'} );
                }
            }

            scope.timeForSelect = timeForSelect;

            scope.$watchCollection( 'modelInput.value', function() {
                scope.ngModel = scope.modelInput.value;
            });

            scope.$watchCollection( 'models', function( _new, _old) {
                if( !angular.equals(_new,_old) ){
                    if( _new.modl1 && _new.modl2){
                        if(scope.type=== 'HH' ){
                            scope.modelInput.value = _new.modl1.text + ':' + _new.modl2.text;
                        }
                        else{
                            scope.modelInput.value = _new.modl1.text + ' - ' + _new.modl2.text;
                        }
                        scope.ngModel = scope.modelInput.value;
                    }
                }
            });
        };

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/datetime/datetime.html',
            link : link,
            scope:{
                ngModel: '=',
                title: '@',
                type: "@",
                required: '@?'
            }
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actDatetime', actCalendar );


} )();

(function(){
    "use strict";

    function dropdown( ){

        function link($scope){
            $scope.css = "";

            function init(){
                $scope.typeCss = angular.isDefined($scope.nameCss) && angular.isString($scope.nameCss) && $scope.nameCss !=="" ?  2 : 1;
                $scope.css = angular.isDefined($scope.nameCss) && angular.isString($scope.nameCss) && $scope.nameCss !=="" ?  $scope.nameCss : 'act-dropdown';
                //typeCss = 2 es para los combos de A2k y Fix ; es usar el css que te envian
                //typeCss = 1 es para los combos normales; es usar el css normal

            }
            // angular.element($window).bind('resize', function(){
            //     if( $window.innerWidth < 700 ){
            //         $scope.type = 'mobile';
            //     }
            //     else {
            //         $scope.type = 'default';
            //     }
            //
            //     $scope.$digest();
            // });

            $scope.placeholder = '---';
            $scope.status = {
                isopen: false
            };
            $scope.type = 'default';
            // $scope.type = $window.innerWidth < 700  ? 'mobile' : 'default';

            $scope.select = function( _option, _seleccionado ){
                $scope.selected = _option;            
                if( $scope.onChange && angular.isFunction($scope.onChange) ) {
                    $scope.onChange( _option, $scope.idx );
                }
                if ($scope.change && angular.isFunction($scope.change)) {
                    $scope.change({
                        lastValue: _seleccionado,
                        newValue: _option
                    });
                }
            };

          /*  element.find(".defaultF").on('click',function(){
                var rsssss= $(this);
                setTimeout(function(){
                    rsssss.find(".input-drop").focus();
                },250);
            });*/
            init();
        }


        return {
            restrict: 'A',
            replace: true,
            templateUrl: '/scripts/directives/dropdown/dropdown.html',
            scope:{
                ngModel: '=',
                ngDisabled: '=',
                onChange: '=?',
                selected: '=?',
                name: '@',
                idx: '@?',
                change: '&?',
                nameCss:'@?'
            },
            link:link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actDropdown', dropdown );


} )();
(function () {
    'use strict';

    dollCtrl.$inject = ['$rootScope', '$scope', 'dollSrvFund', '$filter', 'transfersSrv', 'contractTypeSrv', 'CommonModalsSrv', 'investmentSrv', '$sessionStorage', 'ErrorMessage', 'loginSrvc'];
    function dollCtrl($rootScope, $scope, dollSrvFund, $filter, transfersSrv, contractTypeSrv, CommonModalsSrv, investmentSrv, $sessionStorage, ErrorMessage, loginSrvc) {

        var vm = this;
        var baseStation;
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType(contract.isPropia, contract.isEligible, contract.isDiscretionary);
        vm.tipoMedio = {
            msg: '',
            showMsg: false
        };

        function resetTipoMedio(success, msg) {
            vm.tipoMedio.msg = success ? '' : msg;
            vm.tipoMedio.showMsg = !success;
        }

        function initBuy() {
            vm.cmd = {
                type: 'titles',
                media: {}
            };
            resetTipoMedio(true, '');
        }

        function initSell() {
            vm.cmd.typeBank = 'efectivo';
        }

        /**
         * @params {object} object datePicker
         **/
        function disableDatePicker(_datePicker) {
            var mode = _datePicker.mode;
            var date = _datePicker.date;
            var isHoliDay;

            if (mode === 'day') {
                var isDisable = R.find(function (_date) {
                    var _dtSrv = new Date(_date.operationDate);
                    return (date.getDate() === _dtSrv.getDate() && date.getMonth() === _dtSrv.getMonth() && date.getFullYear() === _dtSrv.getFullYear());
                }, vm.dollDescription.fund.operationDatesData.operationDateItem);

                if (isDisable) {
                    var isDisableDate = isDisable ? new Date(isDisable.operationDate) : null;
                    isHoliDay = R.find(function (_date) {
                        var _dtSrv = new Date(_date);
                        return (isDisableDate.getDate() === _dtSrv.getDate() && isDisableDate.getMonth() === _dtSrv.getMonth() && isDisableDate.getFullYear() === _dtSrv.getFullYear());
                    }, vm.dollDescription.fund.holidayDatesData.holidayDate);
                }

                return isHoliDay ? true : (isDisable ? false : true);
            }
            return false;
        }

        vm.stations = [];
        vm.currentDate = $filter('date')(new Date, 'dd/MM/yyyy');

        function loadDoll2() {
            dollSrvFund.getDoll2($scope.contract, vm.cmd.station, vm.tab, vm.anticipedSell).then(function (_res) {
                if (_res.data.outCommonHeader.result.result === 1) {
                    vm.dollDescription = _res.data.outFundQuery;
                    vm.cmd.dates = vm.dollDescription.fund.operationDatesData.operationDateItem[0];
                    vm.orderDate = vm.cmd.dates.operationDate;
                }
            });
        }


        vm.changeAnticipedSell = function () {
            loadDoll2();
        };

        $scope.datepickerOptions = {
            showWeeks: false,
            formatMonth: 'MMM',
            yearColumns: 3,
            dateDisabled: disableDatePicker,
        };


        /**
         * @param {date} date to find
         * @return {object} object with operationDate, settlementDate.
         **/
        function findDateExecution(_date) {
            return R.find(function (_operationDate) {
                return _operationDate.operationDate === _date;
            }, vm.dollDescription.fund.operationDatesData.operationDateItem);
        }

        /** Load stations for the input share in the doll
         * @param {int} id
         **/
        function loadStations(_new) {
            investmentSrv.getStations($scope.contract, _new).then(function (_res) {
                vm.stations = _res.data.outInvestmentIssuersQuery.issuer;
            });
            initBuy();

        }

        /**
         * These services are initialized when the station is changed
         **/
        function loadInit() {
            loadDoll2();
            dollSrvFund.getDollFund($scope.contract, vm.typeFund).then(function (_res) {
                if (_res.data.outCommonHeader.result.result === 1) {
                    vm.currentCash = _res.data.outA2KContractBalance;
                    $rootScope.currentCash = vm.currentCash;
                }
            });

            investmentSrv.getDetailStations((vm.cmd.station.issuerName || vm.cmd.station.issuer), vm.cmd.station.serie).then(function (_res) {
                if (_res.data.outCommonHeader.result.result === 1) {
                    var rulesArray = _res.data.outFundOperationDataQuery.fundOperationData;
                    vm.rulesBuy = R.find(function (_val) {
                        return _val.movementType.trim() === 'COMPRA';
                    }, rulesArray);
                    vm.rulesSell = R.find(function (_val) {
                        return _val.movementType.trim() === 'VENTA';
                    }, rulesArray);
                }
            });
        }

        transfersSrv.getMedia().then(function (_res) {
            var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
            var _mediaType = [];
            angular.forEach(_media, function (value) {
                _mediaType.push({
                    id: value.key,
                    text: value.description
                });
            });
            vm.Media = _mediaType;
        });

        /**
         * @param {object} station object
         * @param {string} if the origin is input or external
         **/
        function reload(_station, _from) {
            vm.newState = false;
            //vm.tab = _from ? vm.tab: null;
            baseStation = _station;
            vm.cmd.station = baseStation;
            cleanModels();
            loadInit();
        }

        /**  Reset doll **/
        function cleanModels() {
            vm.cmd = {
                type: 'titles',
                media: {},
                station: baseStation,
            };
            vm.tipoMedio.showMsg = false;
            vm.captureModel = null;
            vm.confirmationModel = null;
            vm.cmd.dates = vm.dollDescription ? vm.dollDescription.fund.operationDatesData.operationDateItem[0] : null;
            resetTipoMedio(true, '');
        }

        vm.findDate = function () {
            vm.cmd.dates = findDateExecution(new Date(vm.orderDate).getTime());
        };

        vm.AddStation = function (_station) {
            vm.priceSelected = _station.lastPrice;
            reload(_station, 'input');
        };

        $scope.$watch('contract', function (_new, _old) {
            if (!R.equals(_new, _old)) {
                vm.newState = false;
                vm.tab = null;
                cleanModels();
                loadInit();
            }
        });

        $scope.$watch('station', function (_new, _old) {
            if ($scope.station) {
                if ($scope.station.lastPrice) {
                    vm.tab = 'buy';
                    vm.priceSelected = $scope.station.lastPrice;
                } else if ($scope.station.weightedLastPrice) {
                    vm.tab = 'sell';
                    vm.priceSelected = $scope.station.weightedLastPrice;

                }
            }
            if (!R.equals(_new, _old)) {
                reload(_new);
            }
        });

        $scope.$watch('id', function (_new, _old) {
            vm.typeFund = $scope.id;
            if (!R.equals(_new, _old)) {
                loadStations(_new);
            }
        });

        /** get absolute titles
         * @param {string} 'buy' or 'sell'
         **/
        $scope.changeSettlement2 = function (_model) {
            vm.cmd[_model].typeValue = $filter('currencyCustom')(vm.cmd[_model].typeValue2 / vm.priceSelected, 0);
        };

        /** get Importe
         * @param {string} 'buy' or 'sell'
         **/
        $scope.changeSettlement = function (_model) {
            vm.cmd[_model].typeValue2 = vm.cmd[ _model ].typeValue * vm.priceSelected;
        };

        /** Method to change the view on the doll
         * @param {string} 'buy' or 'sell'
         **/
        vm.changeTab = function (_tab) {
            if (_tab === 'sell') {
                initSell();
                dollSrvFund.getBanks($scope.contract).then(function (_res) {

                    if (_res.data && angular.isDefined(_res.data.outCommonHeader) && _res.data.outCommonHeader.result.result === 1) {
                        vm.bankModel = R.map(function (_val) {
                            _val.text = _val.bankAccounts.bankName;
                            return _val;
                        }, _res.data.outDestinationAccountQuery.outA2KBankAccountsQuery.bankAccountsList);
                    } else {
                        vm.bankModel = [];
                    }
                });
            }
            vm.newState = false;
            vm.tab = _tab;
            $scope.columnsExpand = false;
            $scope.focusElement();
            if (vm.cmd.station) {
                loadInit();
            }
        };

        /** create quotation **/
        vm.confirm = function () {
            vm.cmd.evtentType = vm.tab;
            dollSrvFund.confirmDoll(vm.cmd, $scope.contract, vm.anticipedSell).then(function (_res) {
                vm.confirmationModel = _res.data;

                if (vm.confirmationModel.issuerTitlesSold.amount === 0) {
                    vm.confirmationModel.issuerTitlesSold.amount = vm.confirmationModel.issuerTitlesSold.titlesQty * vm.priceSelected;
                }

                vm.confirmationModel.issuerTitlesSold.price = vm.priceSelected;
            },
                    function (_res) {
                        if (_res) {
                            var error = R.find(function (_val) {
                                if (_val.responseType === 'N') {
                                    return _val.responseCategory === 'FATAL' || _val.responseCategory === 'ERROR';
                                }
                            })(_res.data);
                            var message = error ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';

                            CommonModalsSrv.error(message);
                        }
                        // .result.then(function() {});
                    });
        };

        /** capture quotation **/
        vm.capture = function () {
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;

            dollSrvFund.captureDoll(vm.cmd, $scope.contract, _user, vm.confirmationModel, vm.anticipedSell, vm.contractType).then(function (_res) {
                if (_res.data.outCommonHeader.result.result === 1) {
                    var message;
                    if (_res.data.outCommonHeader.operationName === 'FundOrderRegistration') {
                        vm.captureModel = _res.data.outFundOrderRegistration.fundOrderResult;
                        message = 'La ' + (vm.tab === 'buy' ? 'compra' : 'venta') + ' se envió de manera correcta.';
                        message += '<br>Con el folio de la operación <b>' + vm.captureModel.issuerTitlesSold.operationReference + '</b>';
                    } else {
                        vm.captureModel = vm.confirmationModel;
                        message = _res.data.outAdviserPendingOpRegistration.operationsDetails[0].message;
                        message += '<br>Con el ID Registro <b>' + _res.data.outAdviserPendingOpRegistration.operationsDetails[0].operationID + '</b>';
                    }
                    cleanModels();
                    $scope.$emit('updateTab');
                    CommonModalsSrv.done(message);
                }
            }).catch(function (_res) {
                CommonModalsSrv.error(ErrorMessage.createError(_res.data));
            });
        };

        vm.cleanModels = cleanModels;

        /** modify method **/
        vm.modify = function () {
            vm.confirmationModel = null;
        };

        vm.finally = function () {
            cleanModels();
        };

        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 4
            if (_new.id === "4") {
                loginSrvc.validateUserTokens().then(function success(response) {
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error) {
                    resetTipoMedio(error.success, error.msg);
                });
            } else {
                resetTipoMedio(true, '');
            }
        };

        loadStations($scope.id);

    }

    angular.module('actinver.controllers')
            .controller('dollCtrl', dollCtrl);


})();

(function() {
    "use strict";

    investmentSrv.$inject = ['$http', 'URLS', '$q', 'CommonModalsSrv', 'moment', 'contractTypeSrv'];
    function investmentSrv($http, URLS, $q, CommonModalsSrv, moment, contractTypeSrv ) {

        /**
        *  DollSrv
        */
        function DollSrv(){}

        DollSrv.prototype.getDoll = function( _contract ){
            return $http({
                method: 'GET',
                url: URLS.getInitDoll + _contract +'/1/1/0/?language=SPA',
            });
        };

        DollSrv.prototype.getDollFund = function( _contract , _type){
            var type = _type === 3 ? 2 : 1;
            return $http({
                method: 'GET',
                url: URLS.getInitDoll + _contract +'/' + type + '/1/0/?language=SPA',
            });
        };

        DollSrv.prototype.getDoll2 = function( _contract, _station ,_id, _anticipedSell ){
            _anticipedSell = _anticipedSell ? 1:0;
            return $http({
                method: 'GET',
                url: URLS.getInitDoll2 + _contract + '/' + ( _station.issuerName || _station.issuer ).trim() + '/'+ _station.serie + '/'+ ( _id === 'buy' ? 1:2 ) +'/0/' + _anticipedSell +'?language=SPA',
            });
        };


        DollSrv.prototype.getBanks = function( _contract) {
            return $http({
                method: 'get',
                url: URLS.getDollAccounts + '02/01/'+ _contract + '?language=SPA&accountStatus=1',
            });
        };

        DollSrv.prototype.confirmDoll = function ( _model, _contract, _anticipedSell) {
            _anticipedSell = _anticipedSell ? 1:0;
            var typeOp = _model.evtentType;
            var sendModel  = {
                contractNumber : _contract,
                buyCaptureType : 0,
                buyExecutionDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                buyIssuerName : null,
                buyOperationDate: moment(_model.dates.operationDate).format('DDMMYYYY'),
                buySerie : null,
                buyTitlesAmount : 0,
                buyTitlesQty : 0,
                captureType : _model.type === 'titles' ? 1:2 , //1 títulos, 2 importe,
                executionDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                movementType : _model.evtentType === 'sell' ? 2:1,
                netAmount : _model[typeOp].typeValue2,
                operationDate : moment(_model.dates.operationDate).format('DDMMYYYY'),
                settlementType : _model.BankSelected ? 'R' : null,
                titlesAmount : _model.type === 'titles' ? _model[typeOp].typeValue : _model[typeOp].typeValue2,
                titlesQty : _model[typeOp].typeValue,
                issuerName : _model.station.issuer ? _model.station.issuer : _model.station.issuerName ,
                serie : _model.station.serie,
                clabe:  _model.BankSelected ?  _model.BankSelected.bankAccounts.clabe : 0,
                anticipatedSell : _anticipedSell,
                settlementDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                registrationType : _model.type === 'titles' ? 1:2,
                buyCLABE :  _model.BankSelected ?  _model.BankSelected.bankAccounts.clabe : 0,
                buyNetAmount : 0,
                buyRegistrationType : 0
        };

            return $q(function( resolve, reject ){
                csrf()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf () {
                    $http({
                        method: 'post',
                        url: URLS.confirmDoll,
                        data: $.param(sendModel)
                    })
                        .then(function( _res){
                            if( _res.data.outCommonHeader.result.result === 1){
                                resolve( {success: true, data: _res.data.outFundOrderQuotation.fundOrderResult } );
                            }
                            else{
                                reject( {success: true, data: _res.data.outCommonHeader.result.messages } );
                            }
                        },
                        function(){
                            CommonModalsSrv.systemError();
                            reject( null );
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.captureDoll = function ( _model, _contract, _user , _confirmModel, _anticipedSell, _contractType ) {
            _anticipedSell = _anticipedSell ? 1:0;
            var typeOp = _model.evtentType;
            var _json = {
                Contrato: _contract,
                Movimiento: _model.evtentType === 'buy' ? 'COMPRA' : 'VENTA',
                Emisora: _confirmModel.issuerTitlesSold.issuerName,
                Precio:  _confirmModel.issuerTitlesSold.netAmount,
                Títulos: _confirmModel.issuerTitlesSold.titlesQty,
                "Ejecución de la orden":  moment (_confirmModel.issuerTitlesSold.operationDate).format('DD/MM/YYYY'),
                "Liquidación de la orden": moment (_confirmModel.issuerTitlesSold.settlementDate).format('DD/MM/YYYY')
            };

            _json = JSON.stringify(_json);


            var sendModel = {
                contractNumber : _contract,
                buyIssuerName : null,
                clabe:  _model.BankSelected ?  _model.BankSelected.bankAccounts.clabe : 0,
                issuerName : _model.station.issuer ? _model.station.issuer : _model.station.issuerName,
                movementType : _model.evtentType === 'sell' ? 2:1,
                operationDate : moment(_model.dates.operationDate).format('DDMMYYYY'),
                settlementDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                registrationType : _model.type === 'titles' ? 1:2, //1 compra, 2 venta
                serie : _model.station.serie,
                titlesAmount : _model.type === 'titles' ? _model[typeOp].typeValue : _model[typeOp].typeValue2,
                titlesQty : _model[typeOp].typeValue,
                netAmount:   _model[typeOp].typeValue2,
                buyOperationDate: moment(_model.dates.operationDate).format('DDMMYYYY'),
                buyRegistrationType : 0,
                buySettlementDate:  moment(_model.dates.operationDate).format('DDMMYYYY'),
                buyTitlesAmount : 0,
                buyTitlesQty : 0,
                buySerie : null,
                settlementType : _model.BankSelected ? 'R' : null,
                anticipatedSell: _anticipedSell,
                name : _user,
                buyNetAmount : 0,
                buyCLABE :  _model.BankSelected ?  _model.BankSelected.bankAccounts.clabe : 0,
                jsonDetails: _json
            };

            sendModel = contractTypeSrv.sendBinnacle(_contractType, sendModel , _model);

            return $q(function( resolve, reject ){
                csrf()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf () {
                    $http({
                        method: 'post',
                        url: URLS.capture,
                        data: $.param(sendModel),
                    })
                        .then(function( _res){
                                if( _res.data.outCommonHeader.result.result === 1){
                                    resolve( {success: true, data: _res.data } );
                                }
                                else{
                                    reject( {success: true, data: _res.data.outCommonHeader.result.messages } );
                                }
                            },
                            function(){
                                CommonModalsSrv.systemError();
                                reject( null);
                            });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        function csrf () {
            return $q( function ( resolve, reject ) {
                $http.get(URLS.csrfRest)
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback (csrf) {
                    sessionStorage.setItem('__csrf',csrf.headers('X-CSRF-TOKEN'));
                    resolve({
                        success : true
                    });
                }

                function errorCallback (error) {
                    reject({
                        success: false,
                        data:{},
                        error : error,
                        message: "Ha ocurrido un error de seguridad"
                    });
                }
            } );
        }

        return new DollSrv();
    }

    angular.module('actinver.services')
        .service('dollSrvFund', investmentSrv);
})();

(function(){
    "use strict";

    actCalendar.$inject = ['$timeout'];
    function actCalendar( $timeout ){

        function link( scope, $element) {

            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#station').focus();
                }, 250);
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/doll/doll.html',
            scope: {
                station: '=',
                id: '=',
                contract: '@',
                columnsExpand : '=?',
            },
            controller: 'dollCtrl',
            controllerAs: 'doll',
            link: link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actDoll', actCalendar );


} )();

(function(){
    "use strict";

    fileUploader.$inject = ['FileUploader'];
    function fileUploader( FileUploader ){

        function link( scope ){

            function resetFileWatch() {
                if (angular.isDefined(scope.onReset)) {
                    scope.$watch('onReset', function (newValue) {
                        if (newValue) {
                            if (scope.uploader && scope.uploader.removeFromQueue && scope.uploader.removeFromQueue.length > 0) {
                                scope.uploader.removeFromQueue(0);
                            }
                        }
                    });
                }
            }

            function setup () {
                setupVars();
                setFilterUploader();
                setListenerUploader();
                resetFileWatch();
            }


            function setupVars () {
                scope.uploader = new FileUploader({
                    queueLimit: 2,
                    onBeforeUploadItem: function (item) {
                        item.headers = {
                            "Authorization": "bearer " + sessionStorage.getItem('__token'),
                            "X-CSRF-TOKEN": sessionStorage.getItem('__csrf')
                        };
                    }
                });
            }


            function setFilterUploader () {
                if( scope.filter ) {
                    scope.uploader.filters.push({
                        name: 'formatsAndSize',
                        fn: filterUploader
                    });
                }
            }


            function filterUploader ( _item ) {
                var isValid = R.find( function ( _val ) {
                    return ( _val.formats.indexOf(_item.type) >= 0 && _item.size <= _val.size  );
                })(scope.filter);

                if( isValid ) {
                    return true;
                }

                if( scope.onErrorSetFile && typeof scope.onErrorSetFile === "function" ){
                    scope.onErrorSetFile( "El formato o tamaño no es permitido." );
                    scope.uploader.removeFromQueue(0);
                }
            }


            function setListenerUploader () {
                scope.uploader.onAfterAddingFile = function( _item ) {
                    if( scope.uploader.queue.length > 1 ){
                        scope.uploader.removeFromQueue(0);
                    }

                    /*if( scope.uploader.queue[0].file.type.search('image') === -1 ){
                        if( scope.onErrorSetFile && typeof scope.onErrorSetFile === "function" ){
                            scope.onErrorSetFile( "Type" );
                        }
                        return;
                    }*/

                    var reader = new FileReader();
                    reader.onload = function(event) {
                        scope.$apply(function(){
                            if( scope.onSuccessSetFile && typeof scope.onSuccessSetFile === "function") {
                                scope.onSuccessSetFile( event.target.result, _item );
                            }
                        });
                    };
                    reader.readAsDataURL( _item._file );
                };
            }



            scope.uploaderFile =  function () {
                document.getElementById('file-uploader').click();
                if(angular.isDefined(scope.onReset)){
                    scope.onReset = false;
                }
            };


            setup();
        }


        return {
            restrict: 'EA',
            replace: true,
            template:   "<div class='file-uploader'>" +
                            "<div class='icon-file' ng-class='{ active: uploader.queue.length > 0, pdf: uploader.queue[0].file.type === &quot;application/pdf&quot; }' ng-click='uploaderFile()'></div>" +
                            "<input id='file-uploader' type='file' ng-if='uploader' nv-file-select uploader='uploader'>" +
                            "<div class='info-file' ng-show='uploader.queue.length > 0'>" +
                                "<div class='name'>{{ uploader.queue[0].file.name }}</div>" +
                                "<button class='change-file' ng-click='uploaderFile()'>Cambiar</button>" +
                            "<div>" +
                        "</div>",
            scope:{
                filter: '=?',
                onSuccessSetFile: '=?',
                onErrorSetFile: '=?',
                onReset: '=?'
            },
            link:link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'fileUploader', fileUploader );


} )();

(function(){
    "use strict";

    formatCurrency.$inject = ['$filter'];
    function formatCurrency( $filter ){


        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elem, attrs, ctrl) {
                if (!ctrl) return;

                ctrl.$formatters.unshift(function () {
                    return $filter(attrs.format)(ctrl.$modelValue);
                });

                elem.bind('blur', function() {
                    var plainNumber = elem.val().replace(/[^\d|\-+|\.+]/g, '');
                    elem.val($filter(attrs.format)(plainNumber));
                });

                elem.bind( 'focus', function(){
                    elem.val( '' );
                });
            }
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'format', formatCurrency );


} )();

(function () {
    'use strict';

    fundBankDollCtrl.$inject = ['$scope', 'CommonModalsSrv', 'contractTypeSrv', 'fundBankDollSrv', '$sessionStorage', '$filter', 'ErrorMessage', 'moment', 'loginSrvc'];
    function fundBankDollCtrl($scope, CommonModalsSrv, contractTypeSrv, fundBankDollSrv, $sessionStorage,$filter, ErrorMessage, moment, loginSrvc) {
        var vm = this;
        // Defaults
        vm.currentCash = 0;
        vm.transaction = {};
        vm.cleanModels = cleanModels;
        vm.modify = modify;
        vm.confirm = confirm;
        vm.capture = capture;
        vm.finish = finish;
        vm.getCalendar = getCalendar;

        $scope.date = new Date();
        vm.viewNewState = false;
        vm.newStateInit = true;
        vm.cmd = {};
        vm.cmd.binnacle = {
            comments :'',
            time : '00:01:00',
        };
        vm.isObjectSell = false;
        vm.bankingArea = '001';
        vm.cmd.importRules = 0;
        $scope.sellLiquidity = true;
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);
        vm.anticipedSellCheck = false;

        vm.tipoMedio={
            msg : '',
            showMsg:false
        };

        function resetTipoMedio(success, msg){
            vm.tipoMedio.msg =  success ? '': msg;
            vm.tipoMedio.showMsg = !success; 
        }


        function init() {
            cleanModels();
            getContractBalance();
            getCatalogoMedios();
            vm.clientNumber = $sessionStorage.sclient.data.clientNumber;
            if ($scope.selected && !vm.isObjectSell) {
                vm.loading = true;
                vm.stationName = $scope.selected.slateKey + ' ' + $scope.selected.serie;
                vm.serie = $scope.selected.serie;
                vm.buyLiquidity = $scope.selected.buyLiquidity;
                vm.sellLiquidity = $scope.selected.sellLiquidity;
                vm.currentCash = $scope.selected.price;

                if($scope.selected.sellingByImportOrTitles.typeID === '1'){
                    if(vm.tab === 'buy' ){ // SOLO IMPORTE
                        vm.rulesBuy = {
                            registrationType: 'IMPORTE'
                        };
                        vm.cmd = {
                            evtentType: 'buy',
                            type: 'import'
                        };
                    }else if(vm.tab === 'sell' ){
                        vm.rulesBuy = {
                            registrationType: 'TITULOS'
                        };
                        vm.cmd = {
                            evtentType: 'sell',
                            type: 'import'
                        };
                    }
                }else if($scope.selected.sellingByImportOrTitles.typeID === '2'){
                    vm.rulesBuy = {
                        registrationType: 'AMBOS'
                    };
                }

                vm.loading = false;
                $scope.focusElement();
                findDateExecution(new Date().getTime());
                getCurrencyFundByIDAndContract();
            } else if ($scope.selected && vm.isObjectSell) {
                vm.fund = {
                    sell: {
                        titlesQty: $scope.selected.titlesQty,
                        fundID: $scope.selected.idFund,
                        settlementDate: $scope.selected.settlementDate,
                        dueDate: $scope.selected.dueDate,
                        currentPrice: $scope.selected.currentPrice,
                        position: $scope.selected.position,
                        movementType: $scope.selected.movementType,
                        stationName: $scope.selected.emissionID,
                        serie: $scope.selected.serie,
                        foreignExchangeID: $scope.selected.foreignExchangeID
                    }
                };
                vm.loading = false;
                vm.stationName = vm.fund.sell.stationName+' '+ $scope.selected.serie;
                getCurrencyFundByIDAndContract();
            }
        }

        vm.findDate = function () {
            findDateExecution(new Date(vm.orderDate).getTime());
        };

        function findDateExecution(_date) {
            vm.dateExecution = moment(_date).format('YYYY-MM-DD HH:mm:ss');
            if (vm.isObjectSell) {
                getCalendarByFondo('venta', vm.anticipedSellCheck ? '1' : '0');
            } else {
                getCalendarByFondo('compra', '0');
            }
        }

        function getCalendar( _anticipedSell ) {
            _anticipedSell = vm.anticipedSellCheck ? '1' : '0';
            _anticipedSell === '0' ? $scope.sellLiquidity = true : $scope.sellLiquidity = false;
            getCalendarByFondo('venta', _anticipedSell);
        }

        function getCalendarByFondo(tipo, _anticipedSell) {
            var model = null;
            if (tipo === "compra") {
                model = {
                    v1: $scope.selected.fundID,
                    v3: 1,
                    v4: vm.dateExecution,
                };
            } else if (tipo === "venta") {
                model = {
                    v1: $scope.selected.idFund,
                    v3: 2,
                    v4: vm.dateExecution,
                };
            }

            fundBankDollSrv.getCalendarBank(model, $scope.selected.serie, _anticipedSell)
                .then(function (_res) {
                    if(tipo === "compra"){
                        vm.cmd.calendarExc = _res.calendarsInformation.calendarInformation[0].calendarDateTime.timestamp;
                        vm.cmd.fhLiquidacion = _res.calendarsInformation.calendarInformation[0].settlementDateTime;
                        $scope.fechaLiquidacion = vm.cmd.fhLiquidacion;
                    }else{
                        if( $scope.sellLiquidity ){
                            var _opDate = [];
                            angular.forEach(_res.calendarsInformation.calendarInformation,function(value){
                                var _settlementDateTime = new Date(value.settlementDateTime);
                                var _calendarDateTime = new Date(value.calendarDateTime.timestamp);
                                _opDate.push({
                                    settlementDateTime : _settlementDateTime,
                                    text :  moment(_calendarDateTime).format("DD/MM/YYYY"),
                                    calendarOp: _calendarDateTime
                                });
                            });
                            vm.operationDate = _opDate;
                            vm.cmd.fhLiquidacion = _res.calendarsInformation.calendarInformation[0].settlementDateTime;
                            $scope.fechaLiquidacion = vm.cmd.fhLiquidacion;
                            //vm.cmd.operationDate.settlementDateTime = vm.cmd.fhLiquidacion;
                        }else{
                            vm.cmd.calendarExc = _res.calendarsInformation.calendarInformation[0].calendarDateTime.timestamp;
                            vm.cmd.fhLiquidacion = _res.calendarsInformation.calendarInformation[0].settlementDateTime;
                            $scope.fechaLiquidacion = vm.cmd.fhLiquidacion;
                            //vm.cmd.operationDate.settlementDateTime = vm.cmd.fhLiquidacion;
                        }
                    }
                }).catch(function (response){
                    CommonModalsSrv.error(ErrorMessage.createError(response.messages));
                    vm.newStateInit = true;
                    vm.confirmationModel = false;
                });

        }


        function getCatalogoMedios() {
            vm.loading = true;
            fundBankDollSrv.getMediaBank().then(function (_res) {
                var _media = _res.data.result;
                var _mediaType = [];
                angular.forEach(_media, function (value) {
                    _mediaType.push({
                        id: value.identifier,
                        text: value.instructionTypeDescription
                    });
                });
                vm.Media = _mediaType;
            });
        }

        function cleanModels() {
            vm.invest = null;
            if ($scope.selected !== null && !vm.isObjectSell) {//si es compra
                resetForm("compra");
            } else if ($scope.selected !== null && vm.isObjectSell) {//si es venta
                resetForm("venta");
            } else {
                vm.cmd = {
                    type: 'titles',
                    binnacle: {
                        date: new Date()
                    }
                };
            }
            vm.transaction = null;
            vm.confirmationModel = null;
            vm.captureModel = null;
            vm.anticipedSellCheck = false;
            resetTipoMedio(true, '');
            
        }

        function confirm() {
            var importeOperado = parseFloat(vm.cmd.importRules);
            var totalHabil = parseFloat(vm.balance.availableBalance);
            if(vm.cmd.evtentType ==='buy'){
                if(importeOperado > totalHabil){
                    CommonModalsSrv.error("No se puede realizar la compra por que el importe es mayor al saldo disponible  "+$filter('currency')(totalHabil, '$', 2));
                    return;
                }else{
                    vm.confirmationModel = $scope.selected;
                    getDetailTransation();
                }
            }else{
                vm.confirmationModel = $scope.selected;
                getDetailTransation();
            }
        }

        function modify() {
            vm.confirmationModel = null;
            findDateExecution(new Date().getTime());
        }

        vm.changeTab = function (_tab) {
            cleanModels();
            if (_tab === 'buy') {
                $scope.$emit('activeSell', false);
                vm.cmd.evtentType = 'buy';
                vm.newStateInit = false;
            }
            else if (_tab === 'sell') {
                $scope.$emit('activeSell', true);
                vm.cmd.evtentType = 'sell';
                vm.newStateInit = false;
            }
            vm.tab = _tab;
        };

        function capture() {
            if (vm.cmd.evtentType === 'buy') {
                sendTransactionBuy();
            }else if (vm.cmd.evtentType === 'sell') {
                sendTransactionSell();
            }
        }

        function finish() {
            vm.newStateInit = true;
            cleanModels();
            init();
        }

        function getContractBalance() {
            var message = '';
            var contractBalance = null;
            vm.loading = true;
            fundBankDollSrv.bankContractBalance($scope.contract.contractNumber, vm.bankingArea)
                .then(function (_res) {
                    if (_res.data.outCommonHeader.result.result === 1) {
                        contractBalance = _res.data.outBankContractBalance.balanceData;
                        vm.balance = contractBalance;
                    } else {
                        var _error = _res.data.outCommonHeader.result.messages;
                        angular.forEach(_error, function (_res) {
                            message += _res.responseMessage;
                        });
                        CommonModalsSrv.error(message);
                        vm.newStateInit = true;
                        vm.confirmationModel = false;
                        vm.loading = false;
                    }
                }).catch(function (_res) {
                    var _error = _res.data.outCommonHeader.result.messages;
                    CommonModalsSrv.error( ErrorMessage.createError(_error) );
                    vm.newStateInit = true;
                    vm.confirmationModel = false;
                    vm.loading = false;
                });
        }

        function getCurrencyFundByIDAndContract() {
            vm.loading = true;
            var contracto =  $scope.contract.contractNumber;
            var idFondo = null;
            var type = null;
            var serie=null;

            if (!vm.isObjectSell) {//es compra
                idFondo = $scope.selected.fundID;
                type = "compra";
                serie = vm.serie;
                vm.tab = 'buy';
            }else if (vm.isObjectSell) {//es venta
                idFondo = vm.fund.sell.fundID;
                type = "venta";
                serie=vm.fund.sell.serie;
                vm.tab = 'sell';
            }

            fundBankDollSrv.getCurrencyFundByIDAndContract(idFondo, contracto, type)
                .then(function (_res) {
                    var fondo = null;
                    var fondos;
                    if (_res.data.outCommonHeader.result.result === 1) {
                        fondos = _res.data.outBankInvstFundsByContractQuery.funds.fund;
                            angular.forEach(fondos, function (fondotmp) {
                                if(fondotmp.serie === serie ){
                                    fondo = fondotmp;
                                }
                            });
                    }
                    $scope.anticipedS = fondo.advanceSaleFlag;
                    if(vm.tab === 'buy' ){
                        $scope.buyLiquidity = fondo.buyLiquidity === '0' ? false : true;
                    }else{
                        if(fondo.sellLiquidity === "0" ){
                            $scope.sellLiquidity = false;
                        }else if(fondo.sellLiquidity === "1" &&  fondo.advanceSaleFlag){
                            $scope.sellLiquidity = true;
                        }else if(fondo.sellLiquidity === "1" && !fondo.advanceSaleFlag){
                            $scope.sellLiquidity = false;
                        }
                    }
                    if(type === "venta"){
                        findDateExecution(new Date().getTime());
                    }

                    if(fondo.sellingByImportOrTitles.typeID === '1'){
                        if(vm.tab === 'buy' ){ // SOLO IMPORTE
                            vm.rulesBuy = {
                                registrationType: 'IMPORTE'
                            };
                            vm.cmd = {
                                evtentType: 'buy',
                                type: 'import'
                            };
                        }else if(vm.tab === 'sell' ){
                            vm.rulesSell = {
                                registrationType: 'TITULOS'
                            };
                            vm.cmd = {
                                evtentType: 'sell',
                                type: 'titles'
                            };
                        }
                    }else if(fondo.sellingByImportOrTitles.typeID === '2'){
                        vm.rulesBuy = {
                            registrationType: 'AMBOS'
                        };
                    }

                }).catch(function (_res) {
                    var _error = _res.data.outCommonHeader.result.messages;
                    CommonModalsSrv.error(ErrorMessage.createError(_error));
                }).finally(function () {
                    vm.loading = false;
                });
        }

        function resetForm(tipo) {
            if (tipo === "compra") {
                vm.cmd = {
                    type: 'titles',
                    evtentType: 'buy',
                    binnacle: {
                        date: new Date()
                    }
                };
            } else if (tipo === "venta") {
                vm.rulesSell = {
                    registrationType: 'AMBOS'
                };
                vm.cmd = {
                    type: 'titles',
                    evtentType: 'sell',
                    binnacle: {
                        date: new Date()
                    }
                };

                vm.fund = {
                    sell: {
                        titlesQty: $scope.selected.titlesQty,
                        fundID: $scope.selected.idFund,
                        settlementDate: $scope.selected.settlementDate,
                        dueDate: $scope.selected.dueDate,
                        currentPrice: $scope.selected.currentPrice,
                        position: $scope.selected.position,
                        movementType: $scope.selected.movementType,
                        stationName: $scope.selected.emissionID
                    }
                };
                vm.anticipedSellCheck = false;
                findDateExecution(new Date().getTime());
            }
            vm.transaction = null;
            vm.confirmationModel = null;
            vm.captureModel = null;
        }

        function sendTransactionSell() {
            var flagType = false;
            var operationDate = null;
            var titulos = 0;
            var message = '';

            if (vm.cmd.type === 'titles') {//si false(titulos) true(importe)
                flagType = false;
                titulos = vm.cmd.sell.typeValue;
            }else {
                flagType = true;
                titulos = parseInt(Math.abs(parseFloat(vm.cmd.importRules).toFixed(2))/parseFloat(vm.fund.sell.currentPrice));
                vm.cmd.sell.typeValue = titulos;
            }

            if(!$scope.sellLiquidity){
                operationDate = moment(vm.cmd.calendarExc).format("DDMMYYYY");
            }else{
                operationDate = moment(vm.cmd.operationDate.calendarOp).format("DDMMYYYY");
            }

            var ai_dollarFlag;
            if(vm.fund.sell.foreignExchangeID === '0'){
                ai_dollarFlag = false;
            }else if(vm.fund.sell.foreignExchangeID === '1'){
                ai_dollarFlag = true;
            }


            getDetailTransation();
            var _json = JSON.stringify(vm.detail);
            vm.transaction = {
                language: 'SPA',
                clientContractNumber: $scope.contract.contractNumber,
                clientBankingArea: vm.bankingArea,
                time: '00:00:00',
                fundID: vm.fund.sell.fundID,
                settlementID: '9',
                titlesQty: titulos,
                ai_operationDate: operationDate,
                ai_addPaymentAmountFlag: false,
                ai_clabe: '0',
                ai_checkAccount: '0',
                ai_addFreeOfOperationFeeFlag: false,
                ai_dollarFlag: ai_dollarFlag,
                buyerContractNumber: $scope.contract.contractNumber,
                buyerFundID: vm.fund.sell.fundID,
                ca_bankingArea: vm.bankingArea,
                amount: vm.cmd.importRules,
                currencyTypeKey: 0, //currency Cta eje.
                advanceSaleFlag:  vm.anticipedSellCheck,
                jsonDetails: _json
            };

            vm.transaction = contractTypeSrv.sendBinnacle(vm.contractType, vm.transaction , vm.cmd);

            vm.loading = true;
            vm.confirmationModel = null;
            fundBankDollSrv.bankFundSellRequest(vm.transaction).then(function (_res) {
                if(_res.outCommonHeader.operationName === 'BankFundSellRequest'){
                    vm.captureModel = _res;
                    CommonModalsSrv.done( ErrorMessage.createError(_res.outCommonHeader.result.messages) );
                }else{
                    vm.captureModel = vm.confirmationModel;
                    message =  _res.outAdviserPendingOpRegistration.operationsDetails[0].message;
                    message += '<br>Con el ID Registro <b>' +_res.outAdviserPendingOpRegistration.operationsDetails[0].operationID+'</b>';
                    CommonModalsSrv.done( message );
                }
            }).catch(function (_res) {
                CommonModalsSrv.error( ErrorMessage.createError( _res.outCommonHeader.result.messages) );
                vm.captureModel = null;
                vm.cmd.evtentType = 'sell';
            }).finally(function () {
                finish();
            });


        }

        function sendTransactionBuy() {
            var titulos = 0;
            /**Parametros para compra */
            var flagType = false;
            var operationDate = moment(vm.cmd.calendarExc).format("DDMMYYYY");
            var depositDate = moment(vm.cmd.calendarExc).format("DDMMYYYY");

            if (vm.cmd.type === 'titles') {
                flagType = false;
                titulos = vm.cmd.buy.typeValue;
            }else {
                flagType = true;
                titulos = 0;
            }

            getDetailTransation();
            var _json = JSON.stringify(vm.detail);

            if(vm.cmd.media.type.id !== '3'){
                vm.cmd.binnacle = {
                    time : '00:01:00',
                    date: new Date()
                };
            };

            var operationSource;
            if($scope.selected.currency === 'MXN'){
                operationSource = 'CCEJE';
            }else if($scope.selected.currency === 'USD'){
                operationSource = 'EFECMXN';
            }

            vm.transaction = {
                language: 'SPA',
                clientBankingArea: vm.bankingArea,
                clientContractNumber: $scope.contract.contractNumber,
                addFreeOfOperationFeeFlag: false,
                addPaymentAmountFlag: flagType,
                fundID: $scope.selected.fundID,
                operationDate: operationDate,
                titlesQty: titulos,
                depositDate: depositDate,
                applyRegistrationFlag: true,
                totalAmount: parseFloat(vm.cmd.importRules).toFixed(2),
                currency: 0,
                bankingArea: vm.bankingArea,
                operationSource : operationSource,
                jsonDetails: _json
            };

            vm.transaction = contractTypeSrv.sendBinnacle(vm.contractType, vm.transaction , vm.cmd);
            vm.loading = true;
            vm.confirmationModel = null;

            fundBankDollSrv.bankFundBuyRequest(vm.transaction)
                .then(function (_res) {
                    var message = '';
                    if (_res.outCommonHeader.result.result === 1) {
                        if(_res.outCommonHeader.operationName === 'BankFundBuyRequest'){
                            vm.captureModel = _res;
                            CommonModalsSrv.done( ErrorMessage.createError(_res.outCommonHeader.result.messages) );
                        }else{
                            vm.captureModel = vm.confirmationModel;
                            message =  _res.outAdviserPendingOpRegistration.operationsDetails[0].message;
                            message += '<br>Con el ID Registro <b>' +_res.outAdviserPendingOpRegistration.operationsDetails[0].operationID+'</b>';
                            CommonModalsSrv.done( message );
                        }
                    } else {
                        CommonModalsSrv.error( ErrorMessage.createError(_res.outCommonHeader.result.messages) );
                        vm.captureModel = null;
                        vm.cmd.evtentType = 'buy';
                    }
                }).catch(function (_res) {
                    CommonModalsSrv.error(_res.outCommonHeader.result.messages);
                    vm.captureModel = null;
                }).finally(function () {
                    finish();
                });
        }

        function getDetailTransation() {
            var precio=0;
            var titulos=0;
            var importe=0;
            var fechaOrden=null;
            var fechaLiquidacion=null;
            var operacion=null;

            if(vm.cmd.evtentType === 'buy'){//si es compra
                operacion = "Compra";
                precio = $filter('currency')(vm.currentCash , '$', 6);
                titulos = vm.cmd.buy.typeValue;
                importe = $filter('currency')(vm.cmd.buy.typeValue2 , '$');
            }else if(vm.cmd.evtentType === 'sell'){//venta
                operacion ="Venta";
                precio = $filter('currency')(vm.fund.sell.currentPrice , '$', 6);
                titulos = vm.cmd.sell.typeValue;
                importe = $filter('currency')(vm.cmd.sell.typeValue2 , '$');
            }

            fechaOrden = moment(vm.cmd.calendarExc).format('YYYY-MM-DD');
            fechaLiquidacion = moment(vm.cmd.fhLiquidacion).format('YYYY-MM-DD');
            var fechaEjecucion= moment(new Date().getTime()).format('YYYY-MM-DD');
            var totalDetail = $filter('currency')(vm.cmd.importRules , '$');
            vm.detail={
                Contrato: $scope.contract.contractNumber,
                Movimiento: operacion,
                Emisora: vm.stationName,
                Serie: vm.serie,
                Titulos:titulos,
                Precio: precio,
                Importe:importe,
                Total:totalDetail,
                'Fecha Orden':fechaOrden,
                'Fecha Liquidacion':fechaLiquidacion,
                'Fecha Ejecucion':fechaEjecucion
            };
        }

        $scope.$watch('selected', function () {
            vm.isObjectSell = false;
            if ($scope.selected) {
                if ($scope.selected.instrumentID) {
                    vm.isObjectSell = true;
                }else{
                    vm.isObjectSell = false;
                }
            }
            if($scope.selected && $scope.contract.isDinn) {
                CommonModalsSrv.error("No es posible operar un contrato DINN");
                return;
            } else if ($scope.selected && !vm.isObjectSell) { //si es compra
                vm.loading = true;
                vm.viewNewState = true;
                vm.newStateInit = false;
                vm.confirmationModel = true;
                vm.captureModel = false;
                vm.tab = 'buy';
                init();
            } else if ($scope.selected && vm.isObjectSell) {//si es venta
                vm.loading = true;
                vm.viewNewState = true;
                vm.newStateInit = false;
                vm.confirmationModel = true;
                vm.captureModel = false;
                vm.tab = 'sell';
                init();
            } else {
                vm.newStateInit = true;
                vm.viewNewState = false;
                vm.loading = false;
            }
        });

        $scope.changeSettlement2 = function (_model) {
            if(vm.cmd[_model].typeValue2 !== undefined){
                vm.cmd.importRules = Math.abs(vm.cmd[_model].typeValue2);
            }else{
                vm.cmd.importRules = 0;
            }
        };

        $scope.changeSettlement = function (_model) {
            if(vm.cmd[_model].typeValue !== undefined) {
                if (vm.isObjectSell) {
                    vm.cmd.importRules = Math.abs(vm.cmd[_model].typeValue * vm.fund.sell.currentPrice);
                } else {
                    vm.cmd.importRules = Math.abs(vm.cmd[_model].typeValue * vm.currentCash);
                }
                vm.cmd.importRules = vm.cmd.importRules.toString().match(/^-?\d+(?:\.\d{0,2})?/)[0];
            }else{
                vm.cmd.importRules = 0;
            }
        };

        vm.AddStation = function (_station){
            $scope.selected = _station;
            vm.captureModel = null;
            vm.confirmationModel = null;
            vm.loading = true;
            init();
        };

        vm.AddStationOrders = function (_order) {
            $scope.selected = _order;
            resetForm("venta");
            vm.loading = true;
            vm.captureModel = null;
            vm.confirmationModel = null;
        };

        vm.cleanImport = function (model) {
            if (model === 'sell') {
                if (vm.cmd.sell) {
                    vm.cmd.sell.typeValue = '';
                    vm.cmd.sell.typeValue2 = '';
                }
            } else if (model === 'buy') {
                if (vm.cmd.buy) {
                    vm.cmd.buy.typeValue = '';
                    vm.cmd.buy.typeValue2 = '';
                }
            }
            vm.cmd.importRules = '';
        };

        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 10
            if (_new.id === "10") {
                loginSrvc.validateUserTokens().then(function success(response) {
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error) {
                    resetTipoMedio(error.success, error.msg);
                });
            } else {
                resetTipoMedio(true, '');
            }
        };
    }

    angular
        .module('actinver.controllers')
        .controller('fundBankDollCtrl', fundBankDollCtrl);

})();
     
(function () {
    'use strict';

    fundBankDollSrv.$inject = ['$q', '$http', 'URLS', 'csrfSrv'];
    function fundBankDollSrv($q, $http, URLS, csrfSrv) {

        /**
           *  DollSrv
           */
        function DollSrv() { }


        DollSrv.prototype.getCalendarBank = function (_model, _serie, _anticipedS) {
            var newUrl = '';
            for (var i in _model) {
                newUrl += _model[i] + '/';
            }
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCalendarBank + newUrl,
                    params: {
                        language: 'SPA',
                        serie : _serie,
                        anticipatedSell : _anticipedS
                    }
                })
                    .then(function (_response) {
                        if (_response.data.outCommonHeader.result.result === 1) {
                            resolve(_response.data.outBankInvstCalendarByFundsQuery);
                        } else {
                            reject(_response.data.outCommonHeader.result);
                        }
                    });
            });
        };
        DollSrv.prototype.getMediaBank = function () {
            return $http({
                method: 'GET',
                url: URLS.getMediaBank + '?language=SPA',
            });
        };


        // Get current contract cash
        DollSrv.prototype.getCurrentCash = function (_contract) {
            return $http({
                method: 'GET',
                url: URLS.getCurrentCash + _contract + '/1/1/0',
                params: {
                    language: 'SPA'
                }
            });
        };

        // Pre-confirmation for current transaction
        DollSrv.prototype.confirmDoll = function (_model) {
            var sendModel = {
                language: "SPA",
                contract: _model.contract,
                term: _model.sinstrument.minTerm,
                netAmount: _model.invest.amount,
                rateOfReturn: _model.sinstrument.maxRate,
                valueType: _model.sinstrument.valueType,
                minTerm: _model.sinstrument.minTerm,
                maxTerm: _model.sinstrument.maxTerm,
                maxRate: _model.sinstrument.maxRate,
                minAmount: _model.sinstrument.minNetAmount,
                maxAmount: _model.sinstrument.maxNetAmount,
                minRate: _model.sinstrument.minRate,
                binnacle: _model.binnacle
            };

            return $http({
                method: 'get',
                url: URLS.confirmFundBankDoll,
                data: sendModel,
            });
        };

        // compra de fondo
        DollSrv.prototype.bankFundBuyRequest = function (_model) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.bankFundBuyRequest,
                        data: $.param(_model),
                    }).then(function (_res) {
                        resolve(_res.data);
                    });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        //venta de fondo
        DollSrv.prototype.bankFundSellRequest = function (_model) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.bankFundSellRequest,
                        data: $.param(_model),
                    }).then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            resolve(_res.data);
                        }else{
                            reject(_res.data);
                        }
                    }).catch(function (error) {
                        reject(error.data);
                    });
                }
            });
        };



        DollSrv.prototype.bankContractBalance = function (_contract, _bankingArea) {
            return $http({
                method: 'GET',
                url: URLS.bankContractBalance+_contract+'/'+_bankingArea,
                params: {
                    language: 'SPA'
                }
            });
        };

        DollSrv.prototype.bankReportoBuyingPowerQuery = function (_contract, _date) {
            return $http({
                method: 'GET',
                url: URLS.bankReportoBuyingPowerQuery +_contract+'/' + _date,
                params: {
                    language: 'SPA'
                }
            });
        };

        DollSrv.prototype.bankInvstUserInfoQuery = function () {

            return $http({
                method: 'GET',
                url: URLS.bankInvstUserInfoQuery,
                params: {
                    language: 'SPA'
                }
            });

        };


        DollSrv.prototype.getCurrencyFundByIDAndContract = function (_idFound, _contract, type) {
            var intType = 0;
            if (type === "compra") {
                intType = 1;
            } else if (type === "venta") {
                intType = 2;
            }

            return $http({
                method: 'GET',
                url: URLS.getFundBank+_contract+"/"+intType+"/"+_idFound+"/",
               // url: URLS.getFundBank + "7366693/" + intType + "/" + _idFound,
                params: {
                    language: 'SPA'
                }
            });

        };

                //cancelacion de compra de fondo
                DollSrv.prototype.bankFundBuyCancelation = function (_model) {           
                    
                     return $q(function (resolve, reject) {
                         csrfSrv.csrfValidate()
                             .then(successCsrf)
                             .catch(errorCsrf);
                         function successCsrf() {
                             $http({
                                 method: 'POST',
                                 url: URLS.bankFundBuyCancelationRequest,
                                 data: $.param(_model),
                             }).then(function (_res) {
                                 resolve(_res.data);
                             });
                         }
         
                         function errorCsrf(error) {
                             reject(error);
                         }
                     });
         
                 };

                //cancelacion de compra de fondo                                  
                DollSrv.prototype.bankFundSellCancelation = function (_model) {           
                    
                     return $q(function (resolve, reject) {
                         csrfSrv.csrfValidate()
                             .then(successCsrf)
                             .catch(errorCsrf);
                         function successCsrf() {
                             $http({
                                 method: 'POST',
                                 url: URLS.bankFundSellCancelationRequest,
                                 data: $.param(_model),
                             }).then(function (_res) {
                                 resolve(_res.data);
                             });
                         }
         
                         function errorCsrf(error) {
                             reject(error);
                         }
                     });
         
                 };




        return new DollSrv();
    }

    angular
        .module('actinver.services')
        .service('fundBankDollSrv', fundBankDollSrv);

})();
(function () {
    "use strict";

    actFundBankDoll.$inject = ['$timeout'];
    function actFundBankDoll($timeout) {

        function link(scope, $element) {
            scope.focusElement = function () {
                $timeout(function () {
                    $element.find('#station').focus();
                }, 250);
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/fund-bank-doll/fund-bank-doll.html',
            scope: {
                contract: '=',
                selected: '=',
                stations: '=',
                orders: '=?'
            },
            controller: 'fundBankDollCtrl',
            controllerAs: 'doll',
            link: link
        };


    }


    angular.module('actinver.directives')
        .directive('actFundBankDoll', actFundBankDoll);


})();

(function () {
    'use strict';

    accountStateResumeCtrl.$inject = ['$scope', '$uibModal', 'CommonModalsSrv', '$rootScope', '$sessionStorage', 'accountStateSrv'];
    function accountStateResumeCtrl($scope, $uibModal, CommonModalsSrv, $rootScope, $sessionStorage, accountStateSrv) {
        var vm = this;

        var user = JSON.parse($sessionStorage.user);
        vm.year = moment().format('YYYY');
        var isRRHHH = user.roles.includes('RRHH');

        getYear();
        getMonth();

        $scope.colours = ['#1750a7', '#4868F5', '#609FF4', '#F1F50B', '#0DEDEA'];

        $scope.datasetOverride = [{
            fill: true,
            backgroundColor: [
                "#1750a7"
            ]
        }
        ];

        vm.monthSelected = null;
        vm.yearSelected = null;
        vm.employeeId = null;
        vm.banderaGeneration = false;
        vm.banderaIntegration = false;
        vm.banderaPayments = false;
        vm.detail = false;

        $scope.chartLabelsBank = ['BANCO %', 'CASA DE BOLSA %', 'CAMBIOS %', 'SEGUROS %'];
        $scope.chartDataBank = [];

        $scope.labelsHouse = [];
        $scope.dataHouse = [];

        $scope.labelsPayments = [];
        $scope.dataPayments = [];


        
     
        function getMonth(){
            if (vm.year == 2019) {

                vm.listMonth = {
                    optionMonth: [
                        { id: "05", text: "Mayo" },
                        { id: "06", text: "Junio" },
                        { id: "07", text: "Julio" },
                        { id: "08", text: "Agosto" },
                        { id: "09", text: "Septiembre" },
                        { id: "10", text: "Octubre" },
                        { id: "11", text: "Noviembre" },
                        { id: "12", text: "Diciembre" }
                    ]
                };

            }else{
                vm.listMonth = {
                    optionMonth: [
                        { id: "01", text: "Enero" },
                        { id: "02", text: "Febrero" },
                        { id: "03", text: "Marzo" },
                        { id: "04", text: "Abril" },
                        { id: "05", text: "Mayo" },
                        { id: "06", text: "Junio" },
                        { id: "07", text: "Julio" },
                        { id: "08", text: "Agosto" },
                        { id: "09", text: "Septiembre" },
                        { id: "10", text: "Octubre" },
                        { id: "11", text: "Noviembre" },
                        { id: "12", text: "Diciembre" }
                    ]
                };
            }

        } 

        //vm.listYear=[];
        function getYear() {
            if (vm.year == 2019) {
                vm.listYear = {
                    optionYear: [
                        { id: vm.year, text: vm.year }
                    ]
                };
            } else {
                vm.listYear = {
                    optionYear: [
                        { id: vm.year, text: vm.year },
                        { id: vm.year - 1, text: vm.year - 1 }
                    ]
                };
            }
        };

        //getInfo();






        $rootScope.detailAccountState = undefined;

        vm.getInfoIntegration = function () {
            if (vm.banderaIntegration == false) {
                vm.banderaIntegration = true;
            } else {
                vm.banderaIntegration = false;
            }
        }
        vm.getInfoGeneration = function () {
            if (vm.banderaGeneration == false) {
                vm.banderaGeneration = true;
            } else {
                vm.banderaGeneration = false;
            }
        }

        vm.getInfoPayments = function () {
            if (vm.banderaPayments == false) {
                vm.banderaPayments = true;
            } else {
                vm.banderaPayments = false;
            }
        }

        $rootScope.$watch('detailAccountState', function () {
            vm.detailAccountState = $rootScope.detailAccountState;
            getPercentageGeneration(vm.detailAccountState.result.generation);
            getPercentageIntegration(vm.detailAccountState.result.integration);
            getPercentagePayments(vm.detailAccountState.result);
        });

        $rootScope.$watch('detail', function () {
            vm.detail = $rootScope.detail;
        });

        vm.sendLogin = function () {
            var msg = false;
            if (vm.monthSelected == null) {
                msg = 'Seleccione un mes a consultar';
            } else if (vm.yearSelected == null) {
                msg = 'Seleccione un año a consultar';
            } else if (typeof vm.employeeId === 'undefined' || vm.employeeId == null) {
                msg = 'Ingrese numero de empleado';
            }

            if (msg) {
                CommonModalsSrv.error(msg);
            } else {
                $rootScope.month = vm.monthSelected.id;
                $rootScope.year = vm.yearSelected.id;
                $rootScope.employeeId = vm.employeeId;

                if (isRRHHH) {
                    accountStateSrv.getAccountStateRh($rootScope.month, $rootScope.year, $rootScope.employeeId, user.userName, "xxxxxxx", isRRHHH)
                        .then(function (result) {
                            //reset();
                            if (result.data.outCommonHeader.result.result !== 1) {
                                CommonModalsSrv.error(result.data.outCommonHeader.result.messages[0].responseMessage);

                            } else {
                                $rootScope.detailAccountState = result.data;
                                $rootScope.detail = true;
                            }
                        }
                        ).catch(function (res) {
                            if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                                throw res;
                            }
                        });
                } else {
                    openLogin();
                }

            }


        };

        function openLogin() {

            return $uibModal.open({
                templateUrl: '/app/advisers/goals/views/accountState/account-state-login.html',
                controller: 'accountStateLoginCtrl',
                controllerAs: 'login'
            }).result.finally(angular.noop).then(angular.noop, angular.noop);
        };

        vm.reset = function () {
            $rootScope.detail = false;
            vm.detail = $rootScope.detail;
            vm.monthSelected = null;
            vm.yearSelected = null;
            vm.employeeId = null;
            vm.banderaGeneration = false;
            vm.banderaIntegration = false;
            vm.banderaPayments = false;
        }

        vm.help = function () {
           
            return $uibModal.open({
                templateUrl: '/app/advisers/goals/views/accountState/account-state-help.html',
                controller: 'accountStateHelpCtrl',
                controllerAs: 'help'
            }).result.finally(angular.noop).then(angular.noop, angular.noop);
        }

        //$scope.chartLabels = ['Series A', 'Series B', 'Series C'];
        //$scope.chartData = [500, 200, 30];          

        function getPercentageGeneration(detail) {
            detail.commissionPercentage = Math.round((detail.commissionPercentage) * 100);
            $scope.chartDataBank = [];
            var total = detail.generationBank.bank + detail.generationBrokerageHouse.brokerageHouse + detail.generationChanges.changes + detail.generationInsurance.insurance;
            $scope.chartDataBank.push(Math.round((detail.generationBank.bank / total) * 100));
            $scope.chartDataBank.push(Math.round((detail.generationBrokerageHouse.brokerageHouse / total) * 100));
            $scope.chartDataBank.push(Math.round((detail.generationChanges.changes / total) * 100));
            $scope.chartDataBank.push(Math.round((detail.generationInsurance.insurance / total) * 100));


        }

        function getPercentageIntegration(detail) {

            $scope.labelsHouse = [];
            $scope.seriesHouse = [];
            $scope.dataHouse = [];
            vm.dataHouseFinal = [];
            var porBase = (detail.percentageBase) * 100;

            var listRespaldo = detail.listDetailIntegrationChart;

            listRespaldo.forEach(function (element) {

                $scope.labelsHouse.push(new String(element.name));
                $scope.dataHouse.push(element.percentage);

            });
            
            detail.percentageBase = Math.round((detail.percentageBase) * 100);
            $scope.seriesHouse.push(" % ");

            vm.dataHouseFinal.push( $scope.dataHouse);

        };
        function getPercentagePayments(detail) {

            $scope.labelsPayments = [];
            $scope.dataPayments = [];

            $scope.labelsPayments.push("Comisiones del Mes" + "%");
            $scope.labelsPayments.push("Referenciados" + "%");
            $scope.labelsPayments.push("Seguros" + "%");
            $scope.labelsPayments.push("Arrendamientos" + "%");
            $scope.labelsPayments.push("Crédito" + "%");
            $scope.dataPayments.push(Math.round((detail.generation.commission / detail.payments.total) * 100));
            $scope.dataPayments.push(Math.round((detail.payments.referenced / detail.payments.total) * 100));
            $scope.dataPayments.push(Math.round((detail.payments.insurance / detail.payments.total) * 100));
            $scope.dataPayments.push(Math.round((detail.payments.leases / detail.payments.total) * 100));
            $scope.dataPayments.push(Math.round((detail.payments.credit / detail.payments.total) * 100));


        };




    }

    angular
        .module('actinver.controllers')
        .controller('accountStateResumeCtrl', accountStateResumeCtrl);

})();

(function(){
    'use strict';

    function accountStateResume(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/goals/accountState-resume.html',
            scope: {
                type: '@',
                obj: '=',
                datepicker: '=',
                search: '='
            },
            controller: 'accountStateResumeCtrl',
            controllerAs: 'resume'
        };
    }    

    angular
        .module( 'actinver.directives' )
        .directive( 'accountStateResume', accountStateResume );

} )();
(function(){
    'use strict';

    function goalsProducts(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/goals/products.html',
            scope: {
                data: '=',
                type: '@?'
            }
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'goalsProducts', goalsProducts );

} )();
( function(){
    'use strict';

    goalsResumeCtrl.$inject = ['$scope', '$filter', '$timeout', 'goalsSupervisorSrv', 'goalsModalSrv'];
    function goalsResumeCtrl( $scope, $filter, $timeout, goalsSupervisorSrv, goalsModalSrv ){
        var vm = this,
            initDate = moment().businessSubtract( 1 );

        // Search filter types
        vm.filter_types = goalsSupervisorSrv.search_filter_types;

        // Update report
        vm.updateReport = function( date ){
            var formatted_date = moment( date ).format( 'DD/MM/YY' );
            vm.current_date = formatted_date;
            $scope.$emit( 'changeDate', formatted_date );
            resetSearch();
        };

        // Set current filters
        vm.getFilter = function( filter ){
            vm.search = null;

            switch( filter.id ) {

                case 1:
                    filterInfo( $scope.search.info.elements, 'elements', 'total' );
                    break;

                case 2:
                    filterInfo( $scope.search.info.maxAdviser, 'maxAdviser', 'maxAdviserTotal' );
                    break;

                case 3:
                    filterInfo( $scope.search.info.minAdviser, 'minAdviser', 'minAdviserTotal' );
                    break;

                case 4:
                    filterInfo( $scope.search.info.maxFinancialCenter, 'maxFinancialCenter', 'maxFinancialCenterTotal' );
                    break;

                case 5:
                    filterInfo( $scope.search.info.minFinancialCenter, 'minFinancialCenter', 'minFinancialCenterTotal' );
                    break;
            }
        };

        // Get search filter info
        vm.getSearchInfo = function(){
            $timeout( function(){
                filterInfo( $filter( 'filter' )( $scope.search.info[ vm.filters.filter ], vm.search ), vm.filters.filter, vm.filters.totals );
            }, 100);
        };

        // Show center information
        vm.getCenterGoals = function( type, center ){
            // $scope.goals.sadviser.employeeID
            goalsModalSrv.showCenterDetail( type, $scope.$parent.$parent.goals.sadviser.employeeID, center, vm.current_date );
        };

        // Show adviser info
        vm.getAdviserGoals = function( adviserID, name ){
            goalsModalSrv.showAdviserDetail( adviserID, name, vm.current_date );
        };

        // Init
        function setup(){
            vm.updateReport( initDate );
        }

        // Reset search form
        function resetSearch(){
            vm.search = null;
            vm.selected_filter_type = {
                text: vm.filter_types[ 0 ].text
            };
        }

        // Set information by filter
        function filterInfo( info, filter_type, total_topic ){
            var filtered_info = $filter( 'orderBy' )( info, 'centroFinanciero' );

            // Group and format information
            vm.centers = $filter( 'groupJSON' )( filtered_info, 'centroFinanciero' );
            vm.totals = $scope.search.info[ total_topic ];
            vm.filters = {
                filter: filter_type,
                totals: total_topic
            };
            vm.filtered_report_empty = ( filtered_info.length === 0 ) ? true : false;
        }

        // Init
        setup();

        // Observable for changes in model
        $scope.$watch( 'search.info', function( newv ){
            if( typeof newv !== 'undefined' ){
                if( $scope.search.info.elements.length > 0 ){
                    filterInfo( $scope.search.info.elements, 'elements', 'total' );
                }
            }
        } );
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'goalsResumeCtrl', goalsResumeCtrl );

})();

(function(){
    'use strict';

    function goalsResume(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/goals/resume.html',
            scope: {
                type: '@',
                obj: '=',
                datepicker: '=',
                search: '='
            },
            controller: 'goalsResumeCtrl',
            controllerAs: 'resume'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'goalsResume', goalsResume );

} )();
(function(){
    'use strict';

    function goalsTotals(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/goals/totals.html',
            scope: {
                data: '=',
                modal: '=?'
            }
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'goalsTotals', goalsTotals );

} )();
(function(){
    'use strict';

    function headerScroll(){

        function link( scope, elem ){
            var lastScrollLeft = 0;

            $( window ).scroll( function(){

                if( $(window).width() < 1055 ){
                    var documentScrollLeft = $( document ).scrollLeft();

                    if ( lastScrollLeft !== documentScrollLeft ){
                        lastScrollLeft = documentScrollLeft;
                        elem.css( 'left', -documentScrollLeft );
                    }
                }
            } );

            $( window ).resize( function(){
                if( $(window).width() > 1054 ){
                    elem.css( 'left', 0 );
                }
            } );
        }

        return {
            restrict: 'A',
            link: link
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'headerScroll', headerScroll );

} )();

(function(){
    "use strict";

    onFinishRender.$inject = ['$timeout'];
    function onFinishRender($timeout){

        return {
            restrict: 'A',
            link: function () {
                if($("#ipc-ticker ul li").length === 8 && !$('#ipc-ticker').hasClass('initialized')){
                    $timeout(function(){
                        $('#ipc-ticker').addClass('initialized').liMarquee({
                            drag: false,
                            hoverstop: true,
                            scrollamount: 50,
                            runshort: false,
                        });
                    }, 50);
                }
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'onFinishRender', onFinishRender );
} )();
(function() {
    'use strict';

    ipcCtrl.$inject = ['URLS', '$scope', '$http', '$timeout'];
    function ipcCtrl( URLS, $scope, $http, $timeout ) {
        var set_ipc = {},
            set_issuers = {},
            ipc = this;
            ipc.objIPC = {};
            ipc.objIPCFact = {};
            ipc.streamWS = [];
            ipc.streamWSFact = [];
            ipc.finish = false;
            ipc.socketIpc = {
                stompclient: null,
                susbcribeBmvIpc: null,
                susbcribeBmvIpcFacts: null
            };

        $scope.$on('close-socket-ipc-status', function () {
            closeSocket();
        });

        // Set IPC objct
        set_ipc = {
            disconnect: function(){
                if(R.isEmpty(ipc.objIPCFact)){
                    $http({
                        method: 'GET',
                        url: URLS.getIPC,
                        ignoreLoadingBar: true,
                        params: {
                            language: 'SPA'
                        } 
                    }).then(function success(info) {
                        var payload = info.data;
                        ipc.objIPCFact = set_ipc.info(payload.ipcIndex, payload.ipcVar);
                    }, function error(){
                    });
                }
            },
            info: function(pindex, ppercentage) {
                ipc.finish = true;
                return {
                    "index": pindex.toString(),
                    "percentage": ppercentage.toString(),
                    "class": getClass(ppercentage.toString())
                };
            }
        };

        // Issuers widget
        set_issuers = {
            disconnect: function(){
                if(R.isEmpty(ipc.objIPC)){
                    /*
                    $http({
                        method: 'GET',
                        url: URLS.getIssuers,
                        params: {
                            language: 'SPA'
                        } 
                    }).then(function success(info) {
                        var issuers = info.data;
                        angular.forEach(issuers.outClientIssuersMarketInfoQuery.marketDataTuple, function(payload){
                            ipc.objIPC[payload.issuer.issuerSerie] = set_issuers.info(payload);
                        });
                    }, function error(error){
                        $log.info(error);
                    });*/
                }
            },
            info: function(payload){
                ipc.finish = true;
                return {
                    "issuerSerie": payload.issuer.issuerSerie,
                    "lastPrice": payload.lastPrice.toString(),
                    "priceVar": payload.priceVar.toString(),
                    "class": getClass(payload.priceVar.toString())
                };
            }
        };

        function getClass(string) {
            var c = true;
            if (string.indexOf("-") !== -1) {
                c = false;
            }
            return c;
        }

        function initWidget(){
            set_ipc.disconnect();
            set_issuers.disconnect();
        }

        function inicializarsocket(){
            var _url = URLS.CapitalsWebSocket + '?access_token=' + sessionStorage.getItem("__token");
            var socket = new SockJS(_url);
            ipc.socketIpc.stompclient = Stomp.over(socket);
            ipc.socketIpc.stompclient.debug = null;
            ipc.socketIpc.stompclient.connect({}, function () {

                ipc.socketIpc.susbcribeBmvIpcFacts = ipc.socketIpc.stompclient.subscribe('/topic/capitales/bmvIpcFacts', function (payload) {
                    $scope.$apply(function(){
                        var data = JSON.parse(payload.body);
                        ipc.objIPCFact = set_ipc.info(data.index, data.percentage);
                    });                   
                });

                ipc.socketIpc.susbcribeBmvIpc = ipc.socketIpc.stompclient.subscribe('/topic/capitales/bmvIpc', function (payload) {
                    $scope.$apply(function(){
                        var data = JSON.parse(payload.body);
                        ipc.objIPC[data.issuer.issuerSerie] = set_issuers.info(data);
                    });                   
                });

            }, function () {
                $timeout(inicializarsocket, 3000);
            });
            
        }

         function closeSocket() {
            if (ipc.socketIpc.stompclient !== null) {
                ipc.socketIpc.susbcribeBmvIpc.unsubscribe();                
                ipc.socketIpc.susbcribeBmvIpcFacts.unsubscribe(); 
                ipc.socketIpc.stompclient.disconnect();                                                              
            }
        }


        function wsConnect(){
            initWidget();
            inicializarsocket();
        }

        wsConnect();

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'ipcCtrl', ipcCtrl );

})();

(function(){
    "use strict";

    function ipc(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/ipc/ipc.html',
            controller : "ipcCtrl",
            controllerAs : "ipc"
        };


    }

    angular.module( 'actinver.directives' )
    .directive( 'ipc', ipc );


} )();

( function(){
    "use strict";

    incomesWidgetCtrl.$inject = ['incomesInfo'];
    function incomesWidgetCtrl(incomesInfo){
        var vm = this;

        // Incomes
        vm.details = {finish: false};
        incomesInfo.getInfo(69,4,2)
            .then(function successCallback(response){
                vm.details = response;
            }, function errorCallback(error){
                vm.details = error;
            });

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'incomesWidgetCtrl', incomesWidgetCtrl );

})();
( function() {
    "use strict";

    incomesInfo.$inject = ['URLS', '$http', '$q'];
    function incomesInfo(URLS, $http, $q) {

        return {

            /**
             * Get incomes widget information
             * @return  {function}
             */
            getInfo: function(){

                return $q(function(resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.dashboardIncomes,
                    }).then(function success(response) {

                        if ( !!response.data.status) {
                            resolve({success: true, data: response.data.result, finish: true});
                        }
                        else {
                            reject({success: false, finish: true});
                        }

                    }, function error(){

                        reject({success: false, finish: true});

                    });

                });
            }

        };

    }

    angular
        .module( 'actinver.services' )
        .factory( 'incomesInfo', incomesInfo );

})();

(function(){
    "use strict";

    function incomes(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/incomes/incomes.html',
            controller: 'incomesWidgetCtrl',
            controllerAs: 'incomesWidget',
            scope: true,
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'incomes', incomes );
} )();

(function () {
    'use strict';

    proposalsInstrumentsCtrl.$inject = ['$scope', '$filter', 'proposalsProposalSrv', 'CommonModalsSrv', '$rootScope'];
    function proposalsInstrumentsCtrl($scope, $filter, proposalsProposalSrv, CommonModalsSrv, $rootScope) {
        var vm = this,
            type = $scope.type,
            totals = 0;

        // Defaults
        $scope.invest[type] = [];
        vm.issuers_list = [];
        vm.form = {};
        vm.sissuer = {};
        vm.editing = {};
       

        
        vm.listCF = configTypes('client', $rootScope.listClassFav);
        

        if ($scope.productsList) {
            vm.products = setProducts($scope.productsList);
        }

        vm.listClassFav = {
            optionClas: vm.listCF
        };
        //vm.prueba= $rootScope.listClassFav;
           

       

        // Dropdown products
        function setProducts(list) {
            vm.listPrueba = [];
            return R.map(function (val) {
                val.text = val.issuerName + ' ' + val.serie;

                if ($scope.type === 'reportos') {
                    val.text = val.investmentType + ' ' + $filter('currency')(val.minNetAmount) + ' - ' + $filter('currency')(val.maxNetAmount);
                }

                if ($scope.type === 'derivatives') {
                    val.text = val.nota ;
                }

                if ($scope.type === 'actions') {
                    val.text = null;
                    vm.listPrueba.push(val);
                }

                return val;

            }, list);
        }

        // Deselect current product
        function deselect() {
            vm.editing = {};
            vm.sissuer = {};
        }

        //Valida que la suma de los montos de los productos no sobrepase el valor del portafolio propuesto
        function validateProduct(totalProduct) {
            var total = 0, option = { tipo: 0, monto: totalProduct };
            if (angular.isDefined($scope.invest)) {
                Object.values($scope.invest).forEach(function (data) {
                    if (angular.isArray(data)) {
                        data.forEach(function (record) {
                            total += record.amount;
                        });
                    }
                });
                if ($scope.portfolioValue < Number((total + totalProduct).toFixed(2))) {
                    option = { tipo: 1, monto: $scope.portfolioValue - total };//indica que la sumatoria de los productos sobresa al valor del portafolio propuesto
                }
            }
            return option;
        }

        //Da formato a moneda
        function formatMoney(n, currency) {
            return currency + " " + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
        }

        // Get all issuers info
        vm.getIssuersInfo = function () {
            vm.form.issuer = null;

            if (vm.issuers === 'all') {

                // Get profiles
                proposalsProposalSrv.getAllIssuers()
                    .then(function successCallback(response) {

                        angular.forEach(response.data, function (item) {
                            if (vm.issuers_list.indexOf(item.issuer.issuerSerie) === -1) {
                                vm.issuers_list.push(item.issuer.issuerSerie);
                            }
                        });

                    });
            }
        };

        // Calculate amount based on portfolio value
        vm.calcAmount = function (model) {
            var total = $scope.portfolioValue;

            if (typeof model.percentage !== 'undefined' && model.percentage !== '') {
                model.amount = model.percentage * total;
            }
        };

        // Calculate percentage based on portfolio value
        vm.calcPercent = function (model) {
            var total = $scope.portfolioValue;
            if (typeof model.amount !== 'undefined' && model.amount !== '') {
                model.percentage = model.amount / total;
                /*if( Math.round( model.percentage ) !== model.percentage ){
                    model.percentage = model.percentage.toFixed(2);
                }*/
            }
        };
        vm.recCalPercent = function () {
            var total = $scope.portfolioValue;
            if (angular.isDefined($scope.invest) && angular.isDefined($scope.invest[type]) && angular.isArray($scope.invest[type])) {
                $scope.invest[type].forEach(function (record) {
                    record.amount = record.percentage * total;
                });
            }
        };

        // Add one kind product to proposal
        vm.addProduct = function () {
            var issuer = (typeof vm.form.issuer === 'object') ? vm.form.issuer.text : vm.form.issuer,
                yet = R.findIndex(R.propEq('issuer', issuer))($scope.invest[type]),
                info,
                optionProduct = {};

            optionProduct = validateProduct(vm.form.amount);
            if (optionProduct.tipo > 0) {
                CommonModalsSrv.info('Solo puedes invertir una cantidad menor o igual a ' + formatMoney(optionProduct.monto, '$'));                
            } else {
                if (typeof issuer !== 'undefined') {
                    if (yet === -1) {
                        info = {
                            id: Math.floor(Math.random() * (1000000 + 1) + 1),
                            issuer: issuer,
                            amount: vm.form.amount,
                            percentage: vm.form.percentage
                        };
                        if (type === 'invest' && $filter('filter')($scope.issuers, vm.form.issuer.issuerName).length > 0) {
                            info.description = $filter('filter')($scope.issuers, vm.form.issuer.issuerName)[0].description;
                        }
                        if(type === 'derivatives'){
                            info.description = vm.form.issuer.aDetalle; 
                        }

                        $scope.invest[type].push(info);
                        vm.form = {};
                    } else {
                        CommonModalsSrv.error('El producto seleccionado ya se ha agregado anteriormente');
                    }
                } else {
                    CommonModalsSrv.error('El producto no ha sido seleccionado');
                }
            }
        };

        // Set object for editing products
        for (var i = 0; i < $scope.invest[type].length; i++) {
            vm.editing[$scope.invest[type][i].id] = false;
        }

        // Make copy from original object for reset purpose
        vm.edit = function (item) {
            vm.reset(vm.sissuer.id);
            vm.editing[item.id] = true;
            vm.sissuer = angular.copy(item);
        };

        // Delete item from invest array
        vm.delete = function (id) {
            var index = R.findIndex(R.propEq('id', id))($scope.invest[type]),
                message = '¿Estás seguro de eliminar el registro?';

            vm.reset(vm.sissuer.id);
            CommonModalsSrv.warning(message).result.then(function () {
                if (index !== -1) {
                    $scope.invest[type].splice(index, 1);
                    CommonModalsSrv.done('El registro se ha eliminado exitosamente.');
                } else {
                    message = 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';
                    CommonModalsSrv.error(message);
                }
            }).finally(angular.noop).then(angular.noop, angular.noop);
        };

        // Deselect current issuer
        vm.reset = function (id) {
            var index = R.findIndex(R.propEq('id', id))($scope.invest[type]);

            $scope.invest[type][index] = vm.sissuer;
            deselect();
        };

        // Update information
        vm.save = function (id) {
            var optionProduct,
                index,
                record,
                saldoRestante;
            index = R.findIndex(R.propEq('id', id))($scope.invest[type]);
            record = $scope.invest[type][index];
            optionProduct = validateProduct(0);
            saldoRestante = $scope.portfolioValue - ($scope.totals - record.amount);
            if (optionProduct.tipo > 0) {
                CommonModalsSrv.info('Solo puedes invertir una cantidad menor o igual a ' + formatMoney(saldoRestante, '$'));
            } else {
                deselect();
            }
        };

        vm.classificationFav = function (profile) {

            vm.pruebaFilterFav = [];
            vm.prueba =  vm.listPrueba.map(function( _val ){
                if(profile.idClassification ==  _val.idClassification){
                    _val.text = _val.issuerName;
                    vm.pruebaFilterFav.push(_val);
                } 
                
                return _val;
            }); 
        
        
          vm.form.issuer = null;
        };

        function configTypes(type, types) {
            return R.map(function (val) {
                switch (type) {

                    case 'client':
                        val.text = val.description;
                        break;

                    default:
                        val.text = val.name;

                }

                return val;
            }, types);
        }

        // Get information from portfolio value
        $scope.$watch('portfolioValue', function () {
            vm.calcPercent(vm.form);
            vm.recCalPercent();
        });

        // Show totals block
        $scope.$watch('invest', function () {
            totals = 0;
            if (angular.isDefined($scope.invest)) {
                Object.values($scope.invest).forEach(function (data) {
                    if (angular.isArray(data)) {
                        data.forEach(function (record) {
                            totals += record.amount;
                        });
                    }
                });
            }
            $scope.totals = totals;
        }, true);
    }

    angular
        .module('actinver.controllers')
        .controller('proposalsInstrumentsCtrl', proposalsInstrumentsCtrl);

})();
(function(){
    'use strict';

    function instruments(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/instruments/instruments.html',
            scope: {
                idx: '=',
                type: '@',
                title: '@',
                portfolioValue: '=',
                productsList: '=',
                invest: '=',
                totals: '=',
                issuers: '=?',
                isOpen:"=?"
            },
            controller: 'proposalsInstrumentsCtrl',
            controllerAs: 'ins'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'instruments', instruments );

} )();

(function(){
    'use strict';

    loader.$inject = ['$http'];
    angular 
        .module( 'actinver.directives' )
        .directive( 'loading', loader );

    function loader($http){
        return {
            restrict: 'A',
            link: function (scope, elm)
            {
                scope.isLoading = function () {
                    return $http.pendingRequests.length > 0;
                };

                scope.$watch(scope.isLoading, function (v)
                {
                    if(v){
                        elm.show();
                    }else{
                        elm.hide();
                    }
                });
            }
        };
    }

})();

(function() {
	'use strict';

	angularMarquee.$inject = ['$timeout'];
	function angularMarquee($timeout) {
		return {
			restrict: 'A',
			scope: true,
			compile: function(tElement) {
				if (tElement.children().length === 0) {
					tElement.append('<div>' + tElement.text() + '</div>');
				}
				var content = tElement.children();
		      	var $element = $(tElement);
						$(tElement).empty();
						tElement.append('<div class="angular-marquee" style="float:left;">' + content.clone()[0].outerHTML + '</div>');
		        var $item = $element.find('.angular-marquee');
		        $item.clone().css('display','none').appendTo($element);
				$element.wrapInner('<div style="width:100000px" class="angular-marquee-wrapper"></div>');
					return {
						post: function(scope, element, attrs) {

							$timeout(function(){
								//direction, duration,
								var $element = $(element);
								var $item = $element.find('.angular-marquee:first');
								var $marquee = $element.find('.angular-marquee-wrapper');
								var $cloneItem = $element.find('.angular-marquee:last');
								var duplicated = false;

								var containerWidth = parseInt($element.width());
								var itemWidth = parseInt($item.width());
								var defaultOffset = 20;
								var duration = 3000;
								var scroll = false;
								var animationCssName = '';
								var animationDelay = '';

								function calculateWidthAndHeight() {
									containerWidth = parseInt($element.width());
									itemWidth = parseInt($item.width());
									if (itemWidth > containerWidth) {
										duplicated = true;
									} else {
										duplicated = false;
									}

									if (duplicated) {
									$cloneItem.show();
									} else {
										$cloneItem.hide();
									}

									$element.height($item.height());
								}

								function _objToString(obj) {
									var tabjson = [];
									for (var p in obj) {
											if (obj.hasOwnProperty(p)) {
													tabjson.push(p + ':' + obj[p]);
											}
									}
									tabjson.push();
									return '{' + tabjson.join(',') + '}';
								}

								function calculateAnimationDuration(newDuration) {
									var result = (itemWidth + containerWidth) / containerWidth * newDuration / 1000;
									if (duplicated) {
										result = result / 2;
									}
									return result;
								}

								function getAnimationPrefix() {
									var elm = document.body || document.createElement('div');
									var domPrefixes = ['webkit', 'moz','O','ms','Khtml'];

									for (var i = 0; i < domPrefixes.length; i++) {
										if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
											var prefix = domPrefixes[i].toLowerCase();
											return prefix;
										}
									}
								}

								function createKeyframe(number) {
									var prefix = getAnimationPrefix();

									var margin = itemWidth;
									// if (duplicated) {
									// 	margin = itemWidth
									// } else {
									// 	margin = itemWidth + containerWidth;
									// }
									var keyframeString = '@-' + prefix + '-keyframes ' + 'simpleMarquee' + number;
									var css = {
										'margin-left': - (margin) +'px'
									};
									var keyframeCss = keyframeString + '{ 100%' + _objToString(css) + '}';
									var $styles = $('style');

									//Now add the keyframe animation to the head
									if ($styles.length !== 0) {
											//Bug fixed for jQuery 1.3.x - Instead of using .last(), use following
											$styles.filter(":last").append(keyframeCss);
									} else {
											$('head').append('<style>' + keyframeCss + '</style>');
									}
								}

								function stopAnimation() {
									$marquee.css('margin-left',0);
									if (animationCssName !== '') {
										$marquee.css(animationCssName, '');
									}

								}


								function createAnimationCss(number) {
									var time = calculateAnimationDuration(duration);
									var prefix = getAnimationPrefix();
									animationCssName = '-' + prefix +'-animation';
									animationDelay = animationCssName + '-delay';
									var cssValue = 'simpleMarquee' + number + ' ' + time + 's 0s linear infinite';
									$marquee.css(animationCssName, cssValue).css(animationDelay, '1s');
									if (duplicated) {
										$marquee.css('margin-left', 0);
									} else {
										var margin = containerWidth + defaultOffset;
										$marquee.css('margin-left', margin);
									}
								}

								function animate() {
									//create css style
									//create keyframe
									calculateWidthAndHeight();
									var number = Math.floor(Math.random() * 1000000);
									createKeyframe(number);
									createAnimationCss(number);
								}

								function recalculateMarquee() {
									if (scroll) {
										animate();
									} else {
										stopAnimation();
									}
								}

								scope.$watch(attrs.scroll, function(scrollAttrValue) {
									scroll = scrollAttrValue;
									recalculateMarquee();
								});

								var timer;
								scope.$on('recalculateMarquee', function() {
									console.log('receive recalculateMarquee event');
									if (timer) {
										$timeout.cancel(timer);
									}
									timer = $timeout(function() {
										recalculateMarquee();
									}, 500);

								});

								scope.$watch(attrs.duration, function(durationText) {
									duration = parseInt(durationText);
									if (scroll) {
										animate();
									}
								});
							});
						}
					};
				}
			};
	}

	angular
		.module( 'actinver.directives' )
		.directive( 'angularMarquee', angularMarquee );

})();

(function () {
    "use strict";

    lastNewsCtrl.$inject = ['$scope', '$timeout', 'lastNewsInfo', 'newsModalSrv', 'URLS'];
    function lastNewsCtrl($scope, $timeout, lastNewsInfo, newsModalSrv, URLS) {
        var vm = this;
        vm.noticias = [];
        vm.noticiasFilter = [];
        //0 Todos, 1 mostrar 10
        vm.opcionListarNoticias = 0;

        vm.socketLastNews={
            stompclient : null,
            susbcribe: null
        };        

        $scope.$on('close-socket-last-news', function() {
            cerrarsocket();
        });

        function inicializarSocket() {
            var _url = URLS.dashboardWebSocket + '?access_token=' + sessionStorage.getItem("__token");
            var socket = new SockJS(_url);
            vm.socketLastNews.stompclient = Stomp.over(socket);
            vm.socketLastNews.stompclient.debug = null;
            vm.socketLastNews.stompclient.connect({}, function () {
                vm.socketLastNews.susbcribe = vm.socketLastNews.stompclient.subscribe('/topic/feedInfosel/lastNews', function (response) {
                    var data = JSON.parse(response.body);                    
                    processNews(data);
                });
            }, function () {
                $timeout(inicializarSocket, 3000);
            });
        }

        function cerrarsocket() {            
            if (vm.socketLastNews.stompclient !== null) {
                vm.socketLastNews.susbcribe.unsubscribe();
                vm.socketLastNews.stompclient.disconnect();
            }                  
        }

        function processNews(news) {
            vm.noticias.unshift(news);
            vm.noticiasFilter = Array.from(vm.noticias);
        }

        // Get information
        vm.info = {
            success: false
        };

        lastNewsInfo.getInfo()
            .then(function successCallback(response) {
                vm.noticias = Array.from(response.data.result);
                vm.noticiasFilter = Array.from(response.data.result);
                vm.info = response;                
            }, function errorCallback(error) {
                vm.info = error;
                vm.noticias = [];
            });

        vm.changeOpcion = function (opcion) {
            vm.opcionListarNoticias = opcion;
            if (opcion === 1) {
                vm.noticiasFilter = vm.noticias.slice(0, vm.noticias.length >= 10 ? 10 : vm.noticias.length);
            } else {
                vm.noticiasFilter = Array.from(vm.noticias);
            }
            $scope.$broadcast("recalculateMarquee");
        };

        vm.verListadoNews = function () {
            newsModalSrv.showNews(vm.noticias);
        };


        inicializarSocket();

    }

    angular
        .module('actinver.controllers')
        .controller('lastNewsCtrl', lastNewsCtrl);
})();
( function() {
    "use strict";

    lastNewsInfo.$inject = ['URLS', '$http', '$q'];
    function lastNewsInfo(URLS, $http, $q) {

        return {

            /**
             * Get last news widget information
             * @return  {function}
             */
            getInfo: function(){

                return $q(function(resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.dashboardNews || '',
                        ignoreLoadingBar: true,
                        params:{
                            language: 'SPA'
                        } 
                    }).then(function success(response) {
                        if ( !!response.status ) {
                            resolve({success: true, data: response.data, finish: true});
                        }
                        else {
                            reject({success: false, finish: true});
                        }

                    }, function error(){
                        console.log("error");

                        reject({success: false, finish: true});

                    });

                });
            }

        };

    }

    angular
        .module( 'actinver.services' )
        .factory( 'lastNewsInfo', lastNewsInfo );

})();

(function(){
    "use strict";

    function lastNews(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/last-news/last-news.html',
            controller: 'lastNewsCtrl',
            controllerAs: 'lastNewsWidget'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'lastNews', lastNews );
} )();
(function(){
    "use strict";

    function actCalendar(){

        function link(scope, $el ){
            var newModel;
            scope.$watch('ngModel', function (newValue) {
                if (!(newValue !== null && newValue !== undefined && newValue.toString().trim() !== "")) {
                    $el.find('~ .mask-directive').css('display', 'none');
                }
            });

            function setup(){
                if( scope.ngModel ){
                    replaceString();
                }
                setMask();
                setEvents();
            }

            function replaceString() {
                if (scope.ngModel) {
                    scope.ngModel = scope.ngModel.toString();
                    var newString = scope.ngModel.substr(2).replace(/./g, '*');

                    newModel = scope.ngModel.substr(0, 2) + newString;
                    replaceMask();
                }
            }

            function replaceMask(){
                $el.find( '~ .mask-directive' ).html( newModel ).css('display','block');
            }

            function setMask(){
                $el.after( '<div class="mask-directive" >' + (newModel || scope.placeholder || '')  + '</div>' );
            }

            function setEvents(){

                $el.bind( 'focusout', function(){
                    replaceString();
                } );

                $el.bind( 'focus', function(){
                    $el.find( '~ .mask-directive' ).css('display', 'none' );
                } );

                $el.find('~ .mask-directive').bind( 'click', function(){
                    $el.focus();
                } );
            }


            setup();
        }

        return {
            restrict: 'EA',
            templateUrl: '/scripts/directives/datetime/datetime.html',
            link : link,
            scope:{
                ngModel: '=',
                placeholder: '@',
            }
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'masks', actCalendar );


} )();

(function () {
    'use strict';

    menuCtrl.$inject = ['$sessionStorage', 'URLS', '$scope', '$timeout', 'notificationLuminaSrv', 'LuminaModalsSrv', 'ErrorMessagesSrv', 'Auth'];
    function menuCtrl($sessionStorage, URLS, $scope, $timeout, notificationLuminaSrv, LuminaModalsSrv, ErrorMessagesSrv, Auth) {
        var vm = this;
        var ctrlTimer;
        vm.sclient = JSON.parse($sessionStorage.user);
        vm.numeroNotificacionesLumina = 0;

        vm.socketNotification = {
            stompclient: null,
            susbcribe: null
        };

        vm.menu = {
            showSlide: false,
            position: 0,
            showButtonLeft: false,
            showButtonRight: false
        };

        $scope.$on('closeSocketNotificationLumina', function () {
            if (validRole("ASESOR"))
                cerrarsocket();
        });

        $scope.$on('mensajesLuminaNoLeidos', function (event, numMensajes) {
            vm.numeroNotificacionesLumina = numMensajes;
        });

        function validRole(roleSearch) {
            var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
            var indice = -1;
            if (angular.isDefined(user.roles) && angular.isArray(user.roles)) {
                indice = user.roles.findIndex(function (rol) {
                    return rol.toUpperCase() === roleSearch;
                });
            }
            return indice > -1;
        }

        function cerrarsocket() {
            if (vm.socketNotification.stompclient !== null) {
                vm.socketNotification.susbcribe.unsubscribe();
                vm.socketNotification.stompclient.disconnect();
            }
        }

        function onstart() {
            if (validRole("ASESOR")) {
                getNotificationLumina();
                $timeout(inicializarSocket, 3000);
            }   
            showButtonsMenu();

        }

        function getNotificationLumina() {
            notificationLuminaSrv.getNotifications(sessionStorage.__username).then(function success(record) {
                vm.numeroNotificacionesLumina = record.totalNoLeido;
            }).catch(function error(error) {
                ErrorMessagesSrv(error.message);
                vm.numeroNotificacionesLumina = 0;
            });
        }

        function inicializarSocket() {
            var _url = URLS.LuminaWebSocket + '?access_token=' + sessionStorage.getItem("__token");
            var socket = new SockJS(_url);
            vm.socketNotification.stompclient = Stomp.over(socket);
            vm.socketNotification.stompclient.debug = null;
            vm.socketNotification.stompclient.connect({}, function () {
                var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
                var subscribe = '/topic/notifications/' + user.userName;
                vm.socketNotification.susbcribe = vm.socketNotification.stompclient.subscribe(subscribe, function (response) {
                    var data = JSON.parse(response.body);
                    LuminaModalsSrv.information(data);
                });
            }, function () {
                $timeout(inicializarSocket, 3000);
            });
        }


        function getDiferentsWidthMenu(){    
            var obj = {
                divMenu: document.getElementById("idMenuDiv").getBoundingClientRect().width - 5,
                ulMenu: document.getElementById("idContentMenu").getBoundingClientRect().width + 30
            };
            if (obj.ulMenu > obj.divMenu)
                obj.restantes = obj.ulMenu - obj.divMenu;
            else{               
                    obj.restantes = 0;
            }                   
            return obj;
        }

        function showButtonsMenu () {
            var size = getDiferentsWidthMenu();            
            //boton izquierdo
            vm.menu.showButtonLeft = (vm.menu.position <= 0 ? false:true);
            //boton derecho
            vm.menu.showButtonRight = (vm.menu.position >= size.restantes ? false: true);
        }

        vm.validatePermiso = function(permiso){
            if (Auth.userHasPermission(permiso))
                return true;
            return false;
        };

        vm.slideMenuLeft = function () {       
            vm.menu.position = vm.menu.position <= 0 ? 0 : (vm.menu.position - 30);
            showButtonsMenu();
            document.getElementById("idContentMenu").style.right = (vm.menu.position+"px");                        
            if (vm.menu.position <= 0) {
                $timeout.cancel(ctrlTimer);
            } else {
                ctrlTimer = $timeout(vm.slideMenuLeft, 150);
            }
        };

        vm.slideMenuRight = function () {            
            var size = getDiferentsWidthMenu();         
            vm.menu.position = vm.menu.position > size.restantes ? size.restantes: vm.menu.position + 30;                
            showButtonsMenu();           
            document.getElementById("idContentMenu").style.right = (vm.menu.position+"px");                        
            if (vm.menu.position > size.restantes) {
                $timeout.cancel(ctrlTimer);
            } else {
                ctrlTimer = $timeout(vm.slideMenuRight, 150);
            }
        };

        vm.resize = function(){
            vm.menu.position = 0;
            document.querySelector("#idContentMenu").style.right = "0px"; 
            showButtonsMenu();
            $scope.$apply();
        };

        vm.mouseOver = function(tipo){
            if (tipo === 1)
                vm.slideMenuLeft();
            else
                vm.slideMenuRight();
        };

        vm.mouseLeave = function () {
            if (ctrlTimer && ctrlTimer !== null)
                $timeout.cancel(ctrlTimer);
        };


        onstart();

    }
    angular
        .module('actinver.controllers')
        .controller('menuCtrl', menuCtrl);

})();
(function () {
    'use strict';

    function menu() {
        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/menu/menu.html',            
            controller: 'menuCtrl',
            controllerAs: 'menuCtrl'
        };
    }
    angular.module('actinver.directives')
        .directive('menu', menu);

})();
( function(){
    'use strict';

    moneyBankDollCtrl.$inject = ['$scope', '$q', 'moneyBankDollSrv', 'contractTypeSrv', 'CommonModalsSrv', 'ErrorMessage', 'fundBankDollSrv', '$sessionStorage', 'loginSrvc', 'moment'];
    function moneyBankDollCtrl( $scope, $q, moneyBankDollSrv, contractTypeSrv, CommonModalsSrv, ErrorMessage, fundBankDollSrv, $sessionStorage, loginSrvc, moment ){
        var vm = this;
        var moneyMarketCalc;
        var registerModel = {};
        vm.sinstrument;
        vm.directSection = {
            changeInstrument:false,            
            valueOriginalCalculator: null,
            pAndL : 0
        };
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);
        vm.tipoMedio={
            msg : '',
            showMsg:false
        };
        var comments;

        function resetTipoMedio(success, msg){
            vm.tipoMedio.msg =  success ? '': msg;
            vm.tipoMedio.showMsg = !success;
        }

        function init(){
            moneyBankDollSrv.getMediaBank().then( function( response ){
            vm.loading = false;

            // Media
            if( response.data.outCommonHeader.result.result === 1 ){
                vm.Media = R.map( function( _val ){
                    _val.id = _val.identifier;
                    _val.text = _val.instructionTypeDescription;                    
                    return _val;
                }, response.data.result);                
            }

            
            getBankContractBalance();

            initialize();
        });
        }
        function getBankContractBalance(){

            if(vm.operationTypeMM === 'subastas'){
                var _date = moment(new Date(vm.sinstrument.settlementDate)).format('DDMMYYYY');
                fundBankDollSrv.bankReportoBuyingPowerQuery($scope.contract.contractNumber, _date).then( function (_res) {
                    vm.contractBalance = _res.data.outBankReportoBuyingPowerQuery.totalPosition;
                }).catch(function(){
                    vm.contractBalance = null;
                });
            }else{
                fundBankDollSrv.bankContractBalance($scope.contract.contractNumber, '001').then( function (_res) {
                    vm.contractBalance = _res.data.outBankContractBalance.balanceData.availableBalance;
                }).catch(function(){
                    vm.contractBalance = null;
                });
            }

        }

        function initialize(){
            if( $scope.type === 'directo'){
                vm.operationTypeMM = 'directo';
                vm.cmd = {
                    type:  'titles',
                    media: {}
                };

            }

            if( $scope.type === 'reporto' ){
                vm.operationTypeMM = 'reporto';
                vm.cmd = {
                    type:  'import',
                    media: {}
                };
            }

            if( $scope.type === 'subastas'){
                vm.operationTypeMM = 'subastas';
                vm.cmd = {
                    type:  'import',
                    media: {}
                };
            }
        }

        function getNumberPlazo(cadena){
            var numero = "", plazo = -1;
            if(cadena !=null && cadena.length> 0){
                for(var i = 0; i < cadena.length; i++){
                    if(cadena.charCodeAt(i) >= 48 && cadena.charCodeAt(i)<= 57){
                        numero+=cadena[i];
                    }
                }
                if(numero.length>0){
                    plazo = parseInt(numero)/24; 
                }

            }
            return parseInt(plazo);
        }

        function desplazarDecimals(value){
            var valor;
            if(value <= 100 && value >= 10  && value != null){
                valor = parseFloat( "0."+String(value).replace(".",""));                
            }else if(value < 10 && value >= 0  && value != null){
                valor = parseFloat("0.0"+String(value).replace(".",""));
            }else{
                valor = parseFloat(value/100);
            }
            return valor;
        }

        function cleanModels(){
            vm.cmd              = {};
            vm.plazo_emision    = null;
            vm.titles           = null;
            vm.import           = null;
            vm.money_calc       = {};
            vm.confirmModel     = false;
            vm.capturedModel    = false;
            vm.finishModel      = false;
            resetTipoMedio(true, '');
            vm.getValuesData = false;
            vm.infoMessage = '';
            initialize();
        }

        /*vm.changeTab = function( _tab ){
            cleanModels();
            if( typeof vm.sinstrument !== 'undefined' && vm.sinstrument !== null && vm.tab !== _tab ){
                vm.tab = _tab;
                vm.loading = true;
                init();
            }
        };*/

        vm.changeOperationType = function ( type ) {
            vm.money_calc.titles = null;
            vm.money_calc.amount = null;
          if ( type === 'titles' ) {
              vm.import = null;
          } else {
              vm.titles = null;
          }
        };

        vm.getValues = getValues;
        vm.getValuesbyImport = getValuesbyImport;

        function getValuesbyImport() {
            if(vm.money_calc.originalConvention === 'Yield' || vm.money_calc.originalConvention === 'YIELD'){
                getValues(vm.money_calc.originalConvention, vm.money_calc.originPrice);
            }else if(vm.money_calc.originalConvention === 'Residual Dirty' || vm.money_calc.originalConvention === 'RESIDUAL_DIRTY'){
                getValues(vm.money_calc.originalConvention, vm.money_calc.dirtyPrice);
            }

        }

        function getValues(_origin, _price ){
            var daysToMaturity = vm.tab === 'buy' ? getNumberPlazo(vm.sinstrument.term) : getNumberPlazo(vm.sinstrument.selectedInstrument.term);
            if(vm.titles !== null && !vm.import &&  typeof vm.titles !== 'undefined' && $scope.type === 'directo' && typeof _price === "number" || vm.import !== null && !vm.titles &&  typeof vm.import !== 'undefined' && $scope.type === 'directo' && typeof _price === "number"){
                vm.loading = true;
                vm.getValuesData = false;
                var _destinationConvention;                 
                var _exchangeRate = vm.tab === 'buy' ? vm.sinstrument.exchangeRate : vm.sinstrument.selectedInstrument.exchangeRate;
                if(_origin === 'Yield' || _origin === 'YIELD'){
                    _origin = 'YIELD';
                    _destinationConvention = 'RESIDUAL_DIRTY';                    
                    _price = Number((_price / 100).toFixed(8));
                }else if(_origin === 'Residual Dirty' || _origin === 'RESIDUAL_DIRTY'){                    
                    _origin = 'RESIDUAL_DIRTY';
                    _destinationConvention = 'YIELD';         
                    _price = _price / _exchangeRate;
                    _price = Number(_price.toFixed(8));                                        
                }
                moneyMarketCalc = {
                    instrumentDesc: vm.sinstrument.instrumentDesc,
                    price:  _price,
                    originalConvention: _origin,
                    daysToMaturity: daysToMaturity ==null ? 0: daysToMaturity,
                    destinationConvention: _destinationConvention,
                    language: 'SPA'
                };

                if( vm.cmd.type === 'titles' ){
                    moneyMarketCalc.quantity = vm.titles;
                }else if( vm.cmd.type === 'import' ){                    
                    moneyMarketCalc.amount = vm.import / _exchangeRate;
                    moneyMarketCalc.amount = Number(moneyMarketCalc.amount.toFixed(8));
                }

                moneyBankDollSrv.getMoneyMarketCalculation( moneyMarketCalc ).then( function( response ){
                    vm.calc = true;
                    vm.loading = false;
                    var _res = response.data.outMMBondPriceCalculationQuery; 
                    vm.money_calc = {
                        amount: _res.amount ? (_res.amount * _exchangeRate ) : vm.import,
                        titles: _res.quantity || vm.titles,
                        originalConvention: _res.originalConvention
                    };

                    if(_res.originalConvention === "RESIDUAL_DIRTY"){
                        vm.money_calc.originPrice = Number((_res.calculatedPrice * 100).toFixed(8));// tasa
                        vm.money_calc.dirtyPrice = _res.originPrice; // precio

                    }else if(_res.originalConvention === "YIELD"){
                        vm.money_calc.originPrice = Number((_res.originPrice * 100).toFixed(8));// tasa
                        vm.money_calc.dirtyPrice = _res.calculatedPrice; // precio
                    }

                    if($scope.type==='directo'){

                        if(vm.directSection.changeInstrument){
                            vm.directSection.changeInstrument = false;
                            vm.directSection.valueOriginalCalculator = _res;                            
                        }                        
                        var titles = vm.cmd.type === 'import'? vm.money_calc.titles : vm.titles;
                        var priceOrigin = vm.directSection.valueOriginalCalculator.dirtyPrice * _exchangeRate;
                        vm.money_calc.dirtyPrice = Number( (vm.money_calc.dirtyPrice * _exchangeRate).toFixed(8));                                                                
                        var montoBuy = (vm.money_calc.dirtyPrice - priceOrigin) * titles ;
                        var montoSell = (priceOrigin - vm.money_calc.dirtyPrice) * titles ;
                        vm.directSection.pAndL = vm.tab === 'buy' ? montoBuy : montoSell;
                        vm.directSection.pAndL = vm.directSection.pAndL;                        
                    }          
                }).catch(function(error){
                    vm.calc = false;
                    vm.loading = false;                    
                    CommonModalsSrv.error(ErrorMessage.createError(error.data));
                    cleanModels();
                });
            }
        }


        vm.cleanModels = cleanModels;

        vm.confirm = function(){
            if(vm.operationTypeMM === 'directo'){
                registerModel = {
                    instrumentDesc: vm.sinstrument.instrumentDesc,
                    priceType: vm.money_calc.originalConvention === 'RESIDUAL_DIRTY' ? 'Residual Dirty' : 'Yield',
                    bonusOrderType: 'SECURITY',
                    operationType: 'SHORT_NAME',
                    exchangeRate : 1 
                };

                if(vm.tab === 'buy')
                    registerModel.daysToMaturity = getNumberPlazo(vm.sinstrument.term);
                if(vm.tab === 'sell')
                    registerModel.daysToMaturity = getNumberPlazo(vm.sinstrument.selectedInstrument.term);

                if(vm.money_calc.originalConvention === 'Yield' || vm.money_calc.originalConvention === 'YIELD'){
                    registerModel.price = vm.money_calc.originPrice;
                }else if(vm.money_calc.originalConvention === 'Residual Dirty' || vm.money_calc.originalConvention === 'RESIDUAL_DIRTY'){
                    registerModel.price = vm.money_calc.dirtyPrice;
                }

                if( vm.cmd.type === 'titles' ){
                    registerModel.quantity = vm.titles;
                }else if( vm.cmd.type === 'import' ){
                    registerModel.amount = vm.import;
                }
                registerModel = contractTypeSrv.sendBinnacle(vm.contractType, registerModel , vm.cmd);
                moneyBankDollSrv.captureDirectBank(registerModel)
                    .then( function (_res) {
                        angular.forEach(_res.data.outCommonHeader.result.messages, function(_value){
                            vm.infoMessage += _value.responseMessage;
                        });
                        vm.confirmModel = true;
                        vm.capturedModel = false;   
                    }).catch(function (error) {
                    vm.finish();
                    CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                });
            }else if(vm.operationTypeMM === 'reporto'){
                registerModel = {
                    securityGroupL1: vm.sinstrument.bondType,
                    securityGroupL2: vm.sinstrument.bondType,
                    amount: vm.import,
                    daysDuration: vm.sinstrument.period,
                    rate: desplazarDecimals(vm.money_calc.originPrice),
                    bonusOrderType: 'SECURITY'
                };
                registerModel = contractTypeSrv.sendBinnacle(vm.contractType, registerModel , vm.cmd);
                moneyBankDollSrv.captureReportoBank(registerModel)
                    .then( function (_res) {
                        angular.forEach(_res.data.outCommonHeader.result.messages, function(_value){
                            vm.infoMessage += _value.responseMessage;
                        });
                        vm.confirmModel = true;
                        vm.capturedModel = false;
                    }).catch(function (error) {
                    vm.finish();
                    CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                });
            }else if(vm.operationTypeMM === 'subastas'){                 
                var _price;
                if( vm.import <= vm.contractBalance ){
                    if(vm.cmd.auctionPrice.type.priceType === 'Yield' || vm.cmd.auctionPrice.type.priceType === 'YIELD'){
                        _price =  Number((vm.cmd.auctionPrice.type.price * 100).toFixed(8));
                    }else{
                        _price = Number((vm.cmd.auctionPrice.type.price).toFixed(8));
                    }

                    registerModel = {
                        priceType: vm.cmd.auctionPrice.type.priceType,
                        price: _price,
                        amount: vm.import,
                        bonusOrderType: 'PUBLIC_OFFERING',
                        auctionName: vm.sinstrument.auctionID
                    };
                    registerModel = contractTypeSrv.sendBinnacle(vm.contractType, registerModel , vm.cmd);

                  var f1 =  moment(vm.cmd.binnacle.date).format('YYYY-MM-DD');
                  var f2 =   moment(new Date(vm.sinstrument.settlementDate)).format('YYYY-MM-DD');
                  var fFinal1 = new Date(f1);
                  var fFinal2 = new Date(f2);

                    var diasdif= fFinal2.getTime()-fFinal1.getTime();
                    var contdias = Math.round(diasdif/(1000*60*60*24));
   
                    if(Math.sign(contdias) === -1){
                        contdias = 0;
                    }

                    registerModel.daysDuration = contdias;
                    moneyBankDollSrv.captureDirectBank(registerModel)
                        .then( function (_res) {
                            angular.forEach(_res.data.outCommonHeader.result.messages, function(_value){
                                vm.infoMessage += _value.responseMessage;
                            });
                            vm.confirmModel = true;
                            vm.capturedModel = false;
                        }).catch(function (error) {
                        vm.finish();
                        CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                    });
                }else{
                    CommonModalsSrv.error( 'El importe es mayor al poder de compra' );
                }

            }

            registerModel.actionType = 'VALIDATE';
            registerModel.buySell = vm.tab === 'buy' ? 'B' : 'S';
            registerModel.clientID = $scope.contract.contractNumber;
            registerModel.language = 'SPA';
            registerModel.comments = (moment(vm.cmd.binnacle.date).format('YYYY-MM-DD') + ' | ' + vm.cmd.media.type.text + ' ' + (vm.cmd.media.type.id === "3" ? (vm.cmd.binnacle.phoneNumber + ' ' + vm.cmd.binnacle.time) : ' ') + ' | ' + vm.cmd.binnacle.comments);
            registerModel.jsonDetails = '';
            comments =(moment(vm.cmd.binnacle.date).format('YYYY-MM-DD') + ' | ' + vm.cmd.media.type.text + ' ' + (vm.cmd.media.type.id === "3" ? (vm.cmd.binnacle.phoneNumber + ' ' + vm.cmd.binnacle.time) : ' ') + ' | ' + vm.cmd.binnacle.comments);
        };

        vm.modify = function(){
            vm.confirmModel = false;
            vm.infoMessage = '';
        };
        
        vm.capture = function(){
            registerModel.actionType = 'SAVE';
            var _folio, message;
            if(vm.operationTypeMM  === 'directo'){               
                moneyBankDollSrv.captureDirectBank(registerModel)
                    .then( function (_res) {
                        vm.infoMessage = ErrorMessage.createError( _res.data.outCommonHeader.result.messages );
                        _folio = _res.data.outMMDirectBondOrdersRegistration.orderData[0].orderID;
                        message = 'La orden se envió de manera correcta.' + '<br>' + 'OrderId: ' + _folio + '<br>' + vm.infoMessage;
                        CommonModalsSrv.done(message);
                        vm.loading = false;
                        getBankContractBalance();
                        vm.finish();
                    }).catch(function (error) {
                    vm.finish();
                    CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                }).finally(function () {
                    cleanModels();
                    vm.finish();
                });
            }else if(vm.operationTypeMM  === 'reporto'){
                vm.loading = true;
                registerModel = contractTypeSrv.sendBinnacle(vm.contractType, registerModel , vm.cmd);
                registerModel.comments = comments;
                moneyBankDollSrv.captureReportoBank(registerModel)
                    .then( function (_res) {
                        vm.infoMessage = ErrorMessage.createError( _res.data.outCommonHeader.result.messages );
                        _folio = _res.data.outMMReportoBondOrdersRegistration.orderData[0].orderID;
                        message = 'La orden se envió de manera correcta.' + '<br>' + 'OrderId: ' + _folio + '<br>' + vm.infoMessage;
                        CommonModalsSrv.done(message);
                        vm.loading = false;
                        vm.finish();
                    }).catch(function (error) {
                    vm.finish();
                    CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                }).finally(function () {
                    vm.loading = false;
                });
            }else if(vm.operationTypeMM === 'subastas'){
                registerModel = contractTypeSrv.sendBinnacle(vm.contractType, registerModel , vm.cmd);  
                moneyBankDollSrv.captureDirectBank(registerModel)
                    .then( function (_res) {
                        vm.infoMessage = ErrorMessage.createError( _res.data.outCommonHeader.result.messages );
                        _folio = _res.data.outMMDirectBondOrdersRegistration.orderData[0].orderID;
                        message = 'La orden se envió de manera correcta.' + '<br>' + 'OrderId: ' + _folio + '<br>' + vm.infoMessage;
                        CommonModalsSrv.done(message);
                        vm.loading = false;
                        vm.finish();
                    }).catch(function (error) {
                    vm.finish();
                    CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                }).finally(function () {
                    cleanModels();
                    vm.finish();
                });
            }

            var _json = {
                Contrato : registerModel.clientID,
                Movimiento : registerModel.buySell
            };
            _json = JSON.stringify(_json);	

            registerModel.jsonDetails = _json;

            vm.confirmModel = false;            
            vm.capturedModel = true;
        };

        vm.finish = function(){
            cleanModels();
            vm.finishModel = true;
            vm.tab = null;
            $scope.instrument = null;

        };

        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 10
            if (_new.id === "10") {
                loginSrvc.validateUserTokens().then(function success(response) {
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error) {
                    resetTipoMedio(error.success, error.msg);
                });
            } else {
                resetTipoMedio(true, '');
            }
        };

        function initReporto(){
            vm.tab = 'buy';
            vm.loading = true;            
            init();              
            //vm.confirmationModel = false;
        }


        // Init application only if instrument is selected
        $scope.$watch( 'type', function(){
            vm.tab = false;            
            $scope.instrument = null;
            cleanModels();
        });
                
        $scope.$watch( 'instrument', function(_newInstrument, _oldInstrument ){
                                    
            vm.sinstrument = $scope.instrument;
            if (_newInstrument !== _oldInstrument && $scope.type === 'directo'){
                vm.directSection.changeInstrument = true;                
            };

            cleanModels();
            if(typeof vm.sinstrument !== 'undefined' && vm.sinstrument !== null){
                vm.confirmModel = false;
                if(vm.sinstrument.origen === 'POSICION'&& ($scope.type === 'reporto' || $scope.type === 'subastas')) {
                    $scope.instrument = null;
                }else if($scope.type === 'reporto'){
                    vm.tab = 'buy';
                    initReporto();
                }else if($scope.type === 'directo'){
                    //Entra por bandas
                    if(vm.sinstrument.priceType === 'Yield' || vm.sinstrument.priceType === 'Residual Dirty'){
                        var totalTC = vm.sinstrument.averagePurchaseMargin * vm.sinstrument.exchangeRate;
                        var value = vm.sinstrument.priceType === 'Residual Dirty' ?  Number(totalTC.toFixed(8)) : vm.sinstrument.averagePurchaseMargin;                        
                        vm.tab = 'buy';
                        vm.titles = 1;
                        vm.cmd.type = 'titles';
                        vm.getValuesData = true;
                        getValues(vm.sinstrument.priceType, value);
                        init();
                    //Entra por posicion
                    }else if(vm.sinstrument.origen === 'POSICION'){
                        var totalTC = vm.sinstrument.selectedInstrument.averagePurchaseMargin * vm.sinstrument.selectedInstrument.exchangeRate;
                        var value = vm.sinstrument.selectedInstrument.priceType === 'Residual Dirty' ?  Number(totalTC.toFixed(8)) : Number(vm.sinstrument.selectedInstrument.averagePurchaseMargin.toFixed(8));
                        vm.tab = 'sell';
                        vm.titles = 1;
                        vm.cmd.type = 'titles';
                        vm.getValuesData = true;
                        getValues( vm.sinstrument.selectedInstrument.priceType , value);
                        init();
                    }else{
                        $scope.instrument = null;
                    }
                }else if($scope.type === 'subastas'){
                    vm.tab = 'buy';
                    moneyBankDollSrv.getAuctionsPrice(vm.sinstrument.auctionID).then(function (_res) {
                        if(_res.success){
                            vm.auctionPriceList = R.map( function( _val ){
                                _val.text = _val.priceType;
                                return _val;
                            }, _res.data.outMoneyMarketAuctionsPriceQuery.auctionsQueryList.auctionRecord );
                        }
                    }).catch(function(_res){                        
                        if(_res.success){
                            CommonModalsSrv.error(_res.msg);
                        }else{
                            CommonModalsSrv.systemError();
                        }                        
                    });
                    init();
                }
            }
        } );
    }

    angular
        .module( 'actinver.controllers')
        .controller( 'moneyBankDollCtrl', moneyBankDollCtrl );

})();

(function() {
    'use strict';

    moneyBankDollSrv.$inject = ['$http', 'URLS', 'csrfSrv', '$q', 'CommonModalsSrv'];
    function moneyBankDollSrv( $http, URLS, csrfSrv, $q, CommonModalsSrv) {
        /**
         *  DollSrv
         */
        function DollSrv(){}

        DollSrv.prototype.getMoneyMarketCalculation = function( data ){
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.getMoneyMarketCalculation,
                        params: data,
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response );
                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result.messages} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.getMediaBank = function( ) {
            return $http({
                method: 'GET',
                url: URLS.getMediaBank + '?language=SPA',
            });
        };

        // Get current contract cash
        DollSrv.prototype.getCurrentCash = function( _contract ){
            return $http({
                method: 'GET',
                url: URLS.getCurrentCash + _contract +'/1/1/0',
                params: {
                    language: 'SPA'
                }
            });
        };

        // Second and final confirmation
        DollSrv.prototype.captureDirectBank = function (_data) {
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.captureDirectBank,
                        params: _data
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response);
                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });

        };

        DollSrv.prototype.getAuctionsPrice = function (_instrument) {

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.getAuctionsPrice,
                        data: $.param({
                            auctionName:_instrument,
                            language:'SPA'
                        })
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){                            
                            resolve({success : true, data: response.data , msg:response.data.outCommonHeader.result.messages[0].responseMessage });
                        } else{
                            reject({success : true, data: null  , msg:response.data.outCommonHeader.result.messages[0].responseMessage });
                        }
                    },function(){                        
                        reject({success : false, data: null , msg:'' });
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.captureReportoBank = function (_data) {
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.captureReportoBank,
                        params: _data
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response);
                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });

        };


        return new DollSrv();
    }

    angular
        .module( 'actinver.services' )
        .service( 'moneyBankDollSrv', moneyBankDollSrv ) ;

})();
(function(){
    "use strict";

    actMoneyBankDoll.$inject = ['$timeout'];
    function actMoneyBankDoll( $timeout ){

        function link( scope, $element) {

            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#station').focus();
                }, 250);
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/money-bank-doll/money-bank-doll.html',
            scope: {
                type: '=?',
                contract: '=',
                instrument: '=',
                selected: '=',
                orders: '=?'
            },
            controller: 'moneyBankDollCtrl',
            controllerAs: 'doll',
            link: link
        };


    }


    angular.module( 'actinver.directives' )
        .directive( 'actMoneyBankDoll', actMoneyBankDoll );


} )();

( function(){
    'use strict';

    moneyDirectDollCtrl.$inject = ['$sessionStorage', 'moneyDirectDollSrv', 'ErrorMessage', 'CommonModalsSrv', 'contractTypeSrv', '$rootScope', '$scope', 'transfersSrv', 'loginSrvc'];
    function moneyDirectDollCtrl( $sessionStorage, moneyDirectDollSrv, ErrorMessage, CommonModalsSrv, contractTypeSrv, $rootScope, $scope, transfersSrv, loginSrvc){

        var vm = this;
        vm.stepA = true;
        vm.isDistribuida = false;
        vm.validoNumTitulos = false;
        vm.totalTitles = 0;
        vm.cmd = {
            binnacle:{
                comments:'',
                date : new Date()
            },
            type:  'titles',
            media: {}
        };
        var _issuer, _serie;
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);

        vm.tipoMedio={
            msg : '',
            showMsg:false
        };
        
        
        function resetTipoMedio(success, msg){
            vm.tipoMedio.msg =  success ? '': msg;
            vm.tipoMedio.showMsg = !success; 
        }

        function init() {
            vm.table = '62';
            vm.contractNumber =  $scope.contract.contractNumber;
            if(vm.stepA === true){
               $rootScope.bands = null;
            }

            $rootScope.distOrder = false;

            $rootScope.pageConfig = {
               itemsPerPage: 5,
               fillLastPage: true
            };

            resetTipoMedio(true,'');

            transfersSrv.getMedia().then(function( _res ){
                var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
                var _mediaType = [];
                angular.forEach(_media,function(value){
                    _mediaType.push({
                        id : value.key,
                        text : value.description
                    });
                });
                vm.Media = _mediaType;
            });

           moneyDirectDollSrv.getMoneyMarketContactMeansCatalogs('3', 'MONEDA', 'currency').then(function( _res ){
               var _media = _res.data.outMoneyMarketContactMeansCatalogs.contactMeans;
               var _mediaType = [];
               angular.forEach(_media,function(value){
                   _mediaType.push({
                       id : value.key,
                       text : value.description,
                       shortKey : value.shortKey,
                       numericKey : value.numericKey
                   });
               });
               vm.Currency = _mediaType.splice(1,6); //Se quita elemento duplicado del arreglo
           });

            moneyDirectDollSrv.getMoneyMarketContactMeansCatalogs('23', 'VOR','operationType').then(function( _res ){
                var _media = _res.data.outMoneyMarketContactMeansCatalogs.contactMeans;
                var _mediaType = [];
                angular.forEach(_media,function(value){
                    _mediaType.push({
                        id : value.key,
                        text : value.description,
                        shortKey : value.shortKey,
                        numericKey : value.numericKey
                    });
                });
                vm.operationType = _mediaType;
            });

            moneyDirectDollSrv.getMoneyMarketContactMeansCatalogs('23', 'RCTIPINS', 'instrument').then(function( _res ){
                var _media = _res.data.outMoneyMarketContactMeansCatalogs.contactMeans;
                var _mediaType = [];
                angular.forEach(_media,function(value){
                    _mediaType.push({
                        id : value.key,
                        text : value.description,
                        shortKey : value.shortKey,
                        numericKey : value.numericKey
                    });
                });
                vm.titleType = _mediaType;
            });

            moneyDirectDollSrv.getMoneyMarketContactMeansCatalogs('3', 'VALOR', 'settlement').then(function( _res ){
                var _media = _res.data.outMoneyMarketContactMeansCatalogs.contactMeans;
                var _mediaType = [];
                angular.forEach(_media,function(value){
                    _mediaType.push({
                        id : value.key,
                        text : value.description,
                        shortKey : value.shortKey,
                        numericKey : value.numericKey
                    });
                });
                vm.settlementType = _mediaType;
            });

       }


        function validaTitulo(){
            if(vm.isDistribuida)//si tiene la opcion de distibuida
            {
                if(parseFloat(vm.titlesQty) < parseFloat(vm.totalTitles)){
                    vm.validoNumTitulos=false;
                    vm.msgTitulos="El número de titulos operados no debe ser mayor al de titulos distribuidos";           
    
                }else{
                    vm.msgTitulos=null;
                    vm.validoNumTitulos=true;
                }
            }else{
                vm.msgTitulos=null;
                vm.validoNumTitulos=true;
            }

        }

        vm.isValidoTitulo = function(){       
           validaTitulo();
        };

        /**  Reset doll **/
        function cleanModels(){
            vm.cmd.media = null;
            vm.operationTimeNumber = null;
            vm.currencyTypeDesc = null;
            vm.table = null;
            vm.instrumentType = null;
            vm.captureModel = null;
            vm.confirmationModel = null;
            vm.settlement = null;
            vm.term = null;
            vm.instrument = null;
            vm.vencimiento = null;
            vm.reporto = null;
            vm.typeTitles = null;
            vm.typeImport = null;
            vm.titlesQty = null;
            vm.amount = null;
            vm.operationTypeV = null;
            vm.price = null;
            vm.adviserPrice = null;
            vm.adviserSurtaxRate = null;
            vm.adviserRate = null;
            vm.adviserDiscountRate = null;
            vm.adviserRate  = null;
            vm.adviserDiscountRate  = null;
            vm.adviserSurtaxRate  = null;
            vm.surtaxRate  = null;
            vm.price  = null;
            vm.discountRate  = null;
            vm.rate  = null;
            vm.issuerReporto = null;
            vm.serieReporto = null;
            vm.amount = null;
            $rootScope.bands = null;
            resetTipoMedio(true, '');
        }

        vm.changeOperationType = function ( type ) {            
            if ( type === 'titles' ) {
                vm.import = null;
            } else {
                vm.titles = null;
            }
        };

        vm.changeTab = function( _tab ){
            vm.tab = _tab;
            vm.loading = null;
            vm.confirmModel = null;
            vm.confirmationModel = null;
            vm.stepA = false;
            vm.stepB = true;
            vm.cleanModels();
            init();
        };

        vm.getType = function (_type) {
            vm.getBands(_type.id);
            if(_type.id === '2'){
                vm.issuerReporto = '';
                vm.serieReporto = '';
                vm.cmd.type =  'titles';
                if(vm.term !== null && vm.term !== undefined){
                    moneyDirectDollSrv.getMoneyMarketIssuersSeriesQuery( vm.settlement.shortKey, vm.term ).then( function( _res ){
                        $rootScope.bands = _res;
                    }).catch(function (error) {
                        cleanModels();
                        CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                    });
                }
            }
        };

        vm.getBands = function (_operationTypeV) {
            if(_operationTypeV.id === '2'){
                if(vm.term !== null && vm.term !== undefined){
                    moneyDirectDollSrv.getMoneyMarketIssuersSeriesQuery( vm.settlement.shortKey, vm.term ).then( function( _res ){
                        $rootScope.bands = _res;
                    }).catch(function (error) {
                        cleanModels();
                        CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
                    });
                }
            }else{
                vm.cmd.type =  'import';
                $rootScope.bands = null;
            }
        };

        vm.distributedOrder = function () {
            $rootScope.distOrder = true;
            vm.totalTitles=0;
            vm.advider = '9055';

            moneyDirectDollSrv.getMoneyMarketAdviserContractsQuery( vm.advider, vm.contractNumber ).then( function( _res ){
                $rootScope.adviserContracts = _res.contract.contracts;
                vm.isDistribuida = false;
            }).catch(function (error) {
                cleanModels();
                CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
            });

        };

        function getIsser(){
            if(vm.issuerReporto && vm.serieReporto){
                _issuer = vm.issuerReporto;
                _serie = vm.serieReporto;
            }else if (vm.instrument){
                _issuer =  vm.instrument.issuer;
                _serie = vm.instrument.serie;
            }else if(!vm.issuerReporto && !vm.serieReporto || !vm.instrument){
                _issuer = ' ';
                _serie = ' ';
            }
        }

        vm.confirm = function () {
            getIsser();
            vm.stepA = false;
            vm.stepB = false; 
            vm.confirmModel = true;
            var _operationTimeNumber = vm.operationTimeNumber.replace(":", ".");
            var _model = {
                language : 'SPA',
                contractNumber: vm.contractNumber,
                issuer: _issuer,
                serie:  _serie,
                transactionType: vm.tab === 'buy' ? 1 : 2, //compra = 1 o venta = 2
                term: vm.term,
                amount: vm.amount ? vm.amount : 0,
                titlesQty: vm.titlesQty ? vm.titlesQty : 0,
                operationType: vm.operationTypeV.shortKey,
                settlementType: vm.settlement.shortKey,
                rate: vm.rate ? vm.rate : 0,
                discountRate: vm.discountRate ? vm.discountRate : 0,
                price: vm.price ? vm.price : 0,
                surtaxRate: vm.surtaxRate ? vm.surtaxRate : 0,
                distributedIndicator: vm.isDistribuida ? 'SI' : 'NO',
                distributedTitlesQty: vm.totalTitles,
                distributedTitlesAmount: 0,
                instrumentType: vm.instrumentType.shortKey,
                tableNumber: vm.table, //
                operationTimeNumber: _operationTimeNumber,
                currencyTypeDesc: vm.currencyTypeDesc.numericKey,
                adviserRate: vm.adviserRate ? vm.adviserRate : 0,
                adviserDiscountRate: vm.adviserDiscountRate ? vm.adviserDiscountRate : 0,
                adviserPrice: vm.adviserPrice ? vm.adviserPrice : 0,
                adviserSurtaxRate: vm.adviserSurtaxRate ? vm.adviserSurtaxRate : 0,
            };

            moneyDirectDollSrv.getMoneyMarketOrderQuotation(_model).then( function( _res ){
                vm.confirmModel = _res;
            }).catch(function (error) {
                vm.stepB = true;
                vm.stepA = false;
                vm.confirmModel = null;
                CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
            });
        };


        vm.capture =function () {
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            var _model = {
                language : 'SPA',
                contractNumber: vm.confirmModel.contractNumber,
                issuer: vm.confirmModel.issuer,
                serie: vm.confirmModel.serie,
                transactionType: vm.tab === 'buy' ? 1 : 2, //compra = 1 o venta = 2
                term: vm.confirmModel.term,
                amount: vm.confirmModel.amount,
                titlesQty: vm.confirmModel.titlesQty,
                operationType: vm.confirmModel.operationType,
                settlementType: vm.confirmModel.settlementType,
                rate: vm.confirmModel.rate ? vm.confirmModel.rate : 0,
                discountRate: vm.confirmModel.discountRate ? vm.confirmModel.discountRate : 0,
                price: vm.price ? vm.confirmModel.price : 0,
                surtaxRate: vm.confirmModel.surtaxRate ? vm.confirmModel.surtaxRate : 0,
                distributedIndicator: vm.confirmModel.isDistribuida ? 'SI' : 'NO',
                distributedTitlesQty: vm.confirmModel.titlesQty,
                distributedTitlesAmount: 0,
                instrumentType: vm.confirmModel.instrumentType,
                tableNumber: vm.confirmModel.tableNumber, //
                operationTimeNumber: vm.confirmModel.operationTimeNumber,
                currencyTypeDesc: vm.confirmModel.currencyTypeDesc,
                adviserRate: vm.confirmModel.adviserInfo.adviserRate ? vm.confirmModel.adviserInfo.adviserRate : 0,
                adviserDiscountRate: vm.confirmModel.adviserInfo.adviserDiscountRate ? vm.confirmModel.adviserInfo.adviserDiscountRate : 0,
                adviserPrice: vm.confirmModel.adviserInfo.adviserPrice ? vm.confirmModel.adviserInfo.adviserPrice : 0,
                adviserSurtaxRate: vm.confirmModel.adviserInfo.adviserSurtaxRate ? vm.confirmModel.adviserInfo.adviserSurtaxRate : 0,
                requestorName: _user,
            };


            _model = contractTypeSrv.sendBinnacle(vm.contractType, _model , vm.cmd);

            moneyDirectDollSrv.getMoneyMarketOrderRegistration( _model ).then( function( _res ){
                var message;
                vm.captureModel = _res;
                var _folio = _res.length > 0 ? _res[0].operationID : vm.captureModel.operationReference;
                message = 'La '+ ( vm.tab==='buy' ? 'compra' : 'venta' ) +' se envió de manera correcta.';
                message += '<br>Con el folio de la operación <b>' +_folio+'</b>';
                CommonModalsSrv.done(message);
                $scope.$emit('updateTab');

                vm.finalStep = true;
                vm.stepA = true;
                vm.stepB = false;
                vm.confirmModel = null;
                vm.captureModel = null;
                $rootScope.bands = null;
                cleanModels();
            }).catch(function (error) {
                vm.stepB = true;
                vm.stepA = false;
                vm.confirmModel = null;
                CommonModalsSrv.error( ErrorMessage.createError( error.data.messages ) );
            });
         };

        vm.finish = function(){
            vm.stepA = true;
            vm.stepB = false;
            vm.confirmModel = null;
            vm.captureModel = null;
            $rootScope.bands = null;
            cleanModels();

        };

        vm.modify = function () {
            vm.stepB = true;
            vm.stepA = false;
            vm.confirmModel = false;
        };

        vm.cleanModels = cleanModels;

        $rootScope.getInstrument = function( _instrument) {
            vm.instrument = _instrument;
        };

        $rootScope.getValue=function( ) {
            var listJson=$rootScope.totalTitles;
            vm.totalTitles=0;
                angular.forEach(listJson,function(value){
                          if(value !== ''){
                            vm.totalTitles+=parseFloat(value) ;
                        }
                });
            validaTitulo();

        };

        vm.onChangeTypeMedio = function (_last, _new) {            
            //Medios electronicos id = 4
            if(_new.id === "4"){
                loginSrvc.validateUserTokens().then(function success(response){
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error){
                    resetTipoMedio(error.success, error.msg);
                });
            }else{
                resetTipoMedio(true, '');
            }            
        };
    }
    angular.module( 'actinver.controllers')
        .controller( 'moneyDirectDollCtrl', moneyDirectDollCtrl);


})();


(function() {
    'use strict';

    moneyDirectDollSrv.$inject = ['$http', 'URLS', 'csrfSrv', '$q', 'CommonModalsSrv'];
    function moneyDirectDollSrv( $http, URLS, csrfSrv, $q, CommonModalsSrv ) {

        function DollSrv(){}

        DollSrv.prototype.getMoneyMarketIssuersSeriesQuery = function( _settlementType, _term ){
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.getMoneyMarketIssuersSeriesQuery,
                        params : {
                            language : 'SPA',
                            settlementType : _settlementType ,
                            term : _term
                        },
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response.data.outMoneyMarketIssuersSeriesQuery.issuerData);
                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.getMoneyMarketContactMeansCatalogs = function(_areaKey, _catalogName ) {
            return $http({
                method: 'GET',
                url: URLS.getMoneyMarketContactMeansCatalogs + _areaKey + '/' + _catalogName,
                params: {
                    language : 'SPA',
                }
            });
        };

        DollSrv.prototype.getMoneyMarketAdviserContractsQuery = function( _idAdviser, _contract ){
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {

                    $http({
                        method: 'POST',
                        url: URLS.getMoneyMarketAdviserContractsQuery,
                        params : {
                         language : 'SPA',
                         adviserNumber : _idAdviser,
                         contractNumber : _contract
                         },
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response.data.outMoneyMarketAdviserContractsQuery );
                         } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                         }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };




        DollSrv.prototype.getMoneyMarketOrderQuotation = function(_model){
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.getMoneyMarketOrderQuotation,
                        data: $.param(_model)                       
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            resolve( response.data.outMoneyMarketOrderQuotation.orderQuotation);
                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.getMoneyMarketOrderRegistration = function(_model){
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    console.log('modelo directo',_model);
                    var _json =  {
                        Instrumento: _model.issuer,
                        "Tipo inversión": "DIRECTO",
                        Plazo: _model.term,
                        "Tasa descuento cliente": _model.discountRate,
                        "Tasa descuento asesor": _model.adviserDiscountRate,
                        Titulos: _model.titlesQty
                    };
                    _model.jsonDetails = JSON.stringify(_json);
                    $http({
                        method: 'POST',
                        url: URLS.getMoneyMarketOrderRegistration,
                        data: $.param(_model)
                    }).then(function(response) {
                        if(response.data.outCommonHeader.result.result === 1){
                            if(response.data.outAdviserPendingOpRegistration){
                                resolve( response.data.outAdviserPendingOpRegistration.operationsDetails);
                            }else{
                                resolve( response.data.outMoneyMarketOrderRegistration.orderRegistration);
                            }

                        } else{
                            reject( {success: true, data: response.data.outCommonHeader.result} );
                        }
                    },function(){
                        CommonModalsSrv.systemError();
                        reject( null );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };


        return new DollSrv();
    }

    angular
        .module( 'actinver.services' )
        .service( 'moneyDirectDollSrv', moneyDirectDollSrv ) ;

})();
(function(){
    'use strict';

    function actMoneyDirectDoll( ){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/money-direct-doll/money-direct-doll.html',
            scope: {
                contract: '='
            },
            controller: 'moneyDirectDollCtrl',
            controllerAs: 'doll',

        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'actMoneyDirectDoll', actMoneyDirectDoll );

} )();

(function(){
    'use strict';

    function tableDirect(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/money-direct-doll/table-direct.html',
            scope: {
                contract: '@',
                instrument: '=',
                tab: '=',
            },
            controller: 'moneyDirectDollCtrl',
            controllerAs: 'doll',

        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'actTableDirect', tableDirect );

} )();
(function(){
    "use strict";

    ngBlink.$inject = ['$timeout'];
    function ngBlink( $timeout ){

        return {
            restrict: 'A',
            scope: {
                ngModel : '=',
                currency: '@',
            },
            template: '<div ng-class="{\'blink-me red\': red, \'blink-me green\': green }"> {{ ::currency }} {{ ngModel | currency: "" : 3 }}</div>',
            link: function( $scope ){
                var timer;
                var timer2;
                var inUse = false;

                function cleanModels(){
                    $scope.green = false;
                    $scope.red = false;
                }
                function blink( _new, _old ) {
                    if(!inUse){
                        inUse = true;

                        cleanModels();
                        $timeout.cancel( timer );
                        $timeout.cancel( timer2 );

                        $scope.green = _new > _old;
                        $scope.red = _new < _old;

                        timer = $timeout( function(){
                            cleanModels();
                        }, 1500);
                        timer2 = $timeout( function(){
                            inUse= false;
                        }, 450);
                    }
                }

                $scope.$watch('ngModel', function( _new, _old) {
                    if( _old !== _new ){
                        blink( _new, _old);
                    }
                });
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'ngBlink', ngBlink );
} )();

( function(){
    'use strict';

    moneyDirectoDollCtrl.$inject = ['$scope', 'dollSrv', '$filter', 'transfersSrv', 'CommonModalsSrv', 'investmentSrv', '$sessionStorage'];
    function moneyDirectoDollCtrl( $scope, dollSrv, $filter, transfersSrv, CommonModalsSrv, investmentSrv, $sessionStorage ){

        var vm = this;
        var baseStation;

        function initBuy() {
            vm.cmd = {
                type:  'titles',
                media: {}
            };
        }

        function initSell(){
            vm.cmd.typeBank = 'efectivo';
        }

        /**
        * @params {object} object datePicker
        **/
        function disableDatePicker( _datePicker ){
            var mode = _datePicker.mode;
            var date = _datePicker.date;
            var isHoliDay;

            if( mode === 'day' ){
                var isDisable = R.find( function( _date ){
                    var _dtSrv = new Date( _date.operationDate );
                    return (date.getDate() === _dtSrv.getDate() && date.getMonth() === _dtSrv.getMonth() && date.getFullYear() === _dtSrv.getFullYear());
                }, vm.dollDescription.fund.operationDatesData.operationDateItem );

                if( isDisable ){
                    var isDisableDate =   isDisable ? new Date( isDisable.operationDate ): null;
                    isHoliDay = R.find( function( _date ){
                        var _dtSrv = new Date( _date );
                        return (isDisableDate.getDate() === _dtSrv.getDate() && isDisableDate.getMonth() === _dtSrv.getMonth() && isDisableDate.getFullYear() === _dtSrv.getFullYear());
                    }, vm.dollDescription.fund.holidayDatesData.holidayDate );
                }

                return isHoliDay ? true: (isDisable ? false : true);
            }
            return false;
        }

        vm.stations = [];
        vm.currentDate = $filter('date')(new Date, 'dd/MM/yyyy');

        function loadDoll2() {
            dollSrv.getDoll2( $scope.contract, vm.cmd.station, vm.tab, vm.anticipedSell ).then(function( _res ){
                if( _res.data.outCommonHeader.result.result === 1){
                    vm.dollDescription = _res.data.outFundQuery;
                    vm.cmd.dates  = vm.dollDescription.fund.operationDatesData.operationDateItem[0];
                    vm.orderDate  = vm.cmd.dates.operationDate;
                }
            });
        }


        vm.changeAnticipedSell = function(){
            loadDoll2();
        };

        $scope.datepickerOptions ={
            showWeeks : false,
            formatMonth : 'MMM',
            yearColumns : 3 ,
            dateDisabled: disableDatePicker,
        };


        /**
        * @param {date} date to find
        * @return {object} object with operationDate, settlementDate.
        **/
        function findDateExecution( _date ){
            return R.find( function( _operationDate){
                return _operationDate.operationDate === _date;
            },  vm.dollDescription.fund.operationDatesData.operationDateItem );
        }

        /** Load stations for the input share in the doll
        * @param {int} id
        **/
        function loadStations( _new ){
            investmentSrv.getStations( $scope.contract, _new ).then(function( _res ){
                vm.stations = _res.data.outInvestmentIssuersQuery.issuer;
            });
            initBuy();
        }

        /**
        * These services are initialized when the station is changed
        **/
        function loadInit() {
            loadDoll2();
            dollSrv.getDoll( $scope.contract ).then(function( _res ){
                if( _res.data.outCommonHeader.result.result === 1){
                    vm.currentCash = _res.data.outA2KContractBalance;
                }
            });

            investmentSrv.getDetailStations( (vm.cmd.station.issuerName || vm.cmd.station.issuer), vm.cmd.station.serie ).then(function(_res){
                if( _res.data.outCommonHeader.result.result === 1){
                    var rulesArray = _res.data.outFundOperationDataQuery.fundOperationData;
                    vm.rulesBuy = R.find( function( _val){
                        return _val.movementType.trim() === 'COMPRA';
                    }, rulesArray );
                    vm.rulesSell = R.find( function( _val){
                        return _val.movementType.trim() === 'VENTA';
                    }, rulesArray );
                }
            });
        }

        transfersSrv.getMedia().then(function( _res ){
            var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
            var _mediaType = [];
            angular.forEach(_media,function(value){
                _mediaType.push({
                    id : value.key,
                    text : value.description
                });
            });
            vm.Media = _mediaType;
        });

        /**
        * @param {object} station object
        * @param {string} if the origin is input or external
        **/
        function reload( _station, _from ) {
            vm.newState = _from ? false : true;
            vm.tab = _from ? vm.tab: null;
            baseStation = _station;
            vm.cmd.station = baseStation;
            cleanModels();
            loadInit();
        }

        /**  Reset doll **/
        function cleanModels(){
            vm.cmd = {
                type:  'titles',
                media: {},
                station: baseStation,
            };
            vm.captureModel = null;
            vm.confirmationModel = null;
            vm.cmd.dates = vm.dollDescription ? vm.dollDescription.fund.operationDatesData.operationDateItem[0] : null;
        }

        vm.findDate = function(){
             vm.cmd.dates = findDateExecution( new Date( vm.orderDate).getTime() );
        };

        vm.AddStation = function( _station ){
            reload( _station, 'input' );
        };

        $scope.$watch( 'contract', function ( _new, _old) {
            if( !R.equals( _new, _old) ){
                vm.newState = false;
                vm.tab = null;
                cleanModels();
                loadInit();
            }
        });

        $scope.$watch( 'station',function( _new, _old){
            if( !R.equals( _new, _old) ){
                reload(_new);
            }
        });

        $scope.$watch( 'id',function( _new, _old){
            if( !R.equals( _new, _old) ){
                loadStations(_new);
            }
        });

        /** get absolute titles
        * @param {string} 'buy' or 'sell'
        **/
        $scope.changeSettlement2 = function( _model ){
            vm.cmd[_model].typeValue = $filter('currencyCustom')( vm.cmd[_model].typeValue2/ vm.dollDescription.fund.price, 0);
        };

        /** get Importe
        * @param {string} 'buy' or 'sell'
        **/
        $scope.changeSettlement = function( _model ){
            vm.cmd[_model].typeValue2 = vm.cmd[ _model ].typeValue * vm.dollDescription.fund.price;
        };

        /** Method to change the view on the doll
        * @param {string} 'buy' or 'sell'
        **/
        vm.changeTab = function( _tab ){
            if( _tab === 'sell' ){
                initSell();
                dollSrv.getBanks( $scope.contract ).then( function( _res ){
                    if( _res.data.outCommonHeader.result.result === 1 ){
                        vm.bankModel = R.map(function( _val ){
                            _val.text = _val.bankAccounts.bankName;
                            return _val;
                        }, _res.data.outDestinationAccountQuery.outA2KBankAccountsQuery.bankAccountsList);
                    }
                    else {
                        vm.bankModel = [];
                    }
                });
            }
            vm.newState = false;
            vm.tab = _tab;
            $scope.columnsExpand= false;
            $scope.focusElement();
            if( vm.cmd.station ){
                loadInit();
            }
        };

        /** create quotation **/
        vm.confirm = function(){
            vm.cmd.evtentType = vm.tab;
            dollSrv.confirmDoll( vm.cmd, $scope.contract ).then(function(_res){
                vm.confirmationModel = _res.data;
            },
            function( _res ){
                if( _res ){
                    var error = R.find( function( _val ){
                        if( _val.responseType === 'N' ){
                            return _val.responseCategory === 'FATAL' || _val.responseCategory === 'ERROR';
                        }
                    } )( _res.data );
                    var message = error ? error.responseMessage : 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';

                    CommonModalsSrv.error( message );
                }
                // .result.then(function() {});
            });
        };

        /** capture quotation **/
        vm.capture = function() {
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            dollSrv.captureDoll( vm.cmd, $scope.contract, _user, vm.confirmationModel ).then(function(_res){
                if( _res.data.outCommonHeader.result.result === 1){
                    var message;
                    if(_res.data.outCommonHeader.operationName === 'FundOrderRegistration'){
                        vm.captureModel = _res.data.outFundOrderRegistration.fundOrderResult;
                        message = 'La '+ ( vm.tab==='buy' ? 'compra' : 'venta' ) +' se envió de manera correcta.';
                        message += '<br>Con el folio de la operación <b>' +vm.captureModel.issuerTitlesSold.operationReference +'</b>';
                    }else{
                        vm.captureModel = vm.confirmationModel;
                        message =  _res.data.outAdviserPendingOpRegistration.operationsDetails[0].message;
                        message += '<br>Con el ID de operación <b>' +_res.data.outAdviserPendingOpRegistration.operationsDetails[0].operationID+'</b>';
                    }
                    $scope.$emit('updateTab');
                    CommonModalsSrv.done(message);
                }
            });
        };

        vm.cleanModels = cleanModels;

        /** modify method **/
        vm.modify= function(){
            vm.confirmationModel = null;
        };

        vm.finally = function(){
            cleanModels();
        };

        loadStations( $scope.id );

    }

    angular.module( 'actinver.controllers')
        .controller( 'moneyDirectoDollCtrl', moneyDirectoDollCtrl);


})();

(function() {
    "use strict";

    investmentSrv.$inject = ['$http', 'URLS', '$q', 'CommonModalsSrv', 'moment'];
    function investmentSrv($http, URLS, $q, CommonModalsSrv, moment ) {

        /**
        *  DollSrv
        */
        function DollSrv(){}

        DollSrv.prototype.getDoll = function( _contract ){
            return $http({
                method: 'GET',
                url: URLS.getInitDoll + _contract +'/1/1/0/?language=SPA',
            });
        };

        DollSrv.prototype.getDoll2 = function( _contract, _station ,_id, _anticipedSell ){
            _anticipedSell = _anticipedSell ? 1:0;
            return $http({
                method: 'GET',
                url: URLS.getInitDoll2 + _contract + '/' + ( _station.issuerName || _station.issuer ).trim() + '/'+ _station.serie + '/'+ ( _id === 'buy' ? 1:2 ) +'/0/' + _anticipedSell +'?language=SPA',
            });
        };


        DollSrv.prototype.getBanks = function( _contract) {
            return $http({
                method: 'get',
                url: URLS.getDollAccounts + '02/01/'+ _contract + '?language=SPA&accountStatus=1',
            });
        };

        DollSrv.prototype.confirmDoll = function ( _model, _contract ) {
            var typeOp = _model.evtentType;
            var sendModel  = {
                contractNumber : _contract,
                buyCaptureType : 0,
                buyExecutionDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                buyIssuerName : null,
                buyOperationDate: moment(_model.dates.operationDate).format('DDMMYYYY'),
                buySerie : null,
                buyTitlesAmount : 0,
                buyTitlesQty : 0,
                captureType : _model.type === 'titles' ? 1:2 , //1 títulos, 2 importe,
                executionDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                movementType : _model.evtentType === 'sell' ? 2:1,
                netAmount : _model.evtentType === 'buy' ? _model[typeOp].typeValue2 : _model.station.lastPrice,
                operationDate : moment(_model.dates.operationDate).format('DDMMYYYY'),
                settlementType : null,
                titlesAmount : _model.type === 'titles' ? _model[typeOp].typeValue : _model[typeOp].typeValue2,
                titlesQty : _model[typeOp].typeValue,
                issuerName : _model.station.issuer ? _model.station.issuer : _model.station.issuerName ,
                serie : _model.station.serie,
                clabe : 0,
                anticipatedSell : null,
                settlementDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                registrationType : _model.type === 'titles' ? 1:2,
                buyCLABE : 0,
                buyNetAmount : 0,
                buyRegistrationType : 0
        };

            return $q(function( resolve, reject ){
                csrf()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf () {
                    $http({
                        method: 'post',
                        url: URLS.confirmDoll,
                        data: $.param(sendModel)
                    })
                        .then(function( _res){
                            if( _res.data.outCommonHeader.result.result === 1){
                                resolve( {success: true, data: _res.data.outFundOrderQuotation.fundOrderResult } );
                            }
                            else{
                                reject( {success: true, data: _res.data.outCommonHeader.result.messages } );
                            }
                        },
                        function(){
                            CommonModalsSrv.systemError();
                            reject( null );
                        });
                }

                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        DollSrv.prototype.captureDoll = function ( _model, _contract, _user , _confirmModel ) {
            var typeOp = _model.evtentType;

            var _json = {
                Contrato: _contract,
                Movimiento: _model.evtentType === 'buy' ? 'COMPRA' : 'VENTA',
                Emisora: _confirmModel.issuerTitlesSold.issuerName,
                Precio:  _confirmModel.issuerTitlesSold.netAmount,
                Títulos: _confirmModel.issuerTitlesSold.titlesQty,
                "Ejecución de la orden":  moment (_confirmModel.issuerTitlesSold.operationDate).format('DD/MM/YYYY'),
                "Liquidación de la orden": moment (_confirmModel.issuerTitlesSold.settlementDate).format('DD/MM/YYYY')
            };

            _json = JSON.stringify(_json);


            var sendModel = {
                contractNumber : _contract,
                buyIssuerName : null,
                clabe:0,
                issuerName : _model.station.issuer ? _model.station.issuer : _model.station.issuerName,
                movementType : _model.evtentType === 'sell' ? 2:1,
                operationDate : moment(_model.dates.operationDate).format('DDMMYYYY'),
                settlementDate : moment(_model.dates.settlementDate).format('DDMMYYYY'),
                registrationType : _model.type === 'titles' ? 1:2, //1 compra, 2 venta
                serie : _model.station.serie,
                titlesAmount : _model.type === 'titles' ? _model[typeOp].typeValue : _model[typeOp].typeValue2,
                titlesQty : _model[typeOp].typeValue,
                netAmount: _model.evtentType === 'buy' ? _model[typeOp].typeValue2 : _model.station.lastPrice,
                buyOperationDate: moment(_model.dates.operationDate).format('DDMMYYYY'),
                buyRegistrationType : 0,
                buySettlementDate:  moment(_model.dates.operationDate).format('DDMMYYYY'),
                buyTitlesAmount : 0,
                buyTitlesQty : 0,
                buySerie : null,
                settlementType : null,
                anticipatedSell: null,
                name : _user,
                buyCLABE : 0,
                buyNetAmount : 0,
                instructionDate : moment(_model.binnacle.date).format('DDMMYYYY'),
                instructionTime : _model.media.type.text === 'TELEFONO' ? _model.binnacle.time + ':00' : null,
                extensionNumber : _model.media.type.text === 'TELEFONO' ? _model.binnacle.phone : null,
                tracingKey : _model.media.type.id,
                comments : _model.binnacle.comments,
                jsonDetails: _json
            };

            return $q(function( resolve, reject ){
                csrf()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf () {
                    $http({
                        method: 'post',
                        url: URLS.capture,
                        data: $.param(sendModel),
                    })
                        .then(function( _res){
                                if( _res.data.outCommonHeader.result.result === 1){
                                    resolve( {success: true, data: _res.data } );
                                }
                                else{
                                    reject( {success: true, data: _res.data.outCommonHeader.result.messages } );
                                }
                            },
                            function(){
                                CommonModalsSrv.systemError();
                                reject( null );
                            });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });
        };

        function csrf () {
            return $q( function ( resolve, reject ) {
                $http.get(URLS.csrfRest)
                    .then(successCallback)
                    .catch(errorCallback);

                function successCallback (csrf) {
                    sessionStorage.setItem('__csrf',csrf.headers('X-CSRF-TOKEN'));
                    resolve({
                        success : true
                    });
                }

                function errorCallback (error) {
                    reject({
                        success: false,
                        data:{},
                        error : error,
                        message: "Ha ocurrido un error de seguridad"
                    });
                }
            } );
        }

        return new DollSrv();
    }

    angular.module('actinver.services')
        .service('dollSrv', investmentSrv);
})();

(function(){
    "use strict";

    actMoneyDirectoDoll.$inject = ['$timeout'];
    function actMoneyDirectoDoll( $timeout ){

        function link( scope, $element) {

            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#station').focus();
                }, 250);
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/money-directo-doll/money-directo-doll.html',
            scope: {
                station: '=',
                id: '=',
                contract: '@',
                columnsExpand : '=?',
                tipooperacion : '='
            },
            controller: 'moneyDirectoDollCtrl',
            controllerAs: 'doll',
            link: link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actMoneyDirectoDoll', actMoneyDirectoDoll );


} )();

( function(){
    'use strict';

    moneyDollCtrl.$inject = ['$scope', 'transfersSrv', 'CommonModalsSrv', 'moneyDollSrv', '$sessionStorage', 'contractTypeSrv', 'loginSrvc'];
    function moneyDollCtrl( $scope, transfersSrv, CommonModalsSrv, moneyDollSrv, $sessionStorage, contractTypeSrv, loginSrvc){
        var vm = this;

        // Defaults
        vm.sinstrument;
        vm.currentCash = 0;
        vm.interestCattle = 0;
        vm.transaction = {};
        vm.calculateInterest = calculateInterest;
        vm.cleanModels = cleanModels;
        vm.modify = modify;
        vm.confirm = confirm;
        vm.capture = capture;
        vm.finish = finish;
        var contract = JSON.parse(localStorage.getItem('contractSelected'));
        vm.contractType = contractTypeSrv.contractType( contract.isPropia , contract.isEligible, contract.isDiscretionary);

        vm.tipoMedio={
            msg : '',
            showMsg:false
        };
        
        vm.onChangeTypeMedio = function (_last, _new) {
            //Medios electronicos id = 4
            if(_new.id === "4"){
                loginSrvc.validateUserTokens().then(function success(response){
                    resetTipoMedio(response.success, response.msg);
                }).catch(function error(error){
                    resetTipoMedio(error.success, error.msg);
                });
            }else{
                resetTipoMedio(true, '');
            }            
        };

        function resetTipoMedio(success, msg) {
            vm.tipoMedio.msg = success ? '' : msg;
            vm.tipoMedio.showMsg = !success;
        }

        function init(){
            cleanModels();

            // Get current contract cash
            moneyDollSrv.getCurrentCash( $scope.contract.contractNumber ).then( function( _res ){

                if( _res.data.outCommonHeader.result.result === 1 ){
                    vm.currentCash = _res.data.outA2KContractBalance.balance.buyingPowerData.cash48;
                }

                // Get current media list
                transfersSrv.getMedia().then(function( _res ){
                    var _media = _res.data.outContactMeansCatalog.contactMeansCatalogData.contactMeans;
                    var _mediaType = [];
                    angular.forEach(_media,function(value){
                        _mediaType.push({
                            id : value.key,
                            text : value.description
                        });
                    });
                    vm.Media = _mediaType;
                });
                vm.loading = false;

                $scope.focusElement();
            });
        }

        // Calculate interest based on invest and some variables
        function calculateInterest(){
            if( vm.invest ){
                vm.interestCattle = ( ( vm.sinstrument.maxRate / 36000 ) * vm.invest  * vm.sinstrument.minTerm  );
            } else {
                vm.interestCattle = 0;
            }
        }

        // Clean fields
        function cleanModels(){
            vm.cmd = {
                media: {}
            };
            vm.interestCattle = 0;
            vm.invest = null;
            vm.transaction = null;
            vm.confirmationModel = null;
            vm.captureModel = null;
            vm.operationReference = null;
            vm.optimumRate = null;
            vm.term = null;
            resetTipoMedio(true, '');
        }

        // Pre-confirmation for current transaction
        function confirm(){
            vm.loading = true;

            // Set info in object
            vm.transaction = {
                contract: $scope.contract,
                invest: {
                    amount: vm.invest
                },
                sinstrument: vm.sinstrument,
                operationReference : vm.operationReference,
                optimumRate : vm.optimumRate,
                term : vm.term
            };

            // Send information
            moneyDollSrv.confirmDoll( vm.transaction )
                .then( function( _res ){
                    vm.confirmationModel = _res;
                    vm.loading = false;
                } )
                .catch(function (_error) {
                    vm.loading = false;
                    var message = '';
                    angular.forEach(_error, function(_value){
                        message += _value.responseMessage + '<br>';
                    });

                    CommonModalsSrv.error(message);
                });
        }

        // Return for changes in doll
        function modify(){
            vm.confirmationModel = null;
        }

        // Second and final confirmation
        function capture(){
            vm.loading = true;
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            // Send complete information to get transaction folio
            moneyDollSrv.captureDoll( vm.transaction, vm.cmd, _user, vm.contractType )
                .then( function( _res ){
                    var message;
                    if(_res.outCommonHeader.operationName === 'BondMarketOrderRegistration'){
                        // Set new information and show lightbox confirmation
                        vm.captureModel = _res.outBondMarketOrderRegistration.bondOrder;
                        message = 'La '+ ( vm.tab==='buy' ? 'compra' : 'venta' ) +' se envió de manera correcta.';
                        message += '<br>Con el folio de la operación <b>' +vm.captureModel.orderReference +'</b>';
                    }else{
                        vm.captureModel = vm.confirmationModel;
                        message =  _res.outAdviserPendingOpRegistration.operationsDetails[0].message;
                        message += '<br>Con el ID Registro <b>' +_res.outAdviserPendingOpRegistration.operationsDetails[0].operationID+'</b>';
                    }
                        // Update instruments / orders tables with new information
                        vm.finish();
                        $scope.$emit( 'updateItems' );
                        CommonModalsSrv.done(message);
                vm.loading = false;
            }).catch(function (_error) {
                vm.loading = false;
                var message = '';
                angular.forEach(_error, function(_value){
                    message += _value.responseMessage + '<br>';
                });
                CommonModalsSrv.error(message);
                vm.finish();
            });
        }

        // Finish purchase process
        function finish(){
            $scope.instrument = null;
            vm.operationReference = null;
            vm.optimumRate = null;
            vm.term = null;
        }

        // Init application only if instrument is selected
        $scope.$watch( 'instrument', function(){
            vm.sinstrument = $scope.instrument;

            if(vm.sinstrument !== null){
                vm.loading = true;
                init();
            }
        } );
    }

    angular
        .module( 'actinver.controllers')
        .controller( 'moneyDollCtrl', moneyDollCtrl );

})();

(function() {
    'use strict';

    moneyDollSrv.$inject = ['$http', 'URLS', '$q', 'csrfSrv', 'moment', 'contractTypeSrv'];
    function moneyDollSrv( $http, URLS, $q, csrfSrv, moment, contractTypeSrv ) {

        /**
        *  DollSrv
        */
        function DollSrv(){}

        // Get current contract cash
        DollSrv.prototype.getCurrentCash = function( _contract ){
            return $http({
                method: 'GET',
                url: URLS.getCurrentCash + _contract +'/1/1/0',
                params: {
                    language: 'SPA'
                }
            });
        };

        // Pre-confirmation for current transaction
        DollSrv.prototype.confirmDoll = function ( _model ) {
            var sendModel = {
                contractNumber: _model.contract.contractNumber,
                term: _model.term,
                netAmount: _model.invest.amount,
                rateOfReturn: _model.sinstrument.maxRate,
                valueType: _model.sinstrument.valueType,
                minTerm: _model.sinstrument.minTerm,
                maxTerm: _model.sinstrument.maxTerm,
                maxRate: _model.sinstrument.maxRate,
                minAmount: _model.sinstrument.minNetAmount,
                maxAmount: _model.sinstrument.maxNetAmount,
                minRate: _model.sinstrument.minRate,
                optimumRate : _model.optimumRate ? _model.optimumRate :  _model.sinstrument.maxRate,
                promoter: 0,
            };

            if( _model.operationReference){
                sendModel.operationReference = _model.operationReference;
            }

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.confirmMoneyDoll,
                        data: $.param(sendModel),
                    })
                        .then(function( _res ){
                            if( _res.data.outCommonHeader.result.result === 1 ){
                                resolve( _res.data.outBondMarketOrderQuotation.bondMarketData);
                            }
                            else{
                                reject( _res.data.outCommonHeader.result.messages);
                            }
                        });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });

        };

        // Second and final confirmation
        DollSrv.prototype.captureDoll = function ( _model, _modelB, _user, _contractType) {

            var _json = {
                Instrumento: _model.sinstrument.description,
                "Tipo inversión": "REPORTO",
                Plazo: _model.sinstrument.minTerm,
                Tasa: _model.sinstrument.maxRate,
                "Fecha vencimiento": moment (_model.sinstrument.dueDate).format('DD/MM/YYYY'),
                Importe: _model.invest.amount
            };
            _json = JSON.stringify(_json);

            var sendModel = {
                contractNumber: _model.contract.contractNumber,
                term: _model.term,
                netAmount: _model.invest.amount,
                rateOfReturn: _model.optimumRate ? _model.optimumRate :  _model.sinstrument.maxRate,
                valueType: _model.sinstrument.valueType,
                minTerm: _model.sinstrument.minTerm,
                maxTerm: _model.sinstrument.maxTerm,
                maxRate: _model.sinstrument.maxRate,
                minAmount: _model.sinstrument.minNetAmount,
                maxAmount: _model.sinstrument.maxNetAmount,
                minRate: _model.sinstrument.minRate,
                optimumRate : _model.optimumRate ? _model.optimumRate :  _model.sinstrument.maxRate,
                promoter: 0,
                promoterNumber: 0,
                recordStatus: 'V',
                status: 'I',
                name: _user,
                jsonDetails: _json
            };

            if( _model.operationReference){
                sendModel.operationReference = _model.operationReference;
            }

            sendModel = contractTypeSrv.sendBinnacle(_contractType, sendModel , _modelB);

            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);
                function successCsrf() {
                    $http({
                        method: 'POST',
                        url: URLS.doMoneyTransaction,
                        data: $.param(sendModel),
                    })
                        .then(function( _res ){
                            if( _res.data.outCommonHeader.result.result === 1 ){
                                resolve( _res.data);
                            }
                            else{
                                reject( _res.data.outCommonHeader.result.messages);
                            }
                        });
                }
                function errorCsrf(error) {
                    reject(error);
                }
            });

        };

        return new DollSrv();
    }

    angular
        .module( 'actinver.services' )
        .service( 'moneyDollSrv', moneyDollSrv ) ;

})();
(function(){
    'use strict';

    actMoneyDoll.$inject = ['$timeout'];
    function actMoneyDoll( $timeout ){

        function link( scope, $element) {

            scope.focusElement = function(){
                $timeout(function(){
                    $element.find('#invest').focus();
                }, 250);
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/money-doll/money-doll.html',
            scope: {
                contract: '=',
                instrument: '=',
            },
            controller: 'moneyDollCtrl',
            controllerAs: 'doll',
            link: link,
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'actMoneyDoll', actMoneyDoll );

} )();

(function(){
    "use strict";

    permission.$inject = ['Auth'];
    function permission( Auth ){

        function link( scope, elem ){
            scope.$watch(Auth.isLoggedIn, function(){
                if (Auth.userHasPermission(scope.permission)) {
                    elem.show();
                } else {
                    elem.hide();
                }
            });
        }


        return {
            restrict: 'A',
            scope: {
                permission: '='
            },
            link: link
        };
    }


    angular.module('actinver.directives')
    .directive('permission', permission);
})();

( function(){
    "use strict";

    monthGoalCtrl.$inject = ['monthGoalInfo', '$uibModal'];
    function monthGoalCtrl(monthGoalInfo, $uibModal){
        var vm = this;

        // Chart
        vm.details = {
            finish: false,
            data: null
        };
        monthGoalInfo.getInfo()
            .then(function successCallback(response){

                // Set information
                vm.details = response;

                // Open month goal modal
                vm.openMonthGoalDetails = function(){
                    var modalInstance = $uibModal.open({
                        controller: 'monthGoalModalCtrl',
                        controllerAs: 'monthGoalModal',
                        templateUrl: '/scripts/directives/month-goal/month-goal-modal.html',
                        resolve: {
                            info: response.data
                        }
                    });
                    modalInstance.result.then(function (selectedItem) {
                        vm.selected = selectedItem;
                    }, function () {
                        return false;
                    });
                };

            }, function errorCallback(error){
                vm.details = error;
            });

    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'monthGoalCtrl', monthGoalCtrl );

})();

( function() {
    "use strict";

    monthGoalInfo.$inject = ['URLS', '$http', '$q'];
    function monthGoalInfo(URLS, $http, $q) {

        return {

            /**
             * Get month goal widget information
             * @return  {function}
             */
            getInfo: function(){

                return $q(function(resolve, reject){

                    $http({
                        method: 'GET',
                        url: URLS.dashboardMonthGoal,
                    }).then(function success(response){

                        var info = {};

                        // Set information
                        info = {
                            amount: null,
                            grow: null,
                            goal_left: null,
                            percentage: null,
                            chart: {
                                colors: ['#7ed321', '#00bebe', '#3c86f6', '#f5f047'],
                                labels: ['DINERO', 'SEGUROS', 'CRÉDITOS', 'FONDOS'],
                                data: [35, 25, 30, 10]
                            },
                            modal_info: {
                                col1: {
                                    title: 'Productos'
                                }
                            }
                        };

                        if ( !!response.data.status ) {
                            info.amount = response.data.result.amount;
                            info.grow = response.data.result.grow;
                            info.goal_left = (info.grow >= info.amount) ? 0 : info.amount - info.grow,
                            info.percentage = info.grow * 100 / info.amount;
                            info.infoModal = response.data.result.infoModal;

                            if(Math.round(info.percentage) !== info.percentage) {
                                info.percentage = info.percentage.toFixed(1);
                            }
                            resolve({success: true, data: info, finish: true});
                        } else {
                            reject({success: false, finish: true});
                        }

                    }, function error(){

                        reject({success: false, finish: true});

                    });

                });

            }

        };

    }

    angular
        .module( 'actinver.services' )
        .factory( 'monthGoalInfo', monthGoalInfo );

})();

( function(){
    "use strict";

    monthGoalModalCtrl.$inject = ['$uibModalInstance', 'info'];
    function monthGoalModalCtrl($uibModalInstance, info){
        var vm = this;
        vm.modal_info = info.modal_info;
        vm.infoModal = info.infoModal;

        // Close modal
        vm.close_modal = function(){
            $uibModalInstance.dismiss('cancel');
        };
    }

    angular
    	.module( 'actinver.controllers' )
        .controller( 'monthGoalModalCtrl', monthGoalModalCtrl );

} )();

(function(){
    "use strict";

    monthGoal.$inject = ['$uibModal', '$timeout'];
    function monthGoal($uibModal, $timeout){

        function link(scope, element){

            // Watch for changes
            scope.$watch('monthGoalWidget.details.data', function(){
                if(scope.monthGoalWidget.details.data){

                    $timeout(function(){
                        var widget = scope.monthGoalWidget.details.data,
                            bar = element.find('.percent'),
                            label = bar.find('> strong');

                        bar.removeClass('negative');
                        widget.label_pos = bar.find('> div').width() - ( label.width() / 2 );

                        if(widget.percentage <= 0){
                            bar.addClass('negative');
                        }

                        if(label.width() >= bar.find('> div').width()){
                            widget.label_pos = 0;
                        }

                        if(widget.label_pos + label.width() > bar.width()){
                            widget.label_pos = bar.width() - ( label.width() );
                        }
                    });

                }
            });

        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/month-goal/month-goal.html',
            link: link,
            controller: 'monthGoalCtrl',
            controllerAs: 'monthGoalWidget'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'monthGoal', monthGoal );

} )();
(function(){
    "use strict";

    function outline(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/outline/outline.html'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'outline', outline );
} )();
(function(){
    'use strict';

    proposalsProductsCtrl.$inject = ['$scope', 'proposalsProposalSrv'];
    function proposalsProductsCtrl( $scope, proposalsProposalSrv ){
        var vm = this;
        vm.products_list = [];

        // Setup directive
        function setup(){
            proposalsProposalSrv.getProducts()
                .then( function( response ){
                    angular.forEach( response.data, function( item ){
                        item.subproducts = {};
                        vm.products_list.push( item );
                    } );
                } );
        }

        // Get subproducts
        vm.getSubproducts = function( idx, product ){
            $scope.model.products[ product ].subproducts = {};

            proposalsProposalSrv.getSubProducts( product )
                .then( function( response ){
                    vm.products_list[ idx ].subproducts = response.data;
                }, function(){
                    vm.products_list[ idx ].subproducts = [];
                } );
        };

        // Init directive
        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'proposalsProductsCtrl', proposalsProductsCtrl );

} )();
(function(){
    'use strict';

    function products(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/products/products.html',
            scope: {
                model: '=',
            },
            controller: 'proposalsProductsCtrl',
            controllerAs: 'list'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'products', products );

} )();
(function () {
    'use strict';

    function portfolioDetailsBankCtrl() {
        var vm = this;

        // Settings
        vm.propertyName = 'issuer';
        vm.reverse = false;

        // Sort details table
        vm.sortBy = function (propertyName) {
            vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;
            vm.propertyName = propertyName;
        };

    }

    angular
        .module('actinver.controllers')
        .controller('portfolioDetailsBankCtrl', portfolioDetailsBankCtrl);

})();
(function(){
    'use strict';

    function portfolioDetailsBank(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/portfolio-details/details-bank.html',
            scope: {
                title: '@',
                infoResume: '=',
            },
            controller: 'portfolioDetailsBankCtrl',
            controllerAs: 'details'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'portfolioDetailsBank', portfolioDetailsBank );

} )();
(function () {
    'use strict';

    portfolioDetailsCtrl.$inject = ['$filter'];
    function portfolioDetailsCtrl($filter) {
        var vm = this,
            totals_topics = {
                valuation: 0,
                appreciation: 0
            };

        // Settings
        vm.contracts = false;
        vm.contracts_totals = totals_topics;
        vm.contract_totals = [];
        vm.contract_info = [];
        vm.topic_by_currency = [];

        vm.topicsbank = {
            "ACCIONES DE SOCIEDADES DE INVERSION DE INSTRUMENTOS DE DEUDA": 'siid',
            "ACCIONES DE SOCIEDADES DE INVERSION": 'asi'
        };


        // Get available topics by contract
        vm.getContractTopicInfo = function (contract) {
            var contract_info = contract.data,
                topic_info = $filter('groupJSON')(contract_info, 'market'),
                current_value = $filter('sumByColumn')(contract_info, 'lastPrice'),
                plus_value = $filter('sumByColumn')(contract_info, 'appreciation');

            // Contract subtotal
            vm.contract_totals.push([current_value, plus_value]);
            vm.contract_info.push([topic_info]);

            // Contracts totals
            vm.contracts_totals.valuation += current_value;
            vm.contracts_totals.appreciation += plus_value;
        };

        // Get available currencies by topic
        vm.getTopicInfoCurrency = function (info) {
            return $filter('groupJSON')(info, 'currencyTypeDesc');
        };
        // Get available currencies by topic
        vm.getFundTypes = function (info) {
            return $filter('groupJSON')(info, 'fundType');
        };

    }

    angular
        .module('actinver.controllers')
        .controller('portfolioDetailsCtrl', portfolioDetailsCtrl);

})();

(function(){
    'use strict';

    function portfolioDetailsCurrencyCtrl(){
        var vm = this;

        // Settings
        vm.propertyName = 'issuer';
        vm.reverse = false;

        // Sort details table
        vm.sortBy = function(propertyName) {
            vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;
            vm.propertyName = propertyName;
        };

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'portfolioDetailsCurrencyCtrl', portfolioDetailsCurrencyCtrl );

} )();
(function(){
    'use strict';

    function portfolioDetailsCurrency(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/portfolio-details/details-currency.html',
            scope: {
                title: '@',
                infoResume: '=',
            },
            controller: 'portfolioDetailsCurrencyCtrl',
            controllerAs: 'details'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'portfolioDetailsCurrency', portfolioDetailsCurrency );

} )();
(function(){
    'use strict';

    function portfolioDetails(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/portfolio-details/details.html',
            scope: {
                sclient: '=',
                topics: '=',
                contractInfo: '=',
                showTotals: '@'
            },
            controller: 'portfolioDetailsCtrl',
            controllerAs: 'pdetail'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'portfolioDetails', portfolioDetails );

} )();
(function () {
    'use strict';

    prospectActivity.$inject = ['CommonModalsSrv', 'prospectModalsSrv', 'prospectSrv', '$sessionStorage'];
    function prospectActivity(CommonModalsSrv, prospectModalsSrv, prospectSrv, $sessionStorage ) {

        function link(scope) {
            
            scope.edit = function () {
                prospectModalsSrv.addActivity('Modificar actividad', scope.ngModel).result.then(function () {
                    CommonModalsSrv.done('La actividad se actualizo de manera exitosa.');
                    scope.$emit('updateDetailProspect');
                });
            };

            scope.complete = function () {
                CommonModalsSrv.warning('¿Esta seguro que desea completar la actividad seleccionada?').result.then(function () {
                    prospectSrv.completeActivity(scope.ngModel.idActivityStage).then(function () {
                        CommonModalsSrv.done('La actividad se completo de manera exitosa.');
                        scope.$emit('updateDetailProspect');
                    });
                });
            };

            scope.close = function () {
                var user = JSON.parse($sessionStorage.user);
                CommonModalsSrv.warning('¿Deseas eliminar esta actividad?').result.then(function () {

                    var modelRemove = {
                        language: 'SPA',
                        idActivityStage: scope.ngModel.idActivityStage,
                        mail: user.mail,
                        temp: '',
                        sendNotification: true,
                        outlookId: scope.ngModel.outlookId
                    };
                    prospectSrv.removeActivity(modelRemove).then(function () {
                        CommonModalsSrv.done('La actividad se eliminó de manera exitosa.');
                        scope.$emit('updateDetailProspect');
                    });
                });
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/prospect-activity/activity.html',
            scope: {
                ngModel: '=',
                hiddeTool:'=?'
            },
            link: link,
        };

    }

    angular
        .module('actinver.directives')
        .directive('prospectActivity', prospectActivity);

})();

(function () {
    'use strict';

        proposalFormCtrl.$inject = ['$scope', '$filter', '$q', 'proposalsProposalSrv', 'CommonModalsSrv', 'proposalsPropTracingSrv', 'userConfig', '$rootScope'];
    function proposalFormCtrl($scope, $filter, $q, proposalsProposalSrv, CommonModalsSrv, proposalsPropTracingSrv, userConfig, $rootScope) {
        var vm = this,
            form = $scope.model.form,
            portfolio = form.portfolio;

        vm.fields = {
            strategies: []
        };
        vm.selected_portfolio = false;

        // Dropdown config
        function configTypes(type, types) {
            return R.map(function (val) {
                switch (type) {

                    case 'client':
                        val.text = val.description;
                        break;

                    default:
                        val.text = val.name;

                }

                return val;
            }, types);
        }

        // Setup info
        function setup() {
            vm.fields.client_types = configTypes('client', proposalsProposalSrv.client_types);
            proposalsProposalSrv.getIssuersInfo()
                .then(function (response) {
                    vm.issuers = response.data;
                });
        }

        // Reset form
        vm.resetPortfolioChilds = function (idx) {
            if (idx === 0 && portfolio.length > 1) {
                portfolio.pop();
            }

            // Delete previous object
            delete portfolio[idx].strategyItems;
            delete portfolio[idx].invest;
            delete portfolio[idx].profile_type;
            delete portfolio[idx].client_type;
            delete vm.manual_info;
            portfolio[idx].totals = 0;

            if (portfolio[idx].type === 'model') {

                // Get profiles
                proposalsProposalSrv.getProfiles()
                    .then(function successCallback(response) {
                        vm.fields.profiles_types = configTypes('profiles', response.data);
                    });
            }

        };

        // Check portfolio type information
        vm.checkPortfolio = function (profile, idx) {
            portfolio[idx].value = 1000000;

            if ($scope.model.form.portfolio[$scope.idx].invest) {
                $scope.model.form.portfolio[$scope.idx].invest.invest = [];
                portfolio[idx].totals = 0;                
                vm.openIinvest = false;
            }

            if (portfolio[idx].type === 'model') {
                vm.modelConfig(profile, idx);// Get strategies
            } else {
                vm.manualConfig(profile.key);// Manual information
                vm.getClassFav();
            }
        };

        // Get model information
        vm.modelConfig = function (profile, idx) {

            var key = profile.key,
                strategies = [];

            // Defaults
            vm.hide_strategies = false;
            //Reseteamos la vista de las opciones de Estrategia
            //Reseteamos model de estrategia
            portfolio[idx].strategyItems = {};
            portfolio[ idx ].strategy='';

            if (key < 0) {
                vm.hide_strategies = true;
                vm.fields.strategies[idx] = configTypes('strategies', $filter('orderBy')(strategies, 'key'));                
            } else {
                
                proposalsProposalSrv.getStrategies(key)
                    .then(function (response) {
                        angular.forEach(response, function (type) {
                            angular.forEach(type.data, function (strategy) {
                                strategies.push(strategy);
                            });
                        });

                        angular.forEach(strategies, function (item) {
                            item.key = parseInt(item.key);
                        });

                        vm.fields.strategies[idx] = configTypes('strategies', $filter('orderBy')(strategies, 'key'));

                    }, function () {

                        CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');

                    });
                    
                 }
            };

            // Get strategy information
            vm.getStrategyDetails = function (strategy, idx) {
                portfolio[idx].strategyItems = {};
                proposalsProposalSrv.getStrategyDetail(strategy.key)
                    .then(function (response) {

                        angular.forEach(response.data.limits, function (item) {
                            portfolio[idx].strategyItems[item.subGroup.grouper.name] = {
                                info: []
                            };
                        });

                        angular.forEach(portfolio[idx].strategyItems, function (obj, key) {
                            obj.info = $filter('filter')(response.data.limits, { subGroup: { grouper: { name: key } } });
                        });

                    });
            };

            // Get information for manual proposal
            vm.manualConfig = function (key) {
                vm.manual_info = false;
                return $q.all([
                    proposalsProposalSrv.getInvIssuersCatalog(key),
                    proposalsProposalSrv.getBandsCatalog(key),
                    proposalsProposalSrv.getIssuersCatalog(key),
                    proposalsProposalSrv.getFavorites(),
                    proposalsProposalSrv.getDerivativesCatalog()
                ]).then(function (data) {
                    vm.manual_info = {};                    
                    angular.forEach(data, function (item) {
                        vm.manual_info[item.topic] = item.data;
                    });
                }, function () {
                    CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    vm.manual_info = null;
                });
            };

            vm.getClassFav = function (key) {
                 proposalsProposalSrv.getClassificationFav()
                .then(function (data) {                                       
                    $rootScope.listClassFav = data.data;                    
                }, function () {
                    CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    $rootScope.listClassFav = null;
                });
            };

            $scope.$watch('model.form', function (form) {
                if (form.portfolio.length === 0) {
                    form = $scope.model.form;
                    portfolio = form.portfolio;
                }
            }, true);

            $scope.chargerPortfolio = function () {
                var number = $scope.contract.numContrato;
                //var id = $scope.contract.idSponsor;
                var employeeID = userConfig.user.employeeID;
                var origen = $scope.contract.origen;
                if (vm.changePortfolio) {
                    proposalsPropTracingSrv.getCurrentPortfolio(employeeID, number, origen).then(function (_res) {
                        $scope.model.form.portfolio[$scope.idx].invest.invest = _res.portfolio.map(function (_val) {
                            var newObj = {};
                            newObj.amount = _val.monto;
                            newObj.description = _val.description;
                            newObj.description = _val.description;
                            newObj.issuer = _val.producto;
                            newObj.percentage = _val.monto / _res.portfolioValue;
                            return newObj;
                        });
                        $scope.model.form.portfolio[$scope.idx].value = _res.portfolioValue;
                        vm.openIinvest = true;
                    });
                }
                else {
                    $scope.model.form.portfolio[$scope.idx].invest.invest = [];
                    vm.openIinvest = false;
                }
            };

            // Init application
            setup();
        }

        angular
            .module('actinver.controllers')
            .controller('proposalFormCtrl', proposalFormCtrl);

    } ) ();

(function(){
    'use strict';

    function proposalForm(){

        function link( scope ){
            scope.idx = Number( scope.idx );
        }

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/proposal-form/proposal-form.html',
            scope: {
                edit: '=?',
                obj: '=',
                model: '=',
                idx: '=',
                contract: '=?'
            },
            link: link,
            controller: 'proposalFormCtrl',
            controllerAs: 'propForm'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'proposalForm', proposalForm );

} )();

(function(){
    "use strict";

    function report(){


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/reports/reports.html',
            link : function() {

            }
        };


    }

    angular.module( 'actinver.directives' )
    .directive( 'report', report );


} )();

( function(){
    "use strict";

    modals.$inject = ['$uibModal', '$timeout'];
    function modals( $uibModal, $timeout ) {
        var api  = {};

        api.show = function( _time ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/directives/refresh-session/refresh-session-modal.html',
                windowClass : 'session',
                controllerAs: 'session',
                controller: ['$uibModalInstance', function( $uibModalInstance ) {
                    var vm = this;
                    var initTime = _time;

                    vm.refreshSession = refreshSession;

                    function refreshSession () {
                        $uibModalInstance.close();
                    }

                    function updateReloj() {
                        if( initTime <= 10 ){
                            console.log('se acabo');
                            //location.assign('/asesoria/login');
                            return "";
                        }

                        vm.time = initTime;
                        initTime-= 1;
                        $timeout(function(){updateReloj();}, 1000 );
                    }

                    vm.close = function(){
                        $uibModalInstance.dismiss();
                    };

                    vm.done = function(){
                        $uibModalInstance.close();
                    };

                    updateReloj();
                }]
            });

            return modal;
        };

        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'RemainingModal', modals );


})();

(function(){
    "use strict";
    refreshSession.$inject = ['$timeout', '$filter', 'RemainingModal', 'RefreshSrv', '$interval'];
    function refreshSession( $timeout, $filter, RemainingModal, RefreshSrv, $interval ){

        return{
            restrict: 'EA',
            replace: false,
            templateUrl: '/scripts/directives/refresh-session/refresh-session.html',
            link: function( $scope ){
                $scope.today = new Date();
                var initTime;
                var timeOut;
                var showModal = false;

                $scope.updateReloj = updateTime;

                $interval(function(){
                    getTime();
                },60000);

                function getTime(){
                    RefreshSrv.getTime().then( function( _res ){
                        initTime = _res;
                        $timeout.cancel( timeOut );
                        updateReloj();
                    });
                }

                function updateTime () {
                    RefreshSrv.updateSession()
                        .then( successCallback )
                        .catch( errorCallback );

                    function successCallback ( response ) {
                        sessionStorage.setItem('__token',response.token);
                        getTime();
                    }

                    function errorCallback () {}
                }

                function updateReloj() {
                    if( initTime <= 300 && !showModal ){ 
                        updateTime();
                       showModal = true;
                        RemainingModal.show( initTime ).result.then(function() {
                            updateTime();
                            showModal = false;
                        }).catch( function () {
                            showModal = false;
                        });
                    }

                    if( initTime <= 10 ){
                        // console.log('se acabo');
                        //redirect
                        // Auth.logout();
                        location.assign('/asesoria/login');

                        return "";
                    }


                    $scope.time = $filter( 'remainingTime' )( initTime );
                    initTime-= 1;
                    timeOut = $timeout(function(){updateReloj();}, 1000);
                }

                getTime();

            },
        };
    }

    angular.module( 'actinver.directives')
    .directive('refreshSession', refreshSession );


} )();

(function() {
    "use strict";

    RefreshSrv.$inject = ['$http', '$q', 'URLS', 'csrfSrv'];
    function RefreshSrv ( $http, $q, URLS, csrfSrv ) {

        function Refresh(){}


        Refresh.prototype.getTime = function () {
            return $q(function( resolve ){
                $http({
                    method: 'GET',
                    url: URLS.getTimeSession,
                }).then(function (response) {
                    resolve( response.data );
                });
            });
        };

        Refresh.prototype.updateSession = function () {
            return $q( function ( resolve, reject ) {
                csrfSrv.csrfHead()
                    .then( successCallback )
                    .catch();

                function successCallback () {
                    $http.post(URLS.updateSession)
                        .then(successCallback)
                        .catch(errorCallback);

                    function successCallback (response) {
                        resolve({
                            success : true,
                            token : response.data.access_token
                        });
                    }

                    function errorCallback (error) {
                        reject(error);
                    }
                }
            } );
        };

        return new Refresh();
    }

    angular.module('actinver.services')
        .service( 'RefreshSrv', RefreshSrv );
})();

(function () {
    "use strict";

    resize.$inject = ['$window'];
    function resize($window) {
        return {
            restrict: 'A',
            scope: {
                onSizeChanged: '&'
            },
            link: function (scope) {             
                $window.addEventListener('resize', onWindowResize);                
                function onWindowResize() {                                                            
                    scope.onSizeChanged();
                }
            }
        };


    }

    angular.module('actinver.directives')
        .directive('onSizeChanged', resize);


})();

(function(){
    "use strict";

    function schedule(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/schedule/schedule.html'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'schedule', schedule );
} )();
(function () {
    "use strict";

    SectionActivitySrv.$inject = ['$http', '$q', 'URLS'];
    function SectionActivitySrv($http, $q, URLS) {

        function SectionActivity() { }


        SectionActivity.prototype.getMedia = function () {
            return $q(function (resolve) {
                $http({
                    method: 'GET',
                    url: URLS.getBinnacleCatalog,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (!!response.data.status) {
                        resolve(response.data.result);
                    }
                });
            });
        };



        return new SectionActivity();
    }

    angular.module('actinver.services')
        .service('SectionActivitySrv', SectionActivitySrv);
})();

(function () {
    "use strict";

    sectionActivity.$inject = ['SectionActivitySrv'];
    function sectionActivity(SectionActivitySrv) {
        
        function link(scope ) {

            function setup() {
                if (!scope.ngModel) {
                    scope.ngModel = {
                        activity: {}
                    };
                }
                if (!scope.ngConfigdate) {
                    scope.ngConfigdate = {
                        locale: {
                            format: "DD/MM/YYYY"
                        },
                        singleDatePicker: true
                    };
                }

                scope.options = {
                    locale: {
                        format: "DD/MM/YYYY"
                    },
                    singleDatePicker: true
                };

                getOptions();
            }

            scope.changeDateActivity = function (_date) {
                scope.ngModel.activity.date = _date;
            };

            function refactorDropdowns(_model, _property) {
                return R.map(function (_val) {
                    _val.text = _val[_property];
                    return _val;
                }, _model);
            }

            function getOptions() {
                SectionActivitySrv.getMedia().then(function (_options) {
                    scope.optionsDropdowm = refactorDropdowns(_options, 'description');
                });
            }

            setup();

        }


        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/section-activity/section.html',
            link: link,
            scope: {
                ngModel: '=',
                ngConfigdate: '=?'
            },
        };

    }

    angular
        .module('actinver.directives')
        .directive('sectionActivity', sectionActivity);
})();

( function(){
    'use strict';

    searchListCtrl.$inject = ['$scope', '$filter', 'NgTableParams'];
    function searchListCtrl( $scope, $filter, NgTableParams ){
        var vm = this;

        function setInfo(){
            var defaults = {
                    page: 1,
                    count: 10,
                },
                opts = angular.merge( {}, defaults, $scope.settings );

            vm.table = new NgTableParams( opts, {
                counts: [],
                paginationMaxBlocks: 7,
                dataset: $scope.info,
            });

           
        }

        vm.filterInfo = function(){
            vm.table.filter({ $: vm.filter });
        };


        setInfo();
    }

    angular
        .module( 'actinver.controllers')
        .controller( 'searchListCtrl', searchListCtrl );

})();

(function(){
    'use strict';

    function searchList(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: function( el, $attr ){
                var template = '/scripts/directives/search-list/' + $attr.tmpl;
                return template;
            },
            scope: {
                typeoperation: '@?',
                employee: '@?',
                info: '=',
                tmpl: '@',
                settings: '=?',
                cb: '=?',
                estado: '=?',
                invocacion:'=?',
                ctrl:'=?'
            },
            controller: 'searchListCtrl',
            controllerAs: 'search_list'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'searchList', searchList );

} )();

(function(){
    "use strict";

    function loading(){


        return {
            restrict: 'A',
            replace: true,
            template: '<div class="spinner" ng-show="show">'+
                    '<i class="fa fa-refresh fa-spin fa-3x fa-fw"></i>'+
                    '<span class="sr-only">Loading...</span>'+
                '</div>',
            scope:{
                show : "="
            },
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'spinner', loading );


} )();

(function(){
    'use strict';

    strategies.$inject = ['$timeout'];
    function strategies( $timeout ){

        function link( scope ){

            // Callback
            scope.onSelect = function() {
                $timeout( function(){
                    scope.show_info = true;
                } );
            };
        }

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/strategies/strategies.html',
            scope: {
                index: '=',
                amount: '=',
                model: '=',
                issuers: '='
            },
            link: link
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'strategies', strategies );
} )();
(function(){
    "use strict";

    socialFeedCtrl.$inject = ['socialFeedInfo'];
    function socialFeedCtrl(socialFeedInfo){
        var vm = this;

        // Get information
        vm.posts = {success: false};
        socialFeedInfo.getInfo()
            .then(function successCallback(response){
                vm.posts = response;
            }, function errorCallback(error){
                vm.posts = error;
            });


    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'socialFeedCtrl', socialFeedCtrl );
} )();

( function() {
    "use strict";

    socialFeedInfo.$inject = ['URLS', '$http', '$q'];
    function socialFeedInfo(URLS, $http, $q) {

        var obj = {

            /**
             * Get social feed widget information
             * @return  {function}
             */
            getInfo: function(){

                return $q(function(resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.dashboardSocial,
                    }).then(function success(response) {

                        if ( !!response.data.status ) {
                            resolve({success: true, data: response.data.result, finish: true});
                        } else {
                            reject({success: false, finish: true});
                        }

                    }, function error(){

                        reject({success: false, finish: true});

                    });

                });
            }

        };

        return obj;

    }

    angular
        .module( 'actinver.services' )
        .factory( 'socialFeedInfo', socialFeedInfo );

})();

(function(){
    "use strict";

    function socialFeed(){

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/social-feed/social-feed.html',
            controller: 'socialFeedCtrl',
            controllerAs: 'socialFeedWidget'
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'socialFeed', socialFeed );
} )();
(function(){
    "use strict";

    tabTable.$inject = ['$compile'];
    function tabTable( $compile ){

        function link( scope, element, attrs, ctrl, transclude ){


            var $table = null;
            var totalCols = null;
            var rate = 100;
            var lastClick = Date.now() - rate;


            function setup () {
                buildTemplate();
                setupVars();
            }


            function buildTemplate () {
                transclude(scope, function(clone, scope) {
                    if( !scope.order ) {
                        $(clone).find('tbody tr').attr("ng-repeat", "item in data");
                    }

                    if( scope.numberRowByPag ) {
                        $(clone).find('tbody tr').attr( 'ng-show', '$index >= ((currentPagination - 1) * numberRowByPag)  && $index < (numberRowByPag * currentPagination) ');

                    }
                    if( scope.order ) {
                        $(clone).find('tbody tr').attr("ng-repeat", "item in data | orderBy: groupOrder");
                        $(clone)
                            .find('thead th')
                            .each( function() {
                                $(this).attr('ng-click', "orderBy('" + $(this).attr('orderBy') + "')" );
                                $(this).append( "<span class='icon glyphicon glyphicon-triangle-bottom' ng-show='groupOrder.indexOf(&quot;" + $(this).attr('orderBy') + "&quot;) >= 0'></span>" );
                                $(this).append( "<span class='icon glyphicon glyphicon-triangle-top' ng-show='groupOrder.indexOf(&quot;-" + $(this).attr('orderBy') + "&quot;) >= 0'></span>" );
                            });
                    }


                    var templateTable = "";
                    clone.each( function( _index, _element) {
                        templateTable += _element.outerHTML || '';
                    });

                    element.find('.content-table').prepend( templateTable );
                    $compile( element.contents() )(scope);
                });
            }


            function setupVars () {
                $table = $(element).find('table');
                totalCols = $table.find('thead tr th').length;

                scope.data = [];
                scope.showTable = false;
                scope.order = scope.order || null;
                scope.groupOrder = [];

                scope.currentTab = 1;
                scope.numberColsByTab = scope.numberColsByTab || null;
                scope.labelButtonBackTab = scope.labelButtonBackTab || null;
                scope.labelButtonNextTab = scope.labelButtonNextTab || null;
                scope.totalTabs = Math.ceil(totalCols / scope.numberColsByTab );


                scope.currentPagination = 1;
                scope.numberRowByPag = scope.numberRowByPag || null;
                scope.totalPaginations = null;

            }

            scope.setData = function ( _data ) {

                if( scope.numberRowByPag ) {
                    scope.totalPaginations = Math.ceil( _data.length / scope.numberRowByPag );
                }

                if( scope.numberColsByTab ) {
                    setFormatTable();
                }

                scope.data = _data;
                scope.showTable = true;
            };


            function setFormatTable ( ) {

                setTimeout( function () {

                    $table
                        .find('thead tr th')
                        .filter( function ( _index ) {
                            return isVisibleElement(_index);
                        })
                        .show();


                    $table
                        .find('thead tr th')
                        .filter( function ( _index ) {
                            return !isVisibleElement(_index);
                        })
                        .hide();

                    var elementsShowBody = [];
                    var elementsHideBody = [];

                    $table
                        .find('tbody tr')
                        .each( function () {
                            $(this)
                                .find('td')
                                .each( function ( _index, _element ) {
                                    isVisibleElement(_index) ? elementsShowBody.push(_element) : elementsHideBody.push(_element);
                                });
                        });

                    $(elementsShowBody).show();
                    $(elementsHideBody).hide();
                });
            }


            function isVisibleElement ( _index ) {
                return ((scope.numberColsByTab * ( scope.currentTab - 1) ) <= _index  && _index < (scope.numberColsByTab * scope.currentTab ));
            }



            scope.backTab = function () {
                if( Date.now() - lastClick >= rate ) {
                    scope.currentTab--;
                    setFormatTable();
                    lastClick = Date.now();
                }
            };


            scope.nextTab = function () {
                if( Date.now() - lastClick >= rate ) {
                    scope.currentTab++;
                    setFormatTable();
                    lastClick = Date.now();
                }
            };

            scope.nextPagination = function () {
                scope.goPagination( scope.currentPagination + 1 );
            };

            scope.backPagination = function () {
                scope.goPagination( scope.currentPagination - 1 );
            };


            scope.goPagination = function ( _pagination ) {
                scope.currentPagination = _pagination;
            };


            scope.orderBy = function ( _property ) {
                if( scope.groupOrder.indexOf( _property ) >= 0 ) {
                    scope.groupOrder[ scope.groupOrder.indexOf( _property ) ] = '-' + _property;
                    return;
                }

                if( scope.groupOrder.indexOf( '-' + _property ) >= 0 ) {
                    scope.groupOrder[ scope.groupOrder.indexOf( '-' + _property ) ] = _property;
                    return;
                }

                scope.groupOrder.push( _property );

                if( scope.groupOrder.length >= 3 ) {
                    scope.groupOrder.shift();
                }
            };


            setup();
        }


        return {
            restrict: 'EA',
            transclude: true,
            // replace: true,
            template:   "<div class='container-tab-table' ng-show='showTable'> " +
                            "<div class='button-back-tab' ng-click='backTab()' ng-show='numberColsByTab && currentTab > 1'>" +
                                "<span class='icon glyphicon glyphicon-triangle-left'></span>" +
                                "<span class='text' ng-if='labelButtonBackTab'>{{labelButtonBackTab}}</span>" +
                            "</div> " +
                            "<div class='content-table'>" +
                                "<div class='no-results' ng-show='data.length === 0'>" +
                                    "<img src='img/bg/binnacle-empty-state.svg' />" +
                                    "<p><strong> No se encontraron </strong>resultados con esta<br/>búsqueda. Vuelve a intentar otro dato.</p>" +
                                "</div>" +
                            "</div> " +
                            "<div class='button-next-tab' ng-click='nextTab()' ng-show='numberColsByTab && currentTab < totalTabs'>" +
                                "<span class='text' ng-if='labelButtonNextTab'>{{labelButtonNextTab}}</span>" +
                                "<span class='icon glyphicon glyphicon-triangle-right'></span>" +
                            "</div>" +
                            "<div class='pagination' ng-if='numberRowByPag'>" +
                                "<button class='back-pagination' ng-click='backPagination()' ng-disabled='currentPagination <= 1'><span class='glyphicon glyphicon-chevron-left'></span></button>" +
                                "<span class='list-pagination' ng-repeat='i in [] | range:totalPaginations' ng-click='goPagination(i+1)' ng-class='{active: $index + 1 === currentPagination}'>{{i + 1}}</span>" +
                                "<button class='next-pagination' ng-click='nextPagination()' ng-disabled='currentPagination >= totalPaginations'><span class='glyphicon glyphicon-chevron-right'></span></button>" +
                            "</div>" +
                            "<span class='note-tabs' ng-if='numberColsByTab && totalTabs > 1'>* Para <strong> VER el resto </strong> de la tabla, da clic en <strong class='text-button-next-tab'> <span class='icon glyphicon glyphicon-triangle-right' ng-if='!labelButtonNextTab'></span>{{labelButtonNextTab}}. </strong> </span>" +
                        "</div>",
            scope: {
                labelButtonBackTab: '@',
                labelButtonNextTab: '@',
                numberColsByTab: '=?',
                numberRowByPag: '=?',
                setData: '=',
                order: "=?"
            },
            link:link
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'tabTable', tabTable );


} )();



(function(){
    'use strict';

    tableColumnPosition.$inject = ['$timeout'];
    function tableColumnPosition( $timeout ){

        function link(scope, $element){
            $element.bind('scroll', function(){
            	$element.find( 'table' ).find( 'tr th:first-child' ).css('left', this.scrollLeft +"px" );
                $element.find( 'table' ).find( 'tr td:first-child' ).css('left', this.scrollLeft +"px" );
            });

            // Update labels positions
            scope.$watch( function () {
                return $element.find( 'table' ).height();
            }, function ( newv, oldv) {
                if ( newv !== oldv ) {
                    $timeout( function(){
                        $element.find( 'table tr td:first-child' ).css('left', $element.scrollLeft() +"px" );
                    }, 0 );
                }
            });
        }

        return {
            restrict: 'EA',
            link: link,
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'tableColumnPosition', tableColumnPosition );

} )();

(function(){
    'use strict';

    tableList.$inject = ['NgTableParams', 'binnacleModalSrv', 'userConfig'];
    function tableList(NgTableParams, binnacleModalSrv, userConfig){

        function link(scope){
            scope.tableInfo = new NgTableParams(scope.tableSet.initialParams, scope.tableSet.initialSettings);
            scope.tableType = scope.type;
            scope.emptyTable = scope.empty;
            scope.resourceCrashed = scope.crashed;

            // Hide preloader
            scope.$watch('tableInfo.data', function(){
                if(scope.tableInfo.total() > 0 || (scope.tableInfo.data.loading === false)){
                    scope.tableSet.loading = false;
                }
            });

            scope.outlineClient = function( record ){
                binnacleModalSrv.outlineClient( userConfig.user.employeeID, record.numSolContrato, record.tipoOrigenTO.id ,record.tipoServicioTO.value.idTipoServicio,record.cliente.value.tipoPersonaTO.id,scope.type );
            };
        }

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-list/table-list.html',
            link: link,
            scope: {
                crashed: "@",
                empty: '@',
                tableSet: '=',
                type: '@',
                origin: '@?'
            }
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'tableList', tableList );

} )();
(function(){
    "use strict";

    actTableOrders.$inject = ['investmentSrv', 'investmentModalSrv', 'CommonModalsSrv', 'ErrorMessage'];
    function actTableOrders( investmentSrv, investmentModalSrv, CommonModalsSrv, ErrorMessage ){

        var link = function( scope ){
            //var isLoad = false;

            /** This function loads the orders of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadOrders( _date ){
                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.loading = true;
                scope.orders = [];
                var startDate=null;
                var endDate =null;

               // if( isLoad !== _isLoad ){
                 //   isLoad = _isLoad;


                 if(_date){
                     
                    startDate = moment( _date.startDate._d ).format( 'DDMMYYYY' );
                    endDate = moment( _date.endDate._d ).format( 'DDMMYYYY' );
                   // console.info("Fechas",startDate,endDate);

                }


                    investmentSrv.getOrders( scope.contract, scope.type ,startDate,endDate).then( function(_res){
                        //console.info("valor:",_res.data.ordersList);
                        if( _res.data.outOrdersByDateQuery.orders){
                            var _orders = _res.data.outOrdersByDateQuery.orders;
                            angular.forEach( _orders, function( _val, _key ){
                                _orders[_key].issuer = _val.order.issuer.issuerName + ' ' + _val.order.issuer.serie;
                            });
                            scope.orders = _orders;
                        }
                    } )
                    .finally(function(){
                        scope.loading = false;
                      //  isLoad = false;
                    });
                //}
            }

            scope.viewMore = function( _order ){
                if(scope.type === 'MC'){
                    investmentSrv.moreInfoCapital( scope.contract, _order.order.orderReference).then(function(_res){
                        if(_res.data.outCommonHeader.result.result === 1){
                            investmentModalSrv.moreInfoMarketOrder( _res.data.outCapitalMarketOrderDetailQuery, _order.order);
                        }
                    });
                }else{
                    investmentSrv.moreInfo( scope.contract, _order.order.orderReference).then(function(_res){
                        if(_res.data.outCommonHeader.result.result === 1){
                            investmentModalSrv.moreInfo( _res.data.outFundsOrderDetailQuery);
                        }
                    });
                }
            };

            scope.delete = function( _order){
                var message = '¿Estás seguro de cancelar la orden seleccionada?';
                CommonModalsSrv.warning( message ).result.then(function() {
                    if(scope.type === 'MC'){
                        investmentSrv.deleteMarket( _order)
                            .then(function(response){
                                loadOrders();
                                CommonModalsSrv.done( ErrorMessage.createError(response.data.outCommonHeader.result.messages));
                            })
                            .catch(function(error){
                                CommonModalsSrv.error(ErrorMessage.createError(error.message));
                            });
                    }else{
                        investmentSrv.delete( scope.contract, _order)
                            .then(function(){
                                loadOrders();
                                CommonModalsSrv.done( 'Se ha realizado la cancelación de manera exitosa.' );
                            })
                            .catch(function(error){
                                CommonModalsSrv.error(ErrorMessage.createError(error.message));
                            });
                    }
                });
            };

            /**Funcion para limpiar las ordenes  */
            function clean(){
                scope.orders = [];
                //console.info("clean:",scope.orders);
            }


            /*loadOrders();

            scope.$watch( 'contract', function() {
                loadOrders();
            } );*/

            /**
            * This assignment allows to use the function from the controller or the view
            **/
            scope.update = loadOrders;
            scope.clean = clean;
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-orders/table.html',
            scope: {
                contract : '@',
                tag: '@',
                update : '=?',
                type: '@?',
                clean:'=?',
                origin:'@?'
            },
            link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actTableOrders', actTableOrders );


} )();

(function(){
    "use strict";

    actTableOrdersBank.$inject = ['investmentSrv', 'investmentModalSrv', 'CommonModalsSrv', 'ErrorMessage', 'fundBankDollSrv', '$filter'];
    function actTableOrdersBank( investmentSrv, investmentModalSrv, CommonModalsSrv, ErrorMessage, fundBankDollSrv, $filter ) {

        var link = function( scope ) {
            //var isLoad = false;

            /** This function loads the orders of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadOrders(_date){
                var startDate, endDate, _startDate, _endDate;

                if(_date){
                    startDate = $filter('date')(_date.startDate._d, 'yyyy-MM-dd HH:mm:ss');
                    endDate = $filter('date')(_date.endDate._d, 'yyyy-MM-dd HH:mm:ss');
                    _startDate = $filter('date')(_date.startDate._d, 'yyyyMMdd');
                    _endDate = $filter('date')(_date.endDate._d, 'yyyyMMdd');
                }else{
                    startDate = $filter('date')(new Date(), 'yyyy-MM-dd 00:00:00');
                    endDate = $filter('date')(new Date(), 'yyyy-MM-dd HH:mm:ss');
                    _startDate = $filter('date')(new Date(), 'yyyyMMdd');
                    _endDate = $filter('date')(new Date(), 'yyyyMMdd');
                }

                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.loading = true;
                scope.orders = [];
                
                if(scope.type !== '2'){
                    investmentSrv.getOrdersBank(scope.contract, scope.type, startDate, endDate).then(function (_res) {
                        if (_res.data.outBankFundsAndMoneyMarketMvmntsQuery.movements.movement.length > 0 || _res.data.outBankFundsAndMoneyMarketMvmntsQuery !== null) {
                            var _orders = _res.data.outBankFundsAndMoneyMarketMvmntsQuery.movements.movement;
                            scope.orders = _orders;
                        }
                    }).finally(function () {
                        scope.loading = false;
                    });
                }else if(scope.type === '2'){
                    //scope.mailList = investmentSrv.getEmail();
                    investmentSrv.getOrdersMoneyMarketBank(scope.contract, _startDate, _endDate).then(function (_res) {
                        if (_res.data.outBankContractInvstMovementsQuery.movements.length > 0 || _res.data.outBankContractInvstMovementsQuery !== null) {
                             var _orders = _res.data.outBankContractInvstMovementsQuery.movements;
                             scope.orders = _orders;
                         }
                    }).finally(function () {
                        scope.loading = false;
                    });
                }
            }

            scope.viewMore = function( _order ){
                investmentModalSrv.moreInfoFundsBank( _order);
            };

            scope.delete = function( _order){
                var message = '¿Estás seguro de cancelar la orden seleccionada?';
                CommonModalsSrv.warning( message ).result.then(function() {
                    
                    if(scope.type === '2'){//si proviene de MoneyBank
                        deleteMoneyMarket(_order);
                    }else{ //normalmente proviene de fundsBank
                        switch (_order.transactionType) {
                            case 1:
                                //COMPRA FONDO
                                deleteFundBuy(_order);
                                break;
                            case 2:
                                //VENTA FONDO
                                deleteFund(_order);
                                break;
                            case 30:
                                //COMPRA DIRECTO
                                deleteDirectBuy(_order);
                                break;
    
                            case 37:
                                //COMPRA REPORT
                                deleteReportoBuy(_order);
                                break;
    
                            case 29:
                                //VENTA DIRECTO
                                deleteDirectSell(_order);
                                break;
                            }
                    }                   
                });
            };

            function clean(){
                scope.orders = [];
            }

            function deleteFundBuy(_order){
                var transaction = {
                    clientBankingArea: '001',
                    clientContractNumber: scope.contract,
                    language: 'SPA',
                    orderReference: _order.orderReference
                };
                var message = '';
                fundBankDollSrv.bankFundBuyCancelation(transaction).then(function (_res) {
                    if (_res.outCommonHeader.result.result === 1) {
                        angular.forEach(_res.outCommonHeader.result.messages, function (_resultado) {
                            message += _resultado.responseMessage;
                        });
                        CommonModalsSrv.done(message);
                        loadOrders();
                    } else {
                        var _error = _res.outCommonHeader.result.messages;
                        angular.forEach(_error, function (_res) {
                            message += _res.responseMessage + '<br>';
                        });
                        CommonModalsSrv.error(message);
                    }
                })
                    .catch(function (error) {
                        CommonModalsSrv.error(ErrorMessage.createError(error.message));
                    });

            }

            function deleteFund(_order){
                var transaction = { 
                     clientBankingArea: '001',
                     clientContractNumber: scope.contract,
                     language:'SPA',
                     orderReference: _order.orderReference 
                     };
                var  message='';
                fundBankDollSrv.bankFundSellCancelation(transaction).then(function(_res){
                    if (_res.outCommonHeader.result.result === 1) {
                        angular.forEach(_res.outCommonHeader.result.messages, function (_resultado) {
                            message += _resultado.responseMessage+'<br>';
                        });
                        CommonModalsSrv.done(message);
                        loadOrders();
                    }else{
                        var _error = _res.outCommonHeader.result.messages;
                        angular.forEach(_error, function (_res) {
                            message += _res.responseMessage+'<br>';
                        });
                        CommonModalsSrv.error(message);
                    }
                })
                .catch(function(error){
                    CommonModalsSrv.error(ErrorMessage.createError(error.message));
                });
            }

            function deleteMoneyMarket(_order) {
                investmentSrv.deleteOrderLumina(_order)
                    .then(function () {
                        loadOrders();
                        CommonModalsSrv.done("Solicitud de cancelación recibida");
                    })
                    .catch(function (error) {
                        CommonModalsSrv.error(ErrorMessage.createError(error.message));
                    });
            }

            function deleteDirectSell(_order) {
                investmentSrv.deleteDirectSell( _order, scope.contract)
                    .then(function(response){
                        loadOrders();
                        CommonModalsSrv.done( ErrorMessage.createError( response.data.outCommonHeader.result.messages) );
                    })
                    .catch(function(error){
                        CommonModalsSrv.error(ErrorMessage.createError(error.message));
                    });
            }

            function deleteDirectBuy(_order) {
                investmentSrv.deleteDirectBuy( _order)
                    .then(function(response){
                        loadOrders();
                        CommonModalsSrv.done( ErrorMessage.createError( response.data.outCommonHeader.result.messages) );
                    })
                    .catch(function(error){
                        CommonModalsSrv.error(ErrorMessage.createError(error.message));
                    });
            }

            /*loadOrders();

            scope.$watch( 'contract', function() {
                loadOrders();
            } );*/

            /**
            * This assignment allows to use the function from the controller or the view
            **/
            scope.update = loadOrders;
            scope.clean = clean;

            scope.aux={ 
                sortType:undefined,
                sortReverse:false
            };

            scope.viewLetter = function(operID, operDate, titular) {
                var _operDate = $filter('date')(operDate, 'yyyyMMdd');
                investmentModalSrv.reportoConfirmLetter(operID, _operDate, titular);
            };
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-orders-bank/table.html',
            scope: {
                contract: '@',
                tag: '@',
                update: '=?',
                type: '@?',
                orders:'=?',
                clean:'=?',
                origin:'@?',
                holder: '@'
            },
            link : link
        };
    }

    angular.module( 'actinver.directives' )
           .directive( 'actTableOrdersBank', actTableOrdersBank );
} )();
(function () {
    "use strict";

    actTableOrdersLumina.$inject = ['investmentSrv', 'investmentModalSrv', 'CommonModalsSrv', 'ErrorMessage'];
    function actTableOrdersLumina(investmentSrv, investmentModalSrv, CommonModalsSrv, ErrorMessage) {

        var link = function (scope) {
            var isLoad = false;

            /** This function loads the orders of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadOrders(_isLoad) {
                scope.sortReverse = true;
                scope.sortType = 'order.orderReference';
                scope.loading = true;
                scope.orders = [];

                if (isLoad !== _isLoad) {
                    isLoad = _isLoad;
                    investmentSrv.getOrdersLumina(scope.contract, scope.type, scope.fechaordenes).then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            //TODO optimizar este codigo
                            var orden;
                            if (_res.data.outCapitalMarketOrderQuery.orderData && _res.data.outCapitalMarketOrderQuery.orderData.length > 0) {
                                orden = _res.data.outCapitalMarketOrderQuery.orderData;
                                var _details = [];
                                R.forEach(function (_val) {
                                    _details.push({
                                        orderReference: _val.orderReference,
                                        contractNumber: _val.contractNumber,
                                        operationDate: _val.captureDate.date,
                                        movementDescription: _val.operationType,
                                        operationType: _val.operationType === 'COMPRA' ? 'buy' : 'sell',
                                        modify: true,
                                        issuer: _val.instrumentDesc.operationType,
                                        amountTitles: _val.orderTitles.titlesQty,
                                        price: _val.orderPrice.price,
                                        titlesAssigned: _val.assignedTitles.titlesQty === -1 ? 0 : _val.assignedTitles.titlesQty,
                                        assignedPrice: _val.assignedPrice.price,
                                        pricev: _val.orderValuation.valuation,
                                        status: _val.orderStatus.operationType,
                                        secancela: _val.canceled === '1' ? true : false,
                                        statusDesc : _val.statusDesc
                                    });
                                }, orden);
                                scope.orders = _details;

                            }

                        }
                    })
                        .finally(function () {
                            scope.loading = false;
                            isLoad = false;
                        });
                }
            }

            scope.modificar = function (_station) {
                scope.selected = _station;
            };

            scope.showinfostatus = function(message){
                CommonModalsSrv.info(message);
            };

            scope.delete = function (_order) {
                var message = '¿Estás seguro de cancelar la orden seleccionada?';
                CommonModalsSrv.warning(message).result.then(function () {
                    investmentSrv.deleteOrderLumina(_order)
                        .then(function () {
                            loadOrders();
                            // CommonModalsSrv.done(response.data.outCommonHeader.result.messages[0].responseMessage);
                            CommonModalsSrv.done("Solicitud de cancelación recibida");
                        })
                        .catch(function (error) {
                            CommonModalsSrv.error(ErrorMessage.createError(error.message));
                        });
                });
            };

            loadOrders();

            scope.$watch('contract', function () {
                loadOrders();
            });
            scope.$watch('fechaordenes', function () {
                loadOrders();
            });

            /**
            * This assignment allows to use the function from the controller or the view
            **/
            scope.update = loadOrders;
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-orders-lumina/table-orders-lumina.html',
            scope: {
                contract: '@',
                tag: '@',
                update: '=?',
                type: '@?',
                fechaordenes: '=',
                selected: '=?',
            },
            link: link,
        };


    }


    angular.module('actinver.directives')
        .directive('actTableOrdersLumina', actTableOrdersLumina);


})();

(function () {
    'use strict';

    tablePortfolioInvLumina.$inject = ['investmentSrv', '$rootScope'];
    function tablePortfolioInvLumina(investmentSrv, $rootScope) {

        var link = function (scope) {
            var isLoad = false;

            /** This function loads the funds of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadPortfolio(_isLoad) {
                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.orders = [];

                scope.loading = true;
                if (isLoad !== _isLoad) {
                    isLoad = _isLoad;
                    investmentSrv.getPortfolioInvestmentLumina(scope.contract, scope.type).then(function (_res) {

                        if (_res.data.outCommonHeader.result.result === 1) {
                            //TODO optimizar este codigo
                            var portfolio;
                            if (_res.data.outCapitalMarketPositionQuery.positionData && _res.data.outCapitalMarketPositionQuery.positionData.length > 0) {
                                portfolio = _res.data.outCapitalMarketPositionQuery.positionData;
                                var _details = [];

                                R.forEach(function (_val) {
                                    var _issuerName = (_val.instrumentDesc.operationType).split(' ');
                                    _details.push({
                                        issuer: _val.instrumentDesc.operationType,
                                        issuerName: _issuerName[1],
                                        serie: _issuerName[2],
                                        finalPosition: _val.titlesQty.titlesQty,
                                        virtualCost: _val.unitCost.price,
                                        weightedLastPrice: _val.closingPrice.price,
                                        valuationLastPrice: _val.valuation.valuation,
                                        capitalGain: _val.capitalGain.price,
                                        accumulatedVariance: _val.calculatedCapitalGain.price,
                                        instrumentDesc : _val.instrumentDesc.operationType
                                    });
                                }, portfolio);
                                $rootScope.capitalsPortfolioBank = portfolio;
                                scope.orders = _details;
                            }                            

                        }

                    })
                        .finally(function () {
                            scope.loading = false;
                            isLoad = false;
                        });
                }
            }

            loadPortfolio();

            scope.$watch('contract', function () {
                loadPortfolio();
            });

            // Show no data message
            scope.nodata = (typeof scope.nodata === 'undefined') ? 'No hay información' : scope.nodata;

            // This assignment allows to use the function from the controller or the view
            scope.update = loadPortfolio;

            scope.ChangeDoll = function (_station) {
                scope.selected = _station;
                $rootScope.actionStation={type:'sell', origen:'portafolio', station: scope.selected, contract: scope.contract, operationType: 'Banco',  rand:Math.random()};
            };
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-portafolio-investment-lumina/table-lumina.html',
            scope: {
                contract: '@',
                update: '=?',
                selected: '=?',
                type: '@?',
                nodata: '@?'
            },
            link: link,
        };


    }

    angular
        .module('actinver.directives')
        .directive('tablePortfolioInvLumina', tablePortfolioInvLumina);

})();

(function(){
    'use strict';

    tablePortfolioInvBank.$inject = ['investmentSrv', 'moment', 'CommonModalsSrv', 'directsBandsSrv'];
    function tablePortfolioInvBank( investmentSrv, moment, CommonModalsSrv, directsBandsSrv ){

        var link = function( scope ){
            var bandsDirect = [];
            var isLoad = false;
            var instrumentoAux = null;
            scope.$watch( 'bandsDirect', function(_new, _old) {
                bandsDirect = _new;
            });

            /** This function loads the funds of the day
             * @param {boolean}  Indicates if the function is loading
             **/
            function loadPortfolio( _isLoad ){
                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.orders = [];

                scope.loading = true;
                if( isLoad !== _isLoad ){
                    isLoad = _isLoad;
                    if(scope.type === '2'){
                        investmentSrv.getPortfolioInvestmentBank( scope.contract, scope.type ).then( function(_res){
                            if( _res.data.outCommonHeader.result.result === 1  ){
                                var portfolio = _res.data.outBankInvstFundsAndMMPositionsQuery.positions.positionInformation;
                                var _details = [];
                                
                                R.forEach(function( _val ){
                                    _details.push({
                                        idFund:  _val.fundID,
                                        serie:  _val.operationSource,
                                        position:_val.position,
                                        cost : _val.cost,
                                        currentPrice : _val.currentPrice,
                                        dueDate : _val.dueDate,
                                        emissionID : _val.emissionID,
                                        instrumentID : _val.emissionID,
                                        settlementDate : _val.settlementDate,
                                        titlesQty : _val.titlesQty,
                                        amount: _val.amount,
                                        netRate : _val.netRate.rate,
                                        appreciation : _val.appreciation,
                                        couponRate : _val.couponRate.rate,
                                        weightedAmount : _val.weightedAmount,
                                        foreignExchangeID: _val.foreignExchangeID
                                    });
                                },portfolio);
                                scope.orders = _details;
                            }
                        } )
                            .finally(function(){
                                scope.loading = false;
                                isLoad = false;
                            });
                    }else if(scope.type === '1'){
                        var _date =  moment(new Date()).format('YYYYMMDD');
                        investmentSrv.getPortfolioReportoBank( scope.contract, _date).then( function(_res){
                            if( _res.data.outCommonHeader.result.result === 1  ){
                                var portfolio = _res.data.outMoneyMarketIntradayPositionQuery.positionData;
                                var _details = [];
                                R.forEach(function( _val ){
                                    _details.push({
                                        idFund:  _val.instrumentID,
                                        serie:  _val.issuer,
                                        position:_val.titlesQty,
                                        cost : _val.closingPrice,
                                        currentPrice : _val.closingPrice,
                                        emissionID : _val.instrumentID,
                                        instrumentID : _val.instrumentID,
                                        positionType : _val.positionType,
                                        titlesQty : _val.titlesQty,
                                        warrantyTitles: _val.warrantyTitles,  
                                        amount: _val.unitCostValuation,
                                        netRate : _val.plusMinusCalc,
                                        appreciation : _val.plusMinusCalc,
                                        couponRate : _val.plusMinusCalc,
                                        weightedAmount : _val.unitCostValuation,
                                        lastPrice: _val.lastPrice,
                                        instrumentDesc: _val.instrumentID,
                                        origen: 'POSICION',
                                        exchangeRate:_val.exchangeRate
                                    });
                                },portfolio);
                                
                                scope.orders = _details;
                            }
                        } )
                            .finally(function(){
                                scope.loading = false;
                                isLoad = false;
                            });
                    }

                }
            }

            loadPortfolio();
            /*
           scope.$watch( 'contract', function() {
                loadPortfolio();
            } );

            */
            function selectEmisora( data){
                var temp = JSON.parse(instrumentoAux);
                temp.term= data.term;
                temp.selectedInstrument = data;                
                scope.selected = temp;
            }
            // Show no data message
            scope.nodata = ( typeof scope.nodata === 'undefined' ) ? 'No hay información' : scope.nodata;

            // This assignment allows to use the function from the controller or the view
            scope.update = loadPortfolio;

            scope.ChangeDoll = function( _station ){
                var optionsBands = [];
                instrumentoAux = JSON.stringify(_station);
                if(_station && _station.positionType && _station.positionType.toUpperCase() === 'DIRECTO' && scope && scope.tabseleccion === 1 ){
                    if(bandsDirect != null && bandsDirect.length > 0){
                        bandsDirect.forEach(function(r){
                            if(r.instrumentDesc.toUpperCase() === _station.instrumentDesc.toUpperCase() && r.averagePurchaseMargin !== null){
                                r.selected = false;
                                optionsBands.push(r);
                            }
                        });

                        if(optionsBands.length < 1){
                            CommonModalsSrv.done("No existen bandas para operar");
                        }else{
                            directsBandsSrv.information(optionsBands, selectEmisora);
                        }
                    }else{
                        CommonModalsSrv.done("No existen bandas para operar");
                    }
                }else{
                    scope.selected = _station;
                }                           
            };
            scope.aux={
                sortType:undefined ,
                sortReverse:false
            };
        };
        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-portfolio-investment-bank/table.html',
            scope: {
                contract : '@',
                update : '=?',
                selected : '=?',
                type: '@?',
                nodata: '@?',
                orders: '=?',
                bandsDirect:'=?',
                tabseleccion:'=?'
            },
            link : link,
        };


    }

    angular
        .module( 'actinver.directives' )
        .directive( 'tablePortfolioInvBank', tablePortfolioInvBank );

})();

(function(){
    'use strict';

    tablePortfolioInv.$inject = ['investmentSrv', '$rootScope', 'investmentModalSrv', 'CommonModalsSrv'];
    function tablePortfolioInv( investmentSrv, $rootScope, investmentModalSrv, CommonModalsSrv ){

        var link = function( scope ){
            var isLoad = false;


            /** This function loads the funds of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadPortfolio( _isLoad ){
                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.orders = [];

                scope.loading = true;
                if( isLoad !== _isLoad ){
                    isLoad = _isLoad;
                    investmentSrv.getPortfolioInvestment( scope.contract, scope.type ).then( function(_res){
                        if( _res.data.outCommonHeader.result.result === 1  ){
                            //TODO optimizar este codigo
                            var portfolio;
                            if( _res.data.outPortfolioDetailQuery && _res.data.outPortfolioDetailQuery.portfolios.portfolioDetail.length > 0 ){
                                portfolio = _res.data.outPortfolioDetailQuery.portfolios.portfolioDetail;
                                var _details = [];
                                R.forEach(function( _val ){
                                    _details.push({
                                        issuer : _val.issuerName,
                                        serie : _val.serie.trim(),
                                        virtualCost : _val.cost,
                                        valuation : _val.titlesQty,
                                        accumulatedVariance : _val.appreciationPercentage,
                                        capitalGain : _val.appreciation,
                                        finalPosition : _val.finalPositionTitles,
                                        valuationLastPrice : _val.positionValuation,
                                        weightedLastPrice : _val.lastPrice,
                                        marketTypeDesc : _val.marketTypeDesc,
                                        portfolioType : _val.portfolioType,
                                        portfolioTypeDesc : _val.portfolioTypeDesc,
                                        currencyTypeKey : _val.currencyTypeKey,
                                        foreingExchangeRate : _val.foreingExchangeRate,
                                        finalPositionTitles  : _val.finalPositionTitles,
                                        settlementPosMoreThan72H: _val.settlementPosMoreThan72H,
                                        settlementPosition48H: _val.settlementPosition48H,
                                        settlementPosition24H: _val.settlementPosition24H,
                                        settlementPositionToday: _val.settlementPositionToday,
                                        saleAvailableTitles: _val.saleAvailableTitles,
                                        suspendedIndicator: _val.suspendedIndicator
                                    });
                                },portfolio);
                                _details.sort(_details.portfolioType);

                                var _groupOrders = [];
                                angular.forEach ( _.groupBy( _details, 'portfolioTypeDesc' ) , function( value){
                                    _groupOrders.push({
                                        title : value[0].portfolioTypeDesc,
                                        portfolioType:value[0].portfolioType,
                                        portfolio : value,
                                    });
                                });

                                $rootScope.capitalsPortfolio = portfolio;
                                scope.orders = _groupOrders;
                            }else{
                                scope.orders = [];
                            }
                        }
                    } )
                    .finally(function(){
                        scope.loading = false;
                        isLoad = false;
                    });
                }
            }

            loadPortfolio();

            scope.viewMoreTitles = function( _order ){
                investmentModalSrv.moreInfoTitles(_order);
            };

            scope.showInfoEmisora = function(order){        
                if(order && order.suspendedIndicator === '1'){
                    CommonModalsSrv.error("La emisora <b>" + order.issuer + " " + order.serie + "</b> se encuentra actualmente suspendida.");

                }else if(order){
                    $rootScope.ChangeDoll(order);
                }                              
            };
            scope.$watch( 'contract', function() {
                loadPortfolio();
            } );

            // Show no data message
            scope.nodata = ( typeof scope.nodata === 'undefined' ) ? 'No hay información' : scope.nodata;

            // This assignment allows to use the function from the controller or the view
            scope.update = loadPortfolio;

            $rootScope.ChangeDoll = function( _station ){
                scope.selected = _station;
                $rootScope.actionStation={type:'sell', origen:'portafolio', station: scope.selected, operationType: 'Casa', rand:Math.random()};
            };

            $rootScope.showDetails = function(topic){
                topic.show = topic.show ? false : true;
            };
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-portfolio-investment/table.html',
            scope: {
                contract : '@',
                update : '=?',
                selected : '=?',
                type: '@?',
                nodata: '@?'
            },
            link : link,
        };


    }

    angular
        .module( 'actinver.directives' )
        .directive( 'tablePortfolioInv', tablePortfolioInv );

})();

(function(){
    "use strict";

    tableStations.$inject = ['investmentSrv', 'investmentModalSrv'];
    function tableStations( investmentSrv, investmentModalSrv ){

        var link = function( scope ){

            function update(){
                scope.loading = true;
                investmentSrv.getStations( scope.contract, scope.id ).then(function(_res){
                    if( _res.data.outCommonHeader.result.result === 1 ){
                        scope.stations = _res.data.outInvestmentIssuersQuery.issuer;
                    }
                    else{
                        scope.stations = [];
                    }
                })
                .finally(function(){
                    scope.loading = false;
                });
            }

            scope.update = scope.update ? update : null;

            scope.viewMore = function( _station ){
                investmentSrv.getDetailStations( _station.issuerName, _station.serie ).then(function(_res){
                    if(_res.data.outCommonHeader.result.result === 1){
                        investmentModalSrv.moreInfoStations( _res.data, _station);
                    }
                });
            };

            scope.$watch( 'contract', function() {
                update();
            } );

            scope.$watch( 'id', function() {
                update();
            } );

            scope.ChangeDoll = function( _station ){
                scope.selected = _station;
            };

            update();

        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-stations/table.html',
            scope: {
                contract: '@',
                id: '@',
                update: '=?',
                selected: '=?',
                columnsExpand: '=?',
            },
            link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actTableStations', tableStations );


} )();

(function() {
    'use strict';

    reportoSrv.$inject = ['$http', 'URLS'];
    function reportoSrv( $http, URLS ){

        /**
        *  Reporto Service
        */
        function Reporto(){}

        Reporto.prototype.getReporto = function( _contract ){
            return $http({
                method: 'get',
                url: URLS.getReporto + _contract +'/1/0/0/0',
                params: {
                    language: 'SPA'
                }
            });
        };

        return new Reporto();
    }

    angular
        .module( 'actinver.services' )
        .service( 'reportoSrv', reportoSrv );

})();
(function(){
    'use strict';

    tableReporto.$inject = ['reportoSrv'];
    function tableReporto( reportoSrv ){

        var link = function( scope ){

            function init(){
                scope.loading = true;
                scope.bands = [];
            }

            function reporto() {
                // Get information
                reportoSrv.getReporto( scope.contract ).then( function( _res ){
                    var info;

                    if( _res.data.outCommonHeader.result.result === 1 ){
                        info = _res.data.outBondMarketBands.bondMarketBandsByInstrumentIDData[0].bondMarketBandsData;
                        scope.bands = ( info.length > 0 ) ? info : [];
                    }
                } )
                    .finally( function(){
                        scope.loading = false;
                    } );
            }

            function direct() {
                console.log('DIRECTO');
            }


            scope.$watch('tab', function(){
                init();
                switch ( scope.tab ){
                    case 2:
                        reporto();
                        break;
                    case 1:
                        direct();
                        break;
                    default:
                        break;
                }
            });

            // Show doll form
            scope.showDoll = function( _band ){
                scope.instrument = _band;
            };

            init();

        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-reporto/table-reporto.html',
            scope: {
                contract: '@',
                instrument: '=',
                tab: '=',
            },
            link : link,
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'actTableReporto', tableReporto );

} )();
(function(){
    'use strict';

    reportoBankSrv.$inject = ['$http', 'URLS'];
    function reportoBankSrv( $http, URLS){
        /**
         *  Reporto Bank Service
         */
        function ReportoBank(){}

        ReportoBank.prototype.getReportoBands = function () {
            return $http({
                method: 'GET',
                url: URLS.getReportoBands,
                params: {
                    language: 'SPA'
                }
            });
        };

        ReportoBank.prototype.getDirectBands = function () {
            return $http({
                method: 'GET',
                url: URLS.getDirectBands + 'DINERO-DIRECTO',
                params: {
                    language: 'SPA'
                }
            });
        };

        ReportoBank.prototype.getAuctionBands = function () {
            return $http({
                method: 'GET',
                url: URLS.getAuctionBands,
                params: {
                    language: 'SPA'
                }
            });
        };
        return new ReportoBank();
    }

    angular
        .module('actinver.services')
        .service('reportoBankSrv', reportoBankSrv);
})();
(function(){
    'use strict';

    tableReportoBank.$inject = ['reportoBankSrv'];
    function tableReportoBank( reportoBankSrv ){

        var link = function( scope ){

            function init(){
                scope.loading = true;
                scope.bandsReporto = [];
                scope.bandsDirect = [];
                scope.bandsAuction = [];
            }

            // Show doll form
            scope.showDoll = function( _band ){
                scope.instrument = _band;
            };

            function reporto() {
                reportoBankSrv.getReportoBands( scope.contract ).then( function( _res ){
                    var info;
                    if( _res.data.outCommonHeader.result.result === 1 ){
                        info = _res.data.outMoneyMarketBandsReportoQuery.bandsReportData;
                        scope.bandsReporto = ( info.length > 0 ) ? info : [];
                    }
                } )
                .finally( function(){
                    scope.loading = false;
                } );
            }

            function direct() {
                reportoBankSrv.getDirectBands().then(function( _res ){
                    var info;
                    if( _res.data.outCommonHeader.result.result === 1 ){
                        info = _res.data.outMoneyMarketBandsDirectQuery.bandsDirectData;
                        if(info !== null && info.length > 0 ){
                            info.forEach(function(r){
                                if(r.priceType !== null && r.priceType.toUpperCase() === "YIELD"){
                                    r.averagePurchaseMargin = r.averagePurchaseMargin * 100;
                                }
                            });
                        }
                        scope.bandsDirect = ( info.length > 0 ) ? info : [];
                    }
                })
                .finally( function(){
                    scope.loading = false;
                } );
            }

            function auctionBands(){
                reportoBankSrv.getAuctionBands().then(function( _res ){
                    var info;
                    if( _res.data.outCommonHeader.result.result === 1 ){
                        info = _res.data.outMMAuctionsQuery.auction;
                        scope.bandsAuction = ( info.length > 0 ) ? info : [];
                    }
                })
                .finally( function(){
                    scope.loading = false;
                } );
            }

            scope.$watch('tab', function(){
                init();
                switch ( scope.tab ){
                    case 3:
                        auctionBands();
                        break;
                    case 2:
                        reporto();
                        break;
                    case 1:
                        direct();
                        break;
                    default:
                        break;
                }
            });

            init();

        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-reporto-bank/table-reporto-bank.html',
            scope: {
                contract: '@',
                instrument: '=',
                tab: '=',
                id: '@',
                bandsDirect:"=?"
            },
            link : link,
        };

    }

    angular
        .module( 'actinver.directives' )
        .directive( 'actTableReportoBank', tableReportoBank );

} )();
(function(){
    "use strict";

    tableStationsBank.$inject = ['investmentSrv', 'investmentModalSrv'];
    function tableStationsBank( investmentSrv, investmentModalSrv){

        var link = function( scope ){

            function update(){
                scope.loading = true;
                investmentSrv.getStationsBank( scope.contract )
                .then(function(_res){
                    if( _res.data.outCommonHeader.result.result === 1 ){
                            var _fundType = _res.data.outBankInvstFundsByContractQuery.funds.fund;
                            var _stations = [];
                            if(scope.id === '3'){
                                angular.forEach( _fundType , function( item ){
                                    if( item.instrumentIDDescription.description === "FONDOS DE DEUDA"){
                                        _stations.push( item );
                                    }
                                } );
                            }else if(scope.id === '2'){
                                angular.forEach( _fundType , function( item ){
                                    if( item.instrumentIDDescription.description === "RENTA VARIABLE"){
                                        _stations.push( item );
                                    }
                                } );
                            }else if(scope.id === '1'){
                                angular.forEach( _fundType , function( item ){
                                    if( item.instrumentIDDescription.description === "FONDOS DE COBERTURA"){
                                        _stations.push( item );
                                    }
                                } );
                            }
                            scope.stations = _stations;
                    }
                    else{
                        scope.stations = [];
                    }
                    scope.bandera=true;

                })
                .finally(function(){
                    scope.loading = false;
                });
            }
            scope.bandera=false;
            scope.update = scope.update ? update : null;

            scope.viewMore = function( _station ){
                investmentModalSrv.moreInfoStationsBank( _station );
            };

            scope.$watch( 'contract', function() {
                update();
            } );

            scope.$watch( 'id', function() {
                update();
            } );

            scope.ChangeDoll = function( _station ){
                    scope.style = 1;
                    scope.selected  = _station;
            };


            //update();

        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-stations-bank/table.html',
            scope: {
                contract: '@',
                id: '@',
                update: '=?',
                selected: '=?',
                columnsExpand: '=?',
                stations: '=',
                bandera:'='
            },
            link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actTableStationsBank', tableStationsBank );


} )();

(function() {
    "use strict";

    tableSocketLuminaCtrl.$inject = ['$stomp', 'URLS', '$log', '$scope', '$timeout', '$state', 'TableStationsSrv', 'investmentModalSrv', '$rootScope', '$filter', 'workerConfigSrv'];
    function tableSocketLuminaCtrl( $stomp, URLS, $log, $scope, $timeout, $state, TableStationsSrv, investmentModalSrv, $rootScope, $filter, workerConfigSrv ) {
        var vm = this;
        vm.indiceSeleccionado = -1;  

       // var subscribe;
        var timeoutPromise;
        vm.worker = null;
        
        $scope.$on( 'disconnectCapitals', function() {
            unscribe();
        });

        //recibe el vento del muñeco 
        $rootScope.$on('select-emisora-toTable',function(event, reg){
            searchEmisora(reg);
           
        });

        //detecta el cambio de tabs en mercado de capitales
        $scope.$watch('ids', function( _old, _new ){
            if( _old !== _new ){
                unscribe();
                update(2);                                              
            }
        });    

        vm.ChangeDoll = function( _station, type ){
            vm.tab = type;
            vm.indiceSeleccionado = _station.indice; 
            $scope.selected = _station;         
            $rootScope.actionStation = {type:type, origen:'stations', contract:$scope.contract, station:$scope.selected, operationType: 'Banco', rand:Math.random()};
        };

        vm.viewMore = function( _station ){
            investmentModalSrv.moreInfoMarket(_station);
        };

        function searchEmisora(reg) {
            if ($scope.stations && reg) {
                var register = $scope.stations.filter(function (item) {
                    return item.issuer.issuerSerie === reg.issuer.issuerSerie && item.feed === reg.feed;
                });
                if(angular.isArray(register) && register.length > 0){
                    vm.indiceSeleccionado =register[0].indice ;
                }else{
                    vm.indiceSeleccionado = -1;
                }

            } else {
                vm.indiceSeleccionado = -1;
            }            
        }


        function unscribe() {
            if(vm.worker !==null){
                $log.info('disconnect socket capitals2.1');
                vm.worker.postMessage({config:null, step:2 }); 
                vm.worker = null;  
            }
        }

        function initWorkerEmisoras() {            
            if (typeof (Worker) !== "undefined") {
                var BASE_PATH = (!window.location.port) ? (window.location.protocol + '//' + window.location.hostname +'/'+"asesoria" ):(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port+'/'+"asesoria");
                vm.worker = new Worker(URL.createObjectURL(new Blob(['('+workerConfigSrv.principal+')()'])));                
                //enviamos el array al thread                
                var config = {
                    emisoras: $scope.stations,
                    url: URLS.CapitalsWebSocket + '?access_token=' + sessionStorage.getItem("__token"),
                    urlResource:BASE_PATH,
                    throwSocket: $state.is('investment.capitals')
                };
                vm.worker.postMessage({config:config, step:1 });

                vm.worker.onmessage = function(reg){                    
                    $scope.stations[reg.data.indice].lastRegisters = reg.data.lastRecord;
                    $scope.stations[reg.data.indice].averagePrice = reg.data.newRecord.averagePrice;
                    $scope.stations[reg.data.indice].minPrice = reg.data.newRecord.minPrice;
                    $scope.stations[reg.data.indice].maxPrice = reg.data.newRecord.maxPrice;
                    $scope.stations[reg.data.indice].tradeDateTime = reg.data.newRecord.tradeDateTime;
                    $scope.stations[reg.data.indice].tradeSell = reg.data.newRecord.tradeSell;
                    $scope.stations[reg.data.indice].tradeSellPrice = reg.data.newRecord.tradeSellPrice;
                    $scope.stations[reg.data.indice].tradeBuyPrice = reg.data.newRecord.tradeBuyPrice;
                    $scope.stations[reg.data.indice].tradeBuy = reg.data.newRecord.tradeBuy;
                    $scope.stations[reg.data.indice].lastPrice = reg.data.newRecord.lastPrice;
                    $scope.stations[reg.data.indice].priceVar = reg.data.newRecord.priceVar;
                    verifyChangePrices(reg.data.last, reg.data.nuevo, reg.data.id);            
                }                
            }         
        }

        function removeColor( element, color){
            setTimeout(function () {                         
                element.removeClass(color);
           }, 300);  
        }

        function verifyChangePrices(lastValue, newValue, id) {            
            var element = angular.element(document.querySelector('#' + id));            
            if (element && newValue > lastValue) {   
                element.scope().$digest();                            
                element.addClass("refresh-prices-green");                           
                removeColor(element, "refresh-prices-green");

            } else if (element && newValue < lastValue) {
                element.scope().$digest();               
                element.addClass("refresh-prices-red");                  
                removeColor(element, "refresh-prices-red");
            }
           
        }



        function update(estado){
            $scope.loading = true;
            $scope.stations = [];
            TableStationsSrv.getStationsLumina($scope.contract, $scope.ids.val1, 'EQUITY', 'B').then(function(_arrayStations){
                var arrayStations = $filter ('orderBy')(_arrayStations, 'issuer.issuerSerie');
                arrayStations.forEach(function(reg, indice){
                    var record = JSON.parse(JSON.stringify(reg));
                    reg.indice = indice;
                    reg.lastRegisters = record;
                    if (reg.feed !== null && reg.issuer !== null && reg.issuer.issuerSerie !== null) {
                        //agregamos un identificador para agregar el id a los campos
                        reg.idIssuerSerie = reg.issuer.issuerSerie.replace(/\s/g, '').replace(/\*/g, '-').replace(/\&/g, '-') + reg.feed.replace(/\s/g, '').replace(/\*/g, '-').replace(/\&/g, '-');
                    } else {
                        reg.idIssuerSerie = indice;
                    }
                });
                $scope.stations = arrayStations;
                $rootScope.statiosnTable = arrayStations;
                //Es llamado desde el evento si ha cambiado de tabs
                if(estado === 2 )
                    $rootScope.$broadcast('select-emisora-toTable-changeTab');  
                initWorkerEmisoras()
                //$timeout( initSocket(), 100000 );
            })
            .catch( function(){
                $log.info('get stations error');
                $scope.stations = [];
            } )
            .finally(function(){
                $scope.loading = false;
            });
        }

        update();
    }

    angular.module('actinver.controllers')
        .controller('tableSocketLuminaCtrl', tableSocketLuminaCtrl);


})();

(function(){
    "use strict";

    function tableStations(){


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-stations-lumina/table-stations-lumina.html',
            scope: {
                contract: '@',
                ids: '=',
                selected: '=?',
                columnsExpand: '=?',
            },
            controller: 'tableSocketLuminaCtrl',
            controllerAs: 'socket',
            // link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actTableStationsLumina', tableStations );


} )();

(function () {
    'use strict';

    tracingFormCtrl.$inject = ['$scope', 'userConfig', 'proposalsTracingSrv', 'CommonModalsSrv'];
    function tracingFormCtrl($scope, userConfig, proposalsTracingSrv, CommonModalsSrv) {
        var vm = this;
        vm.search_form = {
            finish: false,
            sent: false,
            contract: null,
            typeContractSelected: { id: "998", text: "Casa" },
            optionTypeContract:[
                { id: "998", text: "Casa" },
                { id: "999", text: "Banco" }
            ]
        };


        // Set current adviser
        vm.sadviser = userConfig.user;
    
        var d= new Date();
        d.setDate(d.getDate()-1);

        // Datepicker options
        vm.datepicker_opts = {

            isInvalidDate: function (date) {
                return (date.day() === 0 || date.day() === 6) ? true : false;
            },
            maxDate: d
        };

        // Delete properties on false
        vm.resetChilds = function (parent, child) {
            if (!$scope.model.form[parent]) {
                delete $scope.model.form[child];
            }
        };

        // Submit search form
        vm.submitSearch = function () {
            vm.search_form.finish = false;
            vm.search_form.sent = true;
            $scope.model.form = {
                scontract: ''
            };

            proposalsTracingSrv.getContractInfo( vm.search_form.contract, vm.search_form.typeContractSelected.id)
                .then(function successCallback(response) {
                    var info = response.data;
                    if(response.success){
                        if (info.numContrato !== 0) {
                            $scope.model.form.scontract = info;
                            if(vm.search_form.typeContractSelected.id==='999'){
                                $scope.model.form.scontract.origen="BANCO";                            }
                        } else {
                            $scope.model.form.scontract = '';
                        }
                    }else{
                        $scope.model.form.scontract = '';
                        CommonModalsSrv.error(response.message);
                    }                 
                }, function errorCallback(error) {
                    CommonModalsSrv.error(error.message);                    
                }).finally(function () {
                    vm.search_form.finish = true;
                    vm.search_form.sent = false;
                });

        };
    }

    angular
        .module('actinver.controllers')
        .controller('tracingFormCtrl', tracingFormCtrl);

})();
(function(){
    'use strict';

    function tracingForm(){

        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/scripts/directives/tracing-form/tracing-form.html',
            scope: {
                model: '=',
                formType: '=?'
            },
            controller: 'tracingFormCtrl',
            controllerAs: 'tracingForm'
        };
    }

    angular
        .module( 'actinver.directives' )
        .directive( 'tracingForm', tracingForm );

} )();
(function() {
    "use strict";

    TableStopLossSrv.$inject = ['$http', 'URLS'];
    function TableStopLossSrv($http, URLS ) {

        /**
        *  investment Service
        */
        function TableStopLoss(){}


        TableStopLoss.prototype.getCapitalStop = function( _contract, type ){
            return $http({
                method: 'GET',
                url: URLS.getCapitalStop + _contract + '/' + ( type || 'SL' ) + '?language=SPA',
            });
        };


        return new TableStopLoss();
    }

    angular.module('actinver.services')
        .service('TableStopLossSrv', TableStopLossSrv);
})();

(function(){
    "use strict";

    actTableOrders.$inject = ['TableStopLossSrv', 'investmentModalSrv', 'CommonModalsSrv', 'investmentSrv'];
    function actTableOrders( TableStopLossSrv, investmentModalSrv, CommonModalsSrv, investmentSrv ){

        var link = function( scope ){
            var isLoad = false;

            /** This function loads the orders of the day
            * @param {boolean}  Indicates if the function is loading
            **/
            function loadOrders( _isLoad ){
                scope.sortReverse = true;
                scope.sortType = 'subOrders.operationDate';
                scope.loading = true;

                if( isLoad !== _isLoad ){
                    isLoad = _isLoad;
                    TableStopLossSrv.getCapitalStop( scope.contract, scope.type ).then( function(_res){
                        if( _res.data.outCommonHeader.result.result === 1 ){
                            scope.orders = _res.data.outSecuritiesForStopLossQuery.issuerList;
                        }
                    } )
                    .finally(function(){
                        scope.loading = false;
                        isLoad = false;
                    });
                }
            }

            /** This function delete one order
            * @param {object}  order
            **/
            scope.delete = function( _order){
                var message = '¿Estás seguro de cancelar la orden seleccionada?';
                CommonModalsSrv.warning( message ).result.then(function() {
                    investmentSrv.deleteStopLoss( scope.contract, _order ).then(function(_res){
                        if(_res.data.outCommonHeader.result.result === 1){
                            loadOrders();
                            CommonModalsSrv.done( 'Se ha realizado la cancelación de manera exitosa.' );

                        }
                        else {
                            message = 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk';

                           CommonModalsSrv.error( message );
                        }
                    });

                });
            };


            /**
            * This assignment allows to use the function from the controller or the view
            **/
            scope.update = loadOrders;
        };

        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-stop-loss/table.html',
            scope: {
                contract : '@',
                update : '=?',
                type: '@?'
            },
            link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'tableStopLoss', actTableOrders );


} )();

(function() {
    "use strict";

    tableSocketCtrl.$inject = ['$stomp', 'URLS', '$log', '$scope', '$timeout', '$state', 'TableStationsSrv', 'investmentModalSrv', '$rootScope', '$filter', '$window'];
    function tableSocketCtrl( $stomp, URLS, $log, $scope, $timeout, $state, TableStationsSrv, investmentModalSrv, $rootScope, $filter, $window ) {
        var vm = this;
        var subscribe;
        var timeoutPromise;
        vm.indice = -1;
        vm.worker = null;  
         //objeto que contendra las confgiuraciones de los sockets
         vm.socket = {
            client: null,
            subscription: null
        };    
        
        //close the socket when the windows are refresh or closed
        $window.onbeforeunload = function(){                        
            unscribe();            
        };

        $scope.$on( 'disconnectCapitals', function() {            
            unscribe();
                });

        $scope.$watch('ids', function( _old, _new ){
            if( _old !== _new ){
                unscribe();
                update(2);
            }
        });
       
        vm.ChangeDoll = function( _station,type ){
            vm.indice = _station.indice;
            $scope.selected = _station;
            $rootScope.actionStation = {type:type, origen:'stations', station:$scope.selected, operationType: 'Casa', rand:Math.random()};
        };

        vm.viewMore = function( _station ){
            investmentModalSrv.moreInfoMarket(_station);
        };

        //recibe el vento del muñeco
        $rootScope.$on('select-emisora-toTable-cb',function(event, reg){
            searchEmisora(reg);

        });


        function unscribe() {
            if (vm.worker !== null) {
                $log.info('disconnect socket capitals2.1');
                vm.worker.postMessage({config:null, step:2 }); 
                vm.worker = null;               
            }
        }

        function removeColor( element, color){
            setTimeout(function () {                         
                element.removeClass(color);
           }, 300);  
        }

        function verifyChangePrices(lastValue, newValue, id) {            
            var element = angular.element(document.querySelector('#' + id));            
            if (element && newValue > lastValue) {   
                element.scope().$digest();                            
                element.addClass("refresh-prices-green");                           
                removeColor(element, "refresh-prices-green");

            } else if (element && newValue < lastValue) {
                element.scope().$digest();               
                element.addClass("refresh-prices-red");                  
                removeColor(element, "refresh-prices-red");
            }
           
        }

        //Seccion para configurar worker
        function createWorker(fn){            
            return new Worker(URL.createObjectURL(new Blob(['('+fn+')()'])));
        };




        var myThread = function(){               
            var intentoconexion = 0;         
            var config = null;                             
            var socket ={
                client:null
            };
            //evento que escucha al treed principal.
            onmessage = function (reg) {
                switch (reg.data.step) {
                    case 1: //open socket
                        config = reg.data.config;
                        loadResources(config.urlResource+"/bower/worker.js");                                                
                        break;
                    case 2: //close socket                        
                        if(socket.client !== null){
                            socket.client.disconnect();                            
                        }
                        break;
                    default:
                        break;
                }               
            }

            function loadResources(urlResource){
                importScripts(urlResource); 
                function init(){
                    wsConnect();                 
                }
                init();
            }

            function wsConnect() {                
                intentoconexion++;
                var _socket = new SockJS(config.url);
                socket.client = Stomp.over(_socket);
                socket.client.debug = null;
                socket.client.connect({},successWsConnect, failWsConnect);                                                            
            }

            function failWsConnect() {                            
                if( config.throwSocket && intentoconexion < 4 ){
                    setTimeout(wsConnect, 3000);                    
                }
            };

            function removeDuplicateEmisorasEndPoint(array) {
                var data = [];
                if (array) {
                    array.forEach(function (reg) {
                        if (data.indexOf(reg.issuer.issuerSerie) < 0) {
                            data.push(reg.issuer.issuerSerie);
                        }
                    });
                }
                return data;
            }

            function successWsConnect() {
                var data = removeDuplicateEmisorasEndPoint(config.emisoras);
                data.forEach(function(reg){
                    socket.client.subscribe('/topic/capitales/bmvAll/' + reg, function (payload) {
                        var data = JSON.parse(payload.body);                    
                        searchRecordInEmisora(data);                    
                    });
                });              
            };

            function searchRecordInEmisora (_payload){
                var indice =  config.emisoras.findIndex(function (_val) {
                    return _val.issuer.issuerSerie === _payload.issuer.issuerSerie && _val.feed === _payload.feed;
                });                                    
                if (indice >= 0) {                    
                    var reg = JSON.parse(JSON.stringify(config.emisoras[indice]));
                    if(reg.lastPrice > _payload.lastPrice || reg.lastPrice < _payload.lastPrice )
                        postMessage({last: reg.lastPrice, nuevo: _payload.lastPrice, id:config.emisoras[indice].idIssuerSerie+"lastPrice", lastRecord:reg, newRecord: _payload, indice:indice});
                    if(reg.tradeBuyPrice > _payload.tradeBuyPrice || reg.tradeBuyPrice < _payload.tradeBuyPrice )
                        postMessage({last: reg.tradeBuyPrice, nuevo: _payload.tradeBuyPrice, id:config.emisoras[indice].idIssuerSerie+"tradeBuyPrice",lastRecord:reg,newRecord: _payload, indice:indice});
                    if(reg.tradeSellPrice > _payload.tradeSellPrice || reg.tradeSellPrice < _payload.tradeSellPrice )
                        postMessage({last: reg.tradeSellPrice, nuevo: _payload.tradeSellPrice, id:config.emisoras[indice].idIssuerSerie+"tradeSellPrice",lastRecord:reg, newRecord: _payload, indice:indice});                                       
                    
                        config.emisoras[indice].averagePrice = _payload.averagePrice;
                        config.emisoras[indice].minPrice = _payload.minPrice;
                        config.emisoras[indice].maxPrice = _payload.maxPrice;
                        config.emisoras[indice].tradeDateTime = _payload.tradeDateTime;
                        config.emisoras[indice].tradeSell = _payload.tradeSell;
                        config.emisoras[indice].tradeSellPrice = _payload.tradeSellPrice;
                        config.emisoras[indice].tradeBuyPrice = _payload.tradeBuyPrice;
                        config.emisoras[indice].tradeBuy = _payload.tradeBuy;
                        config.emisoras[indice].lastPrice = _payload.lastPrice;
                        config.emisoras[indice].priceVar = _payload.priceVar;
                }
            };  
            
            
        }

        function initWorkerEmisoras() {            
            if (typeof (Worker) !== "undefined") {
                var BASE_PATH = (!window.location.port) ? (window.location.protocol + '//' + window.location.hostname +'/'+"asesoria" ):(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port+'/'+"asesoria");
                vm.worker = createWorker(myThread);                  
                //enviamos el array al thread                
                var config = {
                    emisoras: $scope.stations,
                    url: URLS.CapitalsWebSocket + '?access_token=' + sessionStorage.getItem("__token"),
                    urlResource:BASE_PATH,
                    throwSocket: $state.is('investment.capitals')
                };
                vm.worker.postMessage({config:config, step:1 });                
                vm.worker.onmessage = function(reg){                    
                    $scope.stations[reg.data.indice].lastRegisters = reg.data.lastRecord;
                    $scope.stations[reg.data.indice].averagePrice = reg.data.newRecord.averagePrice;
                    $scope.stations[reg.data.indice].minPrice = reg.data.newRecord.minPrice;
                    $scope.stations[reg.data.indice].maxPrice = reg.data.newRecord.maxPrice;
                    $scope.stations[reg.data.indice].tradeDateTime = reg.data.newRecord.tradeDateTime;
                    $scope.stations[reg.data.indice].tradeSell = reg.data.newRecord.tradeSell;
                    $scope.stations[reg.data.indice].tradeSellPrice = reg.data.newRecord.tradeSellPrice;
                    $scope.stations[reg.data.indice].tradeBuyPrice = reg.data.newRecord.tradeBuyPrice;
                    $scope.stations[reg.data.indice].tradeBuy = reg.data.newRecord.tradeBuy;
                    $scope.stations[reg.data.indice].lastPrice = reg.data.newRecord.lastPrice;
                    $scope.stations[reg.data.indice].priceVar = reg.data.newRecord.priceVar;
                    verifyChangePrices(reg.data.last, reg.data.nuevo, reg.data.id);            
                }                
            }         
        }



        function searchEmisora(reg) {
            if ($scope.stations && reg) {
                var register = $scope.stations.filter(function (item) {
                    return item.issuer.issuerSerie === reg.issuer.issuerSerie && item.feed === reg.feed;
                });
                if(angular.isArray(register) && register.length > 0){
                    vm.indice =register[0].indice ;
                }else{
                    vm.indice = -1;
                }

            } else {
                vm.indice = -1;
            }
        }

        function update(estado) {            
            $scope.loading = true;
            $scope.stations = [];
            TableStationsSrv.getStations($scope.contract, $scope.ids.val1).then(function (_arrayStations) {
                    var arrayStations = $filter('orderBy')(_arrayStations, 'issuer.issuerSerie');
                    arrayStations.forEach(function (reg, indice) {
                        var record = JSON.parse(JSON.stringify(reg));
                        reg.indice = indice;
                        reg.lastRegisters = record;
                        if (reg.feed !== null && reg.issuer !== null && reg.issuer.issuerSerie !== null) {
                            //agregamos un identificador para agregar el id a los campos
                            reg.idIssuerSerie = reg.issuer.issuerSerie.replace(/\s/g, '').replace(/\*/g, '-').replace(/\&/g, '-') + reg.feed.replace(/\s/g, '').replace(/\*/g, '-').replace(/\&/g, '-');
                        } else {
                            reg.idIssuerSerie = indice;
                        }
                    });
                    $scope.stations = arrayStations;
                    if (estado === 2)
                        $rootScope.$broadcast('select-emisora-toTable-changeTab-cb');
                    //create the worker
                    initWorkerEmisoras()
                })
                .catch(function (error) {
                    $log.info('get stations error');
                    $scope.stations = [];                    
                })
                .finally(function () {
                    $scope.loading = false;
                });
        }

        update();
    }

    angular.module('actinver.controllers')
        .controller('tableSocketCtrl', tableSocketCtrl);


})();

(function () {
    "use strict";

    TableStationsSrv.$inject = ['$http', 'URLS', '$q'];
    function TableStationsSrv($http, URLS, $q) {

        /**
        *  investment Service
        */
        function TableStations() { }


        TableStations.prototype.getStations = function (_contract, _queryOpt) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    //url: URLS.getCapitalsStation + _contract + '/' + _id1 + '/' + _id2 + '/0/0/1?language=SPA'
                    url: URLS.getNewCapitalsStation + _contract + '/' + _queryOpt + '/0/0/1?language=SPA&delFlag=false'
                })
                    .then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            resolve(_res.data.outContractIssuersMarketInfoQuery.marketDataTuple);
                        }
                        else {
                            reject('error');
                        }
                    });
            });
        };

        TableStations.prototype.getStationsLumina = function (_contract, _queryOpt, _instrumentType, _operationtype) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    //url: URLS.getCapitalsStation + _contract + '/' + _id1 + '/' + _id2 + '/0/0/1?language=SPA&instrumentType=' + _instrumentType + '&isLumina=true&operationType=' + _operationtype
                    url: URLS.getNewCapitalsStation + _contract + '/' + _queryOpt + '/0/0/1?language=SPA&delFlag=false&isLumina=true&instrumentType=' + _instrumentType + '&isLumina=true&operationType=' + _operationtype
                })
                    .then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            resolve(_res.data.outContractIssuersMarketInfoQuery.marketDataTuple);
                        }
                        else {
                            reject('error');
                        }
                    });
            });
        };

        TableStations.prototype.getOptionsTypeOperation = function ( ) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getOptionsTypeOperation + '?language=SPA'
                })
                    .then(function (_res) {
                        if (_res.data.outCommonHeader.result.result === 1) {
                            resolve(_res.data.result);
                        }
                        else {
                            reject('error');
                        }
                    });
            });
        };


        return new TableStations();
    }

    angular.module('actinver.services')
        .service('TableStationsSrv', TableStationsSrv);
})();

(function(){
    "use strict";

    function tableStations(){


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/table-stations-sockets/table-socket.html',
            scope: {
                contract: '@',
                ids: '=',
                selected: '=?',
                columnsExpand: '=?',
            },
            controller: 'tableSocketCtrl',
            controllerAs: 'socket',
            // link : link,
        };


    }


    angular.module( 'actinver.directives' )
    .directive( 'actTableStationsSocket', tableStations );


} )();

(function () {
    "use strict";

    userDataCtrl.$inject = ['$rootScope', '$scope', 'Auth', 'userConfig', 'CommonModalsSrv', 'loginSrvc'];
    function userDataCtrl($rootScope, $scope, Auth, userConfig, CommonModalsSrv, loginSrvc) {
        var udc = this, data = userConfig.user;
        udc.user = {
            name: data.name,
            mail: data.mail
        };

        udc.promotorA2K={
            list:[],
            selected: null
        };

        udc.usuarioFix={
        list:[],
            selected: null
        };

        function map(data) {
            if (angular.isArray(data)) {
                var map = data.map(function (reg) {
                    return {
                        id: reg.toString(),
                        text: reg.toString()
                    };
                });
                return map;
            }
            return data;
        }

        function inicializar (){
            loginSrvc.makeDataUser().then(function success(response){
                if(response.success){
                    udc.promotorA2K.list = map(response.user.userSession.adviserNumberA2kList);
                    udc.promotorA2K.selected = {
                        id: response.user.userSession.adviserNumberA2k,
                        text: response.user.userSession.adviserNumberA2k
                    };

                    udc.usuarioFix.list = map(response.user.userSession.userIDFixList);
                    udc.usuarioFix.selected = {
                        id: response.user.userSession.userIDFix,
                        text: response.user.userSession.userIDFix
                    };
                }
            }).catch(function failed(error){
                CommonModalsSrv.error(error.messagge);
            });
        }

        udc.changePromotorA2K = function (lastValue, newValue) {
            udc.promotorA2K.selected = {
                id: lastValue.id,
                text: lastValue.text
            };

            CommonModalsSrv.warning("¿Está seguro de cambiar al Promotor A2K:" + newValue.text +" para operar?", function () {
                loginSrvc.saveAdviserNumber(2, newValue.text).then(function success(reponse) {
                    if (reponse.success) {
                        udc.promotorA2K.selected = {
                            id: newValue.id,
                            text: newValue.text
                        };
                        CommonModalsSrv.done(reponse.message);
                    } else {
                        CommonModalsSrv.error(reponse.message);
                    }
                }).catch(function error(error) {
                    CommonModalsSrv.error(error.message);
                });

            });
        };

        udc.changeUsuarioFix = function (lastValue, newValue) {
            udc.usuarioFix.selected = {
                id: lastValue.id,
                text: lastValue.text
            };
            CommonModalsSrv.warning("¿Está seguro de cambiar al Usuario Fix: " + newValue.text + " para operar?", function () {
                loginSrvc.saveAdviserNumber(1, newValue.text).then(function success(reponse) {
                    if (reponse.success) {
                        udc.usuarioFix.selected = {
                            id: newValue.id,
                            text: newValue.text
                        };
                        CommonModalsSrv.done(reponse.message);
                    } else {
                        CommonModalsSrv.error(reponse.message);
                    }
                }).catch(function error(error) {
                    CommonModalsSrv.error(error.message);
                });
            });
        };

        udc.logout = function () {
            $scope.$emit('closeSocketNotificationLumina', { tipo: 'Cerrar Socket' });
            $rootScope.$broadcast('close-socket-ipc-status');
            $rootScope.$broadcast('close-socket-last-news');
            Auth.logout();
        };
        inicializar();
    }

    angular.module('actinver.controllers')
        .controller('userDataCtrl', userDataCtrl);

})();

(function(){
    "use strict";

    function userData(){


        return {
            restrict: 'EA',
            replace: true,
            templateUrl: '/scripts/directives/userData/userData.html',
            link : function() {

            }, 
            controller : "userDataCtrl",
            controllerAs : "udc"
        };


    }

    angular.module( 'actinver.directives' )
    .directive( 'userData', userData );


} )();

(function () {
    "use strict";

    dinnBookCtrl.$inject = ['dinnSrv', '$stateParams', 'PresentationSrv', '$uibModal', '$state'];
    function dinnBookCtrl(dinnSrv, $stateParams, PresentationSrv, $uibModal, $state) {
        var vm = this;
        vm.informationDate;

        function setup() {
            vm.informationDate = $stateParams.informationDate;
            console.log('vm.informationDate',vm.informationDate);
            if(vm.informationDate === null){
                $state.go('dinn.show');
            }else{
                getDCDocumentQueryByClient(vm.informationDate.clientId);
                hardCode();
            }
        }

        function hardCode() {
            vm.informationDate.contactType ="Visita a CF";
            if (vm.informationDate.branchID === "0") {
                vm.informationDate.brancheName = "Julio Verne";
            } else if (vm.informationDate.branchID === "1") {
                vm.informationDate.brancheName = "Montes Urales";
            } else if (vm.informationDate.branchID === "2") {
                vm.informationDate.brancheName = "Corporativo Santa Fe";
            } else if(vm.informationDate.branchID === "-1"){
                vm.informationDate.contactType ="Llamada" || vm.informationDate.phoneNumber !== null || vm.informationDate.otherPhoneNumber !== null;
            }

            if (vm.informationDate.clientStatus === 1) {
                vm.informationDate.statusType = "Registrado";
            } else if (vm.informationDate.clientStatus === 2) {
                vm.informationDate.statusType = "Cita agendada";
            }else if (vm.informationDate.clientStatus === 3) {
                vm.informationDate.statusType = "Llamada agendada";
            }

            var date = new Date(vm.informationDate.interviewTime);
            var hours = date.getHours() === 0 ? '00' : date.getHours();
            var minute = date.getMinutes() === 0 ? '00' : date.getMinutes();
            vm.informationDate.dateHour = hours + ':' + minute+ ' Hrs.';
        }

        vm.getDocument = function (_id) {
            PresentationSrv.getPresentationsFile(_id).then(function () { });
        };

        function getDCDocumentQueryByClient(_clientId) {
            dinnSrv.getDCDocumentQueryByClient(_clientId)
                .then(function (_reponse) {
                    if (Array.isArray(_reponse)) {
                        vm.documentInfo = _reponse;
                    }
                }).catch(function () {});
        }

        vm.dCDocumentQuery = function (_documentID) {
            dinnSrv.getDCDocumentQuery(_documentID.documentID)
                .then(function (_reponse) {
                    var base64 = atob(_reponse);

                    if (base64.includes('data:application/pdf;base64')) {
                        var dlnk = document.getElementById('dwnldLnk');
                        dlnk.href = base64;
                        dlnk.click();
                    } else if (base64.includes('data:image/jpeg;base64')) {
                        $uibModal.open({
                            templateUrl: '/app/dinn/adviser/dinnImage.html',
                            controller: 'dinnImageCtrl',
                            controllerAs: 'image',
                            size: 'lg',
                            resolve: {
                                dataResolve: function () {
                                    return { image: base64, title: _documentID.documentTypeDesc };
                                }
                            }
                        });
                    }
                }).catch(function () { });
        };

        setup();
    }

    angular
        .module('actinver.controllers')
        .controller('dinnBookCtrl', dinnBookCtrl);

})();


(function () {
    "use strict";

    dinnCtrl.$inject = ['dinnSrv', '$filter', '$state'];
    function dinnCtrl(dinnSrv, $filter, $state) {

        var vm = this;

        function setup() {
            vm.getDCScheduleQueryByDate();
        }

        vm.getDCScheduleQueryByDate = function () {
            if (typeof vm.dateCalendar === "undefined") {
                vm.dateCalendar = new Date();
            }

            vm.informationData = [];
            var interviewDate = $filter('date')(vm.dateCalendar, 'yyyy-MM-dd');
            var operationType = "2";

            dinnSrv.getDCScheduleQueryByDateDetails(interviewDate, operationType)
                .then(function (_response) {
                    vm.informationData = $filter('orderBy')(_response,'interviewTime');
                }).catch(function () {
                    vm.informationData = [];
                });
        };

        vm.getDetail = function (_informationDate) {
            $state.go("dinn.book", { informationDate: _informationDate });
        };

        vm.getType = function (_branchID){
            var dateType;
            var branch = _branchID.branchID;
            if(branch === "0"  || branch === "1"  || branch === "2" ){
                dateType="Visita a CF";
            }else if (branch === '-1' || branch.phoneNumber !== null || branch.otherPhoneNumber !== null){
                dateType="Llamada ";
            }

            return dateType;
            
        };

        setup();
    }

    angular
        .module('actinver.controllers')
        .controller('dinnCtrl', dinnCtrl);

})();
(function () {
    "use strict";

    dinnImageCtrl.$inject = ['dataResolve', '$uibModalInstance'];
    function dinnImageCtrl(dataResolve, $uibModalInstance) {
        var vm = this;

        function setup() {
            vm.image = dataResolve.image;
            vm.title = dataResolve.title;
        }

        vm.close = function () {
            $uibModalInstance.dismiss();
        };

        setup();
    }

    angular.module('actinver.controllers')
        .controller('dinnImageCtrl', dinnImageCtrl);

})();
(function () {
    "use strict";

    dinnSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv'];
    function dinnSrv(URLS, $q, $http, ErrorMessagesSrv) {

        function dinnSrv() { }

        dinnSrv.prototype.getDCScheduleQuery = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCScheduleQuery,
                    params: {
                        interviewNumber: _params.interviewNumber,
                        clientId: _params.clientId,
                        registryType: 2,
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCScheduleQuery.scheduleInfo.otherPhoneNumber);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCDocumentQuery = function (_documentID) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCDocumentQuery + _documentID,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCDocumentQuery.documentInfo[0].arrayFile);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCDocumentQueryByClient = function (_clientId) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCDocumentQueryByClient + _clientId,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCDocumentQueryByClient.documentInfo);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve(response.data.outCommonHeader.result.messages[0].responseMessage);
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCScheduleQueryByDate = function (_interviewDate, _operationType) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCScheduleQueryByDate + _interviewDate + '/' + _operationType,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCScheduleQueryByDate);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCScheduleQueryByDateDetails = function (_interviewDate, _operationType) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCScheduleQueryByDateDetails + _interviewDate + '/' + _operationType,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    resolve(response.data.result);
                    /*if (typeof response.data.result !== 'undefined' && response.data.result !== null) {
                        resolve(response.data.result);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }*/
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCInvestmentProspectQueryById = function (_clientId) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCInvestmentProspectQueryById + _clientId,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCInvestmentProspectQueryById);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        dinnSrv.prototype.getDCInvestmentProspectQuery = function (_email) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getDCInvestmentProspectQuery,
                    params: {
                        language: 'SPA',
                        email: _email
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outDCInvestmentProspectQuery);
                    } else if (response.data.outCommonHeader.result.result === 2) {
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };

        return new dinnSrv();
    }

    angular
        .module('actinver.services')
        .factory('dinnSrv', dinnSrv);
})();
(function () {
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig($stateProvider) {

        $stateProvider

            .state('dinn', {
                templateUrl: '/app/dinn/adviser/dinn.html',
                url: '/dinn',
                parent: 'app',
                ncyBreadcrumb: {
                    label: 'Dinn',
                    parent: 'app.dashboard'
                },
                redirectTo: 'dinn.show',
            })
            .state('dinn.show', {
                templateUrl: '/app/dinn/adviser/dinnShow.html',
                url: '/dinnShow',
                controller: 'dinnCtrl',
                controllerAs: 'show',
                parent: 'dinn',
                ncyBreadcrumb: {
                    label: 'Citas Dinn',
                    parent: 'dinn'
                }
            })
            .state('dinn.book', {
                templateUrl: '/app/dinn/adviser/dinnBook.html',
                url: '/dinnBook',
                controller: 'dinnBookCtrl',
                controllerAs: 'book',
                parent: 'dinn',
                ncyBreadcrumb: {
                    label: 'Información citas',
                    parent: 'dinn.show'
                },
                params: {
                    informationDate: null
                }
            });
    }

    angular.module('actinver')
        .config(routerProviderConfig);

})();

( function(){
    "use strict";

    pendingModalsSrv.$inject = ['$uibModal'];
    function pendingModalsSrv( $uibModal ) {

        var api  = {};

        /** Add reason**/
        api.addReason = function( _title, _params ){
            var modal = $uibModal.open({
                templateUrl: '/scripts/modals/views/pending/reason.html',
                size: 'md',
                controller: 'addPendingModalCtrl',
                controllerAs: 'pending',
                resolve:{
                    params:function() {
                        return _params;
                    },
                    title: function(){
                        return _title;
                    }
                }
                });

            return modal;
        };

        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'pendingModalsSrv', pendingModalsSrv );


})();

( function () {
    "use strict";

    pendingOperationsHistoric.$inject = ['pendingOperationsAdviser', 'CommonModalsSrv', '$state', 'loginSrvc', 'pendingModalsSrv', '$timeout'];
    function pendingOperationsHistoric (  pendingOperationsAdviser, CommonModalsSrv, $state, loginSrvc, pendingModalsSrv, $timeout ) {
        var vm = this;

        function setup () {
            getRol();
        }
        function getRol() {
            vm.asesor = false;
            vm.cat = false;

            loginSrvc.makeDataUser().then( function( _response){

            _response.user.scope.forEach(function( _element ){
                if  ( _element === 'ASESOR'){
                    vm.asesor = true;
                } 
                if (_element === 'CAT') {
                    vm.cat = true; 
                }
            });
 
            init ();
            });
        }
        
        function init (){ 
            if (vm.asesor && vm.cat) {
                vm.selectFilter = '3';
                getOpHistoric(3);
            }else{
                if(vm.asesor) { 
                    vm.selectFilter = '1';
                    getOpHistoric(1);
                 }
                 if(vm.cat) { 
                    vm.selectFilter = '3';
                    getOpHistoric(3);
                 }

            }
            
        }

        function selectPo(id, operacion){
            vm.operacion = operacion;
            var _id = parseInt(id);
            var _index = vm.po.indexOf(_id);
            if (_index > -1) {
                vm.po.splice(_index, 1);
            }else{
                    vm.po.push(_id);
            }
            if (vm.po.length === 0) {vm.selectAll    = false; }
        }

        vm.checkAll = function() { 
            vm.po = [];
            angular.forEach(vm.pendingOp, function( val, key) {
                
                if (vm.selectAll) {
                    if (val.stateID === "0" || val.stateID === "9") {
                        vm.modeIdPo[key] = vm.selectAll;
                        selectPo(val.operationID,val.moduleDescription.description);
                    }
                } else {
                    vm.modeIdPo[key] = vm.selectAll;
                }
            });
        };

        vm.getOpHistoricFilter = function ( _type ){
            getOpHistoric( _type );
        };

        vm.columns = [
            {
                name : 'operationID',
                value : 'Id'
            },
            {
                name : 'statusID',
                value : 'Estatus'
            },
            {
                name : 'JSON.parse(moduleDescription)',
                value : 'Operación'
            },
            {
                name : 'instructionDate',
                value : 'Fecha'
            }
        ];

        vm.selectPo = selectPo;
        vm.showDetail = showDetails;
        vm.searchPO = '';
        vm.detail;
        vm.pendingOp = [];
        vm.modeIdPo = [];
        vm.show;
        vm.disabled = false;
        vm.pageSize = '20';
        vm.currentPage = 1;
        vm.sortType     = 'operationID';
        vm.sortReverse  = true;
        vm.po = [];
        vm.sendOperation = sendOperation;
        vm.removeItemsPo = removeItemsPo;
       

        function showDetails(id){
            vm.pendingOp[id].show = vm.pendingOp[id].show ? false : true;
            vm.pendingOp[id].icon = vm.pendingOp[id].icon === '+' ? '-' : '+';
            vm.detail = vm.pendingOp[id];
        }

        function removeItemsPo(){
            vm.po           = [];
            vm.modeIdPo     = {};
            vm.selectAll    = false;
            vm.disabled     = false;
            vm.operacion    = '';
        }


        function getOpHistoric( _type ){
            pendingOperationsAdviser.getOperationsHistoric( _type )
                .then(successPO)
                .catch( errorPo );

                function successPO(response){
    
                    if (response.response.data.outEBPendingOpQuery !== null) { 
                        var _pendingOperations = response.response.data.outEBPendingOpQuery.operationList.operation;
                         (response.response.data.outEBPendingOpQuery.operationList.operation.length === 0 ) ? vm.data = true : vm.data = false;
                        angular.forEach(_pendingOperations,function(value,key){
                            try { 
                                var obj = JSON.parse(_pendingOperations[key].operation);
                                _pendingOperations[key].operation = obj;
                             }
                            catch(err) { 
                                _pendingOperations[key].operation = {}; }
                                _pendingOperations[key].show = false;
                                _pendingOperations[key].icon = '+';
                                _pendingOperations[key].key = key;
                        });
                        vm.pendingOp = _pendingOperations;
                    }else {
                        vm.data = true;
                    }   
    
                }

            function errorPo (  ) {
                //CommonModalsSrv.warning( error.responseMsg );
            }
        }

        function sendOperation( typeParam ){
            
                        var idString = angular.toJson(vm.po);
                        idString = idString.replace('[','');
                        idString = idString.replace(']','');
            
                        var _params = {
                            operationID     : idString,
                            rejectionReason : vm.operacion,
                            language        : 'SPA'
                        };
                        if (typeParam === 'reject'){
                            var rejects = [];
                            if(vm.po.length > 1){
                                vm.nameOperation = "Otro";
                            } else {
                                vm.nameOperation = vm.operacion;
                            }
                            pendingOperationsAdviser.cancelation( vm.nameOperation ).then( function ( id ) {
                                _params.rejectionReason = id;
                                //vm.cancelation = reasons.CATALOG[id].items;
                                pendingModalsSrv.addReason('Agregar un Motivo', _params ).result.then(function( _response ){

                                    if ( vm.nameOperation === "Otro" ){
                                        angular.forEach(vm.po, function(id){
                                            rejects.push({"operationID":id,"rejectionReason":_response.description,"idRejection":_response.id});
                                        });
                                    } else {
                                        rejects.push({"operationID":vm.po[0],"rejectionReason":_response.description,"idRejection":_response.id});
                                    }
                                    _params = {
                                        pendingReject   : JSON.stringify(rejects),
                                        language        : 'SPA'
                                    };
                                    vm.send(_params, typeParam);
                                });
                            });
                            
                            
                        }
                    }

                    vm.send = function( _params, typeParam ){
                        vm.nameAndId = [];
                        vm.po.forEach(function(id){
                        vm.pendingOp.forEach(function(item){
                            if (id === item.operationID){
                                var temp = {
                                      'id' : id,
                                      'tipoOperacion' : item.moduleDescription 
                                };
                                vm.nameAndId.push(temp); 
                            }
                        });
                    });
            
                        pendingOperationsAdviser.sendPendingOperations( _params, typeParam )
                        .then(successSend)
                        .catch(errorSend);
                        
                    function successSend(response){
                        var info = JSON.parse($sessionStorage.user);
                        var enviroment = info.enviroment;

                        if (typeParam === 'reject'){                           
                            vm.data = response.response.outAdviserPendingOpsModification.operationsDetails;
                        }else {
                            try{
                                if (response.response.outAdviserPendingOpsExecution.operationsDetails){
                                    vm.data = response.response.outAdviserPendingOpsExecution.operationsDetails;
                                }
                                
                            }catch (otro){
                                vm.data = response;
                            } 
                        }
                        if(response.status){
                            $state.go('pending-operations-adviser-result',{poResult: vm.data ,typeOperation:typeParam, operations : vm.nameAndId, views: 'historic'});
                        }else{ 
                            CommonModalsSrv.error( response.responseMessage );
                        }
                    }
            
                    function errorSend(){}
            
                    removeItemsPo();
                    };

        
        vm.primero = 1;
        vm.preview = function(){
            vm.expand();
            vm.primero = 0; 
            $timeout(function() {
                vm.primero = 1;
                var el = document.getElementById('segundo');
                angular.element(el).triggerHandler('click');
            }, 0);  
        };

        vm.expand = function () {
            for(var i = (vm.currentPage * vm.pageSize) - vm.pageSize ; i < (vm.pendingOp.length || vm.currentPage * vm.pageSize) ; i++ ){
                if (vm.pendingOp[i].icon === '+'){
                    showDetails(i);
                }  
            }
        };

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'pending-operations-historic', pendingOperationsHistoric );

})();
(function(){
    "use strict";
    resultPendingOperations.$inject = ['$state', '$stateParams'];
    angular
        .module( 'actinver.controllers' )
        .controller( 'pending-operations-adviser-result.controller', resultPendingOperations );

    function resultPendingOperations( $state, $stateParams ){
        var vm = this;
        vm.result;
        vm.show;
        vm.showDetail = showDetails;
        vm.typeOperation = $stateParams.typeOperation === 'approve' ? 'Aprobación' : 'Rechazo';
        var _resultPO = $stateParams.poResult;
        vm.nameoperation = $stateParams.operations;
        vm.views = $stateParams.views;

        validateResult();

        function validateResult(){
            if(_resultPO === null){
                $state.go('pending-operations-adviser');
            }else{
                try {
                    if (_resultPO.response.outCommonHeader.result.result === 3){
                     vm.result = [];
                     
                     var obj = {};
                     obj.message = {};
                     obj.message.message = _resultPO.response.result;
                     obj.message.estatus = _resultPO.response.outCommonHeader.result.messages[0].responseSystemCode;
                     obj.message.tipoOperacion = _resultPO.response.outCommonHeader.result.messages[0].responseMessage;
                     obj.show = false;
                     obj.icon = '+';
                     obj.text = 'Más Información';
                     vm.result.push(obj);
                    }
                } catch (otro){
                    var _pendingOperations = _resultPO;
                    angular.forEach(_pendingOperations,function(value,key){
                        if (vm.typeOperation === 'Aprobación') { _pendingOperations[key].message = JSON.parse(_pendingOperations[key].message);}
                        if (vm.typeOperation === 'Rechazo') {
                            var temp = _pendingOperations[key].message;
                            _pendingOperations[key].message = {}; 
                            _pendingOperations[key].message.message = temp;
                            (value.successFlag)?(_pendingOperations[key].message.estatus='Éxito'):(_pendingOperations[key].message.estatus='Error');
                            vm.nameoperation.forEach(function(id){
                                if(id.id === value.operationID) {
                                    _pendingOperations[key].message.tipoOperacion = id.tipoOperacion.description;
                                }
                            });
                    
                        }
                        _pendingOperations[key].show = false;
                        _pendingOperations[key].icon = '+';
                        _pendingOperations[key].text = 'Más Información';
                        _pendingOperations[key].key = key;
                    });
                    vm.result = _pendingOperations;
                }
                
            }
        }

        function showDetails(id){ 
            try {
                    vm.result[id].show = vm.result[id].show ? false : true;
                    vm.result[id].icon = vm.result[id].icon === '+' ? '-' : '+';
                    vm.result[id].text = vm.result[id].text === 'Más Información' ? 'Cerrar' : 'Más Información';
                    vm.detail = vm.result[id];
            }catch (error){
                vm.result[0].show = vm.result[0].show ? false : true;
                vm.result[0].icon = vm.result[0].icon === '+' ? '-' : '+';
                vm.result[0].text = vm.result[0].text === 'Más Información' ? 'Cerrar' : 'Más Información';
                vm.detail = vm.result[0];
            }
                
        }

        vm.Change = function (){
            if (vm.views === 'operations'){
                $state.go('pending-operations-adviser');
            }else{
                $state.go('pending-operations-historic');
            }
        };
    }

})();
( function () {
    "use strict";

    pendingOperationsSent.$inject = ['pendingOperationsAdviser', '$timeout'];
    function pendingOperationsSent ( pendingOperationsAdviser, $timeout ) {
        var vm = this;

        function setup () {
            getOp();
        }

        vm.po = [];
        vm.columns = [
            {
                name : 'operationID',
                value : 'Id'
            },
            {
                name : 'statusID',
                value : 'Estatus'
            },
            {
                name : 'JSON.parse(moduleDescription)',
                value : 'Operación'
            },
            {
                name : 'instructionDate',
                value : 'Fecha'
            }
        ];
        vm.showDetail = showDetails;
        vm.searchPO = '';
        vm.detail;
        vm.pendingOp = [];
        vm.modeIdPo = [];
        vm.show;
        vm.disabled = false;
        vm.pageSize = '20';
        vm.currentPage = 1;
        vm.sortType     = 'operationID';
        vm.sortReverse  = true;
    
        function showDetails(id){
            vm.pendingOp[id].show = vm.pendingOp[id].show ? false : true;
            vm.pendingOp[id].icon = vm.pendingOp[id].icon === '+' ? '-' : '+';
            vm.detail = vm.pendingOp[id];
        }
        vm.primero = 1;
        vm.preview = function(){
            vm.expand();
            vm.primero = 0; 
            $timeout(function() {
                vm.primero = 1;
                var el = document.getElementById('segundo');
                angular.element(el).triggerHandler('click');
            }, 0);  
        };

        vm.expand = function () {
            for(var i = (vm.currentPage * vm.pageSize) - vm.pageSize ; i < (vm.pendingOp.length || vm.currentPage * vm.pageSize) ; i++ ){
                if (vm.pendingOp[i].icon === '+'){
                    showDetails(i);
                }  
            }
        };


        function getOp(){
            pendingOperationsAdviser.getOperationsSent()
                .then(successPO)
                .catch( errorPo );

                function successPO(response){
    
                    if (response.response.data.outEBPendingOpQuery !== null) { 
                        var _pendingOperations = response.response.data.outEBPendingOpQuery.operationList.operation;
                         (response.response.data.outEBPendingOpQuery.operationList.operation.length === 0 ) ? vm.data = true : vm.data = false;
                        angular.forEach(_pendingOperations,function(value,key){
                            try { 
                                var obj = JSON.parse(_pendingOperations[key].operation);
                                _pendingOperations[key].operation = obj;
                             }
                            catch(err) { 
                                _pendingOperations[key].operation = {}; }
        
                            _pendingOperations[key].show = false;
                            _pendingOperations[key].icon = '+';
                            _pendingOperations[key].key = key;
        
                        });
                        vm.pendingOp = _pendingOperations;
                    }else {
                        vm.data = true;
                    }
                    
    
                }

            function errorPo (  ) {
                //CommonModalsSrv.warning( error.responseMsg );
            }
        }

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'pending-operations-sent-ctrl', pendingOperationsSent );

})();
( function () {
    "use strict";

    pendingOperations.$inject = ['pendingOperationsAdviser', 'CommonModalsSrv', '$state', 'loginSrvc', 'pendingModalsSrv', '$timeout', '$sessionStorage'];
    function pendingOperations ( pendingOperationsAdviser, CommonModalsSrv, $state, loginSrvc, pendingModalsSrv, $timeout,  $sessionStorage ) {
        var vm = this;

        function setup () {
            getRol();
            init();
        }

        vm.po = [];
        vm.columns = [
            {
                name : 'operationID',
                value : 'Id'
            },
            {
                name : 'statusID',
                value : 'Estatus'
            },
            {
                name : 'JSON.parse(moduleDescription)',
                value : 'Operación'
            },
            {
                name : 'instructionDate',
                value : 'Fecha'
            }
        ];
        vm.selectPo = selectPo;
        vm.showDetail = showDetails;
        vm.removeItemsPo = removeItemsPo;
        vm.searchPO = '';
        vm.detail;
        vm.pendingOp = [];
        vm.modeIdPo = [];
        vm.show;
        vm.disabled = false;
        vm.pageSize = '20';
        vm.currentPage = 1;
        vm.sortType     = 'operationID';
        vm.sortReverse  = true;
        vm.sendOperation = sendOperation;

        function getRol() {
            vm.asesor = false;
            vm.cat = false;

            loginSrvc.makeDataUser().then( function( _response){

            _response.user.scope.forEach(function( _element ){
                if  ( _element === 'ASESOR'){
                    vm.asesor = true;
                } 
                if (_element === 'CAT') {
                    vm.cat = true; 
                }
            });
 
            init ();
            });
        }
        
        function init (){ 
            if (vm.asesor && vm.cat) {
                vm.selectFilter = '3';
                getOp(3);
            }else{
                if(vm.asesor) { 
                    vm.selectFilter = '1';
                     getOp( 1 );
                 }
                 if(vm.cat) { 
                    vm.selectFilter = '3';
                     getOp( 3 );
                 }

            }
            
        }
       

        vm.getAsesoresFilter = function ( _type ){
            removeItemsPo();
            getOp( _type );
        };

        vm.getCfFilter = function ( _type ) {
            removeItemsPo();
            getOp( _type );
        };

        vm.getCatFilter = function ( _type ){
            removeItemsPo();
            getOp( _type );

        };

        function selectPo(id, operacion){
            vm.operacion = operacion;
            var _id = parseInt(id);
            var _index = vm.po.indexOf(_id);
            if (_index > -1) {
                vm.po.splice(_index, 1);
            }else{
                    vm.po.push(_id);
            }
            if (vm.po.length === 0) {vm.selectAll    = false; }
        }

        
        vm.checkAll = function() {
            vm.po = [];
            angular.forEach(vm.pendingOp, function( val, key) {
                vm.modeIdPo[key] = vm.selectAll;
                if (vm.selectAll) {
                    selectPo(val.operationID,val.moduleDescription.description);
                }
            });
        };

        function removeItemsPo(){
            vm.po           = [];
            vm.modeIdPo     = {};
            vm.selectAll    = false;
            vm.disabled     = false;
            vm.operacion    = '';
        }
        
        vm.primero = 1;
        vm.preview = function(){
            vm.expand();
            vm.primero = 0; 
            $timeout(function() {
                vm.primero = 1;
                var el = document.getElementById('segundo');
                angular.element(el).triggerHandler('click');
            }, 0);  
        };

        vm.expand = function () {
            for(var i = (vm.currentPage * vm.pageSize) - vm.pageSize ; i < (vm.pendingOp.length || vm.currentPage * vm.pageSize) ; i++ ){
                if (vm.pendingOp[i].icon === '+'){
                    showDetails(i);
                }  
            }
        };

        vm.send = function( _params, typeParam ){
            vm.nameAndId = [];
            vm.po.forEach(function(id){
            vm.pendingOp.forEach(function(item){
                if (id === item.operationID){
                    var temp = {
                          'id' : id,
                          'tipoOperacion' : item.moduleDescription 
                    };
                    vm.nameAndId.push(temp); 
                }
            });
        });

            pendingOperationsAdviser.sendPendingOperations( _params, typeParam )
            .then(successSend)
            .catch(errorSend);
            
        function successSend(response){
            var info = JSON.parse($sessionStorage.user);
            var enviroment = info.enviroment;
            if (typeParam === 'reject'){            
                vm.data = response.response.outAdviserPendingOpsModification.operationsDetails;
            }else {
                try {
                    if (response.response.outAdviserPendingOpsExecution.operationsDetails) {                     
                        vm.data = response.response.outAdviserPendingOpsExecution.operationsDetails;
                    }
                } catch (otro) {
                    vm.data = response;
                }
            }
            if(response.status){
                $state.go('pending-operations-adviser-result',{poResult: vm.data ,typeOperation:typeParam, operations : vm.nameAndId, views: 'operations' });
            }else{ 
                CommonModalsSrv.error( response.responseMessage );
            }
        }

        function errorSend(){}

        removeItemsPo();
        };



        function sendOperation( typeParam ){

            var idString = angular.toJson(vm.po);
            idString = idString.replace('[','');
            idString = idString.replace(']','');

            var _params = {
                operationID     : idString,
                rejectionReason : vm.operacion,
                language        : 'SPA'
            };
            if (typeParam === 'reject'){
                var rejects = [];
                if(vm.po.length > 1){
                    vm.nameOperation = "Otro";
                } else {
                    vm.nameOperation = vm.operacion;
                }
                pendingOperationsAdviser.cancelation( vm.nameOperation ).then( function ( id ) {
                    _params.rejectionReason = id;
                    //vm.cancelation = reasons.CATALOG[id].items;
                    pendingModalsSrv.addReason('Agregar un Motivo', _params ).result.then(function( _response ){

                        if ( vm.nameOperation === "Otro" ){
                            angular.forEach(vm.po, function(id){
                                rejects.push({"operationID":id,"rejectionReason":_response.description,"idRejection":_response.id});
                            });
                        } else {
                            rejects.push({"operationID":vm.po[0],"rejectionReason":_response.description,"idRejection":_response.id});
                        }
                        _params = {
                            pendingReject   : JSON.stringify(rejects),
                            language        : 'SPA'
                        };
                        vm.send(_params, typeParam);
                    });
                });
                
                
            }else {
                vm.send(_params, typeParam);
            }
        }

        function showDetails(id){
            vm.pendingOp[id].show = vm.pendingOp[id].show ? false : true;
            vm.pendingOp[id].icon = vm.pendingOp[id].icon === '+' ? '-' : '+';
            vm.detail = vm.pendingOp[id];
        }


        function getOp( _type ){
            pendingOperationsAdviser.getOperations( _type )
                .then(successPO)
                .catch( errorPo );

                function successPO(response){
    
                    if (response.response.data.outEBPendingOpQuery !== null) { 
                        var _pendingOperations = response.response.data.outEBPendingOpQuery.operationList.operation;
                         (response.response.data.outEBPendingOpQuery.operationList.operation.length === 0 ) ? vm.data = true : vm.data = false;
                        angular.forEach(_pendingOperations,function(value,key){
                            try { 
                                var obj = JSON.parse(_pendingOperations[key].operation);
                                _pendingOperations[key].operation = obj;
                             }
                            catch(err) { 
                                _pendingOperations[key].operation = {}; }
        
                            _pendingOperations[key].show = false;
                            _pendingOperations[key].icon = '+';
                            _pendingOperations[key].key = key;
        
                        });
                        vm.pendingOp = _pendingOperations;
                    }else {
                        vm.data = true;
                    }
                    
    
                }

            function errorPo (  ) {
                //CommonModalsSrv.warning( error.responseMsg );
            }
        }

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'pending-operations-adviser.controller', pendingOperations );

})();
( function(){
    'use strict';

    routerProviderConfig.$inject = ['$stateProvider'];
    function routerProviderConfig ( $stateProvider ){

        $stateProvider

            .state('pending-operations', {
                templateUrl: '/app/pending-operations/adviser/pending-operation.html',
                parent: 'app',
                url: '/pending-operations',
                ncyBreadcrumb: {
                    label: 'Operaciones Pendientes',
                    parent: 'app.dashboard'
                },
                redirectTo: 'received',
            })

            .state('received', {
                templateUrl: '/app/pending-operations/adviser/pending-operations-received.html',
                parent: 'pending-operations',
                url: '/received',
                ncyBreadcrumb: {
                    label: 'Recibidas',
                    parent: 'pending-operations'
                },
                redirectTo: 'pending-operations-adviser',
            })

            .state('sent', {
                templateUrl: '/app/pending-operations/adviser/pending-operations-sent.html',
                parent: 'pending-operations',
                url: '/sent',
                controller: 'pending-operations-sent-ctrl',
                controllerAs: 'poCtrl',
                ncyBreadcrumb: {
                    label: 'Enviadas',
                    parent: 'pending-operations'
                }
            })

            .state('pending-operations-adviser', {
                templateUrl: '/app/pending-operations/adviser/pending-operations.html',
                parent: 'received',
                controller: 'pending-operations-adviser.controller',
                controllerAs: 'poCtrl',
                url: '/pending-operations-adviser',
                ncyBreadcrumb: {
                    label: 'Operaciones Pendientes',
                    parent: 'received'
                }
            })
            .state('pending-operations-historic', {
                templateUrl: '/app/pending-operations/adviser/historic.html',
                parent: 'received',
                controller: 'pending-operations-historic',
                controllerAs: 'poCtrl',
                url: '/historic',
                ncyBreadcrumb: {
                    label: 'Historico',
                    parent: 'received'
                }
            })
            .state('pending-operations-adviser-result', {
                templateUrl: '/app/pending-operations/adviser/pending-operations-result.html',
                parent: 'app',
                controller: 'pending-operations-adviser-result.controller',
                controllerAs: 'porCtrl',
                url: '/pending-operations-adviser-result',
                ncyBreadcrumb: {
                    label: 'Resultado',
                    parent: 'pending-operations-adviser'
                },
                params : {
                    poResult : null,
                    typeOperation : null,
                    operations : null,
                    views : null
                }
            });

    }

    angular.module( 'actinver' )
        .config( routerProviderConfig );

})();

(function(){
    "use strict";
    pendingOperationsFactory.$inject = ['$http', '$q', 'URLS', 'csrfSrv', 'ErrorMessagesSrv', 'loginSrvc', '$sessionStorage'];
    angular
        .module( 'actinver.services' )
        .factory( 'pendingOperationsAdviser', pendingOperationsFactory );

   
    function pendingOperationsFactory( $http, $q, URLS, csrfSrv, ErrorMessagesSrv,loginSrvc, $sessionStorage ){
        return {
            getOperations           : getOperations,
            sendPendingOperations   : sendPendingOperations,
            cancelation             : cancelation,
            getOperationsHistoric   : getOperationsHistoric,
            getOperationsSent       : getOperationsSent
        };

    function getOperations( _type ){
            var _url; //= URLS.getPendingOperations + _type + '?language=SPA';
            return $q ( function ( resolve,reject ) {

                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'CAT') {
                                _url=URLS.getPendingOperationsCat+_type + '?language=SPA';
                                break;
                            }else if ( _element === 'ASESOR'){
                                _url=URLS.getPendingOperations+ _type + '?language=SPA';
                                break;
                            } 
                    }

                    $http.get(_url)
                    .then(successPO)
                    .catch(errorPO);

                    function successPO(response){
                        if ( response.data.type === 'ERROR' ) {
                            reject ({
                                status : false,
                                response : response.data,
                                responseMsg : 'No existen operaciones pendientes'
                            });
                        } else {
                            resolve ({
                                status : true,
                                response : response
                            });
                        }
                    }

                    function errorPO(){
                        //Logica
                        return;
                    }

                    });

            });
        }

        function sendPendingOperations(params,type){
            var info = JSON.parse($sessionStorage.user);
            var enviroment = info.enviroment;
            
      
            var _url; // = type === 'reject' ? URLS.PendingOperationsReject : URLS.PendingOperationsApprove;
            return $q ( function ( resolve ) {

                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'CAT') {
                                _url= type === 'reject' ? (URLS.PendingOperationsRejectCatNotification ) : (URLS.PendingOperationsApproveCatNotification);
                                break;
                            }else if ( _element === 'ASESOR'){
                                _url= type === 'reject' ? (URLS.PendingOperationsRejectNotification) :( URLS.PendingOperationsApproveNotification );
                                break;
                            } 
                    }
                    
                    csrfSrv.csrfValidate()
                    //$http.post(_url,$.param(params))
                    .then(successCsrf)
                    .catch(errorCsrf);
        
                    function successCsrf(){
        
                        $http({
                            method: 'POST',
                            url: _url,
                            data: $.param(params),
                        }).then(function (response) {
                            if (response.data.error) {//remover este if y els;  cuando ya se tenga los cambios de banca
                                if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                                    resolve ({status : true, response : response.data});
                                }else{
                                    return {
                                        status : false,
                                        responseMessage : response.data.error.responseMessage
                                        //Esperando cambios en Banca
                                        //responseMessage : response.data.outCommonHeader.result.messages
                                    };
                                }
                            }else{
                                resolve ({status : true,response : response.data}); 
                            }
                            
                        }).catch(function () {
                            ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                        });
        
                    }
        
                    function errorCsrf(){}
                
                
                
                });
               
            });
 
        }

        function cancelation ( typeOperation ) {
            return $q( function ( resolve ) {
                var _reason = null;
                switch ( typeOperation ) {
                    case 'Otro' :
                        _reason = -1;
                        break;
                    case 'COMPRA/VENTA DE TITULOS DE EMISORAS SOCIEDADES DE INVERSIÓN' :
                        _reason = 0;
                        break;
                    case 'TRASPASO SPEI DESDE CONTRATO DE CASA DE BOLSA' :
                        _reason = 3;
                        break;
                    case 'REGISTRO DE ORDEN PARA MERCADO DE DINERO (BONOS)' :
                        _reason = 2;
                        break;
                    case 'REGISTRO DE ORDEN DE MERCADO DE CAPITALES' :
                        _reason = 1;
                        break;
                    case 'REGISTRO STOPLOSS DE UNA EMISORA DE MERCADO DE CAPITALES' :
                        _reason = 1;
                        break;
                    case 'COMPRA DE FONDOS DE INVERSIÓN DE BANCO' :
                        _reason = 0;
                        break;
                    case 'VENTA DE FONDOS DE INVERSIÓN DE BANCO' :
                        _reason = 0;
                        break;
                    case 'REGISTRO DE VENTA DE DIRECTO MERCADO DE DINERO' :
                        _reason = 2;
                        break;
                    case 'REGISTRO DE COMPRA DE DIRECTO MERCADO DE DINERO' :
                        _reason = 2;
                        break;
                    case 'REGISTRO DE VENTA DE REPORTO MERCADO DE DINERO' :
                        _reason = 2;
                        break;
                    case 'TransferExecution No se tiene desc' :
                        _reason = 3;
                        break;
                }
                resolve(_reason);
            });
        }

        function getOperationsHistoric( screenId ){
            var _url; //= URLS.getPendingOperations + _type + '?language=SPA';
            return $q ( function ( resolve,reject ) {

                loginSrvc.makeDataUser().then( function( _response){                    
                    for(var pos=0 ;pos< _response.user.scope.length; pos++) {
                        var _element= _response.user.scope[pos];
                            if (_element === 'CAT') { 
                                _url=URLS.PendingOperationsHistoricCat+ screenId + '?language=SPA';
                                break;
                            }else if ( _element === 'ASESOR'){
                                _url=URLS.PendingOperationsHistoric+ screenId + '?language=SPA';
                                break;
                            } 
                    }

                    $http.get(_url)
                    .then(successPO)
                    .catch(errorPO);

                    function successPO(response){
                        if ( response.data.type === 'ERROR' ) {
                            reject ({
                                status : false,
                                response : response.data,
                                responseMsg : 'No existen operaciones pendientes'
                            });
                        } else {
                            resolve ({
                                status : true,
                                response : response
                            });
                        }
                    }

                    function errorPO(){
                        //Logica
                        return;
                    }

                    });

            });
        }

        function getOperationsSent(){
            var _url = URLS.getPendingOperationsSent + '?language=SPA';
            return $q ( function ( resolve,reject ) {


                    $http.get(_url)
                    .then(successPO)
                    .catch(errorPO);

                    function successPO(response){
                        if ( response.data.type === 'ERROR' ) {
                            reject ({
                                status : false,
                                response : response.data,
                                responseMsg : 'No existen operaciones pendientes'
                            });
                        } else {
                            resolve ({
                                status : true,
                                response : response
                            });
                        }
                    }

                    function errorPO(){
                        //Logica
                        return;
                    }

            });
        }
    }
    

})();
(function () {
    'use strict';

    clientInfoModalCtrl.$inject = ['$timeout', '$uibModalInstance', 'CommonModalsSrv', 'clientInfo', 'binnacleBirthdaysSrv'];
    function clientInfoModalCtrl($timeout, $uibModalInstance, CommonModalsSrv, clientInfo, binnacleBirthdaysSrv) {
        var vm = this;

        vm.reminder = {};
        vm.sent_reminder = false;
        vm.info = clientInfo.info;
        vm.reminder.congratulation = false;

        vm.sendReminder = function () {
            vm.sent_reminder = true;
            var sendModel = vm.reminder;

            var modelTemp = {
                language: 'SPA',
                nameClient: clientInfo.info.name,
                contract: clientInfo.info.contract,
                phoneNumber: clientInfo.info.phoneNumber,
                message: sendModel.message,
                subject: sendModel.subject,
                email: clientInfo.info.email
                //email:'jlmartineza@actinver.com.mx'

            };


            //PENDIENTE
            binnacleBirthdaysSrv.sendMessage(modelTemp).then(function (_response) {

                if (_response.status === 1) {
                    CommonModalsSrv.done("El mensaje se ha enviado exitosamente.");
                } else if (_response.status === 2) {
                    CommonModalsSrv.error(_response.message[0].description);
                }
                vm.loading = false;
            }).catch(function () {
                var message = "Error al enviar el correo";
                CommonModalsSrv.error(message);
            }).finally(function () {
                vm.done();

            });




        };

        vm.close = function () {
            $uibModalInstance.dismiss();
        };

        vm.done = function () {
            $uibModalInstance.close();
        };

    }

    angular
        .module('actinver.controllers')
        .controller('clientInfoModalCtrl', clientInfoModalCtrl);

})();

( function(){
    'use strict';

    outlineClientModalCtrl.$inject = ['$window', '$uibModalInstance', '$httpParamSerializer', 'binnacleOutlineSrv', 'CommonModalsSrv', 'outlineItemDetails'];
    function outlineClientModalCtrl( $window, $uibModalInstance, $httpParamSerializer, binnacleOutlineSrv, CommonModalsSrv, outlineItemDetails ){
        var vm = this;

        // Defaults
        vm.form = {
           employee: outlineItemDetails.employee,
           contrato: outlineItemDetails.contrato,
           tipoOrigen: outlineItemDetails.tipoOrigen,
           typeServicio: outlineItemDetails.typeServicio,
           tipoPersona:outlineItemDetails.tipoPersona,
           typeoperation:outlineItemDetails.typeoperation,
           investmentProfile:outlineItemDetails.investmentProfile
        };
        vm.sent_type = false;

        // Send selected outline way
        vm.sendType = function(){
            vm.sent_type = true;         
            var tipo=vm.form.type;

            if(tipo === "confirm"){
                tipo=1;
            }else if(tipo === "update"){
                tipo=2;             
            }else{
                tipo=3;
            }

            var parametros = {
                type:tipo,
                contratoXactualizar:outlineItemDetails.contrato,
                origenPeticion:outlineItemDetails.tipoOrigen,
                tipoPersona:outlineItemDetails.tipoPersona,
                tipoServicio:outlineItemDetails.typeServicio,language: 'SPA',
                idEmployee: vm.form.employee

            };

            binnacleOutlineSrv.getSellsPracticeUrl(parametros)
                .then( function( response ){
                    if(response.data.status === 1){
                       //$window.location.href=response.data.result;
                        window.open(response.data.result,'_blank');
                        
                    }else{
                        CommonModalsSrv.error( 'No se puedo realizar la operación' );
                    }
                     
                }, function errorCallback(){
                    CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                    vm.done();

                } );
               
                vm.sent_type = false; 
                vm.done();
        };

        // Close modal
        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        // Another way to close modal
        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'outlineClientModalCtrl', outlineClientModalCtrl );

} )();
( function(){
    "use strict";

    admonDerivativeModalCtrl.$inject = ['$uibModalInstance', 'title', 'favorite'];
    function admonDerivativeModalCtrl( $uibModalInstance, title, favorite ){
        var vm = this;


        


        vm.close = function(){
            $uibModalInstance.dismiss();
        };


        vm.done = function(){
            $uibModalInstance.close( vm.fav );
        };



    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonDerivativeModalCtrl', admonDerivativeModalCtrl );

} )();

( function(){
    "use strict";

    admonEmployeeModalCtrl.$inject = ['$uibModalInstance', 'title', 'employee'];
    function admonEmployeeModalCtrl( $uibModalInstance, title, employee ){
        var vm = this;


        function setup () {
            setupVars();
        }


        function setupVars () {
            vm.title = title;
            vm.employee = employee;
        }


        vm.close = function(){
            $uibModalInstance.dismiss();
        };


        vm.done = function(){
            $uibModalInstance.close( vm.employee );
        };


        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonEmployeeModalCtrl', admonEmployeeModalCtrl );

} )();

(function () {
    "use strict";

    admonFactsheetModalCtrl.$inject = ['$uibModalInstance', 'title', 'factsheet', 'FactsheetsSrv', 'CommonModalsSrv', 'URLS', 'factSheetSrv'];
    function admonFactsheetModalCtrl($uibModalInstance, title, factsheet, FactsheetsSrv, CommonModalsSrv, URLS, factSheetSrv) {
        var vm = this;
        vm.loading = false;
        vm.uploaderOptions = [
            { formats: ["image/png", "image/jpeg", "image/jpg"], size: 2097152 }
        ];

        if (factsheet.idProduct) {
            factSheetSrv.getImage(factsheet.idProduct)
                .then(function (response) {
                    vm.product_factsheet_img_url = response;
                })
                .catch(function (error) {
                    CommonModalsSrv.error(error.error);
                });
        }

        function setup() {
            setupVars();
            if (!factsheet.name) {
                getClassifications();
            }
        }

        function getClassifications() {
            vm.loading = true;
            FactsheetsSrv.getClassifications().then(function (_res) {
                vm.products = _res.map(function (_product) {
                    _product.text = _product.description;
                    return _product;
                });
                vm.loading = false;
            });
        }

        function setupVars() {
            vm.title = title;
            vm.factsheet = factsheet;
        }


        vm.previewFile = function (_img, _file) {
            vm.imgPreview = _img;
            vm.factsheet.file = _file;
        };

        vm.errorFile = function (_error) {
            vm.imgPreview = false;
            vm.factsheet.file = false;
            CommonModalsSrv.error(_error);
        };

        vm.cleanFields = function () {
            vm.imgPreview = false;
            vm.factsheet = {};
        };

        vm.close = function () {
            $uibModalInstance.close();
        };

        vm.done = function () {
            vm.loading = true;

            FactsheetsSrv.doFactsheet(vm.factsheet)
                .then(function (result) {
                    if (result.data !== null) {
                        if (vm.factsheet.file) {
                            FactsheetsSrv.updateImg(result.data, vm.factsheet.file)
                                .then(function () {
                                    $uibModalInstance.close('success');
                                }).catch(function () {
                                    $uibModalInstance.close('error');
                                }).finally(function () {
                                    vm.loading = false;
                                    vm.cleanFields();
                                });
                        } else {
                            $uibModalInstance.close('success');
                        }
                    } else {
                        vm.close();
                        CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    }
                });
        };


        setup();

    }

    angular.module('actinver.controllers')
        .controller('admonFactsheetModalCtrl', admonFactsheetModalCtrl);

})();

(function () {
    "use strict";

    factSheet.$inject = ['$http', '$q', 'URLS'];
    function factSheet($http, $q, URLS) {
        return {
            getImage: getImage
        };

        function getImage(id) {
            return $q(function (resolve, reject) {

                $http({
                    method: 'GET',
                    url:    URLS.getProductFactsheetImg + id,
                    responseType: 'arraybuffer',
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                        var image = _arrayBufferToBase64(response.data);
                        resolve(image);
                    }).catch(function (error) {
                        reject({ error: error.data });
                    });

                function _arrayBufferToBase64(buffer) {
                    var binary = '';
                    var bytes = new Uint8Array(buffer);
                    var len = bytes.byteLength;
                    for (var i = 0; i < len; i++) {
                        binary += String.fromCharCode(bytes[i]);
                    }
                    return window.btoa(binary);
                    }

            });
        }
    }

    angular.module('actinver.services')
        .service('factSheetSrv', factSheet);
})();
(function () {
    "use strict";

    admonFavoriteModalCtrl.$inject = ['$uibModalInstance', 'title', 'favorite', 'FavAdminSrv'];
    function admonFavoriteModalCtrl($uibModalInstance, title, favorite, FavAdminSrv) {
        var vm = this;

        if (favorite) {
            vm.idIssuer = favorite.idIssuer;
            vm.issuerName = favorite.issuerName;
            vm.serie = favorite.serie;
            vm.idClassification = favorite.idClassification;
        }



        if (title === "Nuevo favorito") {
            vm.type = 'newFav';
        } else if (title === 'Editar favorito') {
            vm.type = 'updateFav';
        } else if (title === 'Eliminar clasificacón') {
            vm.type = 'deleteClassification';
        }  


        function setup() {
            setupVars();
            getClassFav();
        }


        function setupVars() {
            if (favorite) {
                favorite.classification.text = favorite.classification.description;
            }

            vm.title = title;
            vm.favorite = favorite;
            vm.states = ['Chiapas', 'Veracruz', 'Paracio de hierro', 'Liverpool', 'Sams', 'Fabricas de francia'];
            // vm.type = favorite ? 'favoriteEje' : '';
            // investment.clasification.text = investment.clasification.description;
            vm.fav = favorite ? favorite : {};
            //vm.classification.text = 'Emisoras principales';
        }


        vm.close = function () {
            $uibModalInstance.dismiss();
        };


        vm.done = function () {
            $uibModalInstance.close(vm.fav);
        };

        vm.setType = function (_type) {
            vm.type = _type;
        };

        function getClassFav() {
            FavAdminSrv.getClassificationFavAdm().then(function (_res) {
                vm.classification = _res.data.map(function (_val) {
                    _val.text = _val.description;
                    return _val;
                });
            }, function () {
                CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                $rootScope.listClassFav = null;
            });
        };


        setup();

    }

    angular.module('actinver.controllers')
        .controller('admonFavoriteModalCtrl', admonFavoriteModalCtrl);

})();

( function(){
    "use strict";

    admonGroupModalCtrl.$inject = ['$uibModalInstance', 'title', 'group'];
    function admonGroupModalCtrl( $uibModalInstance, title, group ){
        var vm = this;


        function setup () {
            setupVars();
        }


        function setupVars () {
            vm.title = title;
            vm.group = group;
        }

        vm.close = function(){
            $uibModalInstance.close();
        };

        vm.done = function(){
            $uibModalInstance.close( vm.group );
        };


        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonGroupModalCtrl', admonGroupModalCtrl );

} )();

( function(){
    "use strict";

    admonInvestmentModalCtrl.$inject = ['$uibModalInstance', 'title', 'investment', 'InvestmentAdminSrv'];
    function admonInvestmentModalCtrl( $uibModalInstance, title, investment, InvestmentAdminSrv ){
        var vm = this;

        function setup () {
            setupVars();
            getFundTypes();
        }

        function getFundTypes(){
            InvestmentAdminSrv.getFundTypes().then(function(_res){
                vm.clasification =  _res.map(function( _val ){
                    _val.text = _val.description;
                    return _val;
                });
            });
        }


        function setupVars () {
            vm.title = title;
            // vm.investment = investment;
            if( investment ){
                investment.clasification.text = investment.clasification.description;
            }
            
            vm.type = investment ? 'fund' : '';
            vm.fund = investment ?  investment : {};
        }


        vm.setType = function ( _type ) {
            vm.type = _type;
        };


        vm.close = function(){
            $uibModalInstance.dismiss();
        };


        vm.done = function(){
            vm.fund.type = vm.type;
            $uibModalInstance.close( vm.fund );
        };


        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonInvestmentModalCtrl', admonInvestmentModalCtrl );

} )();

(function () {
    "use strict";

    PresentationAdminSrv.$inject = ['$http', '$q', 'URLS'];
    function PresentationAdminSrv($http, $q, URLS) {
        return {
            getPDF: getPDF
        };

        function getPDF(id) {
            return $q(function (resolve, reject) {

                $http({
                    method: 'GET',
                    url:    URLS.getPresentationFileAdm + id,
                    responseType: 'arraybuffer',
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                        var file = new Blob([response.data], {type: 'application/pdf'});
                        var fileURL = URL.createObjectURL(file);
                        window.open(fileURL,'_blank', 'Presentación');

                        resolve({ response: response.data });
                    }).catch(function (error) {
                        reject({ error: error.data });
                    });
            });
        }
    }

    angular.module('actinver.services')
        .service('PresentationAdminSrv', PresentationAdminSrv);
})();
( function(){
    "use strict";

    admonPresentationsModalCtrl.$inject = ['$uibModalInstance', 'URLS', 'title', 'presentations', 'PresentationsAdminSrv', 'CommonModalsSrv', 'PresentationAdminSrv'];
    function admonPresentationsModalCtrl( $uibModalInstance, URLS, title, presentations, PresentationsAdminSrv, CommonModalsSrv, PresentationAdminSrv ){
        var vm = this;
        vm.loading = false;
        vm.uploaderOptions = [
            { formats: [ "application/pdf" ], size: 10485760 }
        ];

        function setup () {
            setupVars();
            getTypes();
        }

        vm.previewFile = function( _blob, _file ){
            vm.pres.file = _file;
        };

        vm.errorFile = function(_error){
            vm.pres.file = false;
            CommonModalsSrv.warning( _error );
        };

        vm.cleanFields = function () {
            vm.pres.file = false;
        };

        vm.changeOptions = function(  ){
            var type = vm.pres.type;
            vm.clas = {};
            vm.subclas = {};
            vm.pres = {
                type : type
            };
        };

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function( type ){
            vm.loading = true;
            if( type === 'presentation' ){ 
                PresentationsAdminSrv.savePresentation( vm.pres )
                    .then( function( result ){
                        if( result.data !== null ){ 
                            if( vm.pres.file ){ 
                                var idPresentationType = vm.pres.idPresentationType || vm.pres.clasification.idPresentationType;
                                PresentationsAdminSrv.updateFile( result.data, result.params.idPresentationSubType, vm.pres.file, idPresentationType )
                                    .then( function(){
                                        $uibModalInstance.close( { msg: 'success', type: 'presentación' } );
                                    } ).catch( function(){
                                        $uibModalInstance.close( 'error' );
                                    } ).finally( function(){
                                        vm.loading = false;
                                        vm.cleanFields();
                                    } );
                            } else {
                                $uibModalInstance.close( { msg: 'success', type: 'presentación' } );
                            }
                        } else {
                            vm.close();
                            CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                        }
                    });
            } else if( type === 'clasification' ){
                PresentationsAdminSrv.saveClasification( vm.clas )
                    .then( function( result ){
                        if( result.data !== null ){
                            $uibModalInstance.close( { msg: 'success', type: 'clasificación' } );
                            vm.loading = false;
                            vm.cleanFields();
                        } else {
                            vm.close();
                            CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                        }                    });
            } else {
                PresentationsAdminSrv.saveSubClasification( vm.subclas, vm.pres.clasification.idPresentationType )
                    .then( function( result ){
                        if( result.data !== null ){
                            $uibModalInstance.close( { msg: 'success', type: 'subclasificación' } );
                            vm.loading = false;
                            vm.cleanFields();
                        } else {
                            vm.close();
                            CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                        }
                    });
            }
        };
        
        vm.getPDF = function( idPresentation ){
            PresentationAdminSrv.getPDF(idPresentation)
                .then( function ( ) {
                })
                .catch(function ( error ) {
                    CommonModalsSrv.error( error.error );
                });
        };

        vm.getSubclasification = function( _clasification  ){
            PresentationsAdminSrv.getPresentationSubTypesByClassification( _clasification.idPresentationType ).then( function( _res ){
                vm.subProducts = _res.map( function( _val ){
                    _val.text = _val.description;
                    return _val;
                });
            });
        };



        function getTypes(){
            PresentationsAdminSrv.getTypes().then( function( _res ){
                vm.products = _res.map( function( _val ){
                    _val.text = _val.description;
                    return _val;
                });
            });
        }

        function refactorPres(){
            return presentations;
        }

        function setupVars () {
            vm.title = title;
            // vm.group = group;
            vm.pres = presentations ? refactorPres() : {};
            // vm.pres.type = presentations ? 'presentation': null;
        }

        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonPresentationsModalCtrl', admonPresentationsModalCtrl );

} )();

( function(){
    "use strict";

    admonProfilesModalCtrl.$inject = ['$uibModalInstance', 'title', 'profile', 'ProfilesSrv'];
    function admonProfilesModalCtrl( $uibModalInstance, title, profile, ProfilesSrv ){
        var vm = this;


        function setup () {
            setupVars();
            getRoles();
            getClassifications();
        }

        function getRoles(){
            ProfilesSrv.getRoles().then(function( _res ){
                vm.listTabs = _res;
            });
        }

        function setupVars () {
            vm.title = title;
            vm.profile = profile;
        }

        function getClassifications(){
            ProfilesSrv.getRoles().then(function( _res ){
                vm.products = _res.map( function( _product ) {
                    _product.text = _product.description;
                    return _product;
                });
            });
        }

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.changeOptionSelectedDropdowm = function ( _option ) {
          vm.profile.idRole = _option.idRole;
      };

        vm.done = function(){
            $uibModalInstance.close( vm.profile );
        };


        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonProfilesModalCtrl', admonProfilesModalCtrl );

} )();

(function(){
    'use strict';

    outProfile.$inject = ['$uibModalInstance'];
    function outProfile ($uibModalInstance){
        var vm = this;        

        vm.close = function () {
            $uibModalInstance.dismiss('cancel');
        };

        vm.done = function () {
            $uibModalInstance.close();
        };
    }
    angular.module('actinver.controllers')
        .controller('outProfile', outProfile);


})();
( function(){
    "use strict";

    warningModalCtrl.$inject = ['$uibModalInstance', 'message'];
    function warningModalCtrl( $uibModalInstance, message ){
        var vm = this;

        vm.message = message;

        vm.close = function(){
            $uibModalInstance.dismiss('cancel');
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'doneModalCtrl', warningModalCtrl );

} )();

( function(){
    "use strict";

    errorModalCtrl.$inject = ['$uibModalInstance', 'message'];
    function errorModalCtrl( $uibModalInstance, message ){
        var vm = this;

        vm.message = message;

        vm.close = function(){
            $uibModalInstance.dismiss('cancel');
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'errorModalCtrl', errorModalCtrl );

} )();

( function(){
    "use strict";

    warningModalCtrl.$inject = ['$uibModalInstance', 'message'];
    function warningModalCtrl( $uibModalInstance, message ){
        var vm = this;

        vm.message = message;


        vm.close = function(){
            $uibModalInstance.dismiss('cancel');
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'warningModalCtrl', warningModalCtrl );

} )();

( function(){
    'use strict';

    adviserDetailModalCtrl.$inject = ['adviserInfo', '$q', '$uibModalInstance', 'goalsReportsSrv', 'CommonModalsSrv'];
    function adviserDetailModalCtrl( adviserInfo, $q, $uibModalInstance, goalsReportsSrv, CommonModalsSrv ){
        var vm = this;

        // Get adviser info
        vm.getAdviserInfo = function(){
            vm.get_info = true;
            vm.report_info = false;

            // centerInfo.employee
            return $q.all( [
                goalsReportsSrv.getGoalsPositionsRpt( adviserInfo.adviserID, adviserInfo.date ),
                goalsReportsSrv.getSumGoalsPositionsRpt( adviserInfo.adviserID, adviserInfo.date ),
                goalsReportsSrv.getGoalsContractsRpt( adviserInfo.adviserID, adviserInfo.date )
            ] ).then( function( data ){

                // Set information by topic
                vm.report_info = {};
                vm.report_empty = true;
                angular.forEach( data, function( item ){
                    if( vm.report_empty && item.data.length !== 0 ) vm.report_empty = false;
                    vm.report_info[ item.topic ] = item.data;
                } );
                vm.personal_data = adviserInfo;

            }, function(){

                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );

            } ).finally( function(){
                vm.get_info = false;
            } );
        };

        // Close modal
        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        // Another way to close modal
        vm.done = function(){
            $uibModalInstance.close();
        };

        // Init setup
        vm.getAdviserInfo();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'adviserDetailModalCtrl', adviserDetailModalCtrl );

} )();
( function(){
    'use strict';

    centerDetailModalCtrl.$inject = ['centerInfo', '$q', '$uibModalInstance', 'goalsSupervisorSrv', 'goalsCustomSrv', 'CommonModalsSrv'];
    function centerDetailModalCtrl( centerInfo, $q, $uibModalInstance, goalsSupervisorSrv, goalsCustomSrv, CommonModalsSrv ){
        var vm = this;

        // Get adviser info
        vm.getCenterInfo = function(){
            var services = [];
            vm.get_info = true;
            vm.report_info = false;

            // Check modal type
            switch( centerInfo.type ) {

                case 'supervisor':
                    services.push(
                        goalsSupervisorSrv.getCenterInfo( centerInfo.employee, centerInfo.center, centerInfo.date ),
                        goalsSupervisorSrv.getCenterProducts( centerInfo.employee, centerInfo.center, centerInfo.date )
                    );
                    break;

                case 'custom':
                    services.push(
                        goalsCustomSrv.getCustomCenterInfoRpt( centerInfo.center, centerInfo.date ),
                        goalsCustomSrv.getCustomCenterProductsRpt( centerInfo.center, centerInfo.date )
                    );
                    break;

            }

            return $q.all( services ).then( function( data ){

                // Set information by topic
                vm.report_info = {};
                vm.report_empty = true;
                angular.forEach( data, function( item ){
                    if( vm.report_empty && item.data.length !== 0 ) vm.report_empty = false;
                    vm.report_info[ item.topic ] = item.data.elements || item.data;
                } );

            }, function(){

                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                vm.done();

            } ).finally( function(){
                vm.get_info = false;
            } );
        };

        // Close modal
        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        // Another way to close modal
        vm.done = function(){
            $uibModalInstance.close();
        };

        // Init setup
        vm.getCenterInfo();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'centerDetailModalCtrl', centerDetailModalCtrl );

} )();
( function(){
    "use strict";

    accountContractCtrl.$inject = ['$uibModalInstance', 'info', '$rootScope'];
    function accountContractCtrl( $uibModalInstance, info, $rootScope){
        var vm = this;
        vm.info = info.list;
        vm.contract = info.contract;

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $uibModalInstance.close();
        };


        vm.contractSelected = function( _selected ){
            $rootScope.selectedContact = _selected;
            $uibModalInstance.close();
        };
    }

    angular.module( 'actinver.controllers' )
        .controller( 'accountContractCtrl', accountContractCtrl );

} )();
( function(){
    "use strict";

    accountNameCtrl.$inject = ['$uibModalInstance', 'info', '$rootScope', 'NgTableParams', 'accountSrv'];
    function accountNameCtrl( $uibModalInstance, info, $rootScope, NgTableParams, accountSrv){
        var vm = this;
        vm.showEmptyMessage = false;

        vm.info = info;

        function setup(){

            if(info.personType==='1'){
                configTable();
            }                
            else{
                configTablePersonasMorales(info);
            }
        }

        function configTable() {
            var defaults = {
                count: 20
            };

            vm.configTable = new NgTableParams(defaults, {                
                getData: function( params ){                    
                    return getRecords(info.wordToSearch, params,  defaults.count );
                }
            });
        }
        function getRecords(search, params, rows) {
            return accountSrv.getBankContractsByClientQuery(search, params.page(), rows).then(function success(response) {
                if (response.success) {
                    params.total(response.data.pagination.totalResult);      
                    vm.showEmptyMessage = response.data.pagination.totalResult === 0 ? true : false;
                    return response.data.clientsList.client;
                } else {
                    return [];
                }
            }).catch(function error() {
                return [];
            });
        }

        function configTablePersonasMorales(reg){
            var defaults = {
                count: 20
            };
            vm.configTable = new NgTableParams(defaults, {                
                dataset: reg.list
            });
        }

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

        vm.nameSelected = function( _selected ){
            $rootScope.selectedClient = _selected;
            $uibModalInstance.close();
        };

        setup();
    }

    angular.module( 'actinver.controllers' )
        .controller( 'accountNameCtrl', accountNameCtrl );

} )();

( function(){
    "use strict";

    invModalCtrl.$inject = ['$uibModalInstance', 'info'];
    function invModalCtrl( $uibModalInstance, info ){
        var vm = this;

        vm.info = info;
        // vm.info.transfer.import = vm.info.transfer.import.replace(/[^\d|\-+|\.+]/g, '');
        vm.date = new Date();

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'invModalCtrl', invModalCtrl );

} )();

(function () {
    'use strict';

    newsModalCtrl.$inject = ['$uibModalInstance', '$window', 'data'];
    function newsModalCtrl($uibModalInstance, $window, data) {
        var vm = this;
        vm.data = data;
        vm.contenido = '';

        vm.close = function () {
            $uibModalInstance.close();
        };

        vm.linkTo = function (record) {
            $window.open(record.uri, '_blank');
        };
        vm.filter = function (condition) {
            return function (item) {
                var creacion = moment(item.publishedDate).format("yyyy-MM-dd HH:mm");
                if (item.title.toUpperCase().includes(condition.toUpperCase()) || creacion.includes(condition))
                    return true;
                return false;
            };
        };

    }

    angular.module('actinver.controllers')
        .controller('newsModalCtrl', newsModalCtrl);
})();
(function () {
    "use strict";

    directsBandsMdlCtrl.$inject = ['$uibModalInstance', 'data', 'fn'];
    function directsBandsMdlCtrl($uibModalInstance, data, fn) {
        
        var vm = this;
        vm.selected = null;
        vm.data = data;       

        vm.close = function () {
            $uibModalInstance.dismiss('cancel');
        };

        vm.calculate = function(){
            vm.close();            
            fn(vm.selected);
        };

        vm.changeSelected = function( reg ){
            if(vm.data !== null){
                vm.data.forEach(function(r){
                    r.selected = false;
                    if(r.instrumentDesc === reg.instrumentDesc && r.term === reg.term){
                        r.selected = true;
                    }
                });
                vm.selected = reg;
            }            
        }
    }

    angular.module('actinver.controllers')
        .controller('directsBandsMdlCtrl', directsBandsMdlCtrl);

})();

(function () {
    "use strict";

    reportoLetterModalCtrl.$inject = ['$uibModalInstance', 'operation', 'operDate', 'holder', 'mailConfirm', 'userConfig', 'accountSrv', 'reportoLetterModalSrv', 'CommonModalsSrv', 'FileSaver', 'ErrorMessage'];
    function reportoLetterModalCtrl( $uibModalInstance, operation, operDate, holder, mailConfirm, userConfig, accountSrv, reportoLetterModalSrv, CommonModalsSrv, FileSaver, ErrorMessage ) {
        var vm = this;
        vm.mailTo = [];
        vm.mailConfirm = mailConfirm;
        vm.contract = JSON.parse(localStorage.getItem('contractSelected'));
        
        vm.close = function() {
            $uibModalInstance.close();
        };

        vm.confirmMail = function() {
            if(vm.mailTo.length == 0) {
                var _typeContract = JSON.parse(localStorage.getItem('contractSelected')).bankingArea;
                var _model = {
                    contractNumber: vm.contract.contractNumber,
                    bankingArea: _typeContract
                };

                accountSrv.getContractInfoDetail(_model).then(function (_res) {
                    if (_res.holder.emailList.email.length === 0) {
                        CommonModalsSrv.error("No tiene correos asignados");
                        vm.mailConfirm = false;
                    } else {
                        angular.forEach(_res.holder.emailList.email, function (item, key) {
                            vm.mailTo.push(item.toLowerCase());
                        });
                        
                        vm.mailConfirm = true;
                    }
                }).catch(function (_res) {
                    CommonModalsSrv.error(ErrorMessage.createError(_res));
                });
            } else {
                vm.mailConfirm = true;
            }
        };
        
        vm.getPdf = function() {
            $uibModalInstance.close();

            var pdfParams = {
                'language': 'SPA',
                'contractNumber': vm.contract.contractNumber,
                'operationID': operation,
                'operationDate': operDate,
                'holder': holder,
                'adviser': userConfig.user.name
            };

            reportoLetterModalSrv.getConfirmLtr(pdfParams).then( 
                function(_res) {
                    if (_res.success) {
                        FileSaver.saveAs(b64Decoder(_res.info, 'application/zip'), 'Carta_Confirmacion.zip');
                        CommonModalsSrv.done("Descarga exitosa!");
                    }
                    else {
                        CommonModalsSrv.error(_res.info);
                    }
                }).catch( 
                    function(_err) {
                        CommonModalsSrv.error(_err.info);
                });           
        };

        vm.sendMail = function() {
            $uibModalInstance.close();
            
            var mailParams = {
                'language': 'SPA',
                'emailFrom': 'info@actinver.com.mx',
                'idTemplate': 'buildDBTemplate|19',
                'emailSubject': 'Carta Confirmación Reporto',
                'mailTo': vm.mailTo,
                'mailCC': '',
                'contractNumber': vm.contract.contractNumber,
                'operationID': operation,
                'operationDate': operDate,
                'holder': holder,
                'adviser': userConfig.user.name
            };
            
            reportoLetterModalSrv.sendEmail(mailParams).then( 
                function(_res) {
                    if (_res.success) {
                        CommonModalsSrv.done(_res.info);
                    }
                    else {
                        CommonModalsSrv.error(_res.info);
                    }
                }).catch( 
                    function(_res) {
                        CommonModalsSrv.error(_res.info);
                });
        };

        function b64Decoder(base64, contentType) {
            var file = null;

            if(base64) {
                var tempCharArr = atob(base64);
                var tempNumbArr = new Array(tempCharArr.length);
                
                for (var i = 0; i < tempCharArr.length;i++){
                    tempNumbArr[i] = tempCharArr.charCodeAt(i);
                }

                var byteArrayArr = [];
                var tempByteArr = new Uint8Array(tempNumbArr);
                byteArrayArr.push(tempByteArr);
                file = new Blob(byteArrayArr, {type: contentType});
            }
           
            return file;
        }
    }

    angular.module('actinver.controllers')
           .controller('reportoLetterModalCtrl', reportoLetterModalCtrl);
})();
(function () {
    "use strict";

    reportoLetterModalSrv.$inject = ['URLS', '$q', '$http'];
    function reportoLetterModalSrv( URLS, $q, $http ) {
        var fun = {
            getConfirmLtr: function (_params) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getReportoConfirmLtr,
                        params: _params
                    }).then(
                        function success(response) {
                            if (response.data.outCommonHeader.result.result == 1) {
                                resolve({success: true, info: response.data.result.file});
                            } 
                            else {
                                reject({success: false, info: response.data.outCommonHeader.result.messages[0].responseMessage});
                            }
                        }, 
                        
                        function error() {
                            reject({success: false, info: 'Ocurrió un problema (Bad Request)'});
                        }
                    );
                });
            },
    
            sendEmail: function (_params) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.sendEmailReportoLtr,
                        params: _params
                    }).then(
                        function success(response) {
                            var _response;
                        
                            if (response.data.outCommonHeader.result.result == 1) {
                                _response = "Envío de correo exitoso";
                                resolve({success: true, info: _response});
                            } 
                            else {
                                _response = response.data.outCommonHeader.result.messages[0].responseMessage;
                                reject({success: false, info: _response});
                            }
                        }, 
                        
                        function error() {
                            reject({success: false, info: 'Ocurrió un problema (Bad Request)'});
                        }
                    );
                });
            }
        };

        return fun;
    }

    angular.module('actinver.services')
           .service('reportoLetterModalSrv', reportoLetterModalSrv);
})();

(function () {
    "use strict";

    luminaModalCtrl.$inject = ['$uibModalInstance', 'notificationLuminaSrv', 'data'];
    function luminaModalCtrl($uibModalInstance, notificationLuminaSrv, data) {
        
        var vm = this;
        vm.data = data;

        vm.close = function () {
            $uibModalInstance.dismiss('cancel');
        };

        vm.done = function (adviserNotificationId) {
            notificationLuminaSrv.saveStateNotification({ adviserNotificationID: adviserNotificationId }).then(function(){
                $uibModalInstance.close();
            }).catch(function(){
                $uibModalInstance.close();
            });
        };
    }

    angular.module('actinver.controllers')
        .controller('luminaModalCtrl', luminaModalCtrl);

})();

(function () {
    "use strict";

    addPendingModalCtrl.$inject = ['$uibModalInstance', 'title', 'params'];
    function addPendingModalCtrl($uibModalInstance, title, params )  {
        var vm = this;
        vm.title = title;
        vm.cancel = function () {
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            if (vm.reason.description === 'Otro') {
                var res = {id:0, text:vm.reasontext, description:vm.reasontext};
                $uibModalInstance.close( res );
            } else{
                $uibModalInstance.close( vm.reason);
            }
        };

        vm.catalogo =  [
            {
                id : 0,
                title : 'Fondos de Inversión',
                items : [
                    {id:2,text:'Orden no instruida por cliente',description:'Orden no instruida por cliente'},
                    {id:3,text:'Importe erróneo',description:'Importe erróneo'},
                    {id:4,text:'Error en N° de títulos',description:'Error en N° de títulos'},
                    {id:5,text:'Fondo Inversión erróneo',description:'Fondo Inversión erróneo'},
                    {id:6,text:'Forma o cuenta de liquidación errónea',description:'Forma o cuenta de liquidación errónea'}
                ]

            },
            {
                id : 1,
                title : 'Mercado de Capitales',
                items : [
                    {id:8,text:'Orden no instruida por cliente'},
                    {id:9,text:'Importe erróneo'},
                    {id:10,text:'Error en N° de títulos'},
                    {id:11,text:'Emisora errónea'},
                    {id:12,text:'Precio erróneo'},
                    {id:13,text:'Plazo erróneo'},
                    {id:14,text:'Error en tipo de orden'}
                ]
            },
            {
                id : 2,
                title : 'Mercado de Dinero',
                items : [
                    {id:16,text:'Orden no instruida por cliente'},
                    {id:17,text:'Importe erróneo'},
                    {id:18,text:'Tipo de instrumento erróneo'},
                    {id:19,text:'Plazo erróneo'},
                    {id:20,text:'Tasa errónea'}
                ]
            },
            {
                id : 3,
                title : 'Transferencias',
                items : [
                    {id:22,text:'Orden no instruida por cliente'},
                    {id:23,text:'Importe erróneo'},
                    {id:24,text:'Contrato o Cuenta destino errónea'},
                    {id:25,text:'Contrato origen erróneo'}
                ]
            },
            {
                id : -1,
                title : 'Otro',
                items : [
                    {id:0,text:'Otro',description:'Otro'},
                    {id:2,text:'Orden no instruida por cliente',description:'Orden no instruida por cliente'},
                    {id:3,text:'Importe erróneo',description:'Importe erróneo'},
                    {id:4,text:'Error en N° de títulos',description:'Error en N° de títulos'},
                    {id:5,text:'Fondo Inversión erróneo',description:'Fondo Inversión erróneo'},
                    {id:6,text:'Forma o cuenta de liquidación errónea',description:'Forma o cuenta de liquidación errónea'},
                    {id:8,text:'Orden no instruida por cliente'},
                    {id:9,text:'Importe erróneo'},
                    {id:10,text:'Error en N° de títulos'},
                    {id:11,text:'Emisora errónea'},
                    {id:12,text:'Precio erróneo'},
                    {id:13,text:'Plazo erróneo'},
                    {id:14,text:'Error en tipo de orden'},
                    {id:16,text:'Orden no instruida por cliente'},
                    {id:17,text:'Importe erróneo'},
                    {id:18,text:'Tipo de instrumento erróneo'},
                    {id:19,text:'Plazo erróneo'},
                    {id:20,text:'Tasa errónea'},
                    {id:22,text:'Orden no instruida por cliente'},
                    {id:23,text:'Importe erróneo'},
                    {id:24,text:'Contrato o Cuenta destino errónea'},
                    {id:25,text:'Contrato origen erróneo'}
                ]
            }

        ];

        function searchReason (){
            vm.catalogo.forEach(function(element) {
                if (element.id === params.rejectionReason) {
                    vm.items = element.items;
                }
            });

            params.rejectionReason;
        }
        searchReason ();
        
    }

    angular.module('actinver.controllers')
        .controller('addPendingModalCtrl', addPendingModalCtrl);

})();

(function () {
    "use strict";

    addActivityProsModalCtrl.$inject = ['$uibModalInstance', 'title', 'activity', '$scope', 'prospectSrv', 'userConfig', '$stateParams', '$filter', 'SectionActivitySrv'];
    function addActivityProsModalCtrl($uibModalInstance, title, activity, $scope, prospectSrv, userConfig, $stateParams, $filter, SectionActivitySrv )  {
        var vm = this;
        vm.title = title || 'NUEVA ACTIVIDAD';

        function setup() {
            setupVars();
            getStageProspect();
            setActivity();
            getOptions(activity.contactType);
        }

        vm.cancel = function () {
            $uibModalInstance.dismiss();
        };

        function refactorDropdowns(_model, _property) {
            var idActivity = '';
            _model.forEach(function (_val) {
                idActivity = (_val.description === _property) ? _val.idActivity : 1;
            });
            return idActivity;
        }

        function getOptions( _description) {
            SectionActivitySrv.getMedia().then(function (_options) {
                vm.idActivity = refactorDropdowns(_options,_description);
            });
        }

        vm.saveActivity = function () {
            console.log("userConfig:",userConfig);
            console.log("vm.detailProspect:",vm.detailProspect);
            console.log("vm.varsActivity:",vm.varsActivity);
            console.log("activity:",activity);
            //return;

           $scope.$broadcast('updateDetailProspect');   
            var timeActivity = vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.time ? vm.varsActivity.activity.time.split('-') : ['', ''];
                                           
            if (vm.title === 'NUEVA ACTIVIDAD') {
                var _activity = {
                    language        : 'SPA',
                    idProspect      : $stateParams.id,
                    idEmployee      : userConfig.user.employeeID,
                    idStage         : vm.detailProspect.idStage,
                    contactDate     : vm && vm.varsActivity.activity && vm.varsActivity.activity.date ? $filter('date')(vm.varsActivity.activity.date._d, 'yyyy-MM-dd') : '',
                    idActivity      : vm.varsActivity.activity.media.idActivity,
                    startTime       : timeActivity[0].replace(/ /g,''),
                    endTime         : timeActivity[1].replace(/ /g,''),
                    notes           : vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.note ? vm.varsActivity.activity.note : '',
                    mail            : userConfig.user.mail,
                    temp            : '',
                    subject         : vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.affair ? vm.varsActivity.activity.affair : '',
                    location        : vm && vm.varsActivity && vm.varsActivity.activity &&  vm.varsActivity.activity.place ? vm.varsActivity.activity.place : '',
                    name            : activity.name,
                    prospectMail    : activity.mail,
                    sendNotification: vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.notify ? vm.varsActivity.activity.notify   : false 
                };
                prospectSrv.saveActivity(_activity).then(function () {
                    $uibModalInstance.close();
                });
            }else {

                var _activity_update = {
                    language        : 'SPA',
                    idActivityStage : activity.idActivityStage,
                    contactDate     : vm && vm.varsActivity.activity && vm.varsActivity.activity.date ? $filter('date')(vm.varsActivity.activity.date._d, 'yyyy-MM-dd') : '',
                    idActivity      : (typeof vm.varsActivity.activity.media.idActivity === 'undefined') ? vm.idActivity : vm.varsActivity.activity.media.idActivity,
                    startTime       : timeActivity[0].replace(/ /g,''),
                    endTime         : timeActivity[1].replace(/ /g,''),
                    notes           : vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.note ? vm.varsActivity.activity.note : '',
                    mail            : userConfig.user.mail,
                    temp            : '',
                    subject         : vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.affair ? vm.varsActivity.activity.affair : '',
                    location        : vm && vm.varsActivity && vm.varsActivity.activity &&  vm.varsActivity.activity.place ? vm.varsActivity.activity.place : '',
                    name            : activity.prospectDetail.nombreProspecto,
                    prospectMail    : activity.prospectDetail.mailProspect,
                    sendNotification: vm && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.notify ? vm.varsActivity.activity.notify   : false,
                    outlookId       : activity.outlookId
                };

                prospectSrv.updateActivity(_activity_update).then(function () {
                    $uibModalInstance.close();
                });
            }
            
        };

        function getStageProspect(){
            prospectSrv.getStageProspect(userConfig.user.employeeID,$stateParams.id).then(function( _prospect ) {
                vm.detailProspect = _prospect;
                getDetailProspect();
            });
            
        }

        function getDetailProspect() {
            prospectSrv.getDetailProspect($stateParams.id,vm.detailProspect.idStage)
                .then(function (_res) {
                    vm.prospectDetail = _res;
                });
        }

        function setActivity() {
            if (activity) {
                vm.varsActivity = {
                    activity: {
                        type: activity.contactType,
                        note: activity.notes,
                        place: activity.location,
                        affair: activity.subject,
                        time: activity.schedule,
                        date: activity.date,
                        agendar : (activity.subject || activity.location ) ? true : false,
                        media: {
                            "description": activity.contactType,
                             "text": activity.contactType
                        }
                    }
                };
                vm.varsActivity.activity.date =  activity.date ? moment(activity.date) : moment();
            }
            return '';
        }


        function setupVars() {
            $scope.dateConfiguration = {
                singleDatePicker: true
            };
            vm.configdate ={            
                singleDatePicker: true,
                //initDate: activity.date ? activity.date : moment(),                
                minDate: moment(),
                maxDate : activity.closeDate,
                locale: {
                    format: "DD/MM/YYYY"
                }            
            };
        }


        setup();

    }

    angular.module('actinver.controllers')
        .controller('addActivityProsModalCtrl', addActivityProsModalCtrl);

})();

(function () {
    "use strict";

    prospectsModalCtrl.$inject = ['$injector', '$state', '$filter', '$uibModalInstance', 'prospectSrv', '$scope', 'userConfig', 'msg', 'IDOpportunity', 'CommonModalsSrv', 'addProspectSrv'];
    function prospectsModalCtrl($injector, $state, $filter, $uibModalInstance, prospectSrv, $scope, userConfig, msg, IDOpportunity, CommonModalsSrv, addProspectSrv ) {
        var vm = this;
        vm.oldValueContract = '';
        var userID = userConfig.user.employeeID; 
        vm.title = msg || 'NUEVA OPORTUNIDAD';

        vm.date =  $filter('date')(new Date(), 'dd/MM/yyyy');
         
        vm.isReactivation = false;
        vm.isNewOpportunity = false;
        vm.readonly =false;

        vm.opportunity;
        
        

        vm.lowMotive = {
            optionMotive: [
                { id: "01", text: "SIN POTENCIAL" },
                { id: "02", text: "ILOCALIZABLE" },
                { id: "03", text: "CIERRE" }
            ]
        };


        vm.changeStrategy =  function(obj){
            if(obj.idStrategy == "2"){
                vm.isReactivation = true;
                vm.isNewOpportunity = false;
                vm.readonlyNoClient = false;
                vm.readonly =true;
            }else if(obj.idStrategy == "3"){
                vm.isNewOpportunity = true;
                vm.isReactivation = false;
                vm.readonly =false;
            }else{
                vm.isReactivation = false;
                vm.readonly =false;
            }
            setupVars();
        };

        

        vm.lostFocusClient = function () {
            if (vm.opportunity && vm.opportunity.clientNumber) {
                vm.oldValueContract =vm.opportunity.clientNumber;
                var model = getModelForClientContract(vm.contracts.typeContractSelected.id, vm.opportunity.typeClient, vm.opportunity.clientNumber);
                prospectSrv.getInfoClient(model).then(function success(_record) {
                    if (_record.success) {
                        var info = _record.data[0];
                        var name = info.name.trim() + " " + info.lastName.trim() + " " + info.secondLastName.trim();
                        vm.opportunity.clientName = info.personType === "1" ? name : info.companyName;
                    } else {
                        vm.opportunity.clientName = "";
                        vm.readonly =true;
                        CommonModalsSrv.info(_record.msg);
                    }
                }).catch(function error(error) {
                    CommonModalsSrv.info(error.msg);
                });
            }
        };

        function setup() {
            // vm.status = false;
             if (IDOpportunity) {
                 vm.isUpdateOp = true;
                 getOpportunity();
             }else {
                 vm.isUpdateOp = false;
                 setupVars();
                 //setupOptions();
             }
             getStrategy();
             getSegmenty();
             inicializarWatch();
         };

         function inicializarWatch() {
            //observamos los cambios de la fecha de cierre para actualizar la fecha maxima de contacto
            if (vm.opportunity && vm.opportunity.highDate) {
                $scope.$watch('add.opportunity.highDate', function () {
                    var config = getConfigContactDate();
                    config.maxDate = vm.prospect.highDate;
                    if (vm.addActivity && vm.varsActivity && vm.varsActivity.activity && vm.varsActivity.activity.date && vm.prospect && vm.prospect.highDate) {
                        var fecha = vm.varsActivity.activity.date;
                        vm.varsActivity.activity.date = vm.prospect.highDate >= fecha ? fecha : moment();
                    }
                    vm.datepicker_opts_Actividad = config;
                });
            }
        }; 


        function getStrategy() {
            addProspectSrv.getStrategy()
                .then(function (result) {
                    if(result.success){
                        vm.strategy = result.data.map(function (_val) {
                            _val.text = _val.strategy;
                            return _val;
                        });
                    }else{
                        CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    }  
                });
        };
        
        function getSegmenty() {
            addProspectSrv.getSegment()
                .then(function (result) {
                    if(result.success){
                        vm.segment = result.data.map(function (_val) {
                            _val.text = _val.segment;
                            return _val;
                        });
                    }else{
                        CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    }  
                });
        }; 

        vm.done = function () {
            if (IDOpportunity) {

                if(validateStage(vm.opportunity.stage)){

                    vm.disabledModal = true;
                CommonModalsSrv.warning('¿Deseas modificar los datos personales del prospecto?').result.then(function () {
                    updateOpportunity(IDOpportunity);
                }, function () {
                    vm.disabledModal = false;
                });

                }

                
            }else {
                saveOpportunity();
            }
        };

        function saveOpportunity() {
            addProspectSrv.setOpportunity(vm.opportunity, vm.varsActivity)
                .then(function (result) {
                    if(result.success){
                        $uibModalInstance.close();
                    }else{
                        $uibModalInstance.dismiss();
                        CommonModalsSrv.error(result.data);
                        
                    }  
                });
        }

         function validateStage(obj){
            /*var modelUpdate ={
                language: 'SPA',
                idOpportunity: vm.detailOpportunity.idOpportunity,
                idEmployee : userConfig.user.employeeID,
                idNextStage: obj.idStage,
            };*/
            

            var op = obj.idStage - vm.detailOpportunity.asrStage.idStage;

            if(obj.idStage === 8 && vm.detailOpportunity.contacted == false){
                CommonModalsSrv.error('Para cambiar de etapa, el cliente debe ser contactado');
                return false;

            }else if(op >= 2 && obj.idStage != 10 ){
                CommonModalsSrv.error('Te falta seleccionar la Etapa PROSPECTO');
                return false;
            }else if(!vm.opportunity.lowMotive && vm.activeLowMotive ){
                CommonModalsSrv.error('Seleccione el origen de la Baja');
                return false;
            }

            return true;

        
        };

        vm.changeStage =  function(obj){
            vm.activeLowMotive = obj.idStage === 10 ? true : false;
            vm.opportunity.lowMotive = null;


        }



















        /* codigo viejo */

        vm.contracts = {
            optionTypeContract: [
                { id: "998", text: "Casa" },
                { id: "999", text: "Banco" }
            ],
            typeContractSelected: { id: "998", text: "Casa" }
        };

        vm.changeTypeProspect = function(){
            vm.prospect.DTP = null;
            resetDataReferido();
        };
        vm.changeContractClient = function(){
            if(vm.prospect.typeClient !== "contract"){
                vm.contracts.typeContractSelected= { id: "998", text: "Casa" };
            }
            resetDataReferido();       
        };

        vm.changeTypeContract = function(){
            resetDataReferido();
        };

        vm.lostFocusClientContract = function () {
            if (vm.prospect && vm.prospect.clientNumber) {
                vm.oldValueContract =vm.prospect.clientNumber;
                var model = getModelForClientContract(vm.contracts.typeContractSelected.id, vm.prospect.typeClient, vm.prospect.clientNumber);
                prospectSrv.getInfoClient(model).then(function success(_record) {
                    if (_record.success) {
                        var info = _record.data[0];
                        var name = info.name.trim() + " " + info.lastName.trim() + " " + info.secondLastName.trim();
                        vm.prospect.refersName = info.personType === "1" ? name : info.companyName;
                    } else {
                        vm.prospect.refersName = "";
                        CommonModalsSrv.info(_record.msg);
                    }
                }).catch(function error(error) {
                    CommonModalsSrv.info(error.msg);
                });
            }
        };

        vm.changeActivity = function(){
            if(!vm.addActivity){
                vm.varsActivity = null;

            }

        };

        $scope.$watch('add.addActivity', function () {
            if (!vm.varsActivity && vm.addActivity ) {
                vm.varsActivity = {
                    activity: {
                        date: moment()
                    }
                };
            }
        });
       
        function resetDataReferido() {
            vm.prospect.refersName = '';
            vm.prospect.clientNumber = '';
        }

        function getModelForClientContract(bankingArea, type, clientOrContract ) {
            var model = {
                type: 0,
                titularFlag: true,
                bankingArea: bankingArea,
                contractNumber: '',
                clientNumber: ''
            };
            if(type === "contract"){
                model.type = 2;
                model.contractNumber = clientOrContract;
            }else{
                model.type = 1;
                model.clientNumber = clientOrContract;
            }
            return model;
        }

          

        

        vm.close = function () {
            $uibModalInstance.dismiss();
        };

        


        function updateOpportunity(IDOpportunity) {
            prospectSrv.updateOpportunity(vm.opportunity,IDOpportunity)
                .then(function (result) {
                    if(result.success){
                        $uibModalInstance.close();
                        CommonModalsSrv.done(result.data);
                        if(vm.opportunity.stage.idStage == 10){
                            $state.go('prospects.myProfile');
                        }
                    }else{
                        $uibModalInstance.dismiss();
                        CommonModalsSrv.error(result.data);
                    } 
                });
        }

        
        function getOpportunity() {

            prospectSrv.getOpportunityById(IDOpportunity).then(function( _opportunity ) {
                 vm.detailOpportunity = _opportunity;
                 setupDetail();
                 getStages();
                // setupOptions();
            }).catch(function () {
                CommonModalsSrv.error("Ha ocurrido un error.");
            });
                
        }

        function getStages(){
            var stage = vm.detailOpportunity.asrStage.idStage;
            var listStage = [];
            prospectSrv.getStages().then(function( _stages ){
                _stages.forEach(function(res){
                    if(res.idStage >= stage){
                        if(stage != 9){
                            listStage.push(res);
                        }
                        
                    }
                });
                 vm.stageList =listStage.map(function (_val) {
                    _val.text = _val.description;
                    return _val;
                });
    
            });

                   
        }

        function setupDetail() {
            
            
            if(vm.detailOpportunity.asrStrategy.idStrategy == "2"){
                vm.isReactivation = true;
                vm.isNewOpportunity = false;
                vm.readonlyNoClient = true;
                vm.readonly =true;
            }else if(vm.detailOpportunity.asrStrategy.idStrategy == "3"){
                vm.isNewOpportunity = true;
                vm.isReactivation = false;
                vm.readonly =false;
            }else{
                vm.isReactivation = false;
                vm.readonly =false;
            }

            vm.detailOpportunity.asrStrategy.text =  vm.detailOpportunity.asrStrategy.strategy;
            vm.detailOpportunity.segmentObject = {};
            vm.detailOpportunity.segmentObject.id =  vm.detailOpportunity.idSegment;
            vm.detailOpportunity.segmentObject.text =  vm.detailOpportunity.segment;
            vm.detailOpportunity.asrStage.text =  vm.detailOpportunity.asrStage.description;
            vm.opportunity = {};

            //vm.opportunity.strategy.text = vm.detailOpportunity.asrStrategy.strategy;
            
            

            vm.opportunity.stage = vm.detailOpportunity.asrStage;
            vm.opportunity.strategy = vm.detailOpportunity.asrStrategy;
            vm.opportunity.clientNumber = vm.detailOpportunity.clientNumber;
            vm.opportunity.clientName = vm.detailOpportunity.nameOpportunity;
            vm.opportunity.segment = vm.detailOpportunity.segmentObject;
            vm.opportunity.phone = vm.detailOpportunity.phone;
            vm.opportunity.email = vm.detailOpportunity.mail;
            vm.opportunity.highDate = vm.detailOpportunity.creationDate;


            vm.stageBlockade = vm.opportunity.stage.idStage; 


            /*vm.datepicker_opts_Fecha_Alta = {
	        	parentEl: "idDateEnd",
	        	singleDatePicker: true,
	        	initDate:vm.opportunity.highDate,
	            minDate: moment()
            };*/
        }
       
        function setupVars() {
            vm.prospect = {
                type: 'prospect',
                referred: 'false',
                typeClient: 'contract',
                highDate: moment()
            };

            //config Calendar Fecha Cierre
            vm.datepicker_opts_Fecha_Alta = {
	        	parentEl: "idDateEnd",
	        	singleDatePicker: true,
                minDate: moment(),
                locale: {
                    format: "DD/MM/YYYY"
                }
            };
            
            //config Calendar Actividad
            vm.datepicker_opts_Actividad = getConfigContactDate();

            /*----------*/
            
            
            if(vm.opportunity){
                 vm.opportunity.clientName = "";
                 vm.opportunity.phone = "";
                 vm.opportunity.email = "";
                 vm.opportunity.clientNumber = "";
                 vm.opportunity.segment = null;

            }
            

            
            //$scope.varsActivity = {};          
        }

        function getConfigContactDate() {
            return {
                singleDatePicker: true,
                initDate: moment(),
                minDate: moment(),
                maxDate: moment(),
                locale: {
                    format: "DD/MM/YYYY"
                }
            };
        }
        

        function refactorDropdowns(_model, _property) {
            return R.map(function (_val) {
                _val.text = _val[_property];
                return _val;
            }, _model);
        }

        function setupOptions() {            

            /*prospectSrv.getProspectProfile().then(function (_options) {
                vm.profileTypes = refactorDropdowns(_options, 'description');
            });
            // prospectSrv.getProspectTPC().then(function(_options){
            //     vm.optionsTPC = refactorDropdowns(_options, 'description');
            // });*/
            var _options = [{ description: 'Contrato complementario cliente actual' },
            { description: 'Recomendación de cliente' },
            { description: 'Familiar/conocido del Asesor' }];
            vm.optionsDTPR = refactorDropdowns(_options, 'description');

            _options = [{ description: 'Cliente no asesorado' },
            { description: 'Walk in' },
            { description: 'CAT' },
            { description: 'Prospección en Frío' }];
            vm.optionsDTPNR = refactorDropdowns(_options, 'description');

            prospectSrv.getStages().then(function (_options) {
                //Se realiza el filtro de los estados a los cuales podra acceder
                //Modificacion
                if(!vm.mod){
                    var data = _options.filter(function (record) {
                        return record.idStage >= vm.detailProspect.idStage;
                    });
                    vm.optionsStages = refactorDropdowns(data, 'description');    
                }else{//Agregar
                    vm.optionsStages = refactorDropdowns(_options, 'description');    
                }     
            });
            /*prospectSrv.prospecsPT().then(function (_options) {
                vm.phoneTypes = refactorDropdowns(_options, 'PhoneTypeName');
            });*/
        }


        setup();

    }

    angular.module('actinver.controllers')
        .controller('prospectsModalCtrl', prospectsModalCtrl);

})();

( function(){
    "use strict";

    reportDetailCtrl.$inject = ['adviserInfo', 'dateInfo', '$filter', '$uibModalInstance', 'exportTableToExcel', 'binnacleInfo', 'prospectModalsSrv', 'NgTableParams', 'prospectSrv', '$state', 'userConfig'];
    function reportDetailCtrl(adviserInfo, dateInfo, $filter, $uibModalInstance, exportTableToExcel, binnacleInfo, prospectModalsSrv, NgTableParams, prospectSrv, $state, userConfig ){
        var vm = this;
        var userID = userConfig.user.employeeID;
        var date =  $filter('date')( dateInfo.date, 'MM/yyyy');  

        var employeeID = adviserInfo.adviserID;
        var idFC = adviserInfo.idCF;
        var typeReport = adviserInfo.type;
        vm.name = adviserInfo.name;

        function setup(){
            if(typeReport == 1){
                getReportDetail();
            }else
               getReportDetailFC();
            
        }

        function getReportDetail(){
            prospectSrv.getReportOpportunityDetail( employeeID, date ).then(function( result ){
                vm.listReportDetail = result.result;
            }).catch(function () {
            });
        };

        function getReportDetailFC(){
            prospectSrv.getReportOpportunityDetailFC( idFC, date ).then(function( result ){
                vm.listReportDetail = result.result;
            }).catch(function () {
            });
        };

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        

        vm.reportDetail = function () {
			var exportHref = exportTableToExcel.tableToExcel('#idTablaResultadosReportDetail', 'Reporte por estrategias');
			var link = document.createElement('a');
			link.download = 'Reporte por Estrategia.xls';
			link.href = exportHref;
			link.click();
		};  

        setup();

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'reportDetailCtrl', reportDetailCtrl );

})();

( function(){
    "use strict";

    transferModalCtrl.$inject = ['$uibModalInstance', 'info', 'transfersSrv', '$scope', '$sessionStorage'];
    function transferModalCtrl( $uibModalInstance, info, transfersSrv, $scope, $sessionStorage ){
        var vm = this;
        vm.info = info;
        vm.info.transfer.import = vm.info.transfer.import.replace(/[^\d|\-+|\.+]/g, '');
        if(info.transfer.account && info.transfer.account.bankAccounts && info.transfer.account.bankAccounts.beneficiaryName){
            vm.info.transfer.account.beneficiaryName = info.transfer.account.bankAccounts.beneficiaryName;
        }
        if(info.transfer.account.contractNumber){
            vm.info.transfer.account.contractNumber = info.transfer.account.contractNumber;
        }else if(info.transfer.account.bankAccounts.clabe){
            vm.info.transfer.account.contractNumber = info.transfer.account.bankAccounts.clabe;
        }
        vm.date = new Date();

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $scope.loadingMakeTransfer = true;
            var _clientId = $sessionStorage.sclient.data.clientNumber;
            var _user = $sessionStorage.sclient.data.name + ' ' + $sessionStorage.sclient.data.lastName + ' ' + $sessionStorage.sclient.data.secondLastName;
            if(info.typeTrans === '2' && info.contract.companyName === 'Casa'){
                transfersSrv.makeTransferOtherAccount( info, vm.date, _clientId, _user).then(function( _res){
                    $uibModalInstance.close( _res );
                });
            }else{
                transfersSrv.makeTransfer( info, vm.date, _clientId, _user).then(function( _res){
                    $uibModalInstance.close( _res );
                });
            }


        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'transferModalCtrl', transferModalCtrl );

} )();

( function(){
    "use strict";

    detailModalCtrl.$inject = ['$uibModalInstance', 'info'];
    function detailModalCtrl( $uibModalInstance , info){
        var vm = this;

        vm.info = info;

        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){

            $uibModalInstance.close( );
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'detailModalCtrl', detailModalCtrl );

} )();

( function(){
    "use strict";

    errorSystemModalCtrl.$inject = ['$uibModalInstance'];
    function errorSystemModalCtrl( $uibModalInstance ){ //message
        var vm = this;
        vm.close = function(){
            $uibModalInstance.dismiss();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'errorSystemModalCtrl', errorSystemModalCtrl );

} )();

(function () {
    "use strict";

    derivativesCtrl.$inject = ['userConfig', 'MessagesSrv', 'CommonModalsSrv', 'modalActivity', '$uibModal', 'administratorModalsSrv', 'derivativesSrv'];
    function derivativesCtrl(userConfig, MessagesSrv, CommonModalsSrv,modalActivity,$uibModal, administratorModalsSrv, derivativesSrv) {
        var vm = this;
        vm.table ={
            headers:[],
            body:[]
        };

      

        function setup () {
            getDerivatives();
        }

        function getDerivatives(){
            vm.table.headers =[];
            vm.table.body =[];   
            vm.loadingDer = true;
            derivativesSrv.getDerivatives().then(function(_res){            
                vm.table.headers.push({name:"Nota", originalName:"nota"});
                if(_res && _res.length > 0){                 
                    _res.forEach(function(row, indice){                            
                        for(var key in row){
                            var value;
                            if(indice == 0){
                                if(key.toString() !== "nota" ){
                                    value = key.toString().replace("a","");
                                    vm.table.headers.push({name:value, originalName:key});
                                }
                            }                                                      
                        }
                    });
                }
               
                vm.table.body = _res;                 
            })
            .finally( function(){
                vm.loadingDer = false;
            });
        }

        vm.saveCSV = function(){
            derivativesSrv.saveCSV( vm.csv ).then(function(){
                CommonModalsSrv.done( 'El CSV se a guardado de manera exitosa.' );
                vm.csv = '';
                getDerivatives();
            });
        };


        setup();
    
    };

   
    angular.module('actinver.controllers')
        .controller('derivativesCtrl', derivativesCtrl);
})();

(function() {
    "use strict";

    derivativesSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function derivativesSrv( URLS, $q, $http, ErrorMessagesSrv, csrfSrv ) {
        
        function Derivatives(){}

        Derivatives.prototype.getDerivatives = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getDerivatives,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    resolve( response.data );
                })
                .catch( reject );
            });
        };

        Derivatives.prototype.saveCSV = function ( _csv ) {
            var txt = _csv;
            txt = txt.replace(/([^\t]+)/i, 'nota');
            txt = txt.replace(/\t/g,'|');
            var json = csvJSON(txt);
            _csv = transformar(json);
              return $q(function( resolve, reject ){
  
                  csrfSrv.csrfValidate()
                  .then(successCsrf)
                  .catch(errorCsrf);
  
                  function successCsrf(){
                      var parametersSubmit = {
                        derivatives:_csv
                      };
                      $http({
                          method: 'POST',
                          url: URLS.updateDerivatives,
                          data: $.param(parametersSubmit),
                          transformResponse: function(data){
                              data = {"status":1,"messages":[{"type":null,"criticality":null,"code":null,"description":"OPERACIÓN EXITOSA"}],"result":null};
                              return data;
                          }
                      }).then(function(response) {
                          resolve( response.data );
                      });
                  }
  
                  function errorCsrf(error){
                      reject(error);
                  }
  
              });
          };


          function csvJSON(csv) {
            var lines = csv.split("\n");
            var result = [];
            var headers = lines[0].split("|");
  
            for (var i = 1; i < lines.length; i++) {
              var obj = {};
              var currentline = lines[i].split("|");
  
              for (var j = 0; j < headers.length; j++) {
                obj[headers[j]] = currentline[j];
              }
              result.push(obj);
            }
          //return result; //JavaScript object
          return JSON.stringify(result); //JSON
        }

          function transformar(jason) {
            var rv = [];
            var rv2 = {};
  
            $.each(JSON.parse(jason), function (k, v) {
                rv2 = {};
                $.each(v, function (kk, vv) {                    
                    if (kk !== 'nota'){
                        rv2['a' + kk] = vv;
                    } else {
                        rv2[kk] = vv;
                    }
                });
                rv[k] = rv2;
            });
            return JSON.stringify(rv);
        }


        return new Derivatives();
    }

    angular.module('actinver.services')
        .service('derivativesSrv', derivativesSrv);
})();
(function () {
    "use strict";

    advisersBinnacleCtrl.$inject = ['$filter', 'administratorSrv', 'CommonModalsSrv', 'userConfig', 'MessagesSrv', 'FileSaver'];
    function advisersBinnacleCtrl($filter, administratorSrv, CommonModalsSrv, userConfig, MessagesSrv, FileSaver) {
        var vm = this;
        vm.modal = false;
        vm.search = {};
        vm.fieldSearch = "";

        function setup() {
            setupVars();

        }

        function setupVars() {
            vm.message = null;
            vm.rangeDate = null;
            vm.search.endDate = new Date();
            vm.search.startDate = new Date(vm.search.endDate.getFullYear(), vm.search.endDate.getMonth(), 1);
            getOptionsDropdowm(vm.search.startDate, vm.search.endDate);
        }

        function getOptionsDropdowm(startDate, endDate) {
            vm.modal = true;
            MessagesSrv.getDatedMessages(startDate, endDate).then(function (response) {
                vm.optionsDropdowm = buildOptionsDropdowm(response);
                vm.modal = false;
            }).catch(function () {
                vm.modal = false;
                CommonModalsSrv.error("Ocurrio un error al obtener los mensajes.");
            });
        }

        function buildOptionsDropdowm(_list) {
            _list.forEach(function (_item) {
                _item.text = _item.message;
            });
            return _list;
        }

        function b64Decoder(base64, contentType){
             var file = null;
            if(base64){
                var temporaryByteChar=atob(base64);
                var temporaryByteArrays=[];
                var temporaryByteNumb= new Array (temporaryByteChar.length);
                for (var i = 0 ; i<temporaryByteChar.length;i++){
                    temporaryByteNumb[i] = temporaryByteChar.charCodeAt(i);
                }
                var temporaryByteArray= new Uint8Array(temporaryByteNumb);
                temporaryByteArrays.push(temporaryByteArray);
                file = new Blob(temporaryByteArrays, {type:contentType});
            }
            return file;
        }

        vm.changeOptionSelectedDropdowm = function (_option) {
            vm.fieldSearch = _option.message;
            administratorSrv.getAdvisersBinnacleMessage(_option.idMessage)
                .then(
                    function (_response) {
                        vm.message = _response;                        
                    },
                    function () {
                        CommonModalsSrv.error("Ocurrio un error al obtener el mensaje seleccionado.");
                    }
                );
        };

        vm.getxlsx = function () {
            var startDate = $filter('date')(vm.rangeDate.startDate._d, 'yyyyMMdd');
            var endDate = $filter('date')(vm.rangeDate.endDate._d, 'yyyyMMdd');

            administratorSrv.getAdvisersBinnacleBinnacle(userConfig.user.employeeID, startDate, endDate);
        };

        vm.getSearchMessagesByDates = function () {
            getOptionsDropdowm(vm.search.startDate, vm.search.endDate);
            vm.message = null;
            vm.fieldSearch = "";
        };
        vm.downloadFile = function(record){
            var data = b64Decoder(record.fileContent, record.contentType);
            FileSaver.saveAs(data, "file_"+record.idMessage);
        };

        vm.filter = function (condition) {
            return function (record) {
                var creacion = moment(record.creationDate).format("yyyy-MM-dd HH:mm");
                var expiracion = moment(record.expirationDate).format("YYYY-MM-DD");
                if(record.userCode.toUpperCase().includes(condition.toUpperCase()))
                    return true;
                if(record.message.toUpperCase().includes(condition.toUpperCase()))
                    return true;
                if (creacion.includes(condition) || expiracion.includes(condition) )
                    return true;
                return false;
            };
        };

        setup();
    }

    angular.module('actinver.controllers')
        .controller('advisersBinnacleCtrl', advisersBinnacleCtrl);
})();


(function () {
    "use strict";

    economicCtrl.$inject = ['CommonModalsSrv', 'EconomicSrv'];
    function economicCtrl(CommonModalsSrv, EconomicSrv) {
        var vm = this;

        function setup() {
            setupVars();
            getEconomicEnvironment();
        }

        function getEconomicEnvironment() {
            EconomicSrv.getEconomicEnvironment().then(function (_res) {
                vm.html = _res;
            }, function () {
                vm.html = 'Intentarlo más tarde';
            });
        }

        function setupVars() {
            vm.taOptions = [['bold', 'italics', 'ol', 'ul']];
            vm.htmlVariable = '';
            vm.html = '';
        }

        vm.clearEditor = function () {
            vm.htmlVariable = '';
        };

        vm.setTextEconomic = function () {
          if(vm.htmlVariable.length >= 5800 ){
            CommonModalsSrv.error('Ha excedido el limite de caracteres. El número máximo permitido es de 5800');
          }else {
                EconomicSrv.saveCSV(vm.htmlVariable).then(function (response) {
                if (response.status === 1) {
                    CommonModalsSrv.done('El texto se guardó de manera exitosa.');
                    vm.html = vm.htmlVariable;
                    vm.htmlVariable = '';
                }else{
                    CommonModalsSrv.error(response.messages[0].description);
                }
            });
          }
        };
        setup();
    }

    angular.module('actinver.controllers')
        .controller('economicCtrl', economicCtrl);
})();

(function() {
    "use strict";

    EconomicSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv'];
    function EconomicSrv( URLS, $q, $http, csrfSrv ) {
        /**
         *  prospect service
         */
        function Economic(){}

        Economic.prototype.getEconomicEnvironment = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getEconomicEnvironment,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    resolve( response.data );
                })
                .catch( reject );
            });
        };

        Economic.prototype.saveCSV = function ( _csv ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {

                    var parametersSubmit = { 
                        economicEnvironment: _csv
                    };

                    $http({
                        method: 'POST',
                        url: URLS.updateEconomicEnvironment,
                        data: $.param(parametersSubmit),
                        transformResponse: function(data){
                            data = {"status":data==='success' ? 1:2,"messages":[{"type":null,"criticality":null,"code":null,"description":data}],"result":null};
                            return data;
                        }
                    }).then(function(response) {                      
                        resolve(response.data);                        
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
                
            });
        };

        return new Economic();
    }

    angular.module('actinver.services')
        .service('EconomicSrv', EconomicSrv);
})();

( function(){
    "use strict";

    eeuuCtrl.$inject = ['EeuuSrv', 'NgTableParams', 'CommonModalsSrv'];
    function eeuuCtrl( EeuuSrv, NgTableParams, CommonModalsSrv ){
        var vm = this;
        vm.table ={
            headers:[],
            body:[]
        };
        
        function setup () {
            getGlobalForecasts();
        }

        function getGlobalForecasts(){
            vm.table.headers =[];
            vm.table.body =[];   
            vm.loadingEE = true;
            EeuuSrv.getGlobalForecasts().then(function(_res){                
                vm.table.headers.push({name:"Estados Unidos/ Global", originalName:"indicador"});
                if(_res && _res.length > 0){                    
                    _res.forEach(function(row, indice){                       
                        for(var key in row){
                            var value;
                            if(indice == 0){
                                if(key.toString().length === 5 ){
                                    value = key.toString().replace("a","");
                                    vm.table.headers.push({name:value, originalName:key});
                                }
                            }                                                     
                        }
                    });
                }
                vm.table.body = _res;               
            })
            .finally( function(){
                vm.loadingEE = false;
            });
        }

        vm.saveCSV = function(){
            EeuuSrv.saveCSV( vm.csv ).then(function(){
                CommonModalsSrv.done( 'El CSV se a guardado de manera exitosa.' );
                vm.csv = '';
                getGlobalForecasts();
            });
        };

        setup();
    }


    angular.module('actinver.controllers')
    .controller('eeuuCtrl', eeuuCtrl );

})();

(function() {
    "use strict";

    EeuuSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv'];
    function EeuuSrv( URLS, $q, $http, csrfSrv ) {
        /**
         *  prospect service
         */
        function Eeuu(){}

        Eeuu.prototype.getGlobalForecasts = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getGlobalForecasts,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    resolve( response.data );
                })
                .catch( reject );
            });
        };

        function csvJSON(csv) {
          var lines = csv.split("\n");
          var result = [];
          var headers = lines[0].split(",");

          for (var i = 1; i < lines.length; i++) {
            var obj = {};
            var currentline = lines[i].split(",");

            for (var j = 0; j < headers.length; j++) {
              obj[headers[j]] = currentline[j];
            }
            result.push(obj);
          }
        //return result; //JavaScript object
        return JSON.stringify(result); //JSON
      }

       function transformar(jason) {
          var rv = [];
          var rv2 = {};

          $.each(JSON.parse(jason), function (k, v) {
              rv2 = {};
              $.each(v, function (kk, vv) {
                  if (kk !== 'indicador')
                      rv2['a' + kk] = vv.replace(/,/g, '.');
                  else
                      rv2[kk] = vv;
              });
              rv[k] = rv2;
          });
          return JSON.stringify(rv);
      }

        Eeuu.prototype.saveCSV = function ( _csv ) {
          var txt = _csv;
          txt = txt.replace(/([^\t]+)/i, 'indicador');
          txt = txt.replace(/\t/g,',');
          var json = csvJSON(txt);
          _csv = transformar(json);
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var parametersSubmit = {
                        globalForecasts:_csv
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateGlobalForecasts,
                        data: $.param(parametersSubmit),
                        transformResponse: function(data){
                            data = {"status":1,"messages":[{"type":null,"criticality":null,"code":null,"description":"OPERACIÓN EXITOSA"}],"result":null};
                            return data;
                        }
                    }).then(function(response) {
                        resolve( response.data );
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }

            });
        };

        return new Eeuu();
    }

    angular.module('actinver.services')
        .service('EeuuSrv', EeuuSrv);
})();

(function () {
    "use strict";

    employeeCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'NgTableParams', 'EmployeeAdminSrv', 'userConfig'];
    function employeeCtrl(administratorModalsSrv, CommonModalsSrv, NgTableParams, EmployeeAdminSrv, userConfig) {

        var vm = this;

        function setup() {
            setupVars();
            getEmployeeMap();
        }

        vm.updateSearch = function () {
            var term = vm.name;
            vm.tableParams.filter({ $: term });
        };

        vm.showModalCreateEmployee = function () {
            administratorModalsSrv.admonEmployee('Nuevo mapeo')
                .then(function (_model) {
                    _model.idEmployeeRegister = vm.sadviser.employeeID;
                    EmployeeAdminSrv.saveEmployeeMap(_model)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getEmployeeMap();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        };

        vm.showModalRemoveEmployee = function (_id) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar el mapeo?').result
                .then(function () {
                    EmployeeAdminSrv.removeEmployeeMap(_id)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getEmployeeMap();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                }).catch(function (res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
        };

        function getEmployeeMap() {
            vm.loadingEmpl = true;
            EmployeeAdminSrv.getEmployeeMap(vm.sadviser.employeeID)
                .then(function (_res) {
                    setTable(_res);
                }).catch(function () {
                    vm.errorLoadingEmpl = true;
                }).finally(function () {
                    vm.loadingEmpl = false;
                });
        }

        function setupVars() {
            vm.sadviser = userConfig.user;
        }

        function setTable(_list) {
            vm.tableParams = new NgTableParams(
                { count: 10 },
                { dataset: _list }
            );
        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('employeeCtrl', employeeCtrl);
})();


(function () {
    "use strict";

    EmployeeAdminSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function EmployeeAdminSrv(URLS, $q, $http, ErrorMessagesSrv, csrfSrv) {
        /**
         *  prospect service
         */
        function Employee() { }

        Employee.prototype.getEmployeeMap = function (_id) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getEmployeeMap + _id,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (!!response.data.status) {
                        resolve(response.data.result);
                    }
                    else {
                        ErrorMessagesSrv(response.data.messages);
                        reject();
                    }
                }).catch(reject);
            });
        };

        Employee.prototype.saveEmployeeMap = function (_model) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        prevIdEmployee: _model.old,
                        idEmployee: _model.new,
                        idEmployeeRegister: _model.idEmployeeRegister,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveEmployeeMap,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Employee.prototype.removeEmployeeMap = function (_id) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = { 
                        idEmployeeMap: _id,
                        language: 'SPA' 
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deleteEmployeMap,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        return new Employee();
    }

    angular.module('actinver.services')
        .service('EmployeeAdminSrv', EmployeeAdminSrv);
})();

( function(){
    "use strict";

    factsheetsCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'FactsheetsSrv'];
    function factsheetsCtrl( administratorModalsSrv, CommonModalsSrv, FactsheetsSrv  ){
        var vm = this;

        function setup () {
            setupVars();
            getClassifications();
        }


        function setupVars () {
            vm.selectedTab = 1;
        }


        vm.showModalCreateFactsheet = function () {
            administratorModalsSrv.admonFactsheet('Agregar nuevo', {})
                .then(
                    function ( msg ){
                        if( typeof msg !== 'undefined' ){
                            if( msg === 'success' ){
                                CommonModalsSrv.done( 'El producto se agregó de manera exitosa.' );
                                getSubProducts( vm.selectedTab );
                            } else {
                                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                            }
                        }
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
            };

        vm.showModalEditFactsheet = function ( _factsheet ) {
            administratorModalsSrv.admonFactsheet('Editar producto', _factsheet )
                .then(
                    function ( msg ){
                        if( typeof msg !== 'undefined' ){
                            if( msg === 'success' ){
                                CommonModalsSrv.done( 'El producto se modificó de manera exitosa.' );
                                getSubProducts( vm.selectedTab );
                            } else {
                                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                            }
                        }
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
            };


        vm.showModalRemoveFactsheet = function ( _idFactsheet ) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar el producto?')
                .result.then(
                    function ( ){
                        FactsheetsSrv.removeClassifications( _idFactsheet ).then(function() {
                            CommonModalsSrv.done( 'El producto se eliminó de manera exitosa.' );
                            getSubProducts( vm.selectedTab );
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
            };

        vm.changeTab = function( _id){
            vm.selectedTab = _id;
            getSubProducts( _id );
        };


        function getClassifications(){
            vm.loadingProducts = true;
            FactsheetsSrv.getClassifications().then( function( _res ){
                vm.products = _res;

                getSubProducts( vm.products[0].idClassification );
            }, function(){
                vm.errorLoadingProducts = true;
            })
            .finally( function(){
                vm.loadingProducts = false;
            });

        }

        /**
        * @param {id} produdct
        **/
        function getSubProducts( _id ){
            vm.loadingSubProducts = true;
            FactsheetsSrv.getProductsByClassification( _id ).then(function( _listProduct ){
                vm.subProducts = _listProduct;
                vm.loadingSubProducts = false;
            }, function(){
                vm.subProducts = [];
            });
        }


        setup();
    }


    angular.module('actinver.controllers')
    .controller('factsheetsCtrl', factsheetsCtrl );

})();

(function() {
    "use strict";

    FactsheetsSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function FactsheetsSrv( URLS, $q, $http, ErrorMessagesSrv ,csrfSrv) {

        /**
         *  prospect service
         */
        function Factsheets(){}

        Factsheets.prototype.getClassifications = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getClassifications,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                })
                .catch( reject );
            });
        };

        Factsheets.prototype.getProductsByClassification = function ( _id ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getProductsByClassification + _id,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                })
                .catch( reject );
            });
        };

        Factsheets.prototype.doFactsheet = function( info ){
            return $q( function( resolve, reject ){

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf(){
                    var type = '',
                        url = '',
                        params = {
                            name: info.name,
                            language: 'SPA'
                        };

                    if( !info.idProduct ){
                        type = 'add';
                        url = URLS.doFactsheet;
                        params.idClassification = info.clasification.idClassification;
                    } else {
                        type = 'edit';
                        url = URLS.updateFactsheetProduct;
                        params.idProduct = info.idProduct;
                    }

                    $http( {
                        method: 'POST',
                        url: url,
                        params: params,
                    } ).then( function( response ) {

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: ( response.data.result ) ? response.data.result : info.idProduct, type: type } );
                        } else {
                            resolve( { success: false, data: null } );
                        }

                    });

                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Factsheets.prototype.updateImg = function ( idProduct, file ) {
            return $q( function( resolve, reject ){

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf(){
                    file.url = URLS.updateFactsheetImg;
                    file.alias = 'image';
                    file.formData.push( { idProduct: idProduct } );
                    file.formData.push( { language: 'SPA' } );
                    file.upload();
                    file.onSuccess = function( msg ){
                        resolve( { success: true, data: msg } );
                    };
                    file.onError = function( msg ){
                        resolve( { success: false, data: msg } );
                    };
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Factsheets.prototype.removeClassifications = function ( _id ) {
            return $q(function( resolve, reject ){

                /**Token de seguridad */
                  csrfSrv.csrfValidate().
                        then(successCsrf).
                        catch(errorCsrf);

                function successCsrf(){
                        $http({
                            method: 'POST',
                            url: URLS.deleteProduct,
                            data: $.param({idProduct:_id,language: 'SPA'})
                        }).then(function(response) {
                            if( !!response.data.status ){
                                resolve( response.data.result );
                            }
                            else{
                                ErrorMessagesSrv( response.data.messages );
                                reject();
                            }
                        });
                        }

                    function errorCsrf(error){
                            reject(error);
                    }

                    });

        };

        return new Factsheets();
    }

    angular.module('actinver.services')
        .service('FactsheetsSrv', FactsheetsSrv);
})();

( function(){
    "use strict";

    groupCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'GroupSrv', 'userConfig', '$uibModal'];
    function groupCtrl( administratorModalsSrv, CommonModalsSrv, GroupSrv, userConfig, $uibModal ){
        var vm = this;

        var employeeID = userConfig.user.employeeID;

        function setup () {
            getGroups();
        }

        vm.editName = function( _group ){
            $uibModal.open({
               templateUrl: '/app/advisers/administrator/group/modal/group-modal.html',
               size: 'lg',
               windowClass : 'administrator',
               controller: 'admonGroupModalCtrl',
               controllerAs: 'modal',
               resolve:{
                   group: function(){
                       return _group;
                   }
               }
           }).result.catch(function(res){
            throw res;
           });
        };


        vm.showModalCreateGroup = function () {
            administratorModalsSrv.admonGroup('Agregar nuevo', {})
                .then(
                    function ( _model ){
                        _model.employeeID = employeeID;
                        GroupSrv.saveGroup( _model ).then(function() {
                            CommonModalsSrv.done( 'El grupo se agregó de manera exitosa.' );
                            getGroups();
                        }).catch(function(res) {
                            if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                                throw res;
                            }
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
            };


        vm.showModalEditGroup = function ( _group ) {
            administratorModalsSrv.admonGroup('Editar grupo', _group )
                .then(
                    function ( _model ){
                        GroupSrv.updateNameGroup( _model ).then(function() {
                            CommonModalsSrv.done( 'El grupo se modificó de manera exitosa.' );
                            getGroups();
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
            };


        vm.showModalRemoveGroup = function ( _idGroup ) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar el grupo?')
                .result.then(
                    function ( ){
                        GroupSrv.deleteGroup( _idGroup ).then(function() {
                            CommonModalsSrv.done( 'El grupo se eliminó de manera exitosa.' );
                            getGroups();
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
            };

        function getGroups(){
            vm.loadingGroups = true;
            GroupSrv.getGroups().then(function( _res ){
                vm.groups = _res;
            })
            .finally(function(){
                vm.loadingGroups = false;
            });
        }

        setup();
    }


    angular.module('actinver.controllers')
    .controller('groupCtrl', groupCtrl );

})();

(function() {
    "use strict";

    GroupSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv', 'ErrorMessagesSrv'];
    function GroupSrv( URLS, $q, $http, csrfSrv, ErrorMessagesSrv ) {
        /**
         *  prospect service
         */
        function Group(){}


        Group.prototype.getGroups = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getGroups,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                })
                .catch( reject );
            });
        };


        Group.prototype.saveGroup = function( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){

                    var parametersSubmit = {
                        name:_model.name,
                        idEmployee:_model.employeeID,
                        language: 'SPA'
                    };

                    $http({
                        method: 'POST',
                        url: URLS.saveGroup,
                        data: $.param(parametersSubmit)
                    })
                    .then(function(response) {
                        if( !!response.data.status && response.data.status === 1 ){
                            resolve( response.data.result );
                        }else{
                            ErrorMessagesSrv( response.data.messages );
                            reject();
                        }
                    }).catch(function(res) {
                        if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                            throw res;
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }

            });
        };

        Group.prototype.updateNameGroup = function( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){

                    var parametersSubmit = {
                        name:_model.name,
                        idTargetGroup:_model.idTargetGroup,
                        language: 'SPA'
                    };

                    $http({
                        method: 'POST',
                        url: URLS.updateNameGroup,
                        data: $.param(parametersSubmit)
                    })
                    .then(function(response) {
                        if( !!response.data.status ){
                            resolve( response.data.result );
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }

            });
        };

        Group.prototype.deleteGroup = function( _id ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){

                    var parametersSubmit = {
                        idTargetGroup: _id,
                        language: 'SPA'
                    };

                    $http({
                        method: 'POST',
                        url: URLS.deleteGroup,
                        data: $.param(parametersSubmit)
                    })
                    .then(function(response) {
                        if( !!response.data.status ){
                            resolve( response.data.result );
                        }else{
                            ErrorMessagesSrv( response.data.messages );
                            reject();
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }

            });
        };


        Group.prototype.service = function( _type, _method, _paylod ){
            var types ={
                userGroups: 'getAllUser/',
                financialCenters: 'getFinancialCenters/',
                saveCenter: 'saveFinancialCenter/',
                saveUser: 'saveUser/',
                deleteCenter :'deleteFinancialCenter/',
                deleteUser: 'deleteUser/',
            };
            var param = { language: 'SPA'};
            if (_paylod){
                for (var par in _paylod){
                   param[par] = _paylod[par];
                }
              }

            return $q(function( resolve, reject ){
                $http({
                    method: ( _method || 'GET') ,
                    url: ( URLS.ServiceGroups + types[_type] || '/'  ),
                    params: { language: 'SPA'},
                    data: $.param(param)
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                });
            });

        };



        return new Group();
    }

    angular.module('actinver.services')
        .service('GroupSrv', GroupSrv);
})();

(function () {
    "use strict";

    favoritesCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'NgTableParams', 'proposalsProposalSrv', 'FavAdminSrv'];
    function favoritesCtrl(administratorModalsSrv, CommonModalsSrv, NgTableParams, proposalsProposalSrv, FavAdminSrv) {
        var vm = this;

        function setup() {
            getFavorites();
        }

        vm.updateSearch = function () {
            var term = vm.name;
            vm.tableParams.filter({ $: term });
        };

        vm.deleteClassification = function () {
            administratorModalsSrv.admonFavorites('Eliminar clasificacón')
                .then(function (_model) {
                       FavAdminSrv.deleteClassFav(_model)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });


                   
                }).catch(function (res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        }


        vm.showModalCreateFavorites = function () {
            administratorModalsSrv.admonFavorites('Nuevo favorito')
                .then(function (_model) {
                    if(_model.idSelected === 'clasification'){

                        FavAdminSrv.saveClassFav(_model)
                            .then(function (result) {
                                if (result.success) {
                                    CommonModalsSrv.done(result.data);
                                    getFavorites();
                                } else {
                                    CommonModalsSrv.error(result.data);
                                }
                            });

                    }else if(_model.idSelected === 'favorite'){

                        FavAdminSrv.saveFav(_model)
                            .then(function (result) {
                                if (result.success) {
                                    CommonModalsSrv.done(result.data);
                                    getFavorites();
                                } else {
                                    CommonModalsSrv.error(result.data);
                                }
                            });
                    }
                }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        };

        vm.showModalRemoveFavorites = function (_id) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar la emisora?')
                .result.then(function () {
                    FavAdminSrv.removeFav(_id)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getFavorites();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                }).catch(function (res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
        };

        vm.showModalEditFavorites = function(id){
            administratorModalsSrv.admonFavorites('Editar favorito', id)
                .then(function (_model) {
                    _model.idFavorite = id.idIssuer;
                    FavAdminSrv.updateFav(_model)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getFavorites();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });

                }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });

        }

        function getFavorites() {
            vm.loadingFav = true;
            FavAdminSrv.getClassificationFavAdm().then(function (_res) {
                getFav(_res.data);
            }, function () {
                vm.errorLoadingFav = true;
                vm.loadingFav = false;
            });
        }

        function getFav(_types) {
            FavAdminSrv.getFavorites().then(function (_res) {
                setupTable(refactoringFunds(_res.data, _types));
                vm.loadingFav = false;
            });
        }

        function refactoringFunds(_favs, _types) {
            var type;
            return _favs.map(function (_fav) {
                type = R.find(function (_type) {
                    return _type.idClassification === _fav.idClassification;
                }, _types || []);
                _fav.classification = type || '';
                return _fav;
            });
        }

        function setupTable(_list) {
            vm.tableParams = new NgTableParams(
                { count: 10 },
                { dataset: _list }
            );
        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('favoritesCtrl', favoritesCtrl);
})();

(function() {
    "use strict";

    FavAdminSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function FavAdminSrv( URLS, $q, $http, ErrorMessagesSrv, csrfSrv ) {
        /**
         *  prospect service
         */
        function Favorites(){}

        Favorites.prototype.saveFav = function ( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        name:_model.issuerName, 
                        serie:_model.serie,
                        idClassification:_model.classification.idClassification,  
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveFavorite,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Favorites.prototype.deleteClassFav = function(_model){
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        idClassification:_model.classification.idClassification, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deleteClassificationFav,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });

        };

        Favorites.prototype.saveClassFav = function ( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        nameClassification:_model.name, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveClassificationFav,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Favorites.prototype.updateFav = function ( _model ) {
            return $q(function( resolve, reject ){
                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        idFavorite : _model.idFavorite,
                        name:_model.issuerName, 
                        serie:_model.serie,
                        idClassification:_model.classification.idClassification,  
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateFavorite,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Favorites.prototype.removeFav = function ( _id ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        idFavorite:_id, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deleteFavorite,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }
                    
                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Favorites.prototype.getFavorites = function(){
            
                return $q( function( resolve, reject ){
                $http( {
                    method: 'GET',
                    url: URLS.getFavorites,
                    params: {
                        language: 'SPA'
                    }
                } ).then( function success( response ){

                    if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                        resolve( { success: true, data: response.data.result, topic: 'favorites' } );
                    } else {
                        reject( { success: false, data: [] } );
                    }

                }, function error(){

                    reject( { success: false, data: [] } );

                } );
            } );
        };

        Favorites.prototype.getClassificationFavAdm = function(){

            return $q( function( resolve, reject ){
               $http( {
                   method: 'GET',
                   url: URLS.getClassificationFavAdm,
                   params: {
                       language: 'SPA'
                   }
               } ).then( function success( response ){

                   if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                       resolve( { success: true, data: response.data.result, topic: 'classificationFav' } );
                   } else {
                       reject( { success: false, data: [] } );
                   }

               }, function error(){

                   reject( { success: false, data: [] } );

               } );
           } );
       };

        return new Favorites();
    }

    angular.module('actinver.services')
        .service('FavAdminSrv', FavAdminSrv);
})();

(function () {
    "use strict";

    investmentCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'proposalsProposalSrv', 'InvestmentAdminSrv', 'NgTableParams'];
    function investmentCtrl(administratorModalsSrv, CommonModalsSrv, proposalsProposalSrv, InvestmentAdminSrv, NgTableParams) {
        
        var vm = this;

        function setup() {
            getFundTypes();
        }

        vm.showModalCreateInvestment = function () {
            administratorModalsSrv.admonInvestment('Agregar nuevo')
                .then(function (_model) {
                    InvestmentAdminSrv.saveInvestment(_model)
                        .then(function (result) {
                            if (result.success) {
                                if (_model.type === 'fund') {
                                    CommonModalsSrv.done(result.data);
                                    getFundTypes();
                                    return;
                                }
                                CommonModalsSrv.done(result.data);
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        };

        vm.showModalEditInvestment = function (_investment) {
            administratorModalsSrv.admonInvestment('Editar fondo', _investment)
                .then(function (_model) {
                    InvestmentAdminSrv.updateInvestment(_model)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);                               
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        };

        vm.showModalRemoveInvestment = function (_id) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar el fondo ACTIREN?').result
                .then(function () {
                    InvestmentAdminSrv.removeInvestment(_id)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getFundTypes();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                }).catch(function (res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
        };

        function getFundTypes() {
            vm.loadingInvest = true;
            InvestmentAdminSrv.getFundTypes().then(function (_res) {
                getFunds(_res);
            }, function () {
                vm.errorLoadginInvest = true;
                vm.loadingInvest = false;
            });
        }

        function refactoringFunds(_funds, _types) {
            var type;
            return _funds.map(function (_fund) {
                type = R.find(function (_type) {
                    return _type.idFundType === _fund.idFundType;
                }, _types || []);
                _fund.clasification = type || '';
                return _fund;
            });
        }

        function getFunds(_types) {
            proposalsProposalSrv.getIssuersInfo().then(function (_res) {
                setTable(refactoringFunds(_res.data, _types));
                vm.loadingInvest = false;
            });
        }

        function setTable(_list) {
            var defaults = {
                page: 1,
                count: 6,
            };

            vm.configTable = new NgTableParams(defaults, {
                paginationMaxBlocks: 4,
                paginationMinBlocks: 2,
                dataset: _list,
            });
        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('adminInvestmentCtrl', investmentCtrl);
})();

(function() {
    "use strict";

    InvestmentAdminSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function InvestmentAdminSrv( URLS, $q, $http, ErrorMessagesSrv, csrfSrv ) {
        /**
         *  prospect service
         */
        function InvestmentSrv(){}

        InvestmentSrv.prototype.getFundTypes = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getFundTypes,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                }).catch( reject );
            });
        };

        InvestmentSrv.prototype.saveInvestment = function ( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        name:_model.name, description:_model.description, 
                        idFundType:_model.clasification.idFundType, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveFund,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
                
            });
        };


        InvestmentSrv.prototype.updateInvestment = function ( _model ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        name:_model.name, 
                        description:_model.description, 
                        idFund:_model.idFund, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateFund,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }
                    
                function errorCsrf(error) {
                    reject(error);
                }
 
            });
        };

        InvestmentSrv.prototype.removeInvestment = function ( _id ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        idFund:_id, 
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deleteFund,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }
                    
                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        return new InvestmentSrv();
    }

    angular.module('actinver.services')
        .service('InvestmentAdminSrv', InvestmentAdminSrv);
})();

(function () {
    "use strict";

    legalCtrl.$inject = ['CommonModalsSrv', 'LegalSrv'];
    function legalCtrl(CommonModalsSrv, LegalSrv) {
        var vm = this;

        function setup() {
            setupVars();
            getAnnoucement();
        }

        vm.clearEditor = function () {
            vm.htmlVariable = '';
        };

        vm.setTextLegal = function () {
            LegalSrv.saveCSV(vm.htmlVariable)
                .then(function (result) {
                    if (result !== null) {
                        vm.html = vm.htmlVariable;
                        vm.htmlVariable = '';
                        CommonModalsSrv.done(result.messages[0].description);
                    }
                });
        };

        function getAnnoucement() {
            LegalSrv.getAnnoucement()
                .then(function (_res) {
                    vm.html = _res;
                }, function () {
                    vm.html = 'Intentarlo más tarde';
                });
        }

        function setupVars() {
            vm.taOptions = [['bold', 'italics', 'ol', 'ul']];
            vm.htmlVariable = '';
            vm.html = '';
        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('legalCtrl', legalCtrl);
})();

(function() {
    "use strict";

    LegalSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv'];
    function LegalSrv( URLS, $q, $http, csrfSrv ) {
        /**
         *  prospect service
         */
        function Legal(){}

        Legal.prototype.getAnnoucement = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getAnnoucement,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    resolve( response.data );
                }).catch( reject );
            });
        };

        Legal.prototype.saveCSV = function ( _csv ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        announcement:_csv
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateAnnouncement,
                        data: $.param(parametersSubmit),
                        transformResponse: function(data){
                            data = {"status":1,"messages":[{"type":null,"criticality":null,"code":null,"description":"OPERACIÓN EXITOSA"}],"result":null};
                            return data;
                        }
                    }).then(function(response) {
                        resolve( response.data );
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }
                
            });
        };

        return new Legal();
    }

    angular.module('actinver.services')
        .service('LegalSrv', LegalSrv);
})();

(function () {
    "use strict";

    messagesCtrl.$inject = ['userConfig', 'MessagesSrv', 'CommonModalsSrv', 'modalActivity', '$uibModal'];
    function messagesCtrl(userConfig, MessagesSrv, CommonModalsSrv,modalActivity,$uibModal) {

        var vm = this;
        vm.uploaderOptions = [
            { formats: ["image/png", "image/jpeg", "image/jpg"], size: 2097152 },
            { formats: ["application/pdf"], size: 10485760 }
        ];
        vm.resetFile = false;
        vm.modal = false;
        vm.fieldSearch = "";
        vm.messages = [];

        function setup() {
            setupVars();
            vm.getDatedMessages();
        }

        vm.messageInfo = function (message){
            modalActivity.notice(message);
        };

        vm.previewFile = function (_blob, _file) {
            vm.model.file = _file;
        };

        vm.errorFile = function (_error) {
            vm.model.file = false;
            CommonModalsSrv.warning(_error);
        };

        vm.cleanFields = function () {
            vm.model = {};
            vm.model.file = false;
            vm.resetFile = true;
        };

        vm.filter = function (condition) {
            return function (record) {
                var creacion = moment(record.creationDate).format("yyyy-MM-dd HH:mm");
                var expiracion = moment(record.expirationDate).format("YYYY-MM-DD");
                if(record.userCode.toUpperCase().includes(condition.toUpperCase()))
                    return true;
                if(record.message.toUpperCase().includes(condition.toUpperCase()))
                    return true;
                if (creacion.includes(condition) || expiracion.includes(condition) )
                    return true;
                return false;
            };
        };

        vm.done = function () {

            if (vm.model.file) {
                MessagesSrv.saveMessageImg(userConfig.user.employeeID, vm.model, vm.model.file)
                    .then(function (result) {
                        if (result.success) {
                            $uibModal.open({
                                templateUrl: '/scripts/modals/views/commons/done.html',
                                size: 'sm',
                                windowClass : 'commons done',
                                controller: 'doneModalCtrl',
                                backdrop: 'static',
                                keyboard : false,
                                controllerAs: 'done',
                                resolve:{
                                    message: function(){
                                        return result.data.messages[0].description;
                                    }
                                }
                             }).closed.then(function(){
                                vm.getDatedMessages();
                                vm.cleanFields();
                            });
                        } else {
                            CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                            vm.cleanFields();
                        }
                    });
            } else {

                vm.model.file = {
                    formData: [],
                    disabledMultipart: false,
                    method: 'POST',
                    alias: 'file',
                };

                MessagesSrv.saveMSG(userConfig.user.employeeID, vm.model)
                    .then(function (result) {
                        $uibModal.open({
                            templateUrl: '/scripts/modals/views/commons/done.html',
                            size: 'sm',
                            windowClass: 'commons done',
                            controller: 'doneModalCtrl',
                            backdrop: 'static',
                            keyboard: false,
                            controllerAs: 'done',
                            resolve: {
                                message: function () {
                                    return result.msg;
                                }
                            }
                        }).closed.then(function () {
                            vm.getDatedMessages();
                            vm.cleanFields();
                        });
                    }).catch(function () {
                        CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
                    });
            }
        };

        vm.getDatedMessages= function(){
            vm.fieldSearch="";
            vm.modal = true;
            MessagesSrv.getDatedMessages(vm.startDate,vm.endDate)
            .then(function(_res){
                vm.messages=_res;
                vm.modal = false;
            }).catch(function(){
                vm.modal = false;
            });
        };

        function setupVars() {
            vm.title = "Crea un nuevo mensaje";
            vm.model = {};
            vm.endDate= new Date();
            vm.startDate = new Date(vm.endDate.getFullYear(),vm.endDate.getMonth(),1);

        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('messagesCtrl', messagesCtrl);
})();

(function () {
    "use strict";

    MessagesSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv', '$filter'];
    function MessagesSrv(URLS, $q, $http, ErrorMessagesSrv, csrfSrv, $filter) {
        /**
         *  prospect service
         */
        function Messages() { }

        Messages.prototype.getMessages = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMessages,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (!!response.data.status) {
                        resolve(response.data.result);
                    }
                    else {
                        ErrorMessagesSrv(response.data.messages);
                        resolve();
                    }
                }).catch(reject);
            });
        };

        Messages.prototype.getDatedMessages= function(start,end){

            var _beginDate = $filter('date')(start,'yyyyMMdd');
            var _endDate = $filter('date')(end,'yyyyMMdd');

            if(start._d){
                _beginDate =  moment(start._d).format("YYYYMMDD");
            }
            if(end._d){
                _endDate =  moment(end._d).format("YYYYMMDD");
            }



            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getAllMessagesByRange + _beginDate + "/" + _endDate,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.status===1) {
                        resolve(response.data.result);
                    }
                    else {
                        ErrorMessagesSrv(response.data.messages);
                        resolve([]);
                    }
                }).catch(reject);
            });
        };

        Messages.prototype.getMessageDetail=function(idEmployee,idMessage){
            return $q(function(resolve,reject){
                $http({
                    method:'POST',
                    url:URLS.getMessageDetail,
                    params:{
                        language:'SPA'
                    },
                    data:$.param({
                        idEmployee:idEmployee,
                        idMessage:idMessage
                    })
                }).then(function(response){
                    if(response.data.status===1){
                        resolve(response.data.result[0]);
                    }
                    else{
                        ErrorMessagesSrv(response.data.messages);
                        reject();                        
                    }

                }).catch(reject);
            });
        };

        Messages.prototype.saveMessageImg = function (idEmployee, _model, file) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    file.url = URLS.messageRegistration;
                    file.alias = 'file';
                    file.formData.push({ idEmployee: idEmployee });
                    file.formData.push({ message: _model.message });
                    file.formData.push({ descriptionMessage: _model.descriptionMessage });
                    file.formData.push({ expirationDate: moment(_model.expirationDate).format("DDMMYYYY") });
                    if(_model.destinations!==undefined){
                        file.formData.push({ destinations: _model.destinations });
                    }
                    file.formData.push({ language: 'SPA' });

                    file.upload();
                    file.onSuccess = function (msg) {
                        resolve({ success: true, data: msg });
                    };
                    file.onError = function () {
                        resolve({ success: false, data: null });
                    };
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Messages.prototype.saveMSG = function(idEmployee,_model){

            var temporaryFormData = new FormData();

            temporaryFormData.append('idEmployee',idEmployee);
			temporaryFormData.append('file',undefined);
            temporaryFormData.append('message', _model.message);
            temporaryFormData.append('descriptionMessage', _model.descriptionMessage);
            temporaryFormData.append( 'expirationDate',moment(_model.expirationDate).format("DDMMYYYY") );
            temporaryFormData.append('language','SPA');
            if(_model.destinations!==undefined){
                temporaryFormData.append('destinations', _model.destinations);
            }


            return $q(function(resolve,reject){
                $http({
                    method:'POST',
                    url:URLS.messageRegistration,
                    data:temporaryFormData,
                    headers:{
                        'Content-Type': undefined,
                        'ocupateMyHeader': true
                    }
                }).then(function(response){
                    resolve({ success: true, msg : response.data.messages[0].description });
                }).catch(function(){
                    reject({ success: false });
                });
            });
        };
        


        return new Messages();
    }

    angular.module('actinver.services')
        .service('MessagesSrv', MessagesSrv);
})();
( function(){
    "use strict";

    presentationsAdminCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'PresentationsAdminSrv'];
    function presentationsAdminCtrl( administratorModalsSrv, CommonModalsSrv, PresentationsAdminSrv  ){
        var vm = this;

        function setup () {
            setupVars();
            getClassifications();
        }


        function setupVars () {
            vm.selectedTab = 1;
            vm.groupSelectedTab = 0;
        }


        vm.showModalCreateFactsheet = function () {
            administratorModalsSrv.admonPresentations('Agregar nueva presentación', {})
                .then(
                    function ( res ){
                        if( typeof res.msg !== 'undefined' ){
                            if( res.msg === 'success' ){
                                CommonModalsSrv.done( 'La ' + res.type + ' se agregó de manera exitosa.' );
                                getSubProducts( vm.selectedTab );
                                getSubTypesByClassification(vm.selectedTab);
                            } else {
                                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                            }
                    }
                    getClassifications();
                }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
            };


        vm.showModalEditFactsheet = function ( _presentation ) {
        _presentation.idPresentationType = vm.selectedTab;
            administratorModalsSrv.admonPresentations('Editar presentación', _presentation )
                .then(
                    function ( res ){
                        if( typeof res.msg !== 'undefined' ){
                            if( res.msg === 'success' ){
                                CommonModalsSrv.done( 'La ' + res.type + ' se modificó de manera exitosa.' );
                                getSubProducts( vm.selectedTab );
                                getSubTypesByClassification( vm.selectedTab );
                            } else {
                                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
                            }
                        }
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
            };


        vm.showModalRemoveFactsheet = function ( _id ) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar la presentación?')
                .result.then(
                    function(){
                        PresentationsAdminSrv.deletePresentation( _id ).then( function(){
                            CommonModalsSrv.done( 'La presentación se eliminó de manera exitosa.' );
                            getSubProducts( vm.selectedTab );
                            getSubTypesByClassification( vm.selectedTab );
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
            };

        vm.changeTab = function( _id){
            vm.selectedTab = _id;
            getSubProducts( _id );
            getSubTypesByClassification (_id);
        };


        function getClassifications(){
            vm.loadingProducts = true;
            PresentationsAdminSrv.getTypes().then( function( _res ){
                vm.products = _res;

                getSubProducts( vm.products[0].idPresentationType );
            }, function(){
                vm.errorLoadingProducts = true;
            })
            .finally(function(){
                vm.loadingProducts = false;
            });
        }

        /**
        * @param {id} produdct
        **/
        function getSubProducts( _id ){
            vm.loadingSubProducts = true;
            PresentationsAdminSrv.getPresentationsByType( _id ).then(function( _listProduct ){
                vm.subProducts = [];
                angular.forEach( _listProduct, function( item ){
                    vm.subProducts.push( item );
                } );
                vm.loadingSubProducts = false;
            });
        }

        function getSubTypesByClassification( _id  ){
            PresentationsAdminSrv.getPresentationSubTypesByClassification( _id).then( function( _res ){
                vm.ClasificationProducts = _res.map( function( _val ){
                    _val.text = _val.description;
                    return _val;
                });
            });
        }

        vm.nextTab = function () {
            vm.groupSelectedTab++;
        };

        vm.beforeTab = function () {
            vm.groupSelectedTab--;
        };
        

        /*function setTable( _list ){
            var defaults = {
                    page: 1,
                    count: 13,
                };

            vm.configTable = new NgTableParams( defaults, {
                paginationMaxBlocks: 4,
                paginationMinBlocks: 2,
                dataset: _list.presentations,
            });

            return _list;
        }*/


        setup();
    }


    angular.module('actinver.controllers')
    .controller('presentationsAdminCtrl', presentationsAdminCtrl );

})();

(function() {
    "use strict";

    PresentationsAdminSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function PresentationsAdminSrv( URLS, $q, $http, ErrorMessagesSrv, csrfSrv ) {
        /**
         *  prospect service
         */
        function Presentations(){}

        Presentations.prototype.getTypes = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getTypes,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                })
                .catch(reject);
            });
        };

        Presentations.prototype.getPresentationSubTypes = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getPresentationSubTypes,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                })
                .catch(reject);
            });
        };

        Presentations.prototype.getPresentationSubTypesByClassification = function ( _id ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getPresentationSubTypesByClassification + _id,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                });
            });
        };

        Presentations.prototype.getPresentationsByType = function ( _id ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getPresentationsByType+ _id,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    if( !!response.data.status ){
                        resolve( response.data.result );
                    }
                    else{
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                });
                
            });
        };

        Presentations.prototype.savePresentation = function ( _presentation ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var url = '',
                        type = '',
                        parametersSubmit = {
                            name:_presentation.name,
                            language: 'SPA'
                        };

                    if( _presentation.clasification ){
                        type = 'add';
                        url = URLS.savePresentation;
                        parametersSubmit.idPresentationType = _presentation.clasification.idPresentationType;
                        parametersSubmit.idPresentationSubType = _presentation.subClasification.idPresentationSubType;
                    } else {
                        type = 'edit';
                        url = URLS.updateNamePresentation;
                        parametersSubmit.idPresentation = _presentation.idPresentation;
                    }

                    $http({
                        method: 'POST',
                        url: url,
                        data: $.param(parametersSubmit)
                    }).then(function( response ) {
                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: ( response.data.result ) ? response.data.result : _presentation.idPresentation, params: parametersSubmit, type: type } );
                        } else {
                            resolve( { success: false, data: null } );
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Presentations.prototype.saveClasification = function ( _clas ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){

                    var parametersSubmit = {
                        classification: _clas.name,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveClasification,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {

                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: true } );
                        } else {
                            resolve( { success: false, data: null } );
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Presentations.prototype.saveSubClasification = function ( _subclas, _idclas ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var parametersSubmit = {
                        idPresentationType : _idclas,
                        description: _subclas.name,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveSubClasification,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {
                        if ( typeof response !== 'undefined' && response.data.status === 1 ) {
                            resolve( { success: true, data: true } );
                        } else {
                            resolve( { success: false, data: null } );
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Presentations.prototype.updateFile = function ( idPresentation, idPresentationSubType, file, idPresentationType ) {
            return $q( function( resolve, reject ){
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf(){
                    file.url = URLS.updatePresentationImg;
                    file.alias = 'file';
                    file.formData.push( { idPresentation: idPresentation } );
                    if( idPresentationSubType ){
                        file.formData.push( { idPresentationSubType: idPresentationSubType } );
                    }
                    file.formData.push( { language: 'SPA' } );
                    file.formData.push( { idPresentationType: idPresentationType } );
                    file.upload();
                    file.onSuccess = function( msg ){
                        resolve( { success: true, data: msg } );
                    };
                    file.onError = function(){
                        resolve( { success: false, data: null } );
                    };
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Presentations.prototype.updateNamePresentation = function ( _presentation ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var parametersSubmit = {
                        idPresentation:_presentation.idPresentation,
                        file:'',
                        idPresentationSubType:_presentation.idPresentationSubType,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateNamePresentation,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {
                        if( !!response.data.status ){
                            resolve( response.data.result );
                        }else{
                            ErrorMessagesSrv( response.data.messages );
                            reject();
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        Presentations.prototype.deletePresentation = function ( _id ) {
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var parametersSubmit = {
                        idPresentation:_id,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deletePresentation,
                        data: $.param(parametersSubmit)
                    }).then(function(response) {
                        if( !!response.data.status ){
                            resolve( response.data.result );
                        }else{
                            ErrorMessagesSrv( response.data.messages );
                            reject();
                        }
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }
            });
        };

        return new Presentations();
    }

    angular.module('actinver.services')
        .service('PresentationsAdminSrv', PresentationsAdminSrv);
})();

( function(){
    "use strict";

    mexicoCtrl.$inject = ['MexicoSrv', 'NgTableParams', 'CommonModalsSrv'];
    function mexicoCtrl( MexicoSrv, NgTableParams, CommonModalsSrv ){
        var vm = this;
        vm.table ={
            headers:[],
            body:[]
        };

        function setup () {
            getLocalForecasts();
        }

        function getLocalForecasts () {
            vm.table.headers =[];
            vm.table.body =[];                            
            vm.loadingEE = true;
            MexicoSrv.getLocalForecasts().then(function( _res ){
                vm.table.headers.push({name:"México", originalName:"indicador"});
                if(_res && _res.length > 0){                    
                    _res.forEach(function(row, indice){                       
                        for(var key in row){
                            var value;
                            if(indice == 0){
                                if(key.toString().length === 5 ){
                                    value = key.toString().replace("a","");
                                    vm.table.headers.push({name:value, originalName:key});
                                }
                            }                                                     
                        }
                    });
                }
                vm.table.body = _res;                           
            })
            .finally( function(){
                vm.loadingEE = false;
            });
        }


        vm.saveCSV = function(){
            MexicoSrv.saveCSV( vm.csv ).then(function(){
                CommonModalsSrv.done( 'El CSV se a guardado de manera exitosa.' );
                vm.csv = '';
                getLocalForecasts();
            });
        };

        setup();
    }


    angular.module('actinver.controllers')
    .controller('mexicoCtrl', mexicoCtrl );

})();

(function() {
    "use strict";

    MexicoSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv'];
    function MexicoSrv( URLS, $q, $http, csrfSrv ) {
        /**
         *  prospect service
         */
        function Mexico(){}

        Mexico.prototype.getLocalForecasts = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getLocalForecasts,
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response) {
                    resolve( response.data );
                })
                .catch( reject );
            });
        };

        function csvJSON(csv) {
          var lines = csv.split("\n");
          var result = [];
          var headers = lines[0].split(",");

          for (var i = 1; i < lines.length; i++) {
            var obj = {};
            var currentline = lines[i].split(",");

            for (var j = 0; j < headers.length; j++) {
              obj[headers[j]] = currentline[j];
            }
            result.push(obj);
          }
        //return result; //JavaScript object
        return JSON.stringify(result); //JSON
      }

       function transformar(jason) {
          var rv = [];
          var rv2 = {};

          $.each(JSON.parse(jason), function (k, v) {
              rv2 = {};
              $.each(v, function (kk, vv) {
                  if (kk !== 'indicador')
                      rv2['a' + kk] = vv.replace(/,/g, '.');
                  else
                      rv2[kk] = vv;
              });
              rv[k] = rv2;
          });
          return JSON.stringify(rv);
      }

        Mexico.prototype.saveCSV = function ( _csv ) {
          var txt = _csv;
          txt = txt.replace(/([^\t]+)/i, 'indicador');
          txt = txt.replace(/\t/g,',');
          var json = csvJSON(txt);
          _csv = transformar(json);
            return $q(function( resolve, reject ){

                csrfSrv.csrfValidate()
                .then(successCsrf)
                .catch(errorCsrf);

                function successCsrf(){
                    var paramsSubmit = {
                        localForecasts: _csv
                    };
                    $http({
                        method: 'POST',
                        url: URLS.updateLocalForecasts,
                        data: $.param(paramsSubmit),
                        transformResponse: function(data){
                            data = {"status":1,"messages":[{"type":null,"criticality":null,"code":null,"description":"OPERACIÓN EXITOSA"}],"result":null};
                            return data;
                        }
                    }).then(function (response) {
                        resolve( response.data );
                    });
                }

                function errorCsrf(error){
                    reject(error);
                }

            });
        };
            
        return new Mexico();
    }

    angular.module('actinver.services')
        .service('MexicoSrv', MexicoSrv);
})();

(function () {
    "use strict";

    profilesCtrl.$inject = ['administratorModalsSrv', 'CommonModalsSrv', 'ProfilesSrv', 'NgTableParams', 'userConfig'];
    function profilesCtrl(administratorModalsSrv, CommonModalsSrv, ProfilesSrv, NgTableParams, userConfig) {

        var vm = this;
        var tableRoles;
        var employeeID = userConfig.user.employeeID;

        function setup() {
            setupVars();
            getRoles();
        }

        vm.changeTab = function (_tab) {
            vm.selectedTabPresent = _tab.description;
            vm.selectedTab = _tab.idRole;
            setTable(_tab.description);
        };

        vm.showModalCreateProfiles = function () {
            administratorModalsSrv.admonProfiles('Nuevo perfil', {})
                .then(function (_profile) {
                    _profile.employeeID = employeeID;
                    ProfilesSrv.saveProfile(_profile)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getRoles();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                    }
                ).catch(function(res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
        };

        vm.showModalRemoveProfiles = function (_id) {
            CommonModalsSrv.warning('¿Estás seguro de eliminar el perfil?').result
                .then(function () {
                    ProfilesSrv.removeProfile(_id)
                        .then(function (result) {
                            if (result.success) {
                                CommonModalsSrv.done(result.data);
                                getRoles();
                            } else {
                                CommonModalsSrv.error(result.data);
                            }
                        });
                }).catch(function (res) {
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                        throw res;
                    }
                });
        };

        vm.nextTab = function () {
            vm.groupSelectedTab++;
        };

        vm.beforeTab = function () {
            vm.groupSelectedTab--;
        };

        function getRoles() {
            vm.loadingRoles = true;
            ProfilesSrv.getRoles().then(function (_res) {
                vm.listTabs = _res;
                getUserRoles(_res);
            });
        }

        function refactoringUsers(_listUsers, _roles) {
            var role;
            var categories = [];

            _roles.map(function (_role) {
                categories[_role.description] = [];
            });

            _listUsers.map(function (_user) {
                role = R.find(function (_role) {
                    return _role.description === _user.roleDescription;
                }, _roles || []);

                if (role) {
                    categories[role.description].push(_user);
                }
            });
            return categories;
        }

        function getUserRoles( _roles ) {
            ProfilesSrv.getUserRoles( 1 ).then(function( _res ) {
                tableRoles = refactoringUsers( _res, _roles );
                if (vm.selectedTabPresent !== ''){ setTable(vm.selectedTabPresent);
                } else { setTable( _roles[0].description );}
                vm.loadingRoles = false;
            });
        }

        function setTable(_category) {
            var table = tableRoles[_category];
            var defaults = {
                page: 1,
                count: 5,
            };

            vm.listLength = table.length;
            vm.configTable = new NgTableParams(defaults, {
                paginationMaxBlocks: 4,
                paginationMinBlocks: 2,
                dataset: table,
            });
        }

        function setupVars() {
            vm.selectedTab = 4;
            vm.groupSelectedTab = 0;
            vm.selectedTabPresent = '';
            // vm.listTabs = [ 'Administrador', 'Asesor', 'Contraloria', 'Reportes', 'Director', 'Gerente', 'Lorem1', 'Lorem2', 'Lorem3', 'Lorem4', 'Lorem5', 'Lorem6' ];
        }

        setup();
    }

    angular.module('actinver.controllers')
        .controller('profilesCtrl', profilesCtrl);
})();

(function () {
    "use strict";

    ProfilesSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv', 'csrfSrv'];
    function ProfilesSrv(URLS, $q, $http, ErrorMessagesSrv, csrfSrv) {
        /**
         *  prospect service
         */
        function Profiles() { }

        Profiles.prototype.getRoles = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getRoles,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (!!response.data.status) {
                        resolve(response.data.result);
                    }
                    else {
                        ErrorMessagesSrv(response.data.messages);
                        reject();
                    }
                });
            });
        };

        Profiles.prototype.getUserRoles = function (_id) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getUserRoles + _id,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (!!response.data.status) {
                        resolve(response.data.result);
                    }
                    else {
                        ErrorMessagesSrv(response.data.messages);
                        reject();
                    }
                });
            });
        };

        Profiles.prototype.saveProfile = function (_model) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        userCodeRegister: _model.userCodeRegister,
                        idRole: _model.idRole,
                        idEmployeeRegister: _model.employeeID,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.saveUserRole,
                        data: $.param(parametersSubmit),
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Profiles.prototype.removeProfile = function (_id) {
            return $q(function (resolve, reject) {

                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        idUserRole: _id,
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        url: URLS.deleteUserRole,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve({ success: true, data: response.data.messages[0].description });
                        } else if (response.data.status === 2) {
                            resolve({ success: false, data: response.data.messages[0].description });
                        }
                    }).catch(function () {
                        ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        return new Profiles();
    }

    angular.module('actinver.services')
        .service('ProfilesSrv', ProfilesSrv);
})();

( function(){
    "use strict";

    binnacleBankCtrl.$inject = ['$scope', '$filter', 'binnacleSrv', 'CommonModalsSrv'];
    function binnacleBankCtrl( $scope, $filter, binnacleSrv, CommonModalsSrv ){
        var vm = this;
        vm.datepicker_opts = {
            isInvalidDate: function( date ){
                return ( date.day() === 0 || date.day() === 6 ) ? true : false;
            },
            maxDate: moment().format( 'DD/MM/YY' )
        };

        function setup () {
            setupVars();
        }


        function setupVars () {
            vm.dataOperativeBinnacle = [];
        }


        vm.changeDate = function ( _date ) {
            vm.date = _date;

            var startDate = moment( _date.startDate._d ).format( 'YYYYMMDD' );
            var endDate = moment( _date.endDate._d ).format( 'YYYYMMDD' );

            binnacleSrv.getOperativeBank( startDate, endDate, $scope.binnacle.sadviser.employeeID ).then (
                function ( _response ){
                    vm.dataOperativeBinnacle = _response;
                    vm.setData( vm.dataOperativeBinnacle );
                },
                function ( ) {
                    CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
                }
            );
        };

        vm.downloadPDF = function(){
           
           var printContents="<div align='center'> <table border='1'>";

           printContents+="<tr bgcolor='#3920A9'>";
           printContents+="<th>REGION</th>"; 
           printContents+="<th>C.FINANCIERO</th>";
           printContents+="<th>CONTRATO</th>";
           printContents+="<th>CLIENTE</th>";
           printContents+="<th>OPERACION</th>";
           printContents+="<th>ASESOR</th>";
           printContents+="<th>F.OPERACIÓN</th>";
           printContents+="<th>IMPORTE</th>";
           printContents+="</tr>";

           angular.forEach(vm.dataOperativeBinnacle, function (_res) {

            printContents+="<tr>";

            printContents+="<td>"; 
            printContents+=_res.region;
            printContents+="</td>"; 

            printContents+="<td>"; 
            printContents+=_res.centroFinanciero;
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+=_res.contrato;
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+=_res.nombreCliente;
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+=_res.tipoOperacion;
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+=_res.nombreAsesor;
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+= moment(_res.fechaOperacion).format("YYYY-MM-DD");  
            printContents+="</td>";

            printContents+="<td>"; 
            printContents+=  $filter('currency')(_res.importe,'$',2);
            printContents+="</td>";

            printContents+="</tr>"; 
            });

            printContents+="</table></div>";

            var popupWin = window.open('IMPRESIÓN', '_blank', 'width='+screen.width+'px,height='+screen.height+'px,resizable=0');
            popupWin.document.open();
            popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + printContents + '</body></html>');
            popupWin.document.close();
        };


        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'binnacleBankCtrl', binnacleBankCtrl );

})();

( function(){
    "use strict";

    binnacleCtrl.$inject = ['$rootScope', '$scope', '$state', 'userConfig'];
    function binnacleCtrl( $rootScope, $scope, $state, userConfig ){
        var vm = this;
        vm.type = $state.current.name;

        // Set current adviser
        vm.sadviser = userConfig.user;

        // Current state
        vm.currentState = function(){
            if($state.$current.includes['binnacle.commercial']){
                vm.type = 'binnacle.commercial';
            }

            if($state.is('binnacle') || $state.is('binnacle.commercial') ){
                $state.go('binnacle.commercial.strategy');
            }

            if ($state.is('binnacle.operative'))
            {
                $state.go('binnacle.operative.bank');
            }
        };

        // Get type
        vm.getType = function(value){
            $state.go('binnacle.' + value);
        };

        $rootScope.$on('$stateChangeSuccess', function(){
            vm.currentState();
        });
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'binnacleCtrl', binnacleCtrl );

})();

( function(){
    'use strict';

    binnacleOutlineCtrl.$inject = ['$scope', 'binnacleOutlineSrv', 'binnacleModalSrv', 'binnacleStrategySrv', 'accountSrv', 'CommonModalsSrv'];
    function binnacleOutlineCtrl( $scope, binnacleOutlineSrv, binnacleModalSrv, binnacleStrategySrv, accountSrv, CommonModalsSrv ){
        var vm = this;
        vm.soon = false;
        vm.expired = false;
        vm.all = false;

        vm.showOutlineInfo = function( type ){
            vm[ type ] = false;
            binnacleOutlineSrv.getClientsInfo( $scope.binnacle.sadviser.employeeID, type )
                .then( function successCallback( response ){
                    vm[ type ] = response.data;
                }, function errorCallback(){
                    vm[ type ] = [];
                } );
        };

        vm.getInfo = function(){
            binnacleStrategySrv.getBinnacleClients($scope.binnacle.sadviser.employeeID)
            .then(function successCallback(response) {
                var all = [];
                if (response.data && response.data.length > 0) {
                    // Combine information in a single array
                    angular.forEach(response.data, function (obj) {
                        angular.forEach(obj.contractsList, function (item) {
                            
                            all.push({
                                numSolContrato: item.numContrato,
                                tipoOrigenTO:{
                                    nombre:item.origen.trim() === "CB" ? "CASA DE BOLSA" : item.origen.trim(),
                                    id:item.origen.trim() === "CB" ?  2: 1,
                                },
                                sfechaActualizacion:'',
                                tipoServicioTO:{
                                    value:{
                                        //es asesorado
                                        idTipoServicio:1 
                                    }
                                },
                                cliente:{
                                    value:{
                                        nombre: item.nombreCliente,
                                        tipoPersonaTO:{
                                            id:null
                                        }
                                    }    
                                },
                                perfil:{
                                    value:{
                                        nombre:''
                                    }
                                }
                            });                            
                        });
                    });
                    vm.all = all;                                                            
                } else {
                    vm.all = [];
                }
            }, function errorCallback() {
                vm.all = [];
            });

        };

        vm.outlineClient = function( employeeID, contrato,tipoOrigen ,typeServicio,tipoPersona,typeoperation ){

            if(typeoperation === "all" ){
                var model = {
                    contractNumber: contrato,                    
                    bankingArea: tipoOrigen === 2 ? 998:999 
                };    
                accountSrv.getContractInfoDetail(model).then(function (data) {
                   binnacleModalSrv.outlineClient( employeeID, contrato, tipoOrigen, typeServicio, data.holder.personType.personTypeID, typeoperation, data.investmentProfile);
                }).catch(function (response) {
                    CommonModalsSrv.error(response.messages[0].responseMessage);
                });

            }else{//expired, soon
                binnacleModalSrv.outlineClient( employeeID, contrato,tipoOrigen ,typeServicio,tipoPersona,typeoperation );
            }                        
        };

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'binnacleOutlineCtrl', binnacleOutlineCtrl );

})();
( function(){
    "use strict";

    binnacleReportsCtrl.$inject = ['Auth', '$scope', '$state', '$stateParams', 'binnacleReportsSrv', '$rootScope'];
    function binnacleReportsCtrl( Auth, $scope, $state, $stateParams, binnacleReportsSrv ,$rootScope){
        var vm = this,
            adviser = {
                adviser: $scope.binnacle.sadviser,
            };

            vm.estado=0;
            vm.action=0;
            vm.employee;
            vm.idCliente;
            vm.typeSelect;
            vm.adviser;
            vm.name;
            vm.adviserList=[];
            vm.nombreAsesor="";
        
        function inicializar() {
            vm.nombreAsesor = $scope.binnacle.sadviser.name;
            vm.idEmpleado = $scope.binnacle.sadviser.employeeID;
            vm.filters = { };
            vm.filters.advisers = 'profile';
            vm.getType('profile');
        }        

        function showSelectedInfo( type, filters, user_id ){

            if(type === "profile"){
                adviser.show_info = user_id;
                vm.idCliente=user_id;
            }else if(type === "advisers"){
                 //si tiene estado
                $scope.adviser = {
                    id: $stateParams.id
                };
                //implementar storages
                var storageList = $rootScope.adviserList;
                if(parseInt($stateParams.estado) !== 0){
                    vm.estado = parseInt($stateParams.estado);
                }

                if(storageList){      
                    if( $stateParams.action === '2'){//siguiente
                        $rootScope.adviserList[vm.estado]={id:$stateParams.id,name:$stateParams.employee};
                        vm.idCliente=$stateParams.id;
                        vm.name = $stateParams.employee;
                    }else if( $stateParams.action === '1'){//atras
                        $rootScope.adviserList[vm.estado]=$rootScope.adviserList[vm.estado];
                        vm.idCliente=$rootScope.adviserList[vm.estado].id;
                        vm.name = $rootScope.adviserList[vm.estado].name;
                    }                    
                    adviser.show_info =  vm.idCliente;
                }else{
                    $rootScope.adviserList=[];
                    //caso del padre envia el de session
                   // adviser.show_info = "97781";//user_id;
                   // vm.idCliente="97781";//user_id;
                    adviser.show_info = user_id;
                    vm.idCliente=user_id;

                }
            }
           

            adviser.type = type;
            adviser.filter=filters;
            vm.selected_type = true;
            vm.getInfo( adviser );
        }

        vm.changeAdviser = function (record) {
            vm.idEmpleado = record.employeeID;
            vm.nombreAsesor = record.name;
            vm.filters = {};
            vm.filters.advisers = 'profile';
            vm.getType('profile');
        };

        vm.getType = function(type){

           vm.typeSelect=type;     
           if(type === "profile"){
                showSelectedInfo( type, [ 'single' ], vm.idEmpleado );
            }else if(type === "advisers"){
                showSelectedInfo( type, [ 'advisers' ],  vm.idEmpleado );
            }

        };

        vm.getInfo = function( adviser ){
            vm.finish = false;
            vm.reports_info = false;
            vm.adviser= adviser ;
            binnacleReportsSrv.getInfo( adviser )
                .then( function successCallback( response ){
                    vm.reports_info = {
                        chart: response.data                        
                    };
                    vm.advisers_range = false;
                    vm.advisers = false;
                    vm.finish = true;
                }, function errorCallback(){
                    vm.finish = true;
                } );
        };

        vm.showAdvisersInfo = function( range,mes,anio ){
            vm.advisers_range = range;
            vm.advisers = false;
            var fecha=null;
            var mesTemp=parseInt(mes);

            if(mesTemp < 10){
                fecha='0'+mes+'/'+anio;
            }else{
                fecha=mes+'/'+anio;
            }

            binnacleReportsSrv.getAdvisersInfo( vm.idCliente, fecha )
                .then( function successCallback( response ){
                    vm.advisers = response.data;
                }, function errorCallback(){
                    vm.advisers = [];
                } );
        };

        vm.showAdviserResume = function(){
            showSelectedInfo( 'advisers', [ 'advisers' ], $stateParams.id );
        };
        
        inicializar();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'binnacleReportsCtrl', binnacleReportsCtrl );

})();
( function(){
    "use strict";

    binnacleStockExchangeCtrl.$inject = ['$scope', '$filter', 'binnacleSrv', 'CommonModalsSrv'];
    function binnacleStockExchangeCtrl( $scope, $filter, binnacleSrv, CommonModalsSrv ){
        var vm = this;
        vm.datepicker_opts = {
            isInvalidDate: function( date ){
                return ( date.day() === 0 || date.day() === 6 ) ? true : false;
            },
            maxDate: moment().format( 'DD/MM/YY' )
        };

        function setup () {
            setupVars();
        }


        function setupVars () {
            vm.dataOperativeBinnacle = [];
        }


        vm.changeDate = function ( _date ) {
            vm.date = _date;

            var startDate = moment( _date.startDate._d ).format( 'YYYYMMDD' );
            var endDate = moment( _date.endDate._d ).format( 'YYYYMMDD' );

            binnacleSrv.getOperativeStockExchange( startDate, endDate, $scope.binnacle.sadviser.employeeID ).then (
                function ( _response ){
                    vm.dataOperativeBinnacle = _response;
                    vm.setData( vm.dataOperativeBinnacle );
                },
                function ( ) {
                    CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
                }
            );
        };

        vm.downloadPDF = function(){
            /*var startDate = $filter('date')( vm.date.startDate._d, 'dd-MM-yyyy');
            var endDate = $filter('date')( vm.date.endDate._d, 'dd-MM-yyyy');

            binnacleSrv.downloadPDF( startDate, endDate );*/

            var printContents="<div align='center'> <table border='1'>";
            
                       printContents+="<tr bgcolor='#3920A9'>";
                       printContents+="<th>ASESOR</th>"; 
                       printContents+="<th>CAPTURADO</th>";
                       printContents+="<th>C.FINANCIERO</th>";
                       printContents+="<th>CLIENTE</th>";
                       printContents+="<th>EMISORA</th>";
                       printContents+="<th>EXTENSIÓN</th>";
                       printContents+="<th>CONTRATO</th>";
                       printContents+="<th>F.OPERACIÓN</th>";
                       printContents+="<th>MOVIMIENTO</th>";
                       printContents+="<th>SERIE</th>";
                       printContents+="<th>SOLICITUD</th>";
                       printContents+="<th>IMPORTE</th>";
                       printContents+="<th>TITULOS</th>";
                       printContents+="</tr>";
            
                       angular.forEach(vm.dataOperativeBinnacle, function (_res) {
            
                        printContents+="<tr>";
            
                        printContents+="<td>"; 
                        printContents+=_res.asesor;
                        printContents+="</td>"; 
            
                        printContents+="<td>"; 
                        printContents+=_res.capturado;
                        printContents+="</td>";
            
                        printContents+="<td>"; 
                        printContents+=_res.centroFinanciero;
                        printContents+="</td>";
            
                        printContents+="<td>"; 
                        printContents+=_res.cliente;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+=_res.emisora;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+=_res.extension;
                        printContents+="</td>";
            
                        printContents+="<td>"; 
                        printContents+=_res.contrato;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+= moment(_res.fechaOperacion).format("YYYY-MM-DD"); 
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+= _res.movimiento;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+= _res.serie;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+= _res.solicitud;
                        printContents+="</td>";

                        printContents+="<td>"; 
                        printContents+=  $filter('currency')(_res.importe,'$',2);
                        printContents+="</td>";
      
                        printContents+="<td>"; 
                        printContents+= _res.titulos;
                        printContents+="</td>";
            
                        printContents+="</tr>"; 
                        });
            
                        printContents+="</table></div>";
            
                        var popupWin = window.open('IMPRESIÓN', '_blank', 'width='+screen.width+'px,height='+screen.height+'px,resizable=0');
                        popupWin.document.open();
                        popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + printContents + '</body></html>');
                        popupWin.document.close();



        };


        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'binnacleStockExchangeCtrl', binnacleStockExchangeCtrl );

})();

(function () {
    "use strict";

    binnacleStrategyCtrl.$inject = ['$scope', '$state', '$timeout', '$q', 'CalendarSrv', 'binnacleModalSrv', 'binnacleStrategySrv', 'binnacleBirthdaysSrv', 'CommonModalsSrv', 'binnacleStrategyCommercialFtr', 'NgTableParams'];
    function binnacleStrategyCtrl($scope, $state, $timeout, $q, CalendarSrv, binnacleModalSrv, binnacleStrategySrv, binnacleBirthdaysSrv, CommonModalsSrv, binnacleStrategyCommercialFtr, NgTableParams) {
        var vm = this;
        //Objeto que contiene la lista de today, lastweek, nextweek de los cumpleaños
        vm.listDateBirthday = {};
        //lista que contiene los fechas y si es que hay cumpleaños del tipo de radio seleccionado
        vm.listDatesSelected = [];
        //filtro de cumpleaños
        vm.birthday_filter = "today";
        //bandera que indica que tiene registros con cumpleaños
        vm.hasBirthday = false;      
        //Contiene los filtros del ng-table
        vm.filterTable = {}; 
        
        var ctrlTimer;

        vm.menu = {
            showSlide: false,
            position: 0,
            showButtonLeft: false,
            showButtonRight: false
        };

        vm.clients = [];
        vm.listClasification = [
        {
            title: "A",
            id: "A"
        },{
            title: "AA",
            id: "AA"
        },{
            title: "AAA",
            id: "AAA"
        },{
            title: "B",
            id: "B"
        },{
            title: "C",
            id: "C"
        },{
            title: "R",
            id: "R"
        }];
        vm.listTipos = [
        {
            title: "Banco",
            id: "Banco"
        }, {
            title: "Casa de Bolsa",
            id: "Casa de Bolsa"
        }];
        vm.listEstatus = [
        {
            title: "Pendiente",
            id: "Pendiente"
        }, {
            title: "Contactado",
            id: "Contactado"
        }];
    
        // Clients search
        vm.clients_search = {
            finish: false,
            sent: false
        };
        // Carousel configuration
        $scope.myInterval = 5000;
        $scope.active = 0;

        function setup() {
            setupVars();
            getBinnacleCatalog();
            var month = moment().format( 'M' ),
            year = moment().format( 'YYYY' );
            getCommentsDetailsByContract(month, year);
        }

        function init() {            
            vm.submitSearch();
            getMonth();        
        }

        function setTablestage(data) {

            //configurando ng-table
            var defaults = {
                page: 1,
                count: data.length,
                filter: {}
            };

            //Se configura los filtros iniciales del ng-table
            if (vm.filterTable.nombreCliente)
                defaults.filter.nombreCliente = vm.filterTable.nombreCliente;
            if (vm.filterTable.idSponsor)
                defaults.filter.idSponsor = vm.filterTable.idSponsor;
            if (vm.filterTable.numContrato)
                defaults.filter.numContrato = vm.filterTable.numContrato;
            if (vm.filterTable.typeOrigin)
                defaults.filter.typeOrigin = vm.filterTable.typeOrigin;
            if (vm.filterTable.clasification)
                defaults.filter.clasification = vm.filterTable.clasification;
            if (vm.filterTable.contactNameStatus)
                defaults.filter.contactNameStatus = vm.filterTable.contactNameStatus;

            vm.configTable = new NgTableParams(defaults, {
                dataset: data,
                filterOptions: {
                    //se configuran filtros manuales para cada columna
                    filterFn: function (data, filterValues) {
                        var filtro = data;
                        vm.filterTable = filterValues;

                        if (filterValues.nombreCliente) {
                            filtro = filtro.filter(function (item) {
                                return item.nombreCliente.search(new RegExp(filterValues.nombreCliente, 'i')) > -1;
                            });
                        }

                        if (filterValues.idSponsor) {
                            filtro = filtro.filter(function (item) {
                                return item.idSponsor.toString().search(new RegExp(filterValues.idSponsor, 'i')) > -1;
                            });
                        }

                        if (filterValues.numContrato) {
                            filtro = filtro.filter(function (item) {
                                return item.numContrato.toString().search(new RegExp(filterValues.numContrato, 'i')) > -1;
                            });
                        }

                        if (filterValues.typeOrigin) {
                            filtro = filtro.filter(function (item) {
                                return item.typeOrigin.search(new RegExp(filterValues.typeOrigin, 'i')) > -1;
                            });
                        }

                        if (filterValues.contactNameStatus) {
                            filtro = filtro.filter(function (item) {
                                return item.contactNameStatus.search(new RegExp(filterValues.contactNameStatus, 'i')) > -1;
                            });
                        }

                        if (filterValues.clasification) {
                            filtro = filtro.filter(function (item) {
                                return item.clasification.toLowerCase() === filterValues.clasification.toLowerCase();
                            });
                        }

                        return filtro;
                    }
                }
            });

            //Seleccionamos los tipos de filtros para cada columna
            vm.filter = {
                nombreCliente: {
                    nombreCliente: {
                        id: "text",
                        placeholder: "Buscar"
                    }
                },
                idSponsor: {
                    idSponsor: {
                        id: "text",
                        placeholder: "Buscar"
                    }
                },
                numContrato: {
                    numContrato: {
                        id: "text",
                        placeholder: "Buscar"
                    }
                },
                typeOrigin: {
                    typeOrigin: {
                        id: "select",
                        placeholder: "Buscar"
                    }
                },
                clasification: {
                    clasification: {
                        id: "select",
                        placeholder: "Buscar"
                    }
                },
                contactNameStatus: {
                    contactNameStatus: {
                        id: "select",
                        placeholder: "Buscar"
                    }
                }
            };
        }                
       
        vm.saveStateView = function (client) {
            binnacleStrategyCommercialFtr.saveState(vm.filterTable);
            $state.go('binnacle.commercial.strategy.id', { id: client.numContrato, sponsor: client.idSponsor, clasificacion:client.clasification});
            getMonth();
        };

        vm.comeBack = function(){
            $state.go('binnacle.commercial.strategy');
            vm.goToLastState();            
        };

        vm.goToLastState = function(){            
            var record = binnacleStrategyCommercialFtr.infoStrategyCommercial;
            vm.filterTable = record === null || record === undefined  ? {}:record;       
            vm.submitSearch();

        };

        // Submit search form
        vm.submitSearch = function () {

            vm.clients_search = {
                finish: false,
                sent: true
            };
            
            binnacleStrategySrv.getBinnacleClients($scope.binnacle.sadviser.employeeID)
                .then(function successCallback(response) {
                    var sponsors = [];

                    if (response.data && response.data.length > 0) {
                        // Combine information in a single array
                        angular.forEach(response.data, function (obj) {
                            angular.forEach(obj.contractsList, function (item) {
                                item.idSponsor = obj.idSponsor;
                                item.typeOrigin = item.origen.trim() === "CB" ? "CASA DE BOLSA" : item.origen.trim();
                                item.contactNameStatus = item.contactStatus ? " CONTACTADO" : " PENDIENTE";
                                sponsors.push(item);
                            });
                        });                                                            
                    } else {
                        vm.clients = [];
                    }
                    vm.clients = sponsors;     
                    setTablestage(sponsors);   
                    vm.clients_search.finish = true;                                            
                }, function errorCallback() {
                    vm.clients = [];
                    vm.clients_search.finish = true;
                    setTablestage(vm.clients);
                });
        };

        // Get binnacle birthdays
        vm.empty_birthdays = true;

        vm.getBirthdays = function (filter) {

            if (vm.status.open && vm.listDatesSelected.length === 0) {
                vm.dates = {
                    finish: false
                };
                binnacleBirthdaysSrv.getInfo($scope.binnacle.sadviser.employeeID)
                    .then(function successCallback(response) {
                        vm.listDateBirthday = response.data;
                        vm.getBirthdayFilter(filter);
                        vm.dates = response;
                    }, function errorCallback(error) {
                        vm.dates = error;
                    });
            }
        };

        // Select birthday filter
        vm.getBirthdayFilter = function (filter) {
            var i = 0, j = 0;
            vm.birthday_filter = filter;
            vm.listDatesSelected = [];
            switch (filter) {
                case "today":
                    vm.hasBirthday = vm.listDateBirthday.flag.hasBirhtdayToday;
                    for (i = 0; i < vm.listDateBirthday.lista.today.length; i++)
                        for (j = 0; j < vm.listDateBirthday.lista.today[i].records.length; j++)
                            vm.listDatesSelected.push(vm.listDateBirthday.lista.today[i].records[j]);
                    break;
                case "prev":
                    vm.hasBirthday = vm.listDateBirthday.flag.hasBirthdayLastweek;
                    for (i = 0; i < vm.listDateBirthday.lista.lastWeek.length; i++)
                        for (j = 0; j < vm.listDateBirthday.lista.lastWeek[i].records.length; j++)
                            vm.listDatesSelected.push(vm.listDateBirthday.lista.lastWeek[i].records[j]);
                    break;
                case "next":
                    vm.hasBirthday = vm.listDateBirthday.flag.hasBirthdayNextweek;
                    for (i = 0; i < vm.listDateBirthday.lista.nextWeek.length; i++)
                        for (j = 0; j < vm.listDateBirthday.lista.nextWeek[i].records.length; j++)
                            vm.listDatesSelected.push(vm.listDateBirthday.lista.nextWeek[i].records[j]);
                    break;
                default:
                    vm.hasBirthday = false;
                    break;
            }
        };

        // Show client information
        vm.showClientInfo = function (client) {      
            var message='';
            var _error='';

            CalendarSrv.getClientDetail(client.contract, client.origen.trim())
            .then(function(result){
                if(result.outCommonHeader.result.result === 2){
                    _error=result.outCommonHeader.result.messages;
                   angular.forEach(_error, function (_res) {
                       if (_res.responseMessage) {
                           message += _res.responseMessage + '<br>';
                       }
                   });
                   CommonModalsSrv.error(message);
                   return;
               }

               if( result.outClientOrContractClientInfoQuery && result.outClientOrContractClientInfoQuery.client && result.outClientOrContractClientInfoQuery.client.length != 0
                && result.outClientOrContractClientInfoQuery.client[0].email.length != 0 ){
                client.email = result.outClientOrContractClientInfoQuery.client[0].email[0].email;
                client.phoneNumber =  result.outClientOrContractClientInfoQuery.client[0].telephoneData.length != 0 ? Number(result.outClientOrContractClientInfoQuery.client[0].telephoneData[0].phoneNumber) : '';
                
                binnacleModalSrv.showClientInfo( client );
               }else{
                    CommonModalsSrv.error('No se encontró información del cliente.');
               }

            }, function (error) {
                CommonModalsSrv.error(error.msg);
            }).finally(function () {

            });

        };

        // Get client details
        vm.getClientDetails = function (employeeID, sponsor, contract) {           
            vm.client_data = false;

            return $q.all([
                binnacleStrategySrv.getClientDetails(employeeID, sponsor, contract),
                binnacleStrategySrv.getClientType(employeeID, contract),
                binnacleStrategySrv.getClientProfile(contract)
            ]).then(function (data) {
                vm.client_data = {};

                angular.forEach(data, function (topic) {
                    vm.client_data[topic.type] = topic.data;
                });
                vm.client_data.clasificacion = $state.params.clasificacion;

                // Init application
                setup();

            }, function () {

                vm.client_data = null;
                CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');

            });
        };

        /** add new Trace client
        * @param {object} child trace
        * @param {boolean}
        **/
        vm.addChild = function (_child, _principal, _level) {
            vm.lastSelectedOpt = _child.idActivity;
            if (_principal) {
                vm.catalogOption = vm.lastSelectedOpt;
                vm.binnacleCatalogChild = [];
                vm.selectedOptions = {};
            }

            binnacleStrategySrv.getBinnacleCatalogChild(vm.lastSelectedOpt).then(function (_res) {
                var child = _res.data;
                var find;
                var size = vm.binnacleCatalogChild.length;
                if (size > 0) {
                    find = findCatalogChild(_res.data);
                }


                if (!find) {

                    // Remove unnecessary items
                    if (typeof vm.binnacleCatalogChild[_level + 1] !== 'undefined') {
                        vm.binnacleCatalogChild.length = _level + 1;
                    }
                    if (child.length > 0) {
                        vm.binnacleCatalogChild.push({
                            model: 'level_' + size,
                            options: child,
                            text: child[0].descriptionCode
                        });
                    }
                }

            }, function () {
                CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
            });
        };

        vm.sent_binnacle = false;
        vm.saveCatalog = function (form) {

            // Send information
            if (vm.lastSelectedOpt && form.$valid) {
                var info = {
                    idContract: $state.params.id,
                    name: vm.client_data.details.nombreCliente,
                    idEmployee: $scope.binnacle.sadviser.employeeID,
                    sponsorNumber: $state.params.sponsor,//vm.client_data.type.idSponsor,
                    idActivity: vm.lastSelectedOpt,
                    description: vm.catalogComments,
                    especification: '',
                    clasification: $state.params.clasificacion,
                    language: 'SPA'
                };

                binnacleStrategySrv.doBinnacleComment(info).then(function () {
                    vm.submitSearch();
                    CommonModalsSrv.done("El mensaje se ha enviado exitosamente.");
                }, function (error) {
                    CommonModalsSrv.error(error.msg);
                }).finally(function () {
                    vm.sent_binnacle = false;
                    setup();
                });

            } else {
                CommonModalsSrv.error('Para guardar cambios es necesario llenar los campos requeridos');
            }
        };

        /**
        * @param {object}  child trace
        **/
        function findCatalogChild(_child) {
            return R.find(function (_val) {
                return angular.equals(_val.options, _child);
            }, vm.binnacleCatalogChild);

        }

        function getBinnacleCatalog() {
            binnacleStrategySrv.getBinnacleCatalog().then(function (_res) {
                vm.binnacleCatalog = _res.data;
            }, function () {
                CommonModalsSrv.error('Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk');
            });
        }

        /** get comments details by contract**/
        function getCommentsDetailsByContract(month, year) {
            binnacleStrategySrv.getCommentsDetailsByContract($scope.binnacle.sadviser.employeeID, $state.params.sponsor, $state.params.id, month, year).then(function (_res) {
                vm.CommentsByContract = _res && _res.commentSection.length > 0 ? _res:[];
            }, function () {
                vm.CommentsByContract = [];
            });
        }
        
        function setupVars() {
            vm.binnacleCatalogChild = [];
            vm.selectedOptions = {};
            vm.lastSelectedOpt = null;
            vm.catalogOption = null;
            vm.catalogComments = null;
        }

        function getMonth() {
            var nameMonth = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
            var date = new Date();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();
            var listMonths = [];
            for (var i = 0; i < 24; i++) {
                if (month === 0) {
                    year = year - 1;
                    month = 12;
                }

                month = month - 1;

                listMonths.push({
                    year: year,
                    month: month+1, 
                    monthDesc: nameMonth[month],
                    select : month === date.getMonth() && year ===  date.getFullYear() ?  true : false 
                });
            }
            vm.listMonths = listMonths;            
        }

        vm.getComment = function(item){
            resetSelectMonth(item);
            getCommentsDetailsByContract(item.month, item.year)

        }
        
        vm.mouseOver = function(tipo){   
            if (tipo === 1)
                vm.slideMenuLeft();
            else
                vm.slideMenuRight();
        };

        vm.mouseLeave = function () {
            if (ctrlTimer && ctrlTimer !== null)
                $timeout.cancel(ctrlTimer);
        };

        vm.slideMenuLeft = function () {    
            vm.menu.position = vm.menu.position <= 0 ? 0 : (vm.menu.position - 30);
             showButtonsMenu();
             document.getElementById("contentMonth").style.right = (vm.menu.position+"px");                        
             if (vm.menu.position <= 0) {
                 $timeout.cancel(ctrlTimer);
             } else {
                 ctrlTimer = $timeout(vm.slideMenuLeft, 150);
             }
        };

        vm.slideMenuRight = function () {            
            var size = getDiferentsWidthMenu();         
            vm.menu.position = vm.menu.position > size.restantes ? size.restantes: vm.menu.position + 30;               
            showButtonsMenu();           
            document.getElementById("contentMonth").style.right = (vm.menu.position+"px");                        
            if (vm.menu.position > size.restantes) {
                $timeout.cancel(ctrlTimer);
            } else {
                ctrlTimer = $timeout(vm.slideMenuRight, 150);
            }
        };

        function showButtonsMenu () {
            var size = getDiferentsWidthMenu();
            //boton izquierdo
            vm.menu.showButtonLeft = (vm.menu.position <= 0 ? false:true);
            //boton derecho
            vm.menu.showButtonRight = (vm.menu.position >= size.restantes ? false: true);
        }

        function getDiferentsWidthMenu(){    
            var obj = {
                divMenu: document.getElementById("contentPrin").getBoundingClientRect().width + 2,
                ulMenu: document.getElementById("contentMonth").getBoundingClientRect().width
            };
            
            if (obj.ulMenu > obj.divMenu)
                obj.restantes = obj.ulMenu - obj.divMenu;
            else{               
                    obj.restantes = 0;
            }                 
            return obj;
        }

        function resetSelectMonth(item){
            angular.forEach(vm.listMonths, function (element) {
                element.select = false;
            });
            item.select = true;
        }

        vm.resize = function(){
            vm.menu.position = 0;
            document.querySelector("#contentMonth").style.right = "0px"; 
            showButtonsMenu();
            $scope.$apply();
        };

        init();
    }

    angular
        .module('actinver.controllers')
        .controller('binnacleStrategyCtrl', binnacleStrategyCtrl);

})();

( function(){
	'use strict';

	accountStateHelpCtrl.$inject = ['$scope', '$uibModalInstance', '$sessionStorage', '$rootScope', 'accountStateSrv', 'CommonModalsSrv'];
	function accountStateHelpCtrl( $scope, $uibModalInstance, $sessionStorage,$rootScope , accountStateSrv, CommonModalsSrv){
		var vm = this;
	

    vm.close = function(){
        $uibModalInstance.dismiss();
        console.log('cerrar');
	};
	
	

	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'accountStateHelpCtrl', accountStateHelpCtrl );

})();
( function(){
	'use strict';

	accountStateLoginCtrl.$inject = ['$scope', '$uibModalInstance', '$sessionStorage', '$rootScope', 'accountStateSrv', 'CommonModalsSrv'];
	function accountStateLoginCtrl( $scope, $uibModalInstance, $sessionStorage,$rootScope , accountStateSrv, CommonModalsSrv){
		var vm = this;
		var user = JSON.parse($sessionStorage.user);
		
    
    vm.sendType =  function(object){
       var isReport = user.roles.includes('RRHH');
	if(isReport){

		accountStateSrv.getAccountStateRh($rootScope.month,$rootScope.year, $rootScope.employeeId, object.user, object.password, isReport)
		.then(function (result) {
					 reset();
					if (result.data.outCommonHeader.result.result !== 1 ) {
						CommonModalsSrv.error(result.data.outCommonHeader.result.messages[0].responseMessage);
						
					}else{
						$rootScope.detailAccountState = result.data;
						$rootScope.detail = true;
					 }
				}
		).catch(function(res) {
			if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
				throw res;
			}
		});
		
	}else{
		accountStateSrv.getAccountState($rootScope.month,$rootScope.year, $rootScope.employeeId, object.user, object.password, isReport)
		.then(function (result) {
					 reset();
					if (result.data.outCommonHeader.result.result !== 1 ) {
						CommonModalsSrv.error(result.data.outCommonHeader.result.messages[0].responseMessage);
						
					}else{
						$rootScope.detailAccountState = result.data;
						$rootScope.detail = true;
					 }
				}
		).catch(function(res) {
			if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
				throw res;
			}
		});
	}
		
    };

    vm.close = function(){
        $uibModalInstance.dismiss();
        console.log('cerrar');
	};
	
	function reset(){
		$uibModalInstance.dismiss();
	}

	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'accountStateLoginCtrl', accountStateLoginCtrl );

})();
( function(){
	'use strict';

	accountStateCtrl.$inject = ['$scope'];
	function accountStateCtrl( $scope ){
		var vm = this;
		getReportInfo();

		function getReportInfo(  ){
		}
		
		vm.getInfoIntegration = function(){
		}


	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'accountStateCtrl', accountStateCtrl );

})();
( function(){
	'use strict';

	customCtrl.$inject = ['$scope', 'goalsCustomSrv', 'CommonModalsSrv'];
	function customCtrl( $scope, goalsCustomSrv, CommonModalsSrv ){
		var vm = this;
		$scope.goals.datepicker_opts.initDate = moment().businessSubtract( 1 );

		// Get information from service
		function getReportInfo( date ){
			vm.search_form_sent = true;
			vm.report_empty = true;

			goalsCustomSrv.getGroupsByEmployeeRpt( $scope.goals.sadviser.employeeID, date )
				.then( function( group ){
					goalsCustomSrv.getInfoByGroupRpt( group.data[ 0 ].idTargetGroup, date )
						.then( function( response ){

							if( response.data.elements.length > 0 ){
								vm.info = response.data;
								vm.report_empty = false;
								vm.filtered_report_empty = false;
							} else {
								vm.report_empty = true;
							}

						}, function(){

							CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );

						} ).finally( function(){
							vm.search_form_sent = false;
						} );

				}, function(){

					CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );
					vm.search_form_sent = false;

				} );
		}

		// Listen for changes in date
		$scope.$on( 'changeDate', function( ev, date ){
			getReportInfo( date );
		} );
	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'customCtrl', customCtrl );

})();
( function(){
	'use strict';

	goalsCtrl.$inject = ['userConfig'];
	function goalsCtrl( userConfig ){
		var vm = this,
			initDate = moment().businessSubtract( 1 );

		function setup(){

			// User info
	        vm.sadviser = userConfig.user;

	        // Datepicker options
	        vm.datepicker_opts = {
	        	parentEl: ".goals-page",
	        	singleDatePicker: true,
	        	initDate: new Date( initDate ),
	            isInvalidDate: function( date ){
	                return ( date.day() === 0 || date.day() === 6 ) ? true : false;
	            },
	            maxDate: initDate.format( 'DD/MM/YY' )
	        };

    	}

    	// Init
    	setup();
	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'goalsCtrl', goalsCtrl );

})();
( function(){
	'use strict';

	managerCtrl.$inject = ['$scope', 'URLS', '$http'];
	function managerCtrl( $scope, URLS ,$http){
		var vm = this;
		$scope.goals.datepicker_opts.initDate = new Date();
		var frame = document.getElementById("frame");
		
		// Get information from service
		vm.getReportInfo = function( date ){

			
			var fecha=moment(date).format('DDMMYYYY');
			var parametro="xxx";
			var employeeID=$scope.goals.sadviser.employeeID;
			//employeeID=53883;
			var parametros=parametro+'/'+parametro+'/'+employeeID+'/'+fecha+'/pdf';
			//var parametros='6e676172636961/2a6e6f7669656d62726532303137/53883/30102017/pdf';
			//frame.src=URLS.getSharedReport+parametros;

			vm.search_form_sent = false;
					
			$http({
				method: 'GET',
                url:URLS.getSharedReport+parametros,
                params: {
                    language: 'SPA'
				},
				responseType: 'arraybuffer'
			}).then(function (response) {
				var file = new Blob([response.data], {type: 'application/pdf'});
				var fileURL = URL.createObjectURL(file);
				frame.src = fileURL;
				//vm.search_form_sent = true;


			}).catch(function(error){
				console.error(error);
			}).finally(function(){
				vm.search_form_sent = false;
			});

		};


	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'managerCtrl', managerCtrl );

})();
( function(){
	'use strict';

	reportCtrl.$inject = ['$scope', '$q', 'userConfig', 'goalsReportsSrv', 'CommonModalsSrv'];
	function reportCtrl( $scope, $q, userConfig, goalsReportsSrv, CommonModalsSrv ){
		var vm = this;
        $scope.goals.datepicker_opts.initDate = moment().businessSubtract( 1 );

		// Update report
		vm.updateReport = function( date ){
			getReportInfo( moment( date ).format( 'DD/MM/YY' ) );
		};

		function setup(){

	        // Init
	        vm.updateReport( $scope.goals.datepicker_opts.initDate );
		}
		
    	// Get information
    	function getReportInfo( date ){
			vm.search_form_sent = true;
			vm.report_info = false;
			
			return $q.all( [
				goalsReportsSrv.getGoalsPositionsRpt( $scope.goals.sadviser.employeeID, date ),
				goalsReportsSrv.getSumGoalsPositionsRpt( $scope.goals.sadviser.employeeID, date ),
				goalsReportsSrv.getGoalsContractsRpt( $scope.goals.sadviser.employeeID, date )
			] ).then( function( data ){

				// Set information by topic
				vm.report_info = {};
				vm.report_empty = true;
				angular.forEach( data, function( item ){
					if( vm.report_empty && item.data.length !== 0 ) vm.report_empty = false;
					vm.report_info[ item.topic ] = item.data;
				} );

			}, function(){

				CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );

			} ).finally( function(){
				vm.search_form_sent = false;
			} );     
    	}

    	// Init
    	setup();
	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'reportCtrl', reportCtrl );

})();
(function () {
	'use strict';

	reportLargeAndShortCtrl.$inject = ['$scope', 'URLS', '$http', '$timeout', 'exportTableToExcel', 'randomNamesSrv', 'reportLargeAndShortSrv', 'ErrorMessagesSrv'];
	function reportLargeAndShortCtrl($scope, URLS, $http, $timeout, exportTableToExcel, randomNamesSrv, reportLargeAndShortSrv, ErrorMessagesSrv) {
		var vm = this;
		vm.modal=false;

		vm.listRegister = [];

		function init(){
			vm.getLista();
		}

		// Get information from service
		vm.getLista = function () {
			vm.modal=true;
			reportLargeAndShortSrv.getListaLargeAndShort().then(function success(data) {
				if (data.success) {
					vm.listRegister = data.lista;
				} else {
					vm.listRegister = [];
					ErrorMessagesSrv(data.message);
				}
				vm.modal=false;
			}).catch(function error(error) {
				vm.modal=false;
				ErrorMessagesSrv(error.message);
			});
		};

		vm.exportData = function () {
			var exportHref = exportTableToExcel.tableToExcel('#idTablaResultados', 'Reporte Cortos y Largos');
			var link = document.createElement('a');
			link.download = randomNamesSrv.getNameFile() + '.xls';
			link.href = exportHref;
			link.click();
		};
		
		init();
	}

	angular
		.module('actinver.controllers')
		.controller('reportLargeAndShortCtrl', reportLargeAndShortCtrl);

})();
( function(){
	'use strict';

	supervisorCtrl.$inject = ['$scope', 'goalsSupervisorSrv', 'CommonModalsSrv'];
	function supervisorCtrl( $scope, goalsSupervisorSrv, CommonModalsSrv ){
		var vm = this;
		$scope.goals.datepicker_opts.initDate = moment().businessSubtract( 1 );

		// Get information from service
		function getReportInfo( date ){
			vm.search_form_sent = true;
			vm.report_empty = true;

            //$scope.goals.sadviser.employeeID
            goalsSupervisorSrv.getSupervisorInfo( $scope.goals.sadviser.employeeID, date )
            	.then( function( response ){

            		if( response.data.elements.length > 0 ){
            			vm.info = response.data;
		                vm.report_empty = false;
		                vm.filtered_report_empty = false;
	            	} else {
	            		vm.report_empty = true;
	            	}

	            }, function(){

	                CommonModalsSrv.error( 'Se Encontró Un Error Favor De Intentarlo Más Tarde, Comuníquese Con Su Help desk' );

	            } ).finally( function(){
					vm.search_form_sent = false;
	            } );
    	}

    	// Listen for changes in date
		$scope.$on( 'changeDate', function( ev, date ){
			getReportInfo( date );
		} );

	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'supervisorCtrl', supervisorCtrl );

})();
( function(){
    "use strict";

    modals.$inject = ['$uibModal'];
    function modals( $uibModal ) {
        var api  = {};

        api.show = function( _video ){
            var modal = $uibModal.open({
                controller: ['$scope', '$uibModalInstance', '$sce', function( $scope, $uibModalInstance, $sce ){
                    $scope.url = _video.url;

                    $scope.trustSrc = function(src) {
                        return $sce.trustAsResourceUrl(src);
                    };

                    $scope.close = function(){
                        $uibModalInstance.dismiss();
                    };

                }],
                templateUrl: '/app/advisers/help/modals/video.html',
                windowClass : 'help',
            });

            return modal;
        };

        return api;
    }


    angular.module( 'actinver.services' )
        .service( 'HelpModals', modals );


})();

/* global parseFloat, moment */

(function () {
    'use strict';
    insuranceHousesCtrl.$inject = ['$state', '$stateParams', '$scope', '$window', 'CommonModalsSrv', 'insuranceHousesSrv', 'insuranceCarSrv'];
    angular
            .module('actinver.controllers')
            .controller('insuranceHousesCtrl', insuranceHousesCtrl);

    function insuranceHousesCtrl($state, $stateParams, $scope, $window, CommonModalsSrv, insuranceHousesSrv, insuranceCarSrv) {
        var vm = this;
        var scrSize = $window.matchMedia("(max-width: 767px)");
        scrSize.onchange = function(ev) { vm.txtClass = ev.target.matches ? 'text-left' : 'text-right'; };
        vm.pagina1 = pagina1;
        vm.pagina2 = pagina2;
        vm.pagina3 = pagina3;
        vm.cleanForm = cleanForm;
        vm.regresarMain = regresarMain;
        vm.regresarPaginaCotizacion = regresarPaginaCotizacion;
        vm.cotizarContratar = cotizarContratar;
        vm.validateBirthdateRFC = validateBirthdateRFC;
        vm.justAlphabet = justAlphabet;
        vm.justAlphanumeric = justAlphanumeric;
        vm.justNumeric = justNumeric;
        vm.soloNumero = soloNumero;
        vm.charrepeat = charrepeat;
        vm.charrepeatText = charrepeatText;
        vm.charrepeatTextTres = charrepeatTextTres;
        vm.soloTextAndNum = soloTextAndNum;
        vm.numberSecuential = numberSecuential;
        vm.forceKeyPressUppercase = forceKeyPressUppercase;
        vm.calculaRFC = calculaRFC;
        vm.validarDatosACotizar = validarDatosACotizar;
        vm.cotizarSeguroHogar = cotizarSeguroHogar;
        vm.setValueGastosExtrasCasaHabitacion = setValueGastosExtrasCasaHabitacion;
        vm.setRemocionEscombros = setRemocionEscombros;
        vm.emisionSeguroHogar = emisionSeguroHogar;
        vm.changeSameAddress = changeSameAddress;
        vm.imprimirCondiciones = imprimirCondiciones;
        vm.printPolicy = printPolicy;
        vm.endEmission = endEmission;
        vm.isClienteObt = false;
        vm.getListaCotizaciones = getListaCotizaciones;
        vm.getRolUsuario = getRolUsuario;
        vm.backToEmission = backToEmission;
        vm.yearExpirationList = [];
        vm.monthExpirationList = [];
        vm.cvvLen = 3;
        vm.accLen = 16;
        vm.txtClass = scrSize.matches ? 'text-left' : 'text-right';
        vm.selectBankId = selectBankId;
        vm.selectTypeCard = selectTypeCard;
        vm.emissionFunction = emissionFunction;
        vm.numPoliza = '';
        vm.jsonCotizacion = {};
        vm.primatotalImpresion = '';
        vm.emission = {};
        vm.cmd = {
            kindPaid: {
                type : null
            }
        };
        vm.cmd.emission = {
            contract : null
        };
        vm.stepForm = {
            step: 0,
            stepA: false,
            stepB: false,
            stepC: false,
            stepD: false
        };
        vm.insurancePolicyDate = moment(new Date()).format('YYYY-MM-DD');
        vm.policyMaturityDate = moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD');
        var model = $stateParams.model;
        vm.numeroCliente = model ? model.numeroCliente : "";
        vm.contract = model ? model.contract : "";
        vm.client = model ? model.client : "";
        vm.person = model ? model.person : {};
        vm.datosCliente = model ? model.datosCliente : [];
        vm.nombres = model ? model.nombres : "";
        vm.apePaterno = model ? model.apePaterno : "";
        vm.apeMaterno = model ? model.apeMaterno : "";
        vm.nombreCliente = model ? model.nombreCliente : "";
        vm.birthDay = model ? model.birthDay : "";
        vm.fiscalIDNumber = model ? model.fiscalIDNumber : "";
        vm.emailUser = model ? model.emailUser : "";
        vm.personType = model ? model.personType : '1';
        vm.phoneUser = model ? model.phoneUser : "";
        vm.importeEdificio = "";
        vm.limiteMaximoEquipoMovil = 0;
        vm.limiteMaximoCristales = 0;
        vm.limiteMaximoRoboMenaje = 0;
        vm.limiteMaximoRcFamiliar = 0;
        vm.limiteMaximoUsoTarjetas = 0;
        vm.dineroMontoInicial = 0;
        vm.bicicletasMontoInicial = 0;
        vm.objetosMontoInicial = 0;
        vm.equipoMovilMontoInicial = 0;
        vm.botonContratar = "Cotizar";
        vm.cotizacionSeleccionada = undefined;
        vm.soloText = soloText;
        vm.pageSize = 3;
        vm.currentPage = 1;
        vm.disabledRFC = model ? model.disabledRFC : false;
        vm.mostrarDatos = model ? model.mostrarDatos : false;
        vm.validatePopup = model ? model.validatePopup : false;
        vm.validatePerson = model ? model.validatePerson : false;
        vm.roles = model ? model.roles : [];
        vm.rol = getRolUsuario();
        vm.revisaCotizaciones = revisaCotizaciones;
        vm.tieneCotizaciones = false;
        vm.cargandoCotizacion = false;
        vm.datosCotizacion = {};
        vm.datosCotizados = {};
        vm.fechaNacimiento = "";
        vm.email = "";
        vm.rfc = "";
        vm.sexo = "masculino";
        vm.telefono = "";
        vm.fechaConstitutiva = "";
        vm.ContInsuredSum = "";
        vm.ExtExpHomeInsuredSum = "";
        vm.DebRemInsuredSum = "";
        vm.FamCivLiaInsuredSum = "";
        vm.ListCotizaciones = [];
        vm.ListEntityFederativeHouse = getCatalogoEntidades();
        vm.ListMunicipalityHouse = [];
        vm.ListBanksHouse = [];
        vm.ListPostalCodeHouse = [];
        vm.ListTypeCLABE = [
            {id: '1', text: 'CLABE'},
            {id: '2', text: 'DEBITO'}
        ];
        vm.optionsdpx = {
            minDate: moment(new Date().setYear(new Date().getFullYear() - 150)).format('DD/MM/YYYY'),
            maxDate: moment(new Date().setYear(new Date().getFullYear() - 18)).format('DD/MM/YYYY')
        };
        vm.optionsdpxPM = {
            maxDate: moment(new Date().setYear(new Date().getFullYear())).format('DD/MM/YYYY')
        };
        vm.ListCurrency = getCatalogCurrency();
        vm.ListSecurityMeasurements = getCatalogSecurityMeasurements();
        vm.ListPaymentMethods = getCatalogPaymentMethods();
        vm.ListBorderWall = getCatalogBorderWall();
        vm.ListBanks = getCatalogoBanks();
        vm.jsonCoberturas = "{}";
        vm.tipoRiesgo = "";
        vm.getCatalogRoof = getCatalogRoof;
        vm.getCatalogEntity = getCatalogEntity;
        vm.getCatalogCodes = getCatalogCodes;
        vm.getJsonCoberturas = getJsonCoberturas;
        vm.getJsonCoberturasService = getJsonCoberturasService;
        vm.onChangeTipoDeRiesgo = onChangeTipoDeRiesgo;
        vm.cambiaJoyasTipoDeRiesgo = cambiaJoyasTipoDeRiesgo;
        vm.getCantidadLimite = getCantidadLimite;
        vm.realizaOperaciones = realizaOperaciones;
        vm.validarTabla = validarTabla;
        vm.validarSiCumple = validarSiCumple;
        vm.formatCurrency = formatCurrency;
        vm.validaRFCFecha = validaRFCFecha;
        vm.validaFechaConRFC = validaFechaConRFC;
        vm.onChangeListMunicipality = onChangeListMunicipality;
        vm.onChangeListEntity = onChangeListEntity;
        vm.encode = encode;
        vm.decode = decode;
        vm.eventClickCheckbox = eventClickCheckbox;
        vm.event = "";
        vm.edificio = {};
        vm.contenidos = {};
        vm.rcFamiliar = {};
        vm.roboMenaje = {};
        vm.dinero = {};
        vm.objetosPersonales = {};
        vm.electrodomesticos = {};
        vm.gastosAsalto = {};
        vm.gastosFinales = {};
        vm.gastosExtras = {};
        vm.remocionEscombros = {};
        vm.cristales = {};
        vm.asistenciaInformatica = {};
        vm.asistenciaLegal = {};
        vm.asistenciaViajes = {};
        vm.extensionViajes = {};

        revisaCotizaciones();
        getCatalogRiskType();
        getCatalogStructure();

        function getCatalogStreetType() {
            insuranceHousesSrv.getCatalogStreetTypeQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.typeID,
                            text: value.street
                        });
                    });
                    vm.listStreetType = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogCardTypeQuery() {
            insuranceHousesSrv.getCatalogCardTypeQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.cardID,
                            text: value.cardType
                        });
                    });
                    vm.ListCardType = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogPaymentTypeQuery() {
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;
            insuranceHousesSrv.getCatalogPaymentTypeQuery().then(function (response) {
                var _listaObtenida = [];
                var _listaObtenidaSinAgentes = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        
                        if (value.paymentManagerID === "2" || value.paymentManagerID === "8") {
                            _listaObtenidaSinAgentes.push({
                                id: value.paymentManagerID,
                                text: value.paymentManagerName
                            });
                        }
                        _listaObtenida.push({
                            id: value.paymentManagerID,
                            text: value.paymentManagerID === "1" ? "PAGO REFERENCIADO" : value.paymentManagerName
                        });
                    });

                    vm.ListPaymentTypeAll = _listaObtenida;
                    vm.ListPaymentTypeSinAgentes = _listaObtenidaSinAgentes;
                    if(_type) {
                        if(_quotation.catalogosCotizacion.kindPaid.type.id == 1 || _quotation.catalogosCotizacion.kindPaid.type.id == 2){
                            vm.ListPaymentType = _listaObtenida;
                        } else {
                            vm.ListPaymentType = _listaObtenidaSinAgentes;
                        }                        
                    } else {
                        if(vm.cmd.kindPaid.type.id == 1 || vm.cmd.kindPaid.type.id == 2){
                            vm.ListPaymentType = _listaObtenida;
                        } else {
                            vm.ListPaymentType = _listaObtenidaSinAgentes;
                        }
                    }
                }
            }).catch(function (error) {
                
            });
        }

        function getCatalogRoof(lastValue, newValue) {
            insuranceHousesSrv.getCatalogRoofType(newValue.id).then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.roofTypeID,
                            text: value.roofType
                        });
                    });
                    vm.cmd.kindRoof = {};
                    vm.listRoof = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogStructure() {
            insuranceHousesSrv.getCatalogWallType().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.wallTypeID,
                            text: value.wallType
                        });
                    });

                    vm.listStructure = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogRiskType() {
            insuranceHousesSrv.getCatalogInsuranceRiskType(1, 1).then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.areaCode,
                            text: value.description
                        });
                    });
                    vm.listRiskType = _listaObtenida;
                }
            }).catch(function (error) {

            });

            return [
                {id: 1, text: 'UNIFAMILIAR'},
                {id: 2, text: 'FINES DE SEMANA'},
                {id: 3, text: 'CABAÑAS'},
                {id: 4, text: 'CONDOMINIO VERTICAL O CONDOMINIO HORIZONTAL'}
            ];
        }

        function getCatalogCurrency() {
            return [
                {id: 1, text: "PESOS"},
                {id: 2, text: "DOLARES"}
            ];
        }

        function getCatalogBorderWall() {
            return [
                {id: "true", text: "SI"},
                {id: "false", text: "NO"}
            ];
        }

        function getCatalogSecurityMeasurements() {
            return [
                {id: 1, text: "VIGILANCIA"},
                {id: 2, text: "ALARMA LOCAL/CENTRAL"},
                {id: 3, text: "VIGILANCIA Y ALARMA LOCAL/CENTRAL"},
                {id: 99999, text: "SIN MEDIDAS DE SEGURIDAD"}
            ];
        }

        function getCatalogPaymentMethods() {
            return [
                {id: 1, text: "CONTADO"},
                {id: 2, text: "SEMESTRAL"},
                {id: 3, text: "TRIMESTRAL"},
                {id: 4, text: "MENSUAL"}
            ];
        }

        function getCatalogoEntidades() {
            var _listaObtenida = [];

            insuranceCarSrv.getCatalogEntityFederative().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.federalEntityID,
                            text: value.federalEntityDescription
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogEntity(newValue, type) {
            var _listaObtenida = [];
            insuranceCarSrv.getCatalogMunicipalityCars(newValue.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                    switch (type) {
                        case 'fiscal':
                            vm.ListEntityFiscal = _listaObtenida;
                            break;
                        case 'contractor':
                            vm.cmd.emission.contract.entityContractor = {};
                            vm.cmd.emission.contract.pcContractor = {};
                            vm.ListEntityContractor = _listaObtenida;
                            break;
                        case 'beneficiary':
                            vm.cmd.emission.beneficiary.entityBeneficiary = {};
                            vm.cmd.emission.beneficiary.pcBeneficiary = {};
                            vm.ListEntityBeneficiary = _listaObtenida;
                            break;
                    }
                }
            });
        }

        function changeSameAddress() {
            if (vm.cmd.emission.sameAddress) {
                initEmission();
            } else {
                cleanDataEmission();
            }
        }

        function getCatalogCodes(newValue, type) {
            var _listaObtenida = [];
            insuranceHousesSrv.getCatalogPostalCode(newValue.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    switch (type) {
                        case 'fiscal':
                            vm.ListPCFiscal = _listaObtenida;
                            break;
                        case 'contractor':
                            vm.cmd.emission.contract.pcContractor = {};
                            vm.ListPCContractor = _listaObtenida;
                            break;
                        case 'beneficiary':
                            vm.cmd.emission.beneficiary.pcBeneficiary = {};
                            vm.ListPCBeneficiary = _listaObtenida;
                            break;
                    }
                }
            });
        }

        function onChangeListEntity() {
            var _listaObtenida = [];
            if(!vm.cmd.dataHouseEntityRisk.type) return;
            
            insuranceCarSrv.getCatalogMunicipalityCars(vm.cmd.dataHouseEntityRisk.type.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                    vm.cmd.dataHouseMunicipalityRisk = {};
                    vm.cmd.dataHousePostalCodeRisk = {};
                    vm.ListPostalCodeHouse = [];
                    vm.ListMunicipalityHouse = _listaObtenida;
                }
            });
        }

        function onChangeListMunicipality() {
            var _listaObtenida = [];
            if (!vm.cmd.dataHouseMunicipalityRisk.type) return;

            insuranceHousesSrv.getCatalogPostalCode(vm.cmd.dataHouseMunicipalityRisk.type.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    vm.cmd.dataHousePostalCodeRisk = {};
                    vm.ListPostalCodeHouse = _listaObtenida;
                }
            });
        }

        function getCatalogoBanks() {
            var _listaObtenida = [];
            console.log();

            insuranceCarSrv.getCatalogBanksCars().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.bankID,
                            text: value.bankName
                        });
                    });
                    _listaObtenida.sort(function(a, b) {
                        if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;
                        if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;
                        return 0;
                    });
                }
            });

            return _listaObtenida;
        }

        function getYearExpirationList() {
            var _list = [];
                        
            for (var _year = (new Date()).getFullYear(), i = 0; i < 7; i++) 
                _list.push({
                    id: _year + i,
                    text: _year + i
                });

            return _list;
        }

        function getMonthExpirationList() {
            var _list = [];
            
            for (var _month, i = 1; i <= 12; i++) {
                _month = i < 10 ? '0' + i : i;
                _list.push({
                    id: _month,
                    text: _month
                });
            }

            return _list;
        }

        function selectBankId() {
            vm.cmd.cardType = typeof vm.cmd.cardType === 'undefined' ? {} : vm.cmd.cardType;            
            if(vm.cmd.dataBanks.type.text.toString().toUpperCase().startsWith("AMERICAN EXPRESS")) {
                vm.accLen = 15;
                vm.cvvLen = 4;
                vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('AMERICAN')];
            } else {
                vm.accLen = 16;
                vm.cvvLen = 3;
                vm.cmd.cardType.type = [];
            }
        }

        function selectTypeCard() {
            if(vm.emission.payment.accountNumber) {
                switch (vm.emission.payment.accountNumber.toString().substr(0, 1)) {
                    case '3':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('AMERICAN')];
                        break;
                    case '4':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('VISA')];
                        break;
                    case '5':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('MASTER')];
                        break;
                }
            }
        }

        function getIndexListCardType(bankName) {
            for(var i = 0; i < vm.ListCardType.length; i++) {
                if(vm.ListCardType[i].text.toString().toUpperCase().startsWith(bankName))
                    return i;
            }
        }

        function cleanForm() {
            vm.stepForm = {
                step: 0,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false
            };
        }

        function regresarMain() {
            $state.go('insurance.main', {model: $stateParams.model});
        }

        function regresarPaginaCotizacion() {
            if (vm.ListCotizaciones.length > 1) {
                pagina1();
            } else {
                var sendModel = $stateParams.model;
                $state.go('insurance.main', {model: sendModel});
            }
        }

        function cotizarContratar() {
            vm.isClienteObt = false;
            if (vm.cotizacionSeleccionada) {
                pagina3();
            } else {
                pagina2();
            }
        }

        function pagina1() {
            cleanForm();
            vm.stepForm.step = 1;
            vm.stepForm.stepA = true;
        }

        function pagina2() {
            cleanForm();
            vm.stepForm.step = 2;
            vm.stepForm.stepB = true; 
            getJsonCoberturasService();
        }

        function pagina3() {
            cleanForm();
            getCatalogStreetType();
            getCatalogCardTypeQuery();
            getCatalogPaymentTypeQuery();
            vm.yearExpirationList = getYearExpirationList();
            vm.monthExpirationList = getMonthExpirationList();
            vm.emission.payment = {};
            vm.emission.payment.email = vm.emailUser;
            vm.emissionPersonType = model.personType === '1' ? 'F' : 'M';
            if (vm.cotizacionSeleccionada) {
                vm.emissionPersonType = vm.cotizacionSeleccionada.tipoCliente === 1 ? 'F' : 'M';
                vm.jsonQuotation = JSON.parse(vm.cotizacionSeleccionada.quotationJsonFin).outHomeInsuranceQuotation.insurancePaymentData;
                vm.cmd.kindPaid.type = JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni).catalogosCotizacion.kindPaid.type;
            }
            vm.stepForm.step = 3;
            vm.stepForm.stepC = true;
            window.scrollTo(0, angular.element('contratacion').offsetTop);
        }

        function revisaCotizaciones() {
            vm.tieneCotizaciones = false;
            vm.ListCotizaciones = getListaCotizaciones();
        }

        function getListaCotizaciones() {

            var _listaObtenida = [];
            var _params = {
                language: 'SPA',
                estado: "VIGENTE",
                idCliente: vm.numeroCliente,
                tipoCliente: vm.personType,
                productKey: 'HOGAR'
            };

            insuranceHousesSrv.getListQuotations(_params).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        var primerApe = vm.personType === '1' ? value.apellidoPaternoCliente : "";
                        var segundoApe = vm.personType === '1' ? value.apellidoMaternoCliente : "";
                        var name = value.nombreCliente + " " + primerApe + " " + segundoApe;
                        _listaObtenida.push({
                            cotizacion: value.idCotizacion,
                            poliza: value.idPoliza,
                            nombre: value.nombreCliente,
                            primerApellido: primerApe,
                            segundoApellido: segundoApe,
                            nombreCompleto: name,
                            fecha: moment(new Date().setTime(value.fechaCotizacion)).format('DD-MM-YYYY'),
                            vigencia: moment(new Date().setTime(value.vigenciaCotizacion)).format('DD-MM-YYYY'),
                            prima: value.monto,
                            estadoPoliza: value.estado,
                            numeroCliente: value.idCliente,
                            tipoCliente: value.tipoCliente,
                            isCliente: value.isCliente,
                            fechaNacimiento: vm.personType === '1' ? moment(new Date().setTime(value.fechaNacimiento)).format('DD-MM-YYYY') : value.fechaNacimiento,
                            rfcCliente: value.rfcCliente,
                            sexoCliente: value.sexoCliente,
                            emailCliente: value.mailCliente,
                            telefonoCliente: value.telefonoCliente,
                            quotationJsonIni: value.quotationJsonIni,
                            quotationJsonFin: value.quotationJsonFin,
                            emisionJsonIni: value.emisionJsonIni,
                            emisionJsonFin: value.emisionJsonFin,
                            status: value.vstatus
                        });
                    });
                    
                    if (_res.info.length > 0) {
                        vm.tieneCotizaciones = true;
                        pagina1();
                    } else {
                        pagina2();
                    }
                } else {
                    pagina2();
                }
            });
            return _listaObtenida;
        }

        function setCotizacion(json) {
            vm.jsonCotizacion.catalogosCotizacion = vm.cmd;
            var _fechaNacimiento = "";
            
            if (vm.validatePerson) {
                _fechaNacimiento = moment(vm.birthDay, "DD/MM/YYYY").format('YYYY-MM-DD');
            } else {
                _fechaNacimiento = moment(vm.fechaNacimiento).format('YYYY-MM-DD');
            }

            var _params = {
                language: 'SPA',
                idCliente: vm.numeroCliente,
                idCotizacion: vm.datosCotizados.numeroCotizacion,
                idPoliza: 0,
                fechaCotizacion: moment(new Date()).format('YYYY-MM-DD'),
                vigenciaCotizacion: moment(new Date(), 'YYYY-MM-DD').add(15, 'days').format('YYYY-MM-DD'),
                monto: Math.ceil(vm.datosCotizados.primaTotal),
                tipoCliente: vm.personType,
                isCliente: vm.numeroCliente === "9999" ? '0' : '1',
                nombreCliente: vm.personType.toString() === '1' ? vm.nombres.toUpperCase() : vm.nombreCliente.toUpperCase(),
                fechaNacimiento: _fechaNacimiento,
                rfcCliente: vm.fiscalIDNumber,
                sexoCliente: vm.sexo === 'masculino' ? '1' : '2',
                mailCliente: vm.emailUser,
                telefonoCliente: vm.phoneUser,
                quotationJsonInit: vm.jsonCotizacion,
                quotationJsonEnd: json,
                productKey: 'HOGAR'
            };

            if (vm.personType.toString() === '1') {
                _params.apellidoPaternoCliente = vm.apePaterno.toUpperCase();
                _params.apellidoMaternoCliente = vm.apeMaterno.toUpperCase();
            }

            insuranceHousesSrv.getCotizationAdd(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizacion = vm.datosCotizados;
                    CommonModalsSrv.done("Envío de Cotización exitosa Número de Cotización: " + vm.datosCotizacion.numeroCotizacion);
                    vm.jsonQuotation = json.outHomeInsuranceQuotation.insurancePaymentData;
                } else {
                    CommonModalsSrv.error("Envío de Cotización no fue exitoso.");
                }
                vm.cargandoCotizacion = false;
            });
        }

        function getRolUsuario() {
            var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
            vm.roles = user.roles;

            if (angular.isDefined(vm.roles) && angular.isArray(vm.roles)) {
                if (vm.roles.length === 1) {
                    return vm.roles[0];
                } else {
                    if (vm.roles.length > 1) {

                        var prioridad = 999;

                        for (var i = 0; i < vm.roles.length; i++) {
                            if (vm.roles[i] === "SEGUROS") {
                                if (prioridad > 1) {
                                    prioridad = 1;
                                }
                            }
                            if (vm.roles[i] === "ASESOR") {
                                if (prioridad > 2) {
                                    prioridad = 2;
                                }
                            }
                        }

                        switch (prioridad) {
                            case 1:
                                vm.rol = "SEGUROS";
                                return "SEGUROS";
                            case 2:
                                vm.rol = "ASESOR";
                                return "ASESOR";
                        }
                    }
                }
            }
        }

        function validateBirthdateRFC() {
            var v_birthday = moment(vm.fechaNacimiento).format('DD/MM/YYYY') + '';
            var v_constitutive_date = vm.fechaConstitutiva + '';
            var v_rfc = vm.rfc;
            var birthdayFromRFC = v_rfc.replace(/^([A-ZÑ\x26]{3,4})(([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1]))(((([A-Z]|[a-z]|[0-9]){3}))?)$/, "$2") + '';
            v_birthday = v_birthday.replace(/^([0-9]{2})(\/)([0-9]{2})(\/)([0-9]{2})([0-9]{2})$/, "$6$3$1") + '';

            if (v_birthday !== null && v_birthday !== '' && birthdayFromRFC !== null && birthdayFromRFC !== '' && birthdayFromRFC !== v_birthday && (vm.personType + '') === '1') {
                CommonModalsSrv.error("La fecha de nacimiento no coincide con la fecha del RFC");
                
            }

            if (v_birthday !== null && v_birthday !== '' && v_constitutive_date !== null && v_constitutive_date !== '' && v_constitutive_date !== v_birthday && vm.personType === 2) {
                CommonModalsSrv.error("La fecha constitutiva no coincide con la fecha del RFC");
                
            }
        }

        function justAlphabet(field) {
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[a-zA-ZÁÉÍÓÚÑáéíóúñ ]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function validarDatosACotizar() {
            if (!vm.disabledRFC && !vm.validatePerson) {
                if (vm.fechaNacimiento === "") {
                    if (vm.personType === '1') {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento");
                        return false;
                    } else {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Constitución");
                        return false;
                    }
                }
            }
            if (!vm.disabledRFC) {
                calculaRFC();
            } else {
                vm.bnd = true;
            }
            if (vm.bnd) {
                cotizarSeguroHogar();
            }
        }

        function cotizarSeguroHogar() {
            vm.cargandoCotizacion = true;
            var edificioSum = vm.jsonCoberturas.coberturas.edificio.monto;
            var hidroEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.monto;
            var bienesEdificioSum;
            var edificioTerminadoSum;
            var edificioDesocupadoSum;
            var edificioConstruccionSum;
            var edificioFijaSum;
            var securityId = typeof vm.cmd.securityActions === 'undefined' ? '' : vm.cmd.securityActions.type.id;
            var colindanciaId = typeof vm.cmd.borderWall === 'undefined' ? "false" : vm.cmd.borderWall.type.id;
            if (vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes) {
                bienesEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto;
                edificioTerminadoSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limTerminado.monto;
                edificioDesocupadoSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limDesocupado.monto;
                edificioConstruccionSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limConstruccion.monto;
                edificioFijaSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limFija.monto;
            }
            var terremotoEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.terremotoEdificio.monto;
            var bienesEdificioChecked;
            var edificioTerminadoChecked;
            var edificioDesocupadoChecked;
            var edificioConstruccionChecked;
            var edificioFijaChecked;
            if (vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes) {
                bienesEdificioChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked;
                edificioTerminadoChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limTerminado.checked;
                edificioDesocupadoChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limDesocupado.checked;
                edificioConstruccionChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limConstruccion.checked;
                edificioFijaChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limFija.checked;
            }
            var contenidosMontoSum = vm.jsonCoberturas.coberturas.contenidos.monto;
            var hidroContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.monto;
            var bienesContenidosSum;
            var limContenidosSum;
            if (vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes) {
                bienesContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto;
                limContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes.limContenidos.monto;
            }
            var terremotoContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.terremotoContenidos.monto;
            var remocionEscombrosSum = vm.jsonCoberturas.coberturas.remocionEscombros.monto;
            var rcFamiliarSum = vm.jsonCoberturas.coberturas.rcFamiliar.monto;
            var rcFamiliarArrendatarioSum = vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes.rcArrendatario.monto;
            var rcFamiliarArrendatarioChecked = vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes.rcArrendatario.checked;
            var cristalesSum = vm.jsonCoberturas.coberturas.cristales.monto;
            var cristalesChecked = vm.jsonCoberturas.coberturas.cristales.checked;
            var roboMenajeSum = vm.jsonCoberturas.coberturas.roboMenaje.monto;
            var joyasSum = vm.jsonCoberturas.coberturas.roboMenaje.coberturasIntegrantes.joyas.monto;
            var gastosAsaltoSum = vm.jsonCoberturas.coberturas.gastosAsalto.monto;
            var dineroSum = vm.jsonCoberturas.coberturas.dinero.monto;
            var dineroCreditSum = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.monto;
            var dineroCreditChecked = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.checked;
            var objetosPersonalesSum = vm.jsonCoberturas.coberturas.objetosPersonales.monto;
            var objetosPersonalesObjetosSum;
            if (vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos) {
                objetosPersonalesObjetosSum = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.monto;
            }
            var objetosPersonalesBicicletaSum = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.bicicletasObjetos.monto;
            var objetosPersonalesObjetosChecked;
            if (vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos) {
                objetosPersonalesObjetosChecked = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.checked;
            }
            var electrodomesticosSum = vm.jsonCoberturas.coberturas.electrodomesticos.monto;
            var electrodomesticosMovilSum = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.monto;
            var electrodomesticosChecked = vm.jsonCoberturas.coberturas.electrodomesticos.checked;
            var electrodomesticosMovilChecked = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.checked;
            var asistenciaViajesSum = vm.jsonCoberturas.coberturas.asistenciaViajes.monto;
            var extensionViajesSum;
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                extensionViajesSum = vm.jsonCoberturas.coberturas.extensionViajes.monto;
            }
            var asistenciaLegalSum;
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                asistenciaLegalSum = vm.jsonCoberturas.coberturas.asistenciaLegal.monto;
            }
            asistenciaInformaticaSum = undefined;
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                var asistenciaInformaticaSum = vm.jsonCoberturas.coberturas.asistenciaInformatica.monto;
            }
            var gastosFinalesSum = vm.jsonCoberturas.coberturas.gastosFinales.monto;
            var gastosExtrasSum = vm.jsonCoberturas.coberturas.gastosExtras.monto;
            var asistenciaViajesChecked = vm.jsonCoberturas.coberturas.asistenciaViajes.checked;
            var extensionViajesChecked;
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                extensionViajesChecked = vm.jsonCoberturas.coberturas.extensionViajes.checked;
            }
            var asistenciaLegalChecked;
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                asistenciaLegalChecked = vm.jsonCoberturas.coberturas.asistenciaLegal.checked;
            }
            var asistenciaInformaticaChecked;
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                asistenciaInformaticaChecked = vm.jsonCoberturas.coberturas.asistenciaInformatica.checked;
            }
            var gastosFinalesChecked = vm.jsonCoberturas.coberturas.gastosFinales.checked;
            var hidroContenidosFlag = hidroContenidosSum ? "true" : "false";
            var terremotoContenidosFlag = terremotoContenidosSum ? "true" : "false";
            var hidroEdificioFlag = hidroEdificioSum ? "true" : "false";
            var terremotoEdificioFlag = terremotoEdificioSum ? "true" : "false";
            var edificioFlag = edificioSum ? "true" : "false";
            var gastosAsaltoFlag = gastosAsaltoSum === 'AMPARADO' ? "true" : "false";
            var asistenciaViajesFlag = asistenciaViajesSum === 'AMPARADO' ? "true" : "false";
            var extensionViajesFlag = extensionViajesSum === 'AMPARADO' ? "true" : "false";
            var asistenciaLegalFlag = asistenciaLegalSum === 'AMPARADO' ? "true" : "false";
            var asistenciaInformaticaFlag = asistenciaInformaticaSum === 'AMPARADO' ? "true" : "false";
            var gastosFinalesFlag = gastosFinalesSum === 'AMPARADO' ? "true" : "false";
            hidroContenidosSum = hidroContenidosSum ? hidroContenidosSum : 0;
            terremotoContenidosSum = terremotoContenidosSum ? terremotoContenidosSum : 0;
            hidroEdificioSum = hidroEdificioSum ? hidroEdificioSum : 0;
            terremotoEdificioSum = terremotoEdificioSum ? terremotoEdificioSum : 0;
            bienesEdificioSum = bienesEdificioSum ? bienesEdificioSum : 0;
            edificioTerminadoSum = edificioTerminadoSum ? edificioTerminadoSum : 0;
            edificioDesocupadoSum = edificioDesocupadoSum ? edificioDesocupadoSum : 0;
            edificioConstruccionSum = edificioConstruccionSum ? edificioConstruccionSum : 0;
            edificioFijaSum = edificioFijaSum ? edificioFijaSum : 0;
            edificioSum = edificioSum ? edificioSum : 0;
            contenidosMontoSum = contenidosMontoSum ? contenidosMontoSum : 0;
            remocionEscombrosSum = remocionEscombrosSum ? remocionEscombrosSum : 0;
            rcFamiliarSum = rcFamiliarSum ? rcFamiliarSum : 0;
            rcFamiliarArrendatarioSum = rcFamiliarArrendatarioSum === 'AMPARADO' ? rcFamiliarSum : 0;
            cristalesSum = cristalesSum ? cristalesSum : 0;
            roboMenajeSum = roboMenajeSum ? roboMenajeSum : 0;
            joyasSum = joyasSum ? joyasSum : 0;
            dineroSum = dineroSum ? dineroSum : 0;
            dineroCreditSum = dineroCreditSum ? dineroCreditSum : 0;
            objetosPersonalesSum = objetosPersonalesSum ? objetosPersonalesSum : 0;
            objetosPersonalesObjetosSum = objetosPersonalesObjetosSum ? objetosPersonalesObjetosSum : 0;
            objetosPersonalesBicicletaSum = objetosPersonalesBicicletaSum ? objetosPersonalesBicicletaSum : 0;
            electrodomesticosSum = electrodomesticosSum ? electrodomesticosSum : 0;
            electrodomesticosMovilSum = electrodomesticosMovilSum ? electrodomesticosMovilSum : 0;
            gastosExtrasSum = gastosExtrasSum ? gastosExtrasSum : 0;
            remocionEscombrosSum = remocionEscombrosSum ? remocionEscombrosSum : 0;
            var beachFrontCode = hidroContenidosFlag === "true" ? 2 : 1;
            var _params = {};
            _params.language = 'SPA';
            _params.agentID = $scope.$parent.agentSelected.id;
            _params.ClientNumber = vm.numeroCliente;
            _params.InsurancePolicyDate = moment(new Date()).format('YYYY-MM-DD');
            _params.PolicyMaturityDate = moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD');
            switch (vm.cmd.currency.type.id) {
                case 1:
                    _params.Currency = "MXN";
                    break;
                case 2:
                    _params.Currency = "USD";
                    break;
            }
            _params.PaymentMethod = vm.cmd.kindPaid.type.id;
            _params.FederalEntityID = vm.cmd.dataHouseEntityRisk.type.id;
            _params.DelegationMunicipalityID = vm.cmd.dataHouseMunicipalityRisk.type.id;
            _params.PostalCode = vm.cmd.dataHousePostalCodeRisk.type.id;
            _params.Street = vm.calle;
            _params.WallTypeID = vm.cmd.kindStructure.type.id;
            _params.RoofTypeID = vm.cmd.kindRoof.type.id;
            _params.RiskTypeDetailAreaCode = vm.cmd.kindRisk.type.id;
            _params.BeachFrontCode = beachFrontCode;
            _params.ContInsuredSum = contenidosMontoSum;
            _params.ContHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.ContHydromPhenomCoverageInsuredSum = hidroContenidosSum;
            _params.ContHydromPhenomCoverageStoredItemsInsuredSum = bienesEdificioSum;
            _params.ContEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.ContEarthquakeEruptCoverageInsuredSum = terremotoContenidosSum;
            _params.ExtExpHomeInsuredSum = gastosExtrasSum;
            _params.ExtExpHomeHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.ExtExpHomeHydromPhenomInsuredSum = "0";
            _params.ExtExpHomeEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.ExtExpHomeEarthquakeEruptInsuredSum = "0";
            _params.DebRemInsuredSum = remocionEscombrosSum;
            _params.DebRemHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.DebRemHydromPhenomInsuredSum = "0";
            _params.DebRemEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.DebRemEarthquakeEruptInsuredSum = "0";
            _params.FamCivLiaInsuredSum = rcFamiliarSum;
            if (rcFamiliarArrendatarioChecked) {
                _params.FamCivLiaTenCivLiaInsuredSum = rcFamiliarArrendatarioSum;
            }
            _params.BuilCoverageFlag = edificioFlag;
            _params.BuilInsuredSum = edificioSum;
            _params.BuilHydromPhenomCoverageFlag = hidroEdificioFlag;
            _params.BuilHydromPhenomInsuredSum = hidroEdificioSum;
            _params.BuilHydromPhenomFinishedBuildingInsuredSum = edificioTerminadoSum;
            _params.BuilHydromPhenomVacatedBuildingInsuredSum = edificioDesocupadoSum;
            _params.BuilHydromPhenomConstructionBuildingInsuredSum = edificioConstruccionSum;
            _params.BuilHydromPhenomFixedAdaptationsInsuredSum = edificioFijaSum;
            _params.BuilEarthquakeEruptCoverageFlag = terremotoEdificioFlag;
            _params.BuilEarthquakeEruptInsuredSum = terremotoEdificioSum;
            if (cristalesChecked) {
                _params.CrystalsInsuredSum = cristalesSum;
            }
            _params.HouseholdEquipmentTheftInsuredSum = roboMenajeSum;
            _params.JewelryAndValuablesInsuredSum = joyasSum;
            _params.MedicalExpensesCoverage = gastosAsaltoFlag;
            _params.CashSecInsuredSum = dineroSum;
            if (dineroCreditChecked) {
                _params.CashSecCreditCardFraudInsuredSum = dineroCreditSum;
            }
            _params.PerItemsInsuredSum = objetosPersonalesSum;
            _params.PerItemsPersonalItemsInsuredSum = objetosPersonalesObjetosSum;
            _params.PerItemsBicycleInsuredSum = objetosPersonalesBicicletaSum;
            _params.SecurityMeasuresCode = securityId;
            _params.AdjoiningHomeFlag = colindanciaId;
            if (electrodomesticosChecked) {
                _params.ElecEquipInsuredSum = electrodomesticosSum;
            }
            if (electrodomesticosMovilChecked) {
                _params.ElecEquipMobileInsuredSum = electrodomesticosMovilSum;
            }
            if (asistenciaViajesChecked) {
                _params.HomeAssistanceCoverageFlag = asistenciaViajesFlag;
            }
            if (extensionViajesChecked) {
                _params.TravelsCoverageFlag = extensionViajesFlag;
            }
            if (asistenciaLegalChecked) {
                _params.LegalAssistanceCoverageFlag = asistenciaLegalFlag;
            }
            if (asistenciaInformaticaChecked) {
                _params.CompAssistServCoverageFlag = asistenciaInformaticaFlag;
            }
            if (gastosFinalesChecked) {
                _params.FinalExpensesCoverageFlag = gastosFinalesFlag;
            }

            vm.jsonCotizacion.Street = _params.Street;
            
            insuranceHousesSrv.getServiceCotizacionHome(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizados = {
                        primaNeta: _res.info.insurancePaymentData.netPremium,
                        derechosPoliza: _res.info.insurancePaymentData.entitlement,
                        recargos: _res.info.insurancePaymentData.surcharge,
                        iva: _res.info.insurancePaymentData.vat,
                        primaTotal: _res.info.insurancePaymentData.totalPremium,
                        numeroCotizacion: _res.info.quotationNumber,
                        coberturas: _res.info.coverageList

                    };
                    var jsonEnd = _res.response;
                    vm.primatotalImpresion = _res.info.insurancePaymentData.totalPremium;
                    jsonEnd.outCommonHeader = {};
                    setCotizacion(jsonEnd);

                } else {
                    CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - code: " + _res.info.transactionID);
                    vm.cargandoCotizacion = false;
                }
            });
        }

        function cleanDataEmission() {
            vm.isClienteObt = false;
            vm.emission.contract = {
                gender: '1',
                name: '',
                lastName: '',
                secondLastName: '',
                birthdate: moment(new Date()).format('YYYY-MM-DD'),
                fiscalIDNumber: '',
                email: '',
                phone: '',
                street: '',
                numberExt: '',
                numberInt: '',
                neighboarhood: '',
                stateContractor: {
                    type: {}
                },
                entityContractor: {
                    type: {}
                },
                pcContractor: {
                    type: {}
                }
            };
            vm.cmd.emission.contract = {
                stateContractor: {
                    type: null
                },
                entityContractor: {
                    type: null
                },
                pcContractor: {
                    type: null
                }
            };
        }

        function initEmission() {
            var fecha = "";
            var fechaSeleccion = "";
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;
            vm.flagSameAddressCheckBox = !!vm.cotizacionSeleccionada;
            vm.isClienteObt = true;
            
            if (vm.numeroCliente === "9999") {
                if (typeof vm.fechaNacimiento === 'string') {
                    fecha = vm.fechaNacimiento;
                } else {
                    fecha = moment(vm.fechaNacimiento).format("DD/MM/YYYY");
                    if (typeof fecha === 'undefined' || fecha === 'Invalid date') {
                        fecha = moment(vm.fechaNacimiento, "DD/MM/YYYY");
                        fecha = moment(fecha).format("DD/MM/YYYY");
                    }
                }
            } else {
                if (typeof vm.birthDay === 'string') {
                    fecha = vm.birthDay;
                } else {
                    fecha = moment(vm.birthDay).format("DD/MM/YYYY");
                    if (typeof fecha === 'undefined' || fecha === 'Invalid date') {
                        fecha = moment(vm.birthDay, "DD/MM/YYYY");
                        fecha = moment(fecha).format("DD/MM/YYYY");
                    }
                }
            }

            vm.isClienteObt = true;

            switch (vm.emissionPersonType) {
                case 'F':
                    fecha = calcularEdad(_type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber, "1");
                    vm.emission.contract = {
                        gender: _type ? vm.cotizacionSeleccionada.sexoCliente === '1' ? '1' : '2' : vm.sexo === 'masculino' ? '1' : '2',
                        name: _type ? vm.cotizacionSeleccionada.nombre : vm.nombres,
                        lastName: _type ? vm.cotizacionSeleccionada.primerApellido : vm.apePaterno,
                        secondLastName: _type ? vm.cotizacionSeleccionada.segundoApellido : vm.apeMaterno,
                        birthdate: fecha,
                        fiscalIDNumber: _type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber,
                        email: _type ? vm.cotizacionSeleccionada.emailCliente : vm.emailUser,
                        phone: _type ? vm.cotizacionSeleccionada.telefonoCliente : vm.phoneUser,
                        street: _type ? _quotation.Street : vm.calle,
                        numberExt: vm.emission.riskNumberExt,
                        numberInt: vm.emission.riskInterior,
                        neighboarhood: vm.emission.riskNeighborhood,
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }
                    };
                    vm.cmd.emission.contract = {
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }

                    };
                    break;
                
                case 'M':
                    if (_type) {
                        if (vm.cotizacionSeleccionada.isCliente === 1) {
                            if (typeof vm.cotizacionSeleccionada.fechaNacimiento === 'string') {
                                fechaSeleccion = vm.cotizacionSeleccionada.fechaNacimiento;
                            } else {
                                fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento).format("DD/MM/YYYY");
                                if (typeof fechaSeleccion === 'undefined' || fechaSeleccion === 'Invalid date') {
                                    fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento, "DD/MM/YYYY");
                                    fechaSeleccion = moment(fechaSeleccion).format("DD/MM/YYYY");
                                }
                            }
                        } else {
                            if (typeof vm.cotizacionSeleccionada.fechaNacimiento === 'string') {
                                fechaSeleccion = vm.cotizacionSeleccionada.fechaNacimiento;
                            } else {
                                fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento).format('DD/MM/YYYY');
                                if (typeof fechaSeleccion === 'undefined' || fechaSeleccion === 'Invalid date') {
                                    fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento, "DD/MM/YYYY");
                                    fechaSeleccion = moment(fecha).format("DD/MM/YYYY");
                                }
                            }
                        }
                    }

                    fechaSeleccion = calcularEdad(_type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber, "2");
                    vm.emission.contract = {
                        gender: '1',
                        name: _type ? vm.cotizacionSeleccionada.nombre : vm.nombreCliente,
                        lastName: '',
                        secondLastName: '',
                        birthdate: fechaSeleccion,
                        fiscalIDNumber: _type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber,
                        email: _type ? vm.cotizacionSeleccionada.emailCliente : vm.emailUser,
                        phone: _type ? vm.cotizacionSeleccionada.telefonoCliente : vm.phoneUser,
                        street: _type ? _quotation.Street : vm.calle,
                        numberExt: vm.emission.riskNumberExt,
                        numberInt: vm.emission.riskInterior,
                        neighboarhood: vm.emission.riskNeighborhood,
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }
                    };
                    vm.cmd.emission.contract = {
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }

                    };
                    break;
            }
        }

        function calcularEdad(rfc, type) {
            var log = moment(new Date()).format("YY");
            var fecha = type === "1" ? rfc.substring(4, 10) : rfc.substring(3, 9);
            var anio = fecha.substring(0, 2);
            var mes = fecha.substring(2, 4);
            var dia = fecha.substring(4, 6);
            if (anio > log) {
                anio = "19" + anio;
            } else {
                anio = "20" + anio;
            }
            fecha = dia + "/" + mes + "/" + anio;
            return fecha;
        }

        function emissionFunction() {
            var _fechaExpiracionYear = typeof vm.comboYearExpiration === 'undefined' ? '' : vm.comboYearExpiration.id;
            var _fechaExpiracionMonth = typeof vm.comboMonthExpiration === 'undefined' ? '' : vm.comboMonthExpiration.id;
            var _typeCardByClabe = typeof vm.cmd.ListTypeCLABE === 'undefined' ? '' : vm.cmd.ListTypeCLABE.type.text;
            var _fechaPago = typeof vm.emission.payment.dateAprox === 'undefined' ? moment(new Date()).format('YYYY-MM-DD') : moment(vm.emission.payment.dateAprox).format('YYYY-MM-DD');
            var _numeroTarjeta = typeof vm.emission.payment.accountNumber === 'undefined' ? '' : vm.emission.payment.accountNumber;
            var _claveTarjeta = typeof vm.emission.payment.cvv === 'undefined' ? '' : vm.emission.payment.cvv;
            var _clabeInterbancaria = typeof vm.emission.payment.clabe === 'undefined' ? '' : vm.emission.payment.clabe;
            var _fechaVencimiento = "";
            var _fechaProximaPago = "";
            var fechaBirthDate = "";
            
            if (typeof vm.emission.contract.birthdate === 'string') {
                fechaBirthDate = vm.emission.contract.birthdate.split("/").reverse().join("-");
            } else {
                fechaBirthDate = moment(new Date(vm.emission.contract.birthdate)).format('YYYY-MM-DD');
            }
            if (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') {
                _fechaVencimiento = _fechaExpiracionYear + '-' + _fechaExpiracionMonth + "-01";
                _fechaProximaPago = _fechaPago;
            }
            if (vm.cmd.paymentType.type.id === '2' && _typeCardByClabe === 'CLABE') {
                _fechaVencimiento = _fechaPago;
                _fechaProximaPago = _fechaPago;
            }
            var _params = {
                QuotationNumber: vm.datosCotizacion.numeroCotizacion || vm.cotizacionSeleccionada.cotizacion,
                InsuInsurancePolicyDate: moment(new Date()).format('YYYY-MM-DD'),
                InsuPolicyMaturityDate: moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD'),
                InsuNumberOfFloors: vm.emission.floors,
                InsuNumberOfBasements: vm.emission.basements,
                InsuPaymentManagerID: vm.cmd.paymentType.type.id,
                RiskStreetTypeID: vm.cmd.emission.streetType.type.id,
                RiskStreet: vm.emission.riskStreet,
                RiskInteriorNumber: vm.emission.riskInterior,
                RiskOutdoorNumber: vm.emission.riskNumberExt,
                RiskNeighborhood: vm.emission.riskNeighborhood,
                RiskSameAddressContractingPartyFlag: vm.cmd.emission.sameAddress === true ? '1' : '0',
                ContractPersonType: vm.emissionPersonType,
                ContractFiscalIDNumber: vm.emission.contract.fiscalIDNumber,
                ContractName: vm.emission.contract.name,
                ContractLastName: vm.emission.contract.lastName,
                ContractSecondLastName: vm.emission.contract.secondLastName,
                ContractBirthDate: fechaBirthDate,
                ContractGender: vm.emissionPersonType === 'F' ? vm.emission.contract.gender : '1',
                ContractPhoneNumber: vm.emission.contract.phone,
                ContractEmail: vm.emission.contract.email,
                ContractStreet: vm.emission.contract.street,
                ContractNeighborhood: vm.emission.contract.neighboarhood,
                ContractFederalEntityID: vm.cmd.emission.contract.stateContractor.type.id,
                ContractDelegationMunicipalityID: vm.cmd.emission.contract.entityContractor.type.id,
                ContractPostalCode: vm.cmd.emission.contract.pcContractor.type.id,
                CheckBeneficiary: vm.checkBeneficiary ? 'true' : 'false',
                BeneficiaryPersonType: vm.checkBeneficiary ? vm.emission.beneficiary.type : '',
                BeneficiaryFiscalIDNumber: vm.checkBeneficiary ? vm.emission.beneficiary.rfc : '',
                BeneficiaryName: vm.checkBeneficiary ? vm.emission.beneficiary.type === 'F' ? vm.emission.beneficiary.name : vm.emission.beneficiary.social : '',
                BeneficiaryLastName: vm.checkBeneficiary ? vm.emission.beneficiary.lastName : '',
                BeneficiarySecondLastName: vm.checkBeneficiary ? vm.emission.beneficiary.secondLastName : '',
                BeneficiaryStreet: vm.checkBeneficiary ? vm.emission.beneficiary.street : '',
                BeneficiaryNeighborhood: vm.checkBeneficiary ? vm.emission.beneficiary.neighboarhood : '',
                BeneficiaryFederalEntityID: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.stateBeneficiary.type.id : '',
                BeneficiaryDelegationMunicipalityID: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.entityBeneficiary.type.id : '',
                BeneficiaryPostalCode: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.pcBeneficiary.type.id : '',
                //DATOS DE TITULAR LOS MISMOS QUE DATOS DE CONTRATANTE
                TitularPersonType: vm.emissionPersonType,
                TitularFiscalIDNumber: vm.emission.contract.fiscalIDNumber,
                TitularName: vm.emission.contract.name,
                TitularLastName: vm.emission.contract.lastName,
                TitularSecondLastName: vm.emission.contract.secondLastName,
                TitularBirthDate: fechaBirthDate,
                TitularGender: vm.emissionPersonType === 'F' ? vm.emission.contract.gender : '1',
                TitularPhoneNumber: vm.emission.contract.phone,
                TitularEmail: vm.emission.contract.email,
                TitularStreet: vm.emission.contract.street,
                TitularNeighborhood: vm.emission.contract.neighboarhood,
                TitularFederalEntityID: vm.cmd.emission.contract.stateContractor.type.id,
                TitularDelegationMunicipalityID: vm.cmd.emission.contract.entityContractor.type.id,
                TitularPostalCode: vm.cmd.emission.contract.pcContractor.type.id,
                //fin datos de titular
                BankingPaymentMethod: vm.cmd.paymentType.type.id === '8' ? 'TC' : vm.cmd.paymentType.type.id === '1' ? '' : vm.cmd.ListTypeCLABE.type.text,
                BankingBankID: (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') && (typeof vm.cmd.dataBanks.type !== 'undefined') ? vm.cmd.dataBanks.type.id : '',
                BankingName: vm.emission.payment.name,
                BankingLastName: vm.emission.payment.lastName,
                BankingSecondLastName: vm.emission.payment.secondLastName,
                BankingEmail: vm.emission.payment.email,
                BankingAccountNumber: _numeroTarjeta,
                BankingCardVerificationValue: _claveTarjeta,
                BankingExpirationDate: _fechaVencimiento,
                BankingCardID: (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') && (typeof vm.cmd.cardType.type !== 'undefined') ? vm.cmd.cardType.type.id : '',
                BankingCLABE: _clabeInterbancaria,
                BankingPaymentDate: _fechaProximaPago,
                TypeCardByClabe: vm.cmd.ListTypeCLABE === undefined ? '' : vm.cmd.ListTypeCLABE.type.text,
                language: 'SPA'
            };

            insuranceHousesSrv.getServiceEmisionHome(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizacion = _res.info;
                    vm.numPoliza = _res.info.policyNumber;
                    vm.stepForm.stepD = false;
                    vm.stepForm.stepE = true;

                    var _data = {
                        language: 'SPA',
                        idCotizacion: _params.QuotationNumber,
                        idPoliza: vm.numPoliza,
                        quotationJsonInit: JSON.stringify(_params),
                        quotationJsonEnd: JSON.stringify(_res.response),
                        numberAuthorizer: 0
                    };

                    insuranceHousesSrv.updateQuotation(_data).then(function (response) {
                        
                        CommonModalsSrv.done("Emisión Exitosa. Número de póliza: " + vm.numPoliza + '');
                    }).catch();
                } else {
                    CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - code: " + _res.info.transactionID);

                }
            });
        }

        vm.datepicker_opts = {
            minDate: new Date(),
            isInvalidDate: function (date) {
                return (date.day() === 0 || date.day() === 6) ? true : false;
            }
        };

        function printPolicy() {
            var _url = window.location.href.indexOf('asesoria.actinver.com/asesoria') !== -1 ?
                    'https://negocios.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0' :
                    'https://negociosuat.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0';

            window.open(_url, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function imprimirCondiciones() {
            var _urlCondiciones;
            _urlCondiciones = 'img/pdfs/actinver-condiciones-generales-mapfre-hogar30052019.pdf';
            window.open(_urlCondiciones, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function endEmission() {
            $state.go('insurance.main', {model: null});
        }

        function emisionSeguroHogar() {
            if (Number(vm.emission.floors) <= 0) {
                CommonModalsSrv.error("El número de PISOS debe ser MAYOR a CERO");
                return;
            }
            
            if (validaRFCFecha()) {
                vm.stepForm.stepC = false;
                vm.stepForm.stepD = true;
            }
        }

        function backToEmission() {
            vm.stepForm.stepC = true;
            vm.stepForm.stepD = false;
        }

        function validaRFCFecha() {
            var fechaC = moment(vm.emission.contract.birthdate).format("DD/MM/YYYY");

            if (!validaFechaConRFC(fechaC, vm.emission.contract.fiscalIDNumber, vm.personType, "Contratante")) {
                return false;
            }

            if (vm.checkBeneficiary) {
                var fechaB = "";
                var personaPY = "";

                if (vm.emission.beneficiary.type === "F") {
                    personaBeneficiario = "1";
                } else {
                    if (vm.emission.beneficiary.type === "M") {
                        personaBeneficiario = "2";
                    }
                }

                if (personaBeneficiario === "1") {
                    if (vm.emission.beneficiary.dateF) {
                        fechaB = vm.emission.beneficiary.dateF;
                    } else {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento del Beneficiario");
                    }
                } else {
                    if (personaBeneficiario === "2") {
                        if (vm.emission.beneficiary.dateM) {
                            fechaB = vm.emission.beneficiary.dateM;
                        } else {
                            CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Constitución del Beneficiario");
                        }
                    }
                }

                fechaB = moment(fechaB).format("DD/MM/YYYY");

                if (!validaFechaConRFC(fechaB, vm.emission.beneficiary.rfc, personaBeneficiario, "Beneficiario")) {
                    return false;
                }
            }

            return true;
        }

        function validaFechaConRFC(fecha, rfcOri, tipoPersona, persona) {
            if (!vm.isClienteObt) {
                var rfc = "";
                var arrayFecha = fecha.split("/");
                rfc += arrayFecha[2].substring(2, 4);
                rfc += arrayFecha[1];
                rfc += arrayFecha[0];
                if (tipoPersona === '1') {
                    if (rfc === rfcOri.substring(4, 10)) {
                        vm.bnd = true;       
                    } else {
                        CommonModalsSrv.error("La fecha de nacimiento del " + persona + " no coincide con la fecha del RFC.");    
                        return false;
                    }
                } else if (tipoPersona === '2') {
                    if (rfc === rfcOri.substring(3, 9)) {
                        vm.bnd = true;
                    } else {
                        if (rfcOri.length > 12 && tipoPersona === '2') {
                            CommonModalsSrv.error("El RFC del " + persona + " no cumple con la longitud correcta. ");
                            return false;
                        } else {
                            CommonModalsSrv.error("La fecha constitutiva del " + persona + " no coincide con la fecha del RFC.");
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return true;
            }
        }

        function calculaRFC() {
            vm.bnd = false;

            if (!vm.isClienteObt) {
                var fecha = vm.disabledRFC ? vm.birthDay : vm.fechaNacimiento;
                fecha = typeof fecha === 'string' ? fecha : moment(fecha).format('DD/MM/YYYY');//$("#F_NACIMIENTO").val();
                var rfcOri = vm.fiscalIDNumber;
                var rfc = "";
                var arrayFecha = fecha.split("/");
                rfc += arrayFecha[2].substring(2, 4);
                rfc += arrayFecha[1];
                rfc += arrayFecha[0];
                if (vm.personType === '1') {
                    if (rfc === rfcOri.substring(4, 10)) {
                        vm.bnd = true;
                    } else {
                        CommonModalsSrv.error("La fecha de nacimiento no coincide con la fecha del RFC.");
                    }
                } else if (vm.personType === '2') {
                    if (rfc === rfcOri.substring(3, 9)) {
                        vm.bnd = true;
                    } else {
                        if (rfcOri.length > 12 && vm.personType === '2') {
                            CommonModalsSrv.error("El RFC no cumple con la longitud correcta. ");
                        } else {
                            CommonModalsSrv.error("La fecha constitutiva no coincide con la fecha del RFC.");
                        }
                    }
                }
            } else {
                vm.bnd = true;
            }
        }

        function justAlphanumeric(field) {            
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[0-9a-zA-ZÁÉÍÓÚÑáéíóúñ ]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function justNumeric(field) {        
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[0-9]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function soloNumero(e) {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function checkRate(input) {
            //var re =/^[a-zA-Z0-9 ]+$/;
            var re = /^[1-9]+[0-9]*]*$/;
            if (!re.test(input)) {
                return true;
            } else {
                return true;
            }
        }

        var begin;
        var first;
        var second;

        function charrepeat(e, value) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var tb = (typeof value !== 'undefined') ? value.toUpperCase() : String.fromCharCode(echc).toUpperCase();
            if (tb.length > 2) {
                var message = tb.substring(tb.length - 3, tb.length);
                if (checkRate(message)) {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (begin.toString() === first.toString() && first.toString() === second.toString()) {
                        event.preventDefault();
                        return false;
                    }
                } else {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (parseInt(first) === parseInt(second) - 1 && parseInt(begin) === parseInt(first) - 1) {
                        event.preventDefault();
                        return false;
                    }
                }
            }
            return false;
        }

        function charrepeatText(event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key) {
                event.preventDefault();
                return false;
            }
        }

        function charrepeatTextTres(event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key && inputValue.substring(inputValue.length - 3, inputValue.length - 2) === key) {
                event.preventDefault();
                return false;
            }
        }

        function soloTextAndNum(e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z0-9 ]+$") : new RegExp("^[a-zA-Z0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                    event.which === 233 || event.which === 237 || event.which === 243 ||
                    event.which === 250 || event.which === 193 || event.which === 201 ||
                    event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        }

        function soloText(e, espacios, valor) {
            var regex = espacios ? new RegExp("^[a-zA-Z]+$") : new RegExp("^[a-zA-Z]+$");
            var echc = (typeof e.charCode !== 'undefined') ? e.charCode : e.which;
            var key = String.fromCharCode(echc);
            if (e.which === 241 || e.which === 209 || e.which === 225 ||
                    e.which === 233 || e.which === 237 || e.which === 243 ||
                    e.which === 250 || e.which === 193 || e.which === 201 ||
                    e.which === 205 || e.which === 211 || e.which === 218 || e.which === 32)
                return true;
            else {
                if (!regex.test(key) && e.charCode !== 0) {

                    e.preventDefault();
                    return false;
                }
            }
        }

        function numberSecuential(event, idValue) {
            var strNum = "01234567890000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999";
            var inputValue = angular.element("#" + idValue).val();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            if (inputValue.toString() !== '01' && inputValue.toString() !== '001') {
                if (inputValue.toString().length > 5 && strNum.includes(inputValue.toString())) {
                    event.preventDefault();
                    return false;
                } else {
                    return true;
                }
            } else {
                event.preventDefault();
                return false;
            }
        }

        function forceKeyPressUppercase(e) {
            var charInput = e.keyCode;
            if ((charInput >= 97) && (charInput <= 122)) { // lowercase
                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifier key
                    var newChar = charInput - 32;
                    var start = e.target.selectionStart;
                    var end = e.target.selectionEnd;
                    e.target.value = e.target.value.substring(0, start) + String.fromCharCode(newChar) + e.target.value.substring(end);
                    e.target.setSelectionRange(start + 1, start + 1);
                    e.preventDefault();
                }
            }
        }

        function setValueGastosExtrasCasaHabitacion() {
            
            var imp_edificio = vm.importeEdificio * 1;
            vm.sumaGastosExtras = (imp_edificio + (imp_edificio * 0.1)) + '';
            document.getElementById("sumaGastosExtras").disabled = "true";
        }

        function setRemocionEscombros() {
            var imp_edificio = vm.importeEdificio * 1;
            vm.sumaRemEsco = (imp_edificio + (imp_edificio * 0.1)) + '';
            document.getElementById("sumaRemEsco").disabled = "true";
        }

        function onChangeTipoDeRiesgo(tipoRiesgo) {
            vm.tipoRiesgo = tipoRiesgo;
            cambiaJoyasTipoDeRiesgo();
        }

        function cambiaJoyasTipoDeRiesgo() {
            if (vm.tipoRiesgo.id === "2") {
                vm.roboMenaje.c.checked = false;
                vm.roboMenaje.ci.joyas.checked = false;
                vm.dinero.c.checked = false;
                vm.dinero.ci.usoTarjetasDinero.checked = false;

                if (vm.rol === "SEGUROS") {
                    vm.roboMenaje.c.montoDisabled = true;
                    vm.roboMenaje.c.obligatorio = true;
                    vm.dinero.c.montoDisabled = true;
                    vm.dinero.c.obligatorio = true;
                }
            } else {
                if (vm.rol === "ASESOR") {
                    vm.roboMenaje.c.checked = true;
                    vm.dinero.c.checked = true;
                    vm.roboMenaje.ci.joyas.checked = true;
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = false;
                        vm.roboMenaje.c.obligatorio = false;
                        vm.dinero.c.montoDisabled = false;
                        vm.dinero.c.obligatorio = false;
                    }
                }
            }
            realizaOperaciones();
        }

        function getJsonCoberturasService(newValue) {
            var _listaObtenida = [];
            insuranceHousesSrv.getCoverage().then(function (_res) {
                angular.forEach(_res.info, function (value) {

                    var jS = {};
                    try {
                        jS = JSON.parse(decode(value.json));
                    } catch (err) {
                        try {
                            jS = JSON.parse(value.json);
                        } catch (err) {
                            CommonModalsSrv.error("No fue posible obtener las coberturas.");
                        }
                    }

                    _listaObtenida.push({
                        id: value.idCobertura,
                        isCliente: value.isCliente,
                        json: jS,
                        moneda: value.moneda,
                        rollUsuario: value.rollUsuario,
                        status: value.status,
                        tipoCliente: value.tipoCliente
                    });
                });
                
                for (var i = 0; i < _listaObtenida.length; i++) {
                    if ("ASESOR" === _listaObtenida[i].rollUsuario && "MXN" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasAsesorMXN = _listaObtenida[i].json;
                    }
                    if ("ASESOR" === _listaObtenida[i].rollUsuario && "USD" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasAsesorUSD = _listaObtenida[i].json;
                    }
                    if ("SEGUROS" === _listaObtenida[i].rollUsuario && "MXN" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasSegurosMXN = _listaObtenida[i].json;
                    }
                    if ("SEGUROS" === _listaObtenida[i].rollUsuario && "USD" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasSegurosUSD = _listaObtenida[i].json;
                    }
                }

                getJsonCoberturas(newValue);
            });
        }

        function getJsonCoberturas(newValue) {
            var moneda = 1;

            if (newValue) {
                moneda = newValue.id;
            }
            if (vm.rol === "ASESOR") {
                switch (moneda) {
                    case 1:
                        vm.jsonCoberturas = vm.jsonCoberturasAsesorMXN;
                        break;
                    case 2:
                        vm.jsonCoberturas = vm.jsonCoberturasAsesorUSD;
                        break;
                }
            }
            if (vm.rol === "SEGUROS") {
                switch (moneda) {
                    case 1:
                        vm.jsonCoberturas = vm.jsonCoberturasSegurosMXN;
                        break;
                    case 2:
                        vm.jsonCoberturas = vm.jsonCoberturasSegurosUSD;
                        break;
                }
            }

            vm.limiteMaximoEquipoMovil = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.limiteMaximo;
            vm.limiteMaximoCristales = vm.jsonCoberturas.coberturas.cristales.limiteMaximo;
            vm.limiteMaximoRoboMenaje = vm.jsonCoberturas.coberturas.roboMenaje.limiteMaximo;
            vm.limiteMaximoRcFamiliar = vm.jsonCoberturas.coberturas.rcFamiliar.limiteMaximo;
            vm.dineroMontoInicial = vm.jsonCoberturas.coberturas.dinero.monto;
            vm.limiteMaximoUsoTarjetas = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.limiteMaximo;
            vm.bicicletasMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.bicicletasObjetos.monto;
            vm.objetosObjetosMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.monto;
            vm.objetosMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.monto;
            vm.equipoMovilMontoInicial = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.monto;

            vm.edificio = {
                "c": vm.jsonCoberturas.coberturas.edificio,
                "ci": vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes
            };
            vm.contenidos = {
                "c": vm.jsonCoberturas.coberturas.contenidos,
                "ci": vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes
            };
            vm.rcFamiliar = {
                "c": vm.jsonCoberturas.coberturas.rcFamiliar,
                "ci": vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes
            };
            vm.roboMenaje = {
                "c": vm.jsonCoberturas.coberturas.roboMenaje,
                "ci": vm.jsonCoberturas.coberturas.roboMenaje.coberturasIntegrantes
            };
            vm.dinero = {
                "c": vm.jsonCoberturas.coberturas.dinero,
                "ci": vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes
            };
            vm.objetosPersonales = {
                "c": vm.jsonCoberturas.coberturas.objetosPersonales,
                "ci": vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes
            };
            vm.electrodomesticos = {
                "c": vm.jsonCoberturas.coberturas.electrodomesticos,
                "ci": vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes
            };
            vm.remocionEscombros = {
                "c": vm.jsonCoberturas.coberturas.remocionEscombros,
                "ci": vm.jsonCoberturas.coberturas.remocionEscombros.coberturasIntegrantes
            };
            vm.gastosAsalto = {
                "c": vm.jsonCoberturas.coberturas.gastosAsalto,
                "ci": vm.jsonCoberturas.coberturas.gastosAsalto.coberturasIntegrantes
            };
            vm.gastosFinales = {
                "c": vm.jsonCoberturas.coberturas.gastosFinales,
                "ci": vm.jsonCoberturas.coberturas.gastosFinales.coberturasIntegrantes
            };
            vm.gastosExtras = {
                "c": vm.jsonCoberturas.coberturas.gastosExtras,
                "ci": vm.jsonCoberturas.coberturas.gastosExtras.coberturasIntegrantes
            };

            vm.cristales = {
                "c": vm.jsonCoberturas.coberturas.cristales,
                "ci": vm.jsonCoberturas.coberturas.cristales.coberturasIntegrantes
            };
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                vm.asistenciaInformatica = {
                    "c": vm.jsonCoberturas.coberturas.asistenciaInformatica,
                    "ci": vm.jsonCoberturas.coberturas.asistenciaInformatica.coberturasIntegrantes
                };
            }
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                vm.asistenciaLegal = {
                    "c": vm.jsonCoberturas.coberturas.asistenciaLegal,
                    "ci": vm.jsonCoberturas.coberturas.asistenciaLegal.coberturasIntegrantes
                };
            }
            vm.asistenciaViajes = {
                "c": vm.jsonCoberturas.coberturas.asistenciaViajes,
                "ci": vm.jsonCoberturas.coberturas.asistenciaViajes.coberturasIntegrantes
            };
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                vm.extensionViajes = {
                    "c": vm.jsonCoberturas.coberturas.extensionViajes,
                    "ci": vm.jsonCoberturas.coberturas.extensionViajes.coberturasIntegrantes
                };
            }

            cambiaJoyasTipoDeRiesgo();
            realizaOperaciones();

        }

        function getCantidadLimite(amount) {

            if (!isNaN(amount)) {
                return "$" + formatCurrency(amount);
            } else {
                if ("NA" === amount) {
                    return "";
                }
            }

        }

        function eventClickCheckbox($event) {
            var tarjet = $event.currentTarget;

            if (tarjet.id === "edificio1") {
                if (tarjet.checked) {
                    vm.edificio.c.monto = vm.edificio.c.limiteMinimo;
                    vm.edificio.c.montoDisabled = false;
                    vm.edificio.ci.incendioEdificio.checked = true;

                    if (vm.contenidos.ci.hidroContenidos.checked) {
                        vm.edificio.ci.hidroEdificio.checked = true;
                    }
                    if (vm.contenidos.ci.terremotoContenidos.checked) {
                        vm.edificio.ci.terremotoEdificio.checked = true;
                    }

                    vm.rcFamiliar.ci.rcArrendatario.checked = false;
                    vm.rcFamiliar.ci.rcArrendatario.monto = undefined;
                    vm.rcFamiliar.ci.rcArrendatario.montoDisabled = true;
                } else {
                    vm.edificio.c.monto = undefined;
                    vm.edificio.c.montoDisabled = true;
                    vm.edificio.ci.incendioEdificio.checked = false;
                    vm.edificio.ci.incendioEdificio.monto = undefined;
                    vm.edificio.ci.incendioEdificio.montoDisabled = true;
                    vm.edificio.ci.hidroEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.monto = undefined;
                    vm.edificio.ci.hidroEdificio.montoDisabled = true;
                    vm.edificio.ci.terremotoEdificio.checked = false;
                    vm.edificio.ci.terremotoEdificio.monto = undefined;
                    vm.edificio.ci.terremotoEdificio.montoDisabled = true;
                    vm.rcFamiliar.ci.rcArrendatario.checked = true;
                    vm.rcFamiliar.ci.rcArrendatario.obligatorio = true;
                    vm.rcFamiliar.ci.rcArrendatario.monto = "AMPARADO";
                }
            }

            // si es hidrometeorologicos de edificio
            if (tarjet.id === "hidroEdificio1" && vm.edificio.c.checked) {

                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.checked = true;
                } else {
                    vm.edificio.ci.hidroEdificio.monto = undefined;

                    vm.contenidos.ci.hidroContenidos.checked = false;
                    vm.contenidos.ci.hidroContenidos.monto = undefined;

                }
            }
            
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (!vm.edificio.ci.hidroEdificio.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = true;
                }
            }

            //si es hidrometeorologicos de contenidos
            if (tarjet.id === "hidroContenidos1") {
                if (tarjet.checked) {
                    if (vm.edificio.c.checked) {
                        vm.edificio.ci.hidroEdificio.checked = true;
                    }
                } else {
                    vm.contenidos.ci.hidroContenidos.monto = undefined;
                    vm.edificio.ci.hidroEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.monto = undefined;

                    if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes !== undefined) {
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.checked = false;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto = undefined;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = true;

                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.checked = false;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.monto = undefined;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = true;
                    }
                }
            }


            /**
             * bienes de edificio
             */
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = false;
            }

            /*
             * si limitaciones
             */
            if (tarjet.id === "limConstruccion1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = true;
                }
            }
            if (tarjet.id === "limDesocupado1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = true;
                }
            }
            if (tarjet.id === "limFija1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = true;
                }
            }
            if (tarjet.id === "limTerminado1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = true;
                }
            }

            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = true;
                }
            }

            /**
             * bienes de contenidos
             */
            if (tarjet.id === "bienesContenidos1") {
                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = false;
                } else {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto = undefined;
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = true;
                }
            }

            if (tarjet.id === "limContenidos1") {
                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = false;
                } else {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.monto = undefined;
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = true;
                }
            }

            /*
             * si es terremoto de edificio
             */
            if (tarjet.id === "terremotoEdificio1" && vm.edificio.c.checked) {

                if (tarjet.checked) {
                    vm.contenidos.ci.terremotoContenidos.checked = true;
                } else {
                    vm.edificio.ci.terremotoEdificio.monto = undefined;

                    vm.contenidos.ci.terremotoContenidos.checked = false;
                    vm.contenidos.ci.terremotoContenidos.monto = undefined;
                }
            }

            /*
             * si es terremoto de contenidos
             */
            if (tarjet.id === "terremotoContenidos1") {

                if (tarjet.checked) {
                    if (vm.edificio.c.checked) {
                        vm.edificio.ci.terremotoEdificio.checked = true;
                    }
                } else {
                    vm.contenidos.ci.terremotoContenidos.monto = undefined;

                    vm.edificio.ci.terremotoEdificio.checked = false;
                    vm.edificio.ci.terremotoEdificio.monto = undefined;
                }
            }

            /**
             * si cristales
             */
            if (tarjet.id === "cristales1") {
                if (tarjet.checked) {
                    vm.cristales.c.montoDisabled = false;
                } else {
                    vm.cristales.c.monto = undefined;
                    vm.cristales.c.montoDisabled = true;
                }
            }

            /**
             * si robo menaje
             */
            if (tarjet.id === "roboMenaje1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = true;
                    }

                    vm.roboMenaje.c.monto = undefined;
                    vm.roboMenaje.ci.joyas.checked = false;
                }
            }

            /**
             * si joyas
             */
            if (tarjet.id === "joyas1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.ci.joyas.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.ci.joyas.montoDisabled = true;
                    }
                    vm.roboMenaje.ci.joyas.monto = undefined;
                }
            }

            /**
             * si dinero
             */
            if (tarjet.id === "dinero1") {
                if (tarjet.checked) {
                    vm.dinero.c.montoDisabled = false;
                } else {
                    vm.dinero.c.monto = undefined;
                    vm.dinero.c.montoDisabled = true;

                    vm.dinero.ci.usoTarjetasDinero.checked = false;
                }
            }

            /**
             * si tarjetas
             */
            if (tarjet.id === "usoTarjetasDinero1") {
                if (tarjet.checked) {
                    vm.dinero.ci.usoTarjetasDinero.montoDisabled = false;
                } else {
                    vm.dinero.ci.usoTarjetasDinero.monto = undefined;
                    vm.dinero.ci.usoTarjetasDinero.montoDisabled = true;
                }
            }

            /**
             * si objetos personales
             */
            if (tarjet.id === "objetosPersonales1") {
                if (!tarjet.checked) {
                    vm.objetosPersonales.c.monto = undefined;

                    vm.objetosPersonales.ci.objetosObjetos.checked = false;
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = true;

                    vm.objetosPersonales.ci.bicicletasObjetos.checked = false;
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = undefined;
                    vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = true;
                }
            }

            /**
             * si objetos personales de objetos
             */
            if (tarjet.id === "objetosObjetos1") {
                if (tarjet.checked) {
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = false;
                } else {
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = true;
                }
            }

            /**
             * si bicicletas 
             */
            if (tarjet.id === "bicicletasObjetos1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = true;
                    }
                }
            }

            /**
             * si electrodomesticos
             */
            if (tarjet.id === "electrodomesticos1") {
                if (tarjet.checked) {
                    vm.electrodomesticos.c.montoDisabled = false;
                } else {
                    vm.electrodomesticos.c.monto = undefined;
                    vm.electrodomesticos.c.montoDisabled = true;

                    vm.electrodomesticos.ci.equipoMovil.checked = false;
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                    vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                }
            }

            /**
             * si equipo movil 
             */
            if (tarjet.id === "equipoMovil1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.electrodomesticos.ci.equipoMovil.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                    }
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                }
            }

            if (tarjet.id === "asistenciaViajes1") {
                if (!tarjet.checked) {
                    if (vm.jsonCoberturas.coberturas.extensionViajes) {
                        vm.extensionViajes.c.checked = false;
                    }
                }
            }

            if (tarjet.id === "extensionViajes1") {
                if (tarjet.checked) {
                    vm.asistenciaViajes.c.checked = true;
                }
            }

            realizaOperaciones();
        }

        function realizaOperaciones() {
            var montoEdificio = vm.edificio.c.monto ? vm.edificio.c.monto : 0;
            var montoContenido = vm.contenidos.c.monto ? vm.contenidos.c.monto : 0;
            var percMontCont = 0.1 * (parseFloat(montoEdificio) + parseFloat(montoContenido));

            /*
             * 10 por ciento de suma de edificio y contenidos
             */
            vm.gastosExtras.c.monto = percMontCont;
            vm.remocionEscombros.c.monto = percMontCont;


            /*
             * incendios, hidrometereologicos, terremoto de edificio
             * mismo valor que edificio
             */
            if (vm.edificio.ci.incendioEdificio.checked) {
                vm.edificio.ci.incendioEdificio.monto = montoEdificio;
            }
            if (vm.edificio.ci.hidroEdificio.checked) {
                vm.edificio.ci.hidroEdificio.monto = montoEdificio;
            }
            if (vm.edificio.ci.terremotoEdificio.checked) {
                vm.edificio.ci.terremotoEdificio.monto = montoEdificio;
            }

            /*
             * incendios, hidrometereologicos, terremoto de contenidos
             * mismo valor que contenidos
             */
            if (vm.contenidos.ci.incendioContenidos.checked) {
                vm.contenidos.ci.incendioContenidos.monto = vm.contenidos.c.monto;
            }
            if (vm.contenidos.ci.hidroContenidos.checked) {
                vm.contenidos.ci.hidroContenidos.monto = vm.contenidos.c.monto;
            }
            if (vm.contenidos.ci.terremotoContenidos.checked) {
                vm.contenidos.ci.terremotoContenidos.monto = vm.contenidos.c.monto;
            }

            /**
             * limites hidrometeorologicos Edificio
             */
            var percContenido = 0.3 * montoEdificio;
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.limiteMaximo = percContenido;
            }

            /**
             * monto de bienes Edificio
             */
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked) {
                    var lim = vm.edificio.ci.hidroEdificio.coberturasIntegrantes;
                    var monto1 = lim.limConstruccion.monto ? lim.limConstruccion.monto : 0;
                    var monto2 = lim.limDesocupado.monto ? lim.limDesocupado.monto : 0;
                    var monto3 = lim.limFija.monto ? lim.limFija.monto : 0;
                    var monto4 = lim.limTerminado.monto ? lim.limTerminado.monto : 0;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = monto1 + monto2 + monto3 + monto4;
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = undefined;
                }
            }

            /**
             * limites bienes Contenidos
             */
            var percContenido = 0.3 * montoContenido;
            if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes) {
                vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.limiteMaximo = percContenido;
                vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.limiteMaximo = percContenido;
            }

            /**
             * limite maximo de cristales
             */
            percContenido = 0.15 * parseFloat(montoContenido);

            if (percContenido < vm.limiteMaximoCristales) {
                vm.cristales.c.limiteMaximo = percContenido;
            } else {
                vm.cristales.c.limiteMaximo = vm.limiteMaximoCristales;
            }

            /**
             * limite maximo de robo menaje
             */
            percContenido = 0.8 * parseFloat(montoContenido);

            if (percContenido < vm.limiteMaximoRoboMenaje) {
                vm.roboMenaje.c.limiteMaximo = percContenido;
            } else {
                vm.roboMenaje.c.limiteMaximo = vm.limiteMaximoRoboMenaje;
            }

            /**
             * monto de robo de menaje en asesor
             */
            if (vm.tipoRiesgo.id === "2") {
                vm.roboMenaje.c.monto = undefined;
            } else {
                if (vm.rol === "ASESOR") {
                    vm.roboMenaje.c.montoDisabled = true;
                    percContenido = 0.5 * parseFloat(montoContenido);
                    if (percContenido < vm.limiteMaximoRoboMenaje) {
                        vm.roboMenaje.c.monto = percContenido;
                    } else {
                        vm.roboMenaje.c.monto = vm.limiteMaximoRoboMenaje;
                    }
                }
            }

            /**
             * limite maximo de joyas
             */
            percContenido = 0.5 * parseFloat(vm.roboMenaje.c.monto);
            vm.roboMenaje.ci.joyas.limiteMaximo = percContenido;

            /**
             * monto de joyas en asesor
             */
            if (vm.rol === "ASESOR") {
                vm.roboMenaje.ci.joyas.monto = vm.roboMenaje.c.monto * 0.5;
            }

            if (!vm.roboMenaje.c.monto) {
                vm.roboMenaje.ci.joyas.checked = false;
                vm.roboMenaje.ci.joyas.monto = undefined;
                vm.roboMenaje.ci.joyas.montoDisabled = true;
            }

            /**
             * monto de dinero en asesor
             */
            if (vm.tipoRiesgo.id === "2") {
                vm.dinero.c.monto = undefined;
            } else {
                if (vm.rol === "ASESOR") {
                    vm.dinero.c.monto = vm.dineroMontoInicial;
                }
            }

            /**
             * limiteMaximo de tarjetas
             */

            if (vm.dinero.c.monto) {
                if (vm.dinero.c.monto < vm.limiteMaximoUsoTarjetas) {
                    vm.dinero.ci.usoTarjetasDinero.limiteMaximo = vm.dinero.c.monto;
                } else {
                    vm.dinero.ci.usoTarjetasDinero.limiteMaximo = vm.limiteMaximoUsoTarjetas;
                }
            }

            /**
             * monto de tarjetas
             */
            if (!vm.dinero.c.monto) {
                vm.dinero.ci.usoTarjetasDinero.checked = false;
                vm.dinero.ci.usoTarjetasDinero.monto = undefined;
                vm.dinero.ci.usoTarjetasDinero.montoDisabled = true;
            }

            /**
             * monto de bicicletas de objetos personales
             */
            if (vm.rol === "ASESOR") {
                if (vm.objetosPersonales.ci.bicicletasObjetos.checked) {
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = vm.bicicletasMontoInicial;
                } else {
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = undefined;
                }
            }

            /**
             * monto de objetos de objetos personales
             */
            if (vm.rol === "ASESOR") {
                if (vm.objetosPersonales.ci.objetosObjetos.checked) {
                    vm.objetosPersonales.ci.objetosObjetos.monto = vm.objetosObjetosMontoInicial;
                } else {
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                }
            }

            /**
             * monto de objetos personales
             */
            if (vm.objetosPersonales.c.checked) {
                var cob = vm.objetosPersonales.ci;

                var monto1 = cob.objetosObjetos.monto ? cob.objetosObjetos.monto : 0;
                var monto2 = cob.bicicletasObjetos.monto ? cob.bicicletasObjetos.monto : 0;

                vm.objetosPersonales.c.monto = monto1 + monto2;
            }

            /**
             * limite de electrodomesticos
             */
            percContenido = 0.5 * parseFloat(montoContenido);
            vm.electrodomesticos.c.limiteMaximo = percContenido;

            /*
             * limite de equipomovil
             * 30 por ciento de electrodomesticos o [15000 (vm.limiteMaximoEquipoMovil)]
             */
            var percElectro = 0.3 * parseFloat(vm.electrodomesticos.c.monto);

            if (vm.rol === "SEGUROS") {
                if (percElectro < vm.limiteMaximoEquipoMovil) {
                    vm.electrodomesticos.ci.equipoMovil.limiteMaximo = percElectro;
                } else {
                    vm.electrodomesticos.ci.equipoMovil.limiteMaximo = vm.limiteMaximoEquipoMovil;
                }

                if (!vm.electrodomesticos.c.monto) {
                    vm.electrodomesticos.ci.equipoMovil.checked = false;
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                    vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                }
            }

            /*
             * monto de equipomovil
             * 30 por ciento de electrodomesticos o [15000 (vm.limiteMaximoEquipoMovil)]
             */
            if (vm.rol === "ASESOR") {
                if (vm.electrodomesticos.ci.equipoMovil.checked) {
                    if (percElectro < vm.equipoMovilMontoInicial) {
                        vm.electrodomesticos.ci.equipoMovil.monto = percElectro;
                    } else {
                        vm.electrodomesticos.ci.equipoMovil.monto = vm.equipoMovilMontoInicial;
                    }
                } else {
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                }
            }

            vm.gastosAsalto.c.monto = undefined;
            vm.asistenciaViajes.c.monto = undefined;
            vm.gastosFinales.c.monto = undefined;
            if (vm.extensionViajes.c) {
                vm.extensionViajes.c.monto = undefined;
            }
            if (vm.asistenciaInformatica.c) {
                vm.asistenciaInformatica.c.monto = undefined;
            }
            if (vm.asistenciaLegal.c) {
                vm.asistenciaLegal.c.monto = undefined;
            }


            /**
             * siempre cambia montos si están seleccionados
             */
            if (vm.gastosAsalto.c.checked) {
                vm.gastosAsalto.c.monto = "AMPARADO";
            }
            if (vm.asistenciaViajes.c.checked) {
                vm.asistenciaViajes.c.monto = "AMPARADO";
            }
            if (vm.extensionViajes.c) {
                if (vm.extensionViajes.c.checked) {
                    vm.extensionViajes.c.monto = "AMPARADO";
                }
            }
            if (vm.asistenciaInformatica.c) {
                if (vm.asistenciaInformatica.c.checked) {
                    vm.asistenciaInformatica.c.monto = "AMPARADO";
                }
            }
            if (vm.asistenciaLegal.c) {
                if (vm.asistenciaLegal.c.checked) {
                    vm.asistenciaLegal.c.monto = "AMPARADO";
                }
            }

            if (vm.gastosFinales.c.checked) {
                vm.gastosFinales.c.monto = "AMPARADO";
            }

        }

        function validarTabla() {
            var tablaValida = false;

            if (validarSiCumple(vm.edificio.c)) {
                return true;
            }
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija)) {
                    return true;
                }
            }
            if (validarSiCumple(vm.contenidos.c)) {
                return true;
            }
            if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes) {
                if (validarSiCumple(vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos)) {
                    return true;
                }
                if (validarSiCumple(vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos)) {
                    return true;
                }
            }
            if (validarSiCumple(vm.rcFamiliar.c)) {
                return true;
            }

            if (validarSiCumple(vm.cristales.c)) {
                return true;
            }

            if (validarSiCumple(vm.roboMenaje.c)) {
                return true;
            }

            if (validarSiCumple(vm.roboMenaje.ci.joyas)) {
                return true;
            }

            if (validarSiCumple(vm.dinero.c)) {
                return true;
            }

            if (validarSiCumple(vm.dinero.ci.usoTarjetasDinero)) {
                return true;
            }

            if (vm.objetosPersonales.ci.objetosObjetos) {
                if (validarSiCumple(vm.objetosPersonales.ci.objetosObjetos)) {
                    return true;
                }
            }

            if (validarSiCumple(vm.objetosPersonales.ci.bicicletasObjetos)) {
                return true;
            }

            if (validarSiCumple(vm.electrodomesticos.c)) {
                return true;
            }

            if (validarSiCumple(vm.electrodomesticos.ci.equipoMovil)) {
                return true;
            }

            return tablaValida;
        }

        function validarSiCumple(v) {
            if (v.checked) {
                if (v.monto < v.limiteMinimo || v.monto > v.limiteMaximo || v.monto === "" || v.monto === undefined) {
                    return true;
                }
            }
            return false;
        }

        $scope.onClicSendEmailNotificationCotizationHogar = function () {
            var clienteNombre = "";
            try {
                if (vm.personType.toString() === '1') {
                    clienteNombre = vm.apePaterno + ' ' + ' ' + vm.apeMaterno + ' ' + vm.nombres;
                }
                if (vm.personType.toString() === '2') {
                    clienteNombre = vm.nombreCliente;
                }
                $scope.obJsonMail = {
                    'language': 'SPA',
                    'emailFrom': "seguros@actinver.com.mx",
                    'idTemplate': "buildDBTemplate|17",
                    'emailSubject': "Envío de cotización seguro de hogar Actinver " + clienteNombre.toUpperCase() + "(" + vm.datosCotizacion.numeroCotizacion + ")",
                    'mailTo': [vm.emailUser],
                    'mailCC': [""],
                    'ldrEdificio': '',
                    'ldrIncendioAdicionalesEdificio': '',
                    'ldrExplosionEdificio': '',
                    'ldrHuelAlbPopEdificio': '',
                    'ldrNavAreaVehiHumoEdificio': '',
                    'ldrFenHidroEdificio': '',
                    'ldrTerrErupVolcEdificio': '',
                    'ldrTodoRiesIncAdicEdificio': '',
                    'ldrContenido': '',
                    'ldrIncendioAdicionalesCont': '',
                    'ldrExplosionCont': '',
                    'ldrHuelAlbPopCont': '',
                    'ldrNavAereaVehiHumoCont': '',
                    'ldrFenHidroCont': '',
                    'ldrTerrErupVolcCont': '',
                    'ldrTodoRiesIncAdicCont': '',
                    'ldrRemocionEscombros': '',
                    'ldrIncendioRemocion': '',
                    'ldrFenHidroRemocion': '',
                    'ldrTerrErupVolcRemocion': '',
                    'ldrGasExtraCasaHabitacion': '',
                    'ldrIncendioGastExtras': '',
                    'ldrFenHidroGatExtras': '',
                    'ldrTerrErupVolcGastExtras': '',
                    'ldrRCFamiliar': '',
                    'ldrRCArrendatario': '',
                    'ldrRCTrabDomestico': '',
                    'ldrRoboDeMenaje': '',
                    'ldrRoboConViolencia': '',
                    'ldrRoboPorAsalto': '',
                    'ldrJoyasArtValor': '',
                    'ldrGtosMedAsaltDomicilio': '',
                    'ldrDineroValores': '',
                    'ldrCristales': '',
                    'ldrObjPersonales': '',
                    'lbrEqElectro': '',
                    'ldrAsistHogarViajes': '',
                    'ldrExtGarEnViajesNalEInt': '',
                    'ldrAsistLegal': '',
                    'ldrServDeAsistInformatica': '',
                    "dataHouseEntityRisk": vm.cmd.dataHouseEntityRisk.type.text,
                    "dataHouseMunicipalityRisk": vm.cmd.dataHouseMunicipalityRisk.type.text,
                    "dataHousePostalCodeRisk": vm.cmd.dataHousePostalCodeRisk.type.text,
                    "kindPaid": vm.cmd.kindPaid.type.text,
                    "currency": vm.cmd.currency.type.text,
                    "calle": vm.calle,
                    "kindRisk": vm.cmd.kindRisk.type.text,
                    "kindStructure": vm.cmd.kindStructure.type.text,
                    "kindRoof": vm.cmd.kindRoof.type.text,
                    "securityActions": vm.cmd.securityActions.type.text,
                    'primaTotalAnual': vm.datosCotizacion.primaTotal,
                    "insurancePolicyDate" : vm.insurancePolicyDate,
                    "netPremium": vm.datosCotizados.primaNeta,
                    "surcharge": vm.datosCotizados.recargos,
                    "entitlement":  vm.datosCotizados.derechosPoliza,
                    "vat": vm.datosCotizados.iva,
                    "adjoiningHomeFlag" : vm.cmd.borderWall.type.id

                };
                angular.forEach(vm.datosCotizacion.coberturas.coverageInformation, function (value) {
                    if (value.code.toString() === "3000") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrEdificio = "";
                        } else {
                            $scope.obJsonMail.ldrEdificio = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3001") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioAdicionalesEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioAdicionalesEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3002") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExplosionEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExplosionEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3003") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrHuelAlbPopEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrHuelAlbPopEdificio = value.insuredSum;
                            }
                        }
                    }
                    if (value.code.toString() === "3004") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrNavAereaVehiHumoEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrNavAereaVehiHumoEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3020") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3021") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3030") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTodoRiesIncAdicEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTodoRiesIncAdicEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3050") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrContenido = "";
                        } else {
                            $scope.obJsonMail.ldrContenido = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3051") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioAdicionalesCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioAdicionalesCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3052") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExplosionCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExplosionCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3053") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrHuelAlbPopCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrHuelAlbPopCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3054") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrNavAereaVehiHumoCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrNavAereaVehiHumoCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3070") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3071") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3080") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTodoRiesIncAdicCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTodoRiesIncAdicCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3210") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRemocionEscombros = "";
                        } else {
                            $scope.obJsonMail.ldrRemocionEscombros = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3211") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3212") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3213") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3220") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrGasExtraCasaHabitacion = "";
                        } else {
                            $scope.obJsonMail.ldrGasExtraCasaHabitacion = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3221") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioGastExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioGastExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3222") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroGatExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroGatExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3223") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcGastExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcGastExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3401") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRCFamiliar = "";
                        } else {
                            $scope.obJsonMail.ldrRCFamiliar = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3442") {
                        if ($scope.obJsonMail.ldrRCFamiliar.toString() !== "") {
                            if ($scope.obJsonMail.ldrRCFamiliar.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRCArrendamiento = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRCArrendamiento = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3441") {
                        if ($scope.obJsonMail.ldrRCFamiliar.toString() !== "") {
                            if ($scope.obJsonMail.ldrRCFamiliar.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRCTrabDomestico = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRCTrabDomestico = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3500") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRoboDeMenaje = "";
                        } else {
                            $scope.obJsonMail.ldrRoboDeMenaje = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3501") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRoboConViolencia = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRoboConViolencia = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3502") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRoboPorAsalto = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRoboPorAsalto = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3503") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrJoyasArtValor = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrJoyasArtValor = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3504") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrGtosMedAsaltDomicilio = "";
                        } else {
                            $scope.obJsonMail.ldrGtosMedAsaltDomicilio = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3520") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrDineroValores = "";
                        } else {
                            $scope.obJsonMail.ldrDineroValores = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3530") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrCristales = "";
                        } else {
                            $scope.obJsonMail.ldrCristales = value.insuredSum;
                        }
                    }


                    if (value.code.toString() === "3550") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrObjPersonales = "";
                        } else {
                            $scope.obJsonMail.ldrObjPersonales = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3660") {
                        if ($scope.obJsonMail.ldrObjPersonales.toString() !== "") {
                            if ($scope.obJsonMail.ldrObjPersonales.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.lbrEqElectro = "AMPARADA";
                            } else {
                                $scope.obJsonMail.lbrEqElectro = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3910") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {

                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrAsistHogarViajes = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrAsistHogarViajes = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3911") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExtGarEnViajesNalEInt = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExtGarEnViajesNalEInt = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3920") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrAsistLegal = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrAsistLegal = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3921") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrServDeAsistInformatica = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrServDeAsistInformatica = value.insuredSum;
                            }
                        }
                    }

                });


                var copia = $scope.obJsonMail;
                insuranceHousesSrv.sendEmailNotificationCotizationHome(copia).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado");
                    }
                });
            } catch (e) {

                
            }

        };

        $scope.onClicSendEmailNotificationCompraSeguro = function () {
            var _urlPoliza = window.location.href.indexOf("asesoria.actinver.com/asesoria") !== -1 ?
                'https://negocios.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0':
                'https://negociosuat.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0';
            var clienteNombre = vm.personType.toString() === '1' ? vm.apePaterno + ' ' + ' ' + vm.apeMaterno + ' ' + vm.nombres : vm.nombreCliente;
            var _email = (typeof vm.emailUser === 'undefined') ? "" : vm.emailUser;
            var _calle = (typeof vm.calle === 'undefined') ? "" : vm.calle;
            var _entidadFederativa = (typeof vm.cmd.dataHouseEntityRisk === 'undefined') ? "" : vm.cmd.dataHouseEntityRisk.type.text;
            var _minicipio = (typeof vm.cmd.dataHouseMunicipalityRisk === 'undefined') ? "" : vm.cmd.dataHouseMunicipalityRisk.type.text;
            var _codePostal = (typeof vm.cmd.dataHousePostalCodeRisk === 'undefined') ? "" : vm.cmd.dataHousePostalCodeRisk.type.text;
            var _tipoPago = (typeof vm.cmd.kindPaid === 'undefined') ? "" : vm.cmd.kindPaid.type.text;
            var _tipoMoneda = (typeof vm.cmd.currency === 'undefined') ? "" : vm.cmd.currency.type.text;
            var _tipoRiesgo = (typeof vm.cmd.kindRisk === 'undefined') ? "" : vm.cmd.kindRisk.type.text;
            var _tipoMuro = (typeof vm.cmd.kindStructure === 'undefined') ? "" : vm.cmd.kindStructure.type.text;
            var _tipoTecho = (typeof vm.cmd.kindRoof === 'undefined') ? "" : vm.cmd.kindRoof.type.text;
            var _tipoSecuridad = (typeof vm.cmd.securityActions === 'undefined') ? "" : vm.cmd.securityActions.type.text;
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;

            if (_quotation && _quotation.catalogosCotizacion) {
                var cat = _quotation.catalogosCotizacion;
                _email = vm.cotizacionSeleccionada.emailCliente;
                _calle = _quotation.Street;
                _entidadFederativa = cat.dataHouseEntityRisk.type.text;
                _minicipio = cat.dataHouseMunicipalityRisk.type.text;
                _codePostal = cat.dataHousePostalCodeRisk.type.text;
                _tipoPago = cat.kindPaid.type.text;
                _tipoMoneda = cat.currency.type.text;
                _tipoRiesgo = cat.kindRisk.type.text;
                _tipoMuro = cat.kindStructure.type.text;
                _tipoTecho = cat.kindRoof.type.text;
                _tipoSecuridad = cat.securityActions.type.text;
            }

            $scope.obJsonMail = {
                'language': 'SPA',
                'emailFrom': 'seguros@actinver.com.mx',
                'idTemplate': 'buildDBTemplate|18',
                'emailSubject': 'Póliza emitida seguro de hogar  ' + clienteNombre + ' ' + vm.numPoliza,
                'mailTo': _email,
                'mailCC': '',
                'polizaSeguro': (typeof vm.numPoliza === 'undefined') ? "" : vm.numPoliza,
                'fechaInicioVigencia': (typeof vm.insurancePolicyDate === 'undefined') ? "" : moment(vm.insurancePolicyDate).format("DD/MM/YYYY"),
                'fechaFinVigencia': (typeof vm.policyMaturityDate === 'undefined') ? "" : moment(vm.policyMaturityDate).format("DD/MM/YYYY"),
                'fechaLimitePago': (typeof vm.emission.payment.dateAprox === 'undefined') ? moment(new Date()).format('DD/MM/YYYY') : moment(vm.emission.payment.dateAprox).format("DD/MM/YYYY"),
                "dataHouseEntityRisk": _entidadFederativa,
                "dataHouseMunicipalityRisk": _minicipio,
                "dataHousePostalCodeRisk": _codePostal,
                "kindPaid": _tipoPago,
                "currency": _tipoMoneda,
                "calle": _calle,
                "kindRisk": _tipoRiesgo,
                "kindStructure": _tipoMuro,
                "kindRoof": _tipoTecho,
                "securityActions": _tipoSecuridad,
                "urlPolizaImpresion": _urlPoliza
            };

            if (_entidadFederativa !== "") {
                insuranceHousesSrv.sendEmailNotificationEmisionHome($scope.obJsonMail).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado.");
                    } else {
                        CommonModalsSrv.error("El correo no fue enviado.");
                    }
                });
            } else {
                CommonModalsSrv.error("El correo no fue enviado.");
            }
        };

        function formatCurrency(amount) {
            var decimals = 2;
            amount += ''; // por si pasan un numero en vez de un string
            amount = parseFloat(amount.replace(/[^0-9\.]/g, '')); // elimino cualquier cosa que no sea numero o punto

            decimals = decimals || 0; // por si la variable no fue fue pasada
            // si no es un numero o es igual a cero retorno el mismo cero
            if (isNaN(amount) || amount === 0)
                return parseFloat(0).toFixed(decimals);
            // si es mayor o menor que cero retorno el valor formateado como numero
            amount = '' + amount.toFixed(decimals);

            var amount_parts = amount.split('.'),
                    regexp = /(\d+)(\d{3})/;

            while (regexp.test(amount_parts[0]))
                amount_parts[0] = amount_parts[0].replace(regexp, '$1' + ',' + '$2');

            return amount_parts.join('.');
        }

        function encode(string) {
            string = string.replace(/\r\n/g, "\n");

            var utftext = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
            }
            return utftext;
        }

        function decode(utftext) {
            var string = "";
            var i = 0;
            var c = 0;
            var c1 = 0;
            var c2 = 0;

            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    var c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return string;
        }

        $scope.updateSelection = function (position, elemento, list, $event) {

            var cot = elemento.cotizacion;

            if ($event.currentTarget.checked) {
                vm.cotizacionSeleccionada = elemento;
                vm.botonContratar = "Contratar";
            } else {
                vm.cotizacionSeleccionada = undefined;
                vm.botonContratar = "Cotizar";
            }

            angular.forEach(list, function (option, index) {
                if (cot !== list[index].cotizacion) {
                    option.checked = false;
                }
            });
        };
    }

})();

( function () {
    angular
        .module('actinver.controllers')
        .directive('numbersOnly', onlyNumbers)
        .directive('alphaNumeric', alphanNumeric)
        .directive('repeatedLetter', repeatedLetter);

        function onlyNumbers () {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/[^0-9]/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }

        function alphanNumeric() {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/[^a-zA-Z0-9 ]/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }

        function repeatedLetter () {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/([a-zA-Z])\1{2,}/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }



})();
(function () {
    'use strict';

    insuranceHousesSrv.$inject = ['URLS', '$q', '$http'];
    function insuranceHousesSrv(URLS, $q, $http) {
        /**
         *  prospect service
         */
        function InsuranceHousesSrv() {}

        InsuranceHousesSrv.prototype.getCatalogPostalCode = function (_idMunicipality) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogPostalCodeQuery + _idMunicipality,
                    params: {
                        language: 'SPA',
                        MunicipalityID: _idMunicipality
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outPostalCodeQuery.postalCodeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogInsuranceRiskType = function (_businessActivity, _businessActivitySubtype) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogInsuranceRiskTypeQuery + _businessActivity + "/" + _businessActivitySubtype,
                    params: {
                        language: 'SPA',
                        BusinessActivity: _businessActivity,
                        BusinessActivitySubtype: _businessActivitySubtype
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceRiskTypeQuery.riskTypeList.riskTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogWallType = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogWallTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outWallTypeQuery.wallTypeList.wallTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogRoofType = function (_wallTypeID) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogRoofTypeQuery + _wallTypeID,
                    params: {
                        language: 'SPA',
                        WallTypeID: _wallTypeID
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outRoofTypeQuery.roofTypeList.roofTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogStreetTypeQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogStreetTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outStreetTypeQuery.streetTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogCardTypeQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogCardTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceCardTypeQuery.cardTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCatalogPaymentTypeQuery = function () {
            console.log("hiola desde houses svr ");
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogPaymentTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outPaymentTypeQuery.paymentTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };



        InsuranceHousesSrv.prototype.getListQuotations = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationSearch,
                    params: _params
                }).then(function success(response) {
                    if (response.data.return.status === 1) {
                        var _response = response.data.return.data.listInsuranceQuotationRs;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                }
                );
            });
        };

        InsuranceHousesSrv.prototype.getServiceCotizacionHome = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getServiceCotizacionHome,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result.toString() === "1") {
                        _response = response.data.outHomeInsuranceQuotation;
                        resolve({success: true, info: _response,response:response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getServiceEmisionHome = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getServiceEmisionHome,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outHomeInsurancePolicyRegistration;
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.updateQuotation = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationUpdate,
                    params: _datos

                }).then(function success(response) {
                    console.log('response update', response);
                    var _response;
                    if (response.data.return.status === 1) {
                        _response = response.data.return.data.listInsuranceQuotationRs[0];
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    console.log('response update', error);
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCoverage = function () {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCoverage + "?language=SPA"
                }).then(function success(response) {
                    console.log("Original:");
                    console.log(response);
                    if (response.data.return.status === 1) {
                        //console.log(response.data.listInsuranceCoverageRs);
                        var _response = response.data.return.data.listInsuranceCoverageRs;
                        console.log("Lista de Coberturas: " + _response);
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                    /*if ( _response.status === 1 ) {
                     _response = response.data.listInsuranceCoverageRs;
                     resolve( {success: true, info: _response } );
                     }else{
                     resolve( {success: false, info: response.data.outCommonHeader.result });
                     }*/
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.getCotizationAdd = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationAdd,
                    params: _datos
                }).then(function success(response) {
                    console.log("respuesta");
                    console.log(response);
                    if (response.data.return.status === 1) {
                        var _response = response.data.return.data.listInsuranceQuotationRs;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                }
                );
            });
        };

        InsuranceHousesSrv.prototype.getCotizationUpdate = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationUpdate,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result.toString() === "1") {
                        _response = response.data.outHomeInsurancePolicyRegistration;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.messages});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.sendEmailNotificationCotizationHome = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationCotizationHome,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceHousesSrv.prototype.sendEmailNotificationEmisionHome = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationEmisionHome,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };


        return new InsuranceHousesSrv();

    }

    angular
            .module('actinver.controllers')
            .service('insuranceHousesSrv', insuranceHousesSrv);

})();

(function () {
    'use strict';
    insuranceCarsCtrl.$inject = ['$state', '$stateParams', '$scope', '$rootScope', '$window', '$sessionStorage', 'CommonModalsSrv', 'insuranceCarSrv'];
    angular
        .module('actinver.controllers')
        .controller('insuranceCarsCtrl', insuranceCarsCtrl);

    function insuranceCarsCtrl($state, $stateParams, $scope, $rootScope, $window, $sessionStorage, CommonModalsSrv, insuranceCarSrv) {
        var vm = this;
        var scrSize = $window.matchMedia("(max-width: 767px)");
        scrSize.onchange = function (ev) {
            vm.txtClass = ev.target.matches ? 'text-left' : 'text-right';
        };
        
        if (!$stateParams.model) {
            $state.go('insurance.main');
            return '';
        }

        $scope.validatePerson = false;
        $scope.nombreCompleto = '';
        $scope.emailUser = '';
        $scope.ListEntidades = [];
        $scope.ListMarks = [];
        $scope.ListModels = [];
        $scope.ListYears = [];
        $scope.ListPoblaciones = [];
        $scope.ListBanks = [];
        vm.yearExpirationList = [];
        vm.monthExpirationList = [];
        vm.cvvLen = 3;
        vm.accLen = 16;
        vm.txtClass = scrSize.matches ? 'text-left' : 'text-right';
        vm.validatePoup = false;
        vm.client = '';
        vm.person = {};
        vm.contract = '';
        vm.personType = '1';
        vm.contractUser = 0;
        vm.reinicia = reinicia;
        vm.cotizarNoCliente = cotizarNoCliente;
        vm.soloNumero = soloNumero;
        vm.numberSecuential = numberSecuential;
        vm.charrepeatText = charrepeatText;
        vm.soloTextAndNum = soloTextAndNum;
        vm.selectTypeCard = selectTypeCard;
        vm.soloText = soloText;
        vm.forceKeyPressUppercase = forceKeyPressUppercase;
        vm.pagina1 = pagina1;
        vm.pagina2 = pagina2;
        vm.valCotizar = valCotizar;
        vm.cotizar = cotizar;
        vm.cotizarDos = cotizarDos;
        vm.cotizarDosB = cotizarDosB;
        vm.cotizarTres = cotizarTres;
        vm.cotizarTresB = cotizarTresB;
        vm.cotizarCuatro = cotizarCuatro;
        vm.cotizarCinco = cotizarCinco;
        vm.emisionPoliza = emisionPoliza;
        vm.imprimirPoliza = imprimirPoliza;
        vm.imprimirAviso = imprimirAviso;
        vm.imprimirCondiciones = imprimirCondiciones;
        vm.datosCliente = [];
        vm.fiscalIDNumber = "";
        vm.disabledRFC = false;
        vm.bnd = false;
        vm.mostrarDatos = false;
        vm.nombreCliente = "";
        vm.nombres = "";
        vm.apePaterno = "";
        vm.apeMaterno = "";
        vm.sexo = "1";
        vm.numeroCliente = "";
        vm.emailUser = "";
        vm.tipoVehiculo = "";
        vm.marcaVehiculo = "";
        vm.modeloVehiculo = "";
        vm.anioVehiculo = "";
        vm.estado = "";
        vm.poblacion = "";
        vm.codigoPostal = "";
        vm.uso = "";
        vm.intUser = "";
        vm.autoSustituto = false;
        vm.garantiaSobreRuedas = false;
        vm.catastrofica = false;
        vm.charrepeat = charrepeat;
        vm.typeCobertura = "";
        vm.formaPago = "";
        vm.cmd = {};
        vm.formaPagoUser = "";
        vm.activaBoton = false;
        vm.poliza = "";
        vm.placasVehiculo = '';
        vm.fechaNacimiento = "";
        vm.birthDay = "";
        vm.phoneUser = "";
        vm.mobileUser = "";
        vm.PrimaTotal = 0;
        vm.PrimaTotalRecibo = 0;
        vm.Recibossubcuentes = 0;
        vm.PrimaTotalReciboSubcuentes = 0;
        vm.InstitucionText = "";
        vm.NumeroTarjeta = "";
        vm.errorMessagePerMoral = "Por el momento no se puede cotizar a personas Morales";
        vm.errorMessageAsociado = "El cliente solicitado no está asociado al Asesor";
        vm.mostrarFactura = false;
        vm.mostrarFacturaDos = false;
        vm.validaFechaFactura = validaFechaFactura;
        vm.validaFormaCotizacion = validaFormaCotizacion;
        vm.validaFormaFactura = false;
        vm.fechaFactura = "";
        vm.numeroFactura = "";
        vm.importeFactura = "";
        vm.buscar = true;
        vm.tipoPersonalidad = false;
        vm.seleccionaPersonalidad = seleccionaPersonalidad;

        pagina1();

        function forceKeyPressUppercase(e) {
            var charInput = e.keyCode;
            if ((charInput >= 97) && (charInput <= 122)) { // lowercase
                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifier key
                    var newChar = charInput - 32;
                    var start = e.target.selectionStart;
                    var end = e.target.selectionEnd;
                    e.target.value = e.target.value.substring(0, start) + String.fromCharCode(newChar) + e.target.value.substring(end);
                    e.target.setSelectionRange(start + 1, start + 1);
                    e.preventDefault();
                }
            }
        }

        function imprimirPoliza() {
            window.open(vm.urlPoliza, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function imprimirAviso() {
            window.open('img/pdfs/aviso-seguro.pdf', '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }


        function imprimirCondiciones() {
            window.open('img/pdfs/condiciones-generales-mapfre.pdf', '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function reinicia() {
            vm = null;
            vm = this;
            $scope.validatePerson = false;
            $scope.nombreCompleto = '';
            $scope.emailUser = '';
            $scope.ListEntidades = [];
            $scope.ListMarks = [];
            $scope.ListModels = [];
            $scope.ListYears = [];
            $scope.ListPoblaciones = [];
            $scope.ListBanks = [];
            vm.yearExpirationList = [];
            vm.monthExpirationList = [];
            vm.accLen = 16;
            vm.cvvLen = 3;
            vm.client = '';
            vm.person = {};
            vm.contract = '';
            vm.personType = '1';
            vm.contractUser = 0;
            vm.soloNumero = soloNumero;
            vm.numberSecuential = numberSecuential;
            vm.charrepeatText = charrepeatText;
            vm.soloTextAndNum = soloTextAndNum;
            vm.selectTypeCard = selectTypeCard;
            vm.soloText = soloText;
            vm.forceKeyPressUppercase = forceKeyPressUppercase;
            vm.pagina1 = pagina1;
            vm.pagina2 = pagina2;
            vm.valCotizar = valCotizar;
            vm.cotizar = cotizar;
            vm.cotizarDos = cotizarDos;
            vm.cotizarDosB = cotizarDosB;
            vm.cotizarTres = cotizarTres;
            vm.cotizarTresB = cotizarTresB;
            vm.cotizarCuatro = cotizarCuatro;
            vm.cotizarCinco = cotizarCinco;
            vm.emisionPoliza = emisionPoliza;
            vm.imprimirPoliza = imprimirPoliza;
            vm.imprimirAviso = imprimirAviso;
            vm.imprimirCondiciones = imprimirCondiciones;
            vm.datosCliente = [];
            vm.mostrarDatos = false;
            vm.nombreCliente = "";
            vm.nombres = "";
            vm.apePaterno = "";
            vm.apeMaterno = "";
            vm.sexo = "1";
            vm.numeroCliente = "";
            vm.emailUser = "";
            vm.tipoVehiculo = "";
            vm.marcaVehiculo = "";
            vm.modeloVehiculo = "";
            vm.anioVehiculo = "";
            vm.estado = "";
            vm.poblacion = "";
            vm.codigoPostal = "";
            vm.uso = "";
            vm.intUser = "";
            vm.autoSustituto = false;
            vm.garantiaSobreRuedas = false;
            vm.catastrofica = false;
            vm.charrepeat = charrepeat;
            vm.typeCobertura = "";
            vm.formaPago = "";
            vm.cmd = {};
            vm.formaPagoUser = "";
            vm.activaBoton = false;
            vm.poliza = "";
            vm.placasVehiculo = '';
            vm.fechaNacimiento = "";
            vm.birthDay = "";
            vm.phoneUser = "";
            vm.mobileUser = "";
            vm.PrimaTotal = 0;
            vm.PrimaTotalRecibo = 0;
            vm.Recibossubcuentes = 0;
            vm.PrimaTotalReciboSubcuentes = 0;
            vm.InstitucionText = "";
            vm.NumeroTarjeta = "";
            vm.errorMessagePerMoral = "Por el momento no se puede cotizar a personas Morales";
            vm.errorMessageAsociado = "El cliente solicitado no está asociado al Asesor";
            vm.mostrarFactura = false;
            vm.mostrarFacturaDos = false;
            vm.validaFechaFactura = validaFechaFactura;
            vm.validaFormaCotizacion = validaFormaCotizacion;
            vm.validaFormaFactura = false;
            vm.fechaFactura = "";
            vm.numeroFactura = "";
            vm.importeFactura = "";
            vm.buscar = true;
            vm.tipoPersonalidad = false;
            vm.seleccionaPersonalidad = seleccionaPersonalidad;
            vm.formaPagoUser = "";
            vm.contract = "";
            vm.placasVehiculo = "";
            vm.motorVehiculo = "";
            vm.serieVehiculo = "";
            vm.garantiaSobreRuedas = "";
            vm.autoSustituto = "";
            vm.cmd = [];
            vm.formaPago = "";
            vm.nombreCard = "";
            vm.nombres = "";
            vm.apellidoPCard = "";
            vm.apePaterno = "";
            vm.apellidoMCard = "";
            vm.apeMaterno = "";
            vm.email1 = "";
            vm.nombres = "";
            vm.apePaterno = "";
            vm.apeMaterno = "";
            vm.emailUser = "";
            vm.typeAcount = "";
            vm.acount = "";
            vm.typeCard = "";        
            vm.cvv = "";
            vm.codigoPostal = "";
            vm.calleUser = "";
            vm.extUser = "";
            vm.intUser = "";
            vm.colonia = "";
            vm.numeroCliente = "";
            vm.birthDay = "";
            vm.fechaNacimiento = "";
            vm.mobileUser = "";
            vm.phoneUser = "";
            vm.nacionality = "";
            vm.profesion = "";
            vm.identificacion = "";
            vm.identificationNumber = "";

            $state.go('insurance.main', {model: null});
        }

        function pagina1() {
            var model = $stateParams.model;
            $scope.validatePerson = false;
            $scope.nombreCompleto = '';
            $scope.emailUser = '';
            $scope.ListEntidades = [];
            $scope.ListMarks = [];
            $scope.ListModels = [];
            $scope.ListYears = [];
            $scope.ListPoblaciones = [];
            $scope.ListBanks = [];
            vm.personType = model.personType;
            vm.mostrarDatos = model.mostrarDatos;
            vm.nombreCliente = model.nombreCliente;
            vm.nombres = model.nombres;
            vm.apePaterno = model.apePaterno;
            vm.apeMaterno = model.apeMaterno;
            vm.sexo = "1";
            vm.numeroCliente = model.numeroCliente;
            vm.emailUser = model.emailUser;
            vm.tipoVehiculo = model.tipoVehiculo;
            vm.marcaVehiculo = "";
            vm.modeloVehiculo = "";
            vm.anioVehiculo = "";
            vm.estado = "";
            vm.poblacion = "";
            vm.codigoPostal = "";
            vm.uso = "";
            vm.intUser = "";
            vm.autoSustituto = false;
            vm.garantiaSobreRuedas = false;
            vm.catastrofica = false;
            vm.typeCobertura = "";
            vm.formaPago = "";
            vm.cmd = {};
            vm.formaPagoUser = "";
            vm.activaBoton = false;
            vm.poliza = "";
            vm.placasVehiculo = '';
            vm.birthDay = model.birthDay;
            vm.fechaNacimiento = "";
            vm.phoneUser = "";
            vm.mostrarFactura = false;
            vm.mostrarFacturaDos = false;
            vm.validaFechaFactura = validaFechaFactura;
            vm.validaFormaCotizacion = validaFormaCotizacion;
            vm.validaFormaFactura = false;
            vm.fechaFactura = "";
            vm.numeroFactura = "";
            vm.importeFactura = "";
            vm.buscar = true;
            vm.tipoPersonalidad = false;
            vm.seleccionaPersonalidad = seleccionaPersonalidad;
            vm.validatePoup = model.validatePopup;
            vm.client = model.client;
            vm.person = model.person;
            vm.contract = model.contract;
            vm.datosCliente = model.datosCliente;
            vm.fiscalIDNumber = model.fiscalIDNumber;
            vm.disabledRFC = model.disabledRFC;
            vm.stepForm = {
                step: 3,
                stepA: false,
                stepB: false,
                stepC: true,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };
            valCotizar();
        }

        function pagina2() {
            vm.stepForm = {
                step: 2,
                stepA: false,
                stepB: true,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };

            var sendModel = {
                numeroCliente: vm.numeroCliente,
                emailUser: vm.emailUser,
                tipoVehiculo: vm.tipoVehiculo,
                personType: vm.personType,
                datosCliente: vm.datosCliente,
                nombres: vm.nombres,
                apePaterno: vm.apePaterno,
                apeMaterno: vm.apeMaterno,
                contract: vm.contract,
                fiscalIDNumber: vm.fiscalIDNumber,
                disabledRFC: vm.disabledRFC,
                mostrarDatos: vm.mostrarDatos,
                contract: vm.contract,
                nombreCliente: vm.nombreCliente,
                birthDay: vm.birthDay,
                client: vm.client,
                person: vm.person,
                validatePopup: vm.validatePoup
            };
            $state.go('insurance.main', { model: sendModel });
        }


        function pagina4_1() {

            vm.stepForm = {
                step: 4,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: true,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };

        }
        /*
         function formatNumber(num) {
         if (!num || num === 'NaN')
         return '-';
         if (num === 'Infinity')
         return '&#x221e;';
         num = num.toString().replace(/\$|\,/g, '');
         if (isNaN(num))
         num = "0";
         var sign = (num === (num = Math.abs(num)));
         num = Math.floor(num * 100 + 0.50000000001);
         var cents = num % 100;
         num = Math.floor(num / 100).toString();
         if (cents < 10)
         cents = "0" + cents;
         for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
         num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
         return (((sign) ? '' : '') + num + ":" + cents);
         }*/

        function validaFechaFactura() {
            var fechaFac = moment(vm.fechaFactura);
            var hoy = moment(new Date());

            //Este codigo esta mal construido
            //var diasFactura = (hoy.diff(fechaFac, 'days'), ' dias de diferencia');

            //if (!diasFactura <= 60) {
            //                vm.mostrarFacturaDos = true;
            //            } else {
            //    CommonModalsSrv.error("Esta Factura no es Válida, solo se puede Cotizar Valor Comercial + 10% ");
            //}
        }

        function validaFormaCotizacion() {

            if (vm.cotizacionFactura === "true") {
                vm.mostrarFacturaDos = true;
                vm.validaFormaFactura = true;
            } else {
                vm.mostrarFacturaDos = false;
                vm.validaFormaFactura = false;
            }
        }

        //opción fecha factura
        var dateDropDownEnd = moment();
        var dateDropDownStart = moment().subtract(60, 'days');
        
        vm.optionsFechaFactura = {
            initDate: $rootScope.getTodayDate,
            showWeeks : false,
            formatMonth : 'MMM',
            yearColumns : 3 , 
            minDate: dateDropDownStart,
            dateDisabled: disableDatePickerFactura
        };
        
        function disableDatePickerFactura( _datePicker ) {
            var mode = _datePicker.mode;
            var date = _datePicker.date;
            var _dateCompare = new Date();
            _dateCompare.setTime( date );
            var isDisable = _dateCompare.getTime() >= dateDropDownStart &&  _dateCompare.getTime() <= dateDropDownEnd;
            
            return  mode === 'day' &&  (isDisable ? false : true);
        }

        function getYearExpirationList() {
            var _list = [];
            
            for (var _year = (new Date()).getFullYear(), i = 0; i < 9; i++) 
                _list.push({
                    id: _year + i,
                    text: _year + i
                });
            
            return _list;
        }

        function getMonthExpirationList() {
            var _list = [];
            
            for (var _month, i = 1; i <= 12; i++) {
                _month = i < 10 ? '0' + i : i;
                _list.push({
                    id: _month,
                    text: _month
                });
            }

            return _list;
        }

        //SERVICIO DE MOVIMIENTO ABRAHAM
        function getCatalogoYears() {
            var _listObtenida = [];
            var _dateNew = new Date();
            var _dateNew2 = new Date(_dateNew.getFullYear(), _dateNew.getMonth() + 12, 0);
            var _year = _dateNew2.getFullYear();
            var i = 0;
            for (i = 0; i < 40; i++) {
                _listObtenida.push({
                    id: _year - i,
                    text: _year - i
                });
            }
            return _listObtenida;
        }

        function getCatalogoEntidades() {
            var _listaObtenida = [];

            insuranceCarSrv.getCatalogEntityFederative().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.federalEntityID,
                            text: value.federalEntityDescription
                        });
                    });
                }
            });

            return _listaObtenida;
        }

        $scope.onChangeListMarks = function (lastValue, newValue) {
            $scope.ListMarks = [];
            if(!newValue) return;
            $scope.years = newValue.id;
            vm.anioVehiculo = newValue.text;
            var anioActual = (new Date()).getFullYear();
            
            if (vm.anioVehiculo >= anioActual - 1) {
                vm.mostrarFactura = true;
                vm.mostrarFacturaDos = false;
            } else {
                vm.mostrarFactura = false;
                vm.mostrarFacturaDos = false;
                vm.cotizacionFactura = undefined;
            }

            insuranceCarSrv.getCatalogMarksCars($scope.years).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        $scope.ListMarks.push({
                            id: value.brandID,
                            text: value.brand
                        });
                    });
                }
            });
        };

        $scope.onChangeModels = function () {
            $scope.ListModels = [];
            if(vm.cmd.dataCarsModels !== undefined) vm.cmd.dataCarsModels = [];
            if(!(vm.cmd.dataCarsMarks && $scope.years)) return;
            $scope.marks = vm.cmd.dataCarsMarks.id;
            vm.marcaVehiculo = vm.cmd.dataCarsMarks.text;
            
            insuranceCarSrv.getCatalogModelsCars($scope.years, vm.cmd.dataCarsMarks.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        $scope.ListModels.push({
                            id: value.modelID,
                            text: value.model
                        });
                    });
                }
            });
        };

        $scope.selectModelsCar = function (lastValue, newValue) {
            $scope.models = newValue.id;
            vm.modeloVehiculo = newValue.text;
        };

        $scope.onChangeListEntity = function () {
            $scope.ListPoblaciones = [];
            if(!vm.cmd.dataCarsEntity) return;
            vm.estado = vm.cmd.dataCarsEntity.text;
            $scope.entityId = vm.cmd.dataCarsEntity.id;
            
            insuranceCarSrv.getCatalogMunicipalityCars(vm.cmd.dataCarsEntity.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        $scope.ListPoblaciones.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                }
            });
        };

        $scope.selectPoblacion = function () {
            if(!vm.cmd.dataCarsMunicipality) return;
            $scope.poblacionId = vm.cmd.dataCarsMunicipality.id;
            vm.poblacion = vm.cmd.dataCarsMunicipality.text;
        };

        function getCatalogoBanks() {
            var _listaObtenida = [];
            
            insuranceCarSrv.getCatalogBanksCars().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.bankID,
                            text: value.bankName
                        });
                    });
                    _listaObtenida.sort(function(a, b) {
                        if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;
                        if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;
                        return 0;
                    });
                }
            });
            
            return _listaObtenida;
        }

        $scope.selectBankId = function () {
            vm.cvv = "";
            vm.acount = "";
            $scope.bankID = vm.cmd.dataCarsAccountIdBanks.id;

            if(vm.cmd.dataCarsAccountIdBanks.text.toString().toUpperCase().startsWith("AMERICAN EXPRESS")) {
                vm.accLen = 15;
                vm.cvvLen = 4;
                vm.typeCard = "3";
            } else {
                vm.accLen = 16;
                vm.cvvLen = 3;
                vm.typeCard = "";
            }
        };
        
        function showResultRecibos(_recibos) {
            vm.PrimaTotalRecibo = 0;
            vm.Recibossubcuentes = 0;
            vm.PrimaTotalReciboSubcuentes = 0;
            var str = _recibos.split("</Recibo>");
            var str2 = "";
            var i = 0;
            var iteration = str.length - 1;
            vm.Recibossubcuentes = iteration - 1;
            var max = 1;
            for (i = 0; i < iteration; i++) {
                str2 = str[i];
                if (i === 0) {
                    vm.PrimaTotalRecibo = str2.substring(str2.indexOf("<PrimaTotal>") + 12, str2.indexOf("</PrimaTotal>"));
                } else if (i === max) {
                    vm.PrimaTotalReciboSubcuentes = str2.substring(str2.indexOf("<PrimaTotal>") + 12, str2.indexOf("</PrimaTotal>"));
                }
            }
        }
        
        function emisionPoliza() {
            var _sendModel = {
                language: 'SPA',
                agentID: $scope.$parent.agentSelected.id
            };

            _sendModel = getDataModelEmision(_sendModel);
            insuranceCarSrv.getServiceEmision(_sendModel).then(function (_res) {
                if (_res.success) {
                    var XMLDocument = _res.info;
                    var valdato = XMLDocument.indexOf("<Poliza>");
                    var r = XMLDocument.toString();

                    if (valdato === -1) {
                        var messages = "";
                        var validaDato = XMLDocument.indexOf("<error>");
                        if (validaDato !== -1) {
                            messages = r.substring(r.indexOf("<error>") + 7, r.indexOf("</error>"));
                        }
                        validaDato = XMLDocument.indexOf("<poliza error=\"true\" NUM_POLIZA=\"\">");

                        if (validaDato !== -1) {
                            messages = r.substring(r.indexOf("<poliza error=\"true\" NUM_POLIZA=\"\">") + 35, r.indexOf("</poliza>"));
                        }

                        CommonModalsSrv.error("Error en la Emision CODE: " + messages);
                    } else {
                        var _recibos = r.substring(r.indexOf("<Recibos>") + 9, r.indexOf("</Recibos>"));
                        vm.poliza = r.substring(r.indexOf("<Poliza>") + 8, r.indexOf("</Poliza>"));
                        vm.PrimaTotal = r.substring(r.indexOf("<PrimaTotal>") + 12, r.indexOf("</PrimaTotal>"));
                        vm.urlPoliza = window.location.href.indexOf("asesoria.actinver.com/asesoria") !== -1 ?
                        'https://negocios.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.poliza + '&Endoso=0':
                        'https://negociosuat.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.poliza + '&Endoso=0';
                        
                        showResultRecibos(_recibos);
                        var _TextBanco = (typeof vm.cmd.dataCarsAccountIdBanks !== 'undefined') ? vm.cmd.dataCarsAccountIdBanks.text : "";
                        var _NumeroTarjeta = (typeof vm.acount !== 'undefined') ? vm.acount : "";
                        if (_TextBanco !== "") {
                            vm.InstitucionText = _TextBanco;
                            vm.NumeroTarjeta = _NumeroTarjeta;
                        }
                        
                        CommonModalsSrv.done("Emisión Exitosa. Número de póliza: " + vm.poliza + '');
                        vm.stepForm = {
                            step: 8,
                            stepA: false,
                            stepB: false,
                            stepC: false,
                            stepD: false,
                            stepDB: false,
                            stepE: false,
                            stepF: false,
                            stepG: false,
                            stepH: true
                        };
                    }
                } else {
                    CommonModalsSrv.error("Error en la Emision.");
                }
            });

        }
        vm.datepicker_opts = {
            minDate: new Date(),
            isInvalidDate: function (date) {
                return (date.day() === 0 || date.day() === 6) ? true : false;
            }
        };
        //opción fecha nacimiento no cliente
        vm.optionsdpx = {
            minDate: moment(new Date().setYear(new Date().getFullYear() - 150)).format('DD/MM/YYYY'),
            maxDate: moment(new Date().setYear(new Date().getFullYear() - 18)).format('DD/MM/YYYY')
        };
        vm.optionsdpxPM = {
            maxDate: moment(new Date().setYear(new Date().getFullYear())).format('DD/MM/YYYY')
        };
        
        vm.Banks = (typeof vm.cmd.dataCarsAccountIdBanks !== 'undefined') ? vm.cmd.dataCarsAccountIdBanks.text : null;
        vm.datosCotizacion = {};

        function getDataModelEmision(_sendModel) {
            var _Marks = (typeof vm.cmd.dataCarsMarks !== 'undefined') ? vm.cmd.dataCarsMarks.id : null;
            var _Models = (typeof vm.cmd.dataCarsModels !== 'undefined') ? vm.cmd.dataCarsModels.id : null;
            var _Years = (typeof vm.cmd.dataCarsYears !== 'undefined') ? vm.cmd.dataCarsYears.type.id : null;
            var _catastrofica = (typeof vm.catastrofica !== 'undefined') ? (vm.catastrofica ? 1 : 0) : null;
            var _cotizacionFactura = (typeof vm.cotizacionFactura !== 'undefined') ? vm.cotizacionFactura : false;

            _sendModel.cobertura = vm.typeCobertura;
            _sendModel.SumAssured = _catastrofica === 1 ? 3000000 : 0;
            _sendModel.instruPago = vm.formaPagoUser;
            _sendModel.InsurancePolicyDate = moment(vm.fechaAprox).format('DD/MM/YYYY');
            _sendModel.contrato = vm.contract;
            _sendModel.BrandID = _Marks;
            _sendModel.ModelID = _Models;
            _sendModel.placa = vm.placasVehiculo;
            _sendModel.numMotor = vm.motorVehiculo;
            _sendModel.numSerie = vm.serieVehiculo;
            _sendModel.Year = _Years;
            _sendModel.garRueda = (typeof vm.garantiaSobreRuedas !== 'undefined') ? (vm.garantiaSobreRuedas ? 1 : 0) : null;
            _sendModel.garCatastr = _catastrofica;
            _sendModel.garAutoSus = (typeof vm.autoSustituto !== 'undefined') ? (vm.autoSustituto ? 1 : 0) : null;
            _sendModel.bancoId = (typeof vm.cmd.dataCarsAccountIdBanks !== 'undefined') ? vm.cmd.dataCarsAccountIdBanks.id : 0;
            _sendModel.fraccPago = (typeof vm.formaPago !== 'undefined') ? vm.formaPago : 0;
            _sendModel.DelegationMunicipalityID = (typeof vm.cmd.dataCarsMunicipality !== 'undefined') ? vm.cmd.dataCarsMunicipality.id : null;
            _sendModel.nomCard = (typeof vm.nombreCard !== 'undefined') ? vm.nombreCard : vm.nombres;
            _sendModel.ape1Card = (typeof vm.apellidoPCard !== 'undefined') ? vm.apellidoPCard : vm.apePaterno;
            _sendModel.ape2TCard = (typeof vm.apellidoMCard !== 'undefined') ? vm.apellidoMCard : vm.apeMaterno;
            _sendModel.emailCard = (typeof vm.email1 !== 'undefined') ? vm.email1 : "";
            _sendModel.emailTercero = (typeof vm.email1 !== 'undefined') ? vm.email1 : vm.emailUser;

            if (vm.formaPagoUser === 'domCredito') {
                vm.typeAcount = "TA";
            } else if (vm.formaPagoUser === 'domDebito') {
                vm.typeAcount = "BA";
            }
            if (vm.personType === '1') {
                _sendModel.MCA_FISICO = "S";
                _sendModel.nomTercero = vm.nombres;
                _sendModel.ape1Tercero = vm.apePaterno;
                _sendModel.ape2Tercero = vm.apeMaterno;
            } else if (vm.personType === '2') {
                _sendModel.MCA_FISICO = "N";
                _sendModel.nomTercero = vm.nombreCliente;
                _sendModel.ape1Tercero = null;
                _sendModel.ape2Tercero = null;
            }
            _sendModel.MCA_SEXO = vm.sexo;
            _sendModel.tipoPago = (typeof vm.typeAcount !== 'undefined') ? vm.typeAcount : null;
            _sendModel.numTarj = (typeof vm.acount !== 'undefined') ? vm.acount : null;
            _sendModel.tipoTarj = (typeof vm.typeCard !== 'undefined') ? vm.typeCard : null;
            _sendModel.fechVencTarj = (typeof vm.comboYearExpiration !== 'undefined') && (typeof vm.comboMonthExpiration !== 'undefined') ? ['01', vm.comboMonthExpiration.id, vm.comboYearExpiration.id].join('/') : null;
            _sendModel.codTarj = (typeof vm.cvv !== 'undefined') ? vm.cvv : null;
            _sendModel.codPostal = vm.codigoPostal;
            _sendModel.calleNumeros = vm.calleUser + " " + vm.extUser + " " + vm.intUser;
            _sendModel.colonia = vm.colonia;
            _sendModel.StateID = (typeof vm.cmd.dataCarsEntity.id !== 'undefined') ? vm.cmd.dataCarsEntity.id : null;
            _sendModel.DES_VIP = vm.numeroCliente;
            _sendModel.COD_DOCUM = vm.fiscalIDNumber;
            _sendModel.FEC_NACIMIENTO = (typeof vm.birthDay !== 'undefined' && vm.birthDay !== "") ? vm.birthDay : moment(vm.fechaNacimiento).format('DD/MM/YYYY');
            _sendModel.TLF_MOVIL = vm.mobileUser;
            _sendModel.TLF_NUMERO = vm.phoneUser;
            _sendModel.InvoiceFlag = _cotizacionFactura;
            
            if (_cotizacionFactura) {
                _sendModel.NUM_FACTURA = vm.numeroFactura;
                _sendModel.VAL_FACTURA = vm.importeFactura;
                _sendModel.FEC_FACTURA = moment(vm.fechaFactura).format('DDMMYYYY');
            } else {
                _sendModel.NUM_FACTURA = null;
                _sendModel.VAL_FACTURA = null;
                _sendModel.FEC_FACTURA = null;
            }
            
            return _sendModel;
        }

        function getDataModelCotizacion() {
            var _sendModel = {};
            var _entityFederative = (typeof vm.cmd.dataCarsEntity.id !== 'undefined') ? vm.cmd.dataCarsEntity.id : null;
            var _Municipality = (typeof vm.cmd.dataCarsMunicipality !== 'undefined') ? vm.cmd.dataCarsMunicipality.id : null;
            var _Marks = (typeof vm.cmd.dataCarsMarks !== 'undefined') ? vm.cmd.dataCarsMarks.id : null;
            var _Models = (typeof vm.cmd.dataCarsModels !== 'undefined') ? vm.cmd.dataCarsModels.id : null;
            var _cotizacionFactura = (typeof vm.cotizacionFactura !== 'undefined') ? vm.cotizacionFactura : false;
            if (_Marks !== null) {
                _sendModel.BrandID = _Marks;
            } else {
                _sendModel.BrandID = "3"; //hardcode
            }
            if (_Municipality !== null) {
                _sendModel.DelegationMunicipalityID = _Municipality;
            } else {
                _sendModel.DelegationMunicipalityID = "9001";//harcode
            }
            if (_Models !== null) {
                _sendModel.ModelID = _Models;
            } else {
                _sendModel.ModelID = "517";//hardcode
            }
            if (_entityFederative !== null) {
                _sendModel.StateID = _entityFederative;
            } else {
                _sendModel.StateID = "9";//hardcode
            }

            _sendModel.InvoiceFlag = _cotizacionFactura;//vm.mostrarFacturaDos;

            if (_cotizacionFactura) {
                _sendModel.InvoiceNumber = vm.numeroFactura;
                _sendModel.InvoiceValue = vm.importeFactura;
                _sendModel.InvoiceDate = moment(vm.fechaFactura).format('YYYY-MM-DD');

            } else {
                _sendModel.InvoiceNumber = null;
                _sendModel.InvoiceValue = null;
                _sendModel.InvoiceDate = null;
            }

            _sendModel.SubstituteCarCoverageFlag = vm.autoSustituto;
            _sendModel.WarrantyCoverageFlag = vm.garantiaSobreRuedas;
            _sendModel.CatastrophicCoverageFlag = vm.catastrofica;
            //_sendModel.SumAssured = vm.catastrofica;
            if (vm.catastrofica) {
                _sendModel.SumAssured = 3000000;
            } else {
                _sendModel.SumAssured = 0;
            }
            _sendModel.PaymentType = "AG";
            _sendModel.PaymentMethod = vm.formaPago;
            //_sendModel.PolicyMaturityDate = fechaFinCotizacion;
            //_sendModel.InsurancePolicyDate = new Date();
            _sendModel.Year = vm.cmd.dataCarsYears.type.id;
            _sendModel.planType = vm.typeCobertura;
            _sendModel.idCliente = vm.numeroCliente !== "" ? vm.numeroCliente : "0";
            _sendModel.agentID = $scope.$parent.agentSelected.id;
            
            return _sendModel;
        }
        
        $scope.onValidateDuplicateTel = function (newValue, type) {
            var telefono = 0;
            var celular = 0;
            if (type === 'c') {
                telefono = (typeof vm.phoneUser !== 'undefined') ? vm.phoneUser : 0;
                celular = (typeof newValue !== 'undefined') ? newValue : 0;
                
                if (telefono === celular && telefono !== 0 && celular !== 0) {
                    CommonModalsSrv.error("Favor de Capturar un Celular Diferente");
                    return false;
                }
            } else if (type === 'f') {
                telefono = (typeof newValue !== 'undefined') ? newValue : 0;
                celular = (typeof vm.mobileUser !== 'undefined') ? vm.mobileUser : 0;
                //console.log("Tipo: " + type + "Telefono Particular: " + telefono + " Celular: " + celular);
                if (telefono === celular && telefono !== 0 && celular !== 0) {
                    CommonModalsSrv.error("Favor de Capturar un Telefono Diferente");
                    return false;
                }
            }
        };
        //SERVICIO DE MOVIMIENTO ABRAHAM

        //INICIO DE SERVICIO DE CAMAÑO
        $scope.onClicSendEmailNotificationCotization = function () {
            var _fCotizacion = (typeof vm.cotizacionFactura === 'undefined') ? "false" : vm.cotizacionFactura;
            try {

                $scope.obJsonMail = {
                    'language': 'SPA',
                    'emailFrom': "seguros@actinver.com.mx",
                    'idTemplate': "buildDBTemplate|9",
                    'emailSubject': "Envío de cotización seguro de auto Actinver " + vm.nombreCliente,
                    'mailTo': [vm.emailUser],
                    'mailCC': [""],
                    'fCotizacion': _fCotizacion,
                    'packageType': vm.typeCobertura,
                    'ldrDanosMateriales': '',
                    'ldrRoboTotal': '',
                    'deducibleDanosMateriales': '',
                    'ldrRespCivilBienes': '',
                    'ldrRespCivilPersonas': '',
                    'ldrGastosMedicosOcup': '',
                    'ldrAsistenciaCompleta': '',
                    'ldrDefensaJuridica': '',
                    'ldrRoboParcial': '',
                    'ldrDevPrimaDeducible': '',
                    'ldrCoberIntegralExtranjero': '',
                    'ldrAutoSustituto': '',
                    'ldrGarantiaSobreRuedas': '',
                    'ldrRCCatastroficaMuerteAccidental': '',
                    'deducibleRoboTotal': '',
                    'deducibleRespCivilBienes': '',
                    'deducibleRespCivilPersonas': '',
                    'deducibleGastMedicOcupantes': '',
                    'deducibleAsistenciaCompleta': '',
                    'deducibleDefensaJuridica': '',
                    'deducibleRoboParcial': '',
                    'deducibleDevPrimaDeducible': '',
                    'deducibleCoberIntegralExtranjero': '',
                    'deducibleAutoSustituto': '',
                    'deducibleGarantiaSobreRuedas': '',
                    'deducibleRCCatastroficaMuerteAccidental': '',
                    'primaTotalAnual': vm.datosCotizacion.insurancePaymentData.totalPayments,
                    'tipoVehiculo': vm.tipoVehiculo,
                    'marcaVehiculo': vm.marcaVehiculo,
                    'modeloVehiculo': vm.modeloVehiculo,
                    'anioVehiculo': vm.anioVehiculo

                };
                angular.forEach(vm.datosCotizacion.coverageList.coverageInformation, function (value) {
                    if (value.code.toString() === "4000") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrDanosMateriales = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrDanosMateriales = value.sumAssured;
                        }
                        $scope.obJsonMail.deducibleDanosMateriales = value.deductible;
                    }

                    if (value.code.toString() === "4001") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrRoboTotal = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrRoboTotal = value.sumAssured;
                        }
                        $scope.obJsonMail.deducibleRoboTotal = value.deductible;
                    }

                    if (value.code.toString() === "4003") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrAsistenciaCompleta = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrAsistenciaCompleta = value.sumAssured;
                        }
                        $scope.obJsonMail.deducibleAsistenciaCompleta = value.deductible;
                    }

                    if (value.code.toString() === "4004") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrDefensaJuridica = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrDefensaJuridica = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleDefensaJuridica = value.deductible;
                    }

                    if (value.code.toString() === "4006") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrGastosMedicosOcup = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrGastosMedicosOcup = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleGastMedicOcupantes = value.deductible;
                    }

                    if (value.code.toString() === "4010") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrRespCivilBienes = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrRespCivilBienes = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleRespCivilBienes = value.deductible;
                    }

                    if (value.code.toString() === "4011") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrRespCivilPersonas = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrRespCivilPersonas = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleRespCivilPersonas = value.deductible;
                    }

                    if (value.code.toString() === "4014") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrDevPrimaDeducible = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrDevPrimaDeducible = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleDevPrimaDeducible = value.deductible;
                    }

                    if (value.code.toString() === "4022") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrRoboParcial = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrRoboParcial = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleRoboParcial = value.deductible;
                    }

                    if (value.code.toString() === "4024") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrAutoSustituto = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrAutoSustituto = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleAutoSustituto = value.deductible;
                    }

                    if (value.code.toString() === "4048") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrCoberIntegralExtranjero = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrCoberIntegralExtranjero = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleCoberIntegralExtranjero = value.deductible;
                    }

                    if (value.code.toString() === "4053") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrGarantiaSobreRuedas = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrGarantiaSobreRuedas = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleGarantiaSobreRuedas = value.deductible;
                    }

                    if (value.code.toString() === "4068") {
                        if (value.sumAssured === '1') {
                            $scope.obJsonMail.ldrRCCatastroficaMuerteAccidental = "AMPARADA";
                        } else {
                            $scope.obJsonMail.ldrRCCatastroficaMuerteAccidental = value.sumAssured;
                        }

                        $scope.obJsonMail.deducibleRCCatastroficaMuerteAccidental = value.deductible;
                    }
                });

                var copia = $scope.obJsonMail;
                insuranceCarSrv.sendEmailNotificationCotizationCars(copia).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado");
                    } else {
                        CommonModalsSrv.error("Error al enviar el correo. " + _response.info);
                    }
                });
            } catch (e) {

            }


        };

        $scope.onClicSendEmailNotificationCompraSeguro = function () {
            $scope.obJsonMail = {
                'language': 'SPA',
                'emailFrom': 'seguros@actinver.com.mx',
                'idTemplate': 'buildDBTemplate|10',
                'emailSubject': 'Póliza emitida seguro de auto Actinver ' + vm.nombreCliente + ' ' + vm.poliza,
                'mailTo': [vm.emailUser],
                'mailCC': '',
                'polizaSeguro': vm.poliza,
                'anioVigencia': vm.cmd.dataCarsYears.type.id,
                'pagoPolizaFecha': moment(vm.fechaAprox).format('DD/MM/YYYY'),
                'marcaVehiculo': vm.marcaVehiculo,
                'modeloVehiculo': vm.modeloVehiculo,
                'serieVehiculo': vm.serieVehiculo,
                'urlPolizaImpresion': vm.urlPoliza
            };

            insuranceCarSrv.sendEmailNotificationCompraSeguroCars($scope.obJsonMail).then(function (_response) {
                if (_response.success) {
                    CommonModalsSrv.done("Correo Enviado");
                } else {
                    CommonModalsSrv.error("Error al enviar el correo. " + _response.info);
                 }
            });
        };
        //FIN DE SERVICIO DE CAMAÑO

        function valCotizar() {
            $scope.ListYears = getCatalogoYears();
            $scope.ListBanks = getCatalogoBanks();
            $scope.ListEntidades = getCatalogoEntidades();
            vm.yearExpirationList = getYearExpirationList();
            vm.monthExpirationList = getMonthExpirationList();
            
            if (vm.nombreCliente !== "" && vm.validatePoup === false) {
                CommonModalsSrv.confirm("¿" + vm.nombreCliente + " es el asegurado titular de la cuenta?")
                    .result.then(
                        function () {
                            var _validateEmail = (typeof vm.datosCliente.email === 'undefined') ? false : true;
                            if (_validateEmail) {
                                cotizar(true, vm.nombreCliente, vm.datosCliente.email[0].email);
                            } else {
                                cotizar(false, "", "");
                            }
                            vm.validatePoup = true;
                        }
                    ).catch(function (res) {
                        if ((res === "cancel" || res === "escape key press" || res === "backdrop click")) {
                            vm.client = '';
                            vm.person = {};
                            vm.contract = '';
                            vm.datosCliente = [];
                            vm.fiscalIDNumber = "";
                            vm.disabledRFC = false;
                            vm.nombreCliente = "";
                            vm.nombres = "";
                            vm.apePaterno = "";
                            vm.apeMaterno = "";
                            vm.contract = "";
                            vm.validatePoup = true;
                            vm.mostrarDatos = false;
                            cotizar(false, "", "");
                        }
                    });
            } else {
                cotizar(false, "", "");
            }
        }


        function cotizar(personaExistente, nombreCompleto, emailUser) {
            vm.stepForm = {
                step: 3,
                stepA: false,
                stepB: false,
                stepC: true,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };

            vm.validatePerson = personaExistente;
            
            if (vm.validatePerson === true) {
                vm.emailUser = emailUser;
            }
        }

        function cotizarDos() {
            vm.nombreCliente = vm.nombres + " " + vm.apePaterno + " " + vm.apeMaterno;
            vm.stepForm = {
                step: 4,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: true,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };
        }

        function cotizarDosB() {
            try {
                var _cotizacionFactura = (typeof vm.cotizacionFactura !== 'undefined') ? true : false;
                if (_cotizacionFactura) {
                    if (vm.mostrarFacturaDos && vm.cotizacionFactura === "true" && vm.fechaFactura === "") {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Factura");
                        return false;
                    }
                }
                
                window.scrollTo(0, angular.element('cotizacion').offsetTop);
                vm.datosCotizacion = {};
                var _sendModel = getDataModelCotizacion();

                insuranceCarSrv.getServiceCotizacion(_sendModel).then(function (_res) {
                    if (_res.success) {
                        vm.datosCotizacion = _res.info;

                        pagina4_1();
                    } else {
                        CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - code: " + _res.info.transactionID);
                    }
                });
            } catch (e) {
                CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - faltaron llenar datos en las paginas Anteriores ");
            }


        }

        function cotizarTres() {
            window.scrollTo(0, angular.element('pantallaCinco').offsetTop);
            if (vm.numeroCliente === "" || vm.numeroCliente === "0") {
                CommonModalsSrv.error("Para el proceso de contratación, el interesado debe ser cliente Actinver");
            } else {
                vm.stepForm = {
                    step: 5,
                    stepA: false,
                    stepB: false,
                    stepC: false,
                    stepD: false,
                    stepDB: false,
                    stepE: true,
                    stepF: false,
                    stepG: false,
                    stepH: false
                };
            }
        }

        function cotizarTresB() {
            vm.yearExpirationList = getYearExpirationList();
            vm.monthExpirationList = getMonthExpirationList();


            if (vm.formaPagoUser === "sinDom") {
                cotizarTres();
            } else {
                window.scrollTo(0, angular.element('pantallaSeis').offsetTop);
                if (vm.numeroCliente === "" || vm.numeroCliente === "0") {
                    CommonModalsSrv.error("Para el proceso de contratación, el interesado debe ser cliente Actinver");
                } else {
                    vm.stepForm = {
                        step: 6,
                        stepA: false,
                        stepB: false,
                        stepC: false,
                        stepD: false,
                        stepDB: false,
                        stepE: false,
                        stepF: true,
                        stepG: false,
                        stepH: false
                    };
                }
            }
        }

        function cotizarCuatro() {
            if (!vm.disabledRFC) {
                if (vm.fechaNacimiento === "") {
                    if (vm.personType === '1') {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento");
                        return;
                    } else {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha Constitutiva");
                        return;
                    }
                } else {
                    calculaRFC();
                }
            } else vm.bnd = true;

            if(vm.bnd) {
                vm.email1 = vm.emailUser;
                
                if (vm.formaPagoUser === "sinDom") {
                    cotizarCinco();
                } else {
                    vm.stepForm = {
                        step: 6,
                        stepA: false,
                        stepB: false,
                        stepC: false,
                        stepD: false,
                        stepDB: false,
                        stepE: false,
                        stepF: true,
                        stepG: false,
                        stepH: false
                    };
                }
            }
        }

        function cotizarCinco() {

            vm.stepForm = {
                step: 7,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: true,
                stepH: false
            };
        }

        vm.sclient = ($sessionStorage.sclient) ? $sessionStorage.sclient : {};
        vm.showSystemError = CommonModalsSrv.systemError;

        // Get selected client
        vm.getSelectedClient = function (state, _contract) {
            localStorage.setItem('contractSelected', JSON.stringify(_contract));
            if (typeof vm.sclient.data !== 'undefined') {
                vm.show_instructions = false;
                $state.go(state);
            }
        };

        //obtener Datos Cliente
        vm.type_contract = {
            id: 0
        };

        vm.search_types = insuranceCarSrv.search_types;
        vm.contract_type = insuranceCarSrv.type_contract;
        vm.person_type = insuranceCarSrv.type_person;

        vm.contracts_search = {
            finish: false,
            sent: false
        };

        vm.clean = function () {
            vm.client = '';
            vm.person = {};
        };

        vm.cleanForm = function () {
            vm.contract = null;
            vm.client = null;
            vm.person = null;
        };

        // Submit search form
        function cotizarNoCliente() {
            vm.datosCliente = "";
            vm.fiscalIDNumber = "";
            vm.disabledRFC = false;
            vm.nombreCliente = "";
            vm.nombres = "";
            vm.apePaterno = "";
            vm.apeMaterno = "";
            vm.contract = "";
            vm.mostrarDatos = false;
            vm.numeroCliente = "9999";
            vm.birthDay = "";
            vm.fechaNacimiento = "";
            vm.buscar = false;
            vm.tipoPersonalidad = true;
        }

        function seleccionaPersonalidad(persona) {
            vm.personType = persona;
            pagina2();
        }

        vm.contractSelection = function (_contract, _type) {
            localStorage.setItem('contractSelected', JSON.stringify(_contract));
            var marketType;
            if (_contract.bankingArea === '999' && _type === 'MC') {
                marketType = 'CM';
            } else {
                marketType = _type;
            }
            localStorage.setItem('_marketType', JSON.stringify(marketType));
            $state.go('investment.funds');
        };

        //Funciones para las validaciones de campos
        function soloNumero(e) {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function soloText(e) {
            var regex = new RegExp("^[\u00F1a-zA-Z ]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function soloTextAndNum(e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z0-9 ]+$") : new RegExp("^[a-zA-Z0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                event.which === 233 || event.which === 237 || event.which === 243 ||
                event.which === 250 || event.which === 193 || event.which === 201 ||
                event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        }

        function selectTypeCard() {
            if(vm.acount) {
                switch (vm.acount.toString().substr(0, 1)) {
                    case '3':
                        vm.typeCard = "3";
                        break;
                    case '4':
                        vm.typeCard = "1";
                        break;
                    case '5':
                        vm.typeCard = "2";
                        break;
                }
            }
        }

        var begin;
        var first;
        var second;

        function charrepeat(e, value) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var tb = (typeof value !== 'undefined') ? value.toUpperCase() : String.fromCharCode(echc).toUpperCase();
            if (tb.length > 2) {
                var message = tb.substring(tb.length - 3, tb.length);
                if (checkRate(message)) {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (begin.toString() === first.toString() && first.toString() === second.toString()) {
                        event.preventDefault();
                        return false;
                    }
                } else {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (parseInt(first) === parseInt(second) - 1 && parseInt(begin) === parseInt(first) - 1) {
                        event.preventDefault();
                        return false;
                    }
                }
            }
            return false;
        }
        function checkRate(input) {
            //var re =/^[a-zA-Z0-9 ]+$/;
            var re = /^[1-9]+[0-9]*]*$/;
            if (!re.test(input)) {
                return true;
            } else {
                return true;
            }
        }

        function numberSecuential(event, idValue) {
            var strNum = "01234567890000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999";
            var inputValue = angular.element("#" + idValue).val();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            if (inputValue.toString() !== '01' && inputValue.toString() !== '001') {
                if (inputValue.toString().length > 5 && strNum.includes(inputValue.toString())) {
                    event.preventDefault();
                    return false;
                } else {
                    return true;
                }
            } else {
                event.preventDefault();
                return false;
            }
        }

        function charrepeatText(event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            //console.log("inputValue:" + inputValue + "   >>   key:" + key);
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key) {
                event.preventDefault();
                return false;
            }
        }

        vm.emailFormat = /^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;

        function calculaRFC() {
            vm.bnd = false;
            var fecha = vm.fechaNacimiento;
            fecha = moment(fecha).format('DD/MM/YYYY');//$("#F_NACIMIENTO").val();
            var rfcOri = vm.fiscalIDNumber;
            var rfc = "";

            var arrayFecha = fecha.split("/");
            rfc += arrayFecha[2].substring(2, 4);
            rfc += arrayFecha[1];
            rfc += arrayFecha[0];
            if (vm.personType === '1') {
                if (rfc === rfcOri.substring(4, 10)) {
                    vm.bnd = true;
                } else {
                    CommonModalsSrv.error("La fecha de nacimiento no coincide con la fecha del RFC");
                }
            } else if (vm.personType === '2') {
                if (rfc === rfcOri.substring(3, 9)) {
                    vm.bnd = true;
                } else {
                    CommonModalsSrv.error("La fecha constitutiva no coincide con la fecha del RFC");
                }
            }
        }
    }

})();

( function(){
    'use strict';

    insuranceCarSrv.$inject = ['URLS', '$q', '$http', '$filter'];
    function insuranceCarSrv( URLS, $q, $http, $filter ){

        function setTooltipInfo( info ){
            return "<div class='operations-account-tp'><span>" + info.month + "</span><div>" + info.id + ": " + $filter('currency')(info.amount) + "</div></div>";
        }

        function getMonthsYears(){
            var history =[],
                fechaActual = new Date();
            var fechaMes = fechaActual.getMonth() + 1;
            var anio = fechaActual.getFullYear() - 1;

            for (var i = 1; i <= 13; i++) {
                history.push({
                    paymentPeriod: fechaMes < 10 ? anio + '0' + fechaMes : anio + '' + fechaMes,
                    amount: null
                });
                if (fechaMes < 12) {
                    fechaMes++;
                } else {
                    fechaMes = 1;
                    anio = anio + 1;
                }
            }
            return history;
        }

        var obj = {

            /**
             * Search field types
             */

            type_contract : [
                {
                    id: 999,
                    text: 'Banco'
                },
                {
                    id: 998,
                    text: 'Casa'
                }
            ],

            type_person : [
                {
                    text: 'Física'
                },
                {
                    text: 'Moral'
                }
            ],

            /**
             * Search field types
             */
            search_types: [
                {
                    id: 1,
                    text: 'Número de cliente único',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '10'
                    }
                },
                {
                    id: 2,
                    text: 'Número de contrato',
                    validation: {
                        pattern: new RegExp( '^[0-9]*$' ),
                        maxlength: '10'
                    }
                },
                {
                    id: 3,
                    text: 'Nombre de cliente único',
                    typeahead: true,
                    validation: {
                        pattern: '',
                        maxlength: '60'
                    }
                }
            ],

           
            /**
             * Get client information
             * @param {string} type - Search type
             * @param {string} search item - Searched client
             * @return  {object}
             */

            getClientName: function( _client){
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getClientName,
                        params: {
                            language : 'SPA',
                            lastName :  _client.lastName ? _client.lastName.toUpperCase() : ' ',
                            surname : _client.surname ? '' : '',
                            name : _client.name ? _client.name.toUpperCase() : ' ',
                            companyName: _client.companyName,
                            personType: _client.name ? 1 : 2,
                            tIN: _client.fiscalIDNumber
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outClientInfoQuery.clientList.client;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            
            /**
             * Get current contracts list
             * @param {string} client - Search item
             * @return  {object}
             */
            getContracts: function (client, contractType) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContracts,
                        params:{
                            language: 'SPA',
                            bankingArea : contractType || 999,
                            clientID : client
                        }
                    }).then(function success( response ) {
                       if (typeof response !== 'undefined' && response.data.outContractsBalancesByPortfolioQuery) {
                            resolve( {success: true, contracts: response.data.outContractsBalancesByPortfolioQuery.contractInformation} );
                        } else {
                            reject( {success: false, data: response.data, type: 'empty' } );
                        }

                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });

                });

            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getContractHistorical: function( contract ){

                return $q(function( resolve, reject ){
                    $http({

                        method: 'GET',
                        url: URLS.getContractHistorical,
                        params: {
                            language: 'SPA',
                            contractNumber: '[{"idContrato":"' + contract + '"}]'
                        }
                    }).then(function success( response ){

                        if(response.data.outCommonHeader.result.result === 1){

                            var info = response.data.outBrokerMonthlyBalanceQuery.clients.client[0],
                                empty = true, historicalInfo=[];
                                //generamos los meses para el año
                            historicalInfo = getMonthsYears();                            
                            angular.forEach( info.historicalInfo, function( data ){
                                if( empty && data.amount !== 0 ){
                                    empty = false;
                                }
                                for(var j=0; j<historicalInfo.length;j++){                                    
                                    if(historicalInfo[j].paymentPeriod === data.paymentPeriod){
                                        historicalInfo[j].amount = parseFloat(data.amount);
                                        j = historicalInfo.length;
                                    }
                                }
                            } );
                            info.historicalInfo = historicalInfo;
                            resolve( {success: true, historical: info, empty: empty} );
                        }else{
                            resolve( {success: false, data: response.data.outCommonHeader.result} );
                        }
                    }, function error(){
                        reject( {success: false} );
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getBrokerHistoricalBalanceQuery: function (_contractNumber, _numberPeriods) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getBrokerHistoricalBalanceQuery + '/' + _contractNumber + '/' + _numberPeriods,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {

                            var info = response.data.outBrokerHistoricalBalanceQuery.balanceFound,
                                empty = true, historicalInfo = [], historical={},contractNumbre;

                            historicalInfo = getMonthsYears();

                            angular.forEach(info, function (data) {
                                if (empty && data.contractBalance !== 0) {
                                    empty = false;
                                }
                                for(var j=0; j<historicalInfo.length;j++){                                    
                                    if(historicalInfo[j].paymentPeriod === data.period){
                                        historicalInfo[j].amount = parseFloat(data.contractBalance);
                                        j = historicalInfo.length;
                                    }
                                }                                
                                contractNumbre=data.contractNumber;
                            });
                           
                            historical={contractNumber:contractNumbre,historicalInfo:historicalInfo};
                            resolve({ success: true, historical: historical, empty: empty });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getBankContractBalance: function (_contractNumber ) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.bankPortfolioQuery  + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1 && response.data.outBankPortfolioQuery.bankPortfolio !== null ) {
                            resolve({ success: true, contractNumber :_contractNumber, totalBalance: response.data.outBankPortfolioQuery.bankPortfolio.bankPortfolioElement[10].actualValue });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getPortfolioGlobalDetailQuery: function (_contractNumber) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getPortfolioGlobalDetailQuery  + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({ success: true, contractNumber :_contractNumber, totalBalance: response.data.outPortfolioGlobalDetailQuery.totalValuation });
                        } else {
                            resolve({ success: false, data: response.data.outCommonHeader.result });
                        }
                    }, function error() {
                        reject({ success: false });
                    });
                });
            },

            /**
             * Set account information in array
             * @return  {object}
             */
            setInfo: function( historical ){
                var chart_data = [],
                    months = historical[0].historicalInfo;
                for( var i = 0; i <= months.length; i++ ){
                    if( i === 0 ){
                        chart_data[i] = ['Mes'];
                    } else {
                        var date = months[i - 1].paymentPeriod,
                            year = parseInt( date.substr( 0, 4 ) ),
                            month = parseInt( date.substr( 4, 2 ) ),
                            current = new Date( year,month - 1 );

                        chart_data[i] = [$filter( 'date' )( current, 'MMM' ).toUpperCase() + '.' + $filter( 'date' )( current, 'yy' )];
                    }
                }

                for( var x = 0; x < historical.length; x++ ){
                    chart_data[0].push( historical[x].contractNumber );
                    chart_data[0].push( tooltip_set );

                    for( var y = 0; y < historical[x].historicalInfo.length; y++ ){
                        var info = {
                                id: historical[x].contractNumber,
                                month: chart_data[y + 1][0],
                                amount: historical[x].historicalInfo[y].amount
                            };
                        chart_data[y + 1].push( info.amount );
                        chart_data[y + 1].push( setTooltipInfo( info ) );
                    }
                }

                return obj.displayChart( chart_data );

            },

            getContractInfoDetail: function (_model) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContractInfoDetail + _model.contractNumber + '/' + _model.bankingArea,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {


                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve(response.data.outSimplifiedBankContractQuery.contract);
                        } else {
                            reject(response.data.outCommonHeader.result);
                        }
                    }, function error(error) {
                        reject(error);
                    });

                });

            },
            getBankContractsByClientQuery:function(wordToSearch, page, rowsByPage ){
                return $q(function(resolve, reject){

                    $http({
                        method: 'GET',
                        url: URLS.getBankContractsByClientQuery + wordToSearch + '/1/Modulo Asesor/' + page + '/' + rowsByPage,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var record = {
                            success: true,
                            data: null,
                            msg: response.data.outCommonHeader.result.messages[0].responseMessage
                        };
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            record.data = response.data.outBankContractsByClientQuery;
                            resolve(record);
                        } else {
                            record.success = false;
                            resolve(record);
                        }
                    }, function error( ) {
                        reject({success:false, data:null, msg:"Error Interno"});
                    });
                });
            },//SERVICIO DE MOVIMIENTO ABRAHAM
            getCatalogEntityFederative: function () {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogEntityFederal,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outFederalEntityQuery.federalEntityCatalogData.federalEntity;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            getCatalogMarksCars: function ( _years ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogMarksCars + _years,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCarBrandQuery.carBrandDataList.carBrandData;
                            resolve( {success: true, info: _response } );
                        }else{
                            resolve( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            getCatalogModelsCars: function ( _years, _mark ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogModelsCars + _mark +"/"+_years,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCarModelQuery.carModelDataList.carModelData;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            getCatalogMunicipalityCars: function ( _idEntityFederative ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogMunicipalityCars + _idEntityFederative,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outMunicipalityQuery.municipalityCatalogData.municipality;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            getCatalogBanksCars: function ( ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogBanksCars,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1 ) {
                            _response = response.data.outInsuranceBanksQuery.insuranceBanksCatalogData.bank;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            getServiceEmision: function ( _models ) {
                
                return $q(function( resolve, reject ){
                    $http({
                        method: 'POST',
                        url: URLS.getServiceEmision,
                        data: $.param(_models)
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result.toString() === "1" ) {
                            _response = response.data.outCarInsurancePolicyRegistration.xmldata;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info:  response.data.outCommonHeader.outCarInsurancePolicyRegistration.xmldata });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            //SERVICIO DE MOVIMIENTO ABRAHAM
            //Servicio de Cotizacion Jorge
            getServiceCotizacion: function (_datos) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.getServiceCotizacion,
                        params: {
                            language: 'SPA',
                            agentID: _datos.agentID,
                            BrandID: _datos.BrandID,
                            DelegationMunicipalityID: _datos.DelegationMunicipalityID,
                            InsurancePolicyDate: _datos.InsurancePolicyDate,
                            InvoiceFlag: _datos.InvoiceFlag,
                            InvoiceNumber: _datos.InvoiceNumber,
                            InvoiceValue: _datos.InvoiceValue,
                            InvoiceDate: _datos.InvoiceDate,
                            ModelID: _datos.ModelID,
                            SubstituteCarCoverageFlag: _datos.SubstituteCarCoverageFlag,
                            WarrantyCoverageFlag: _datos.WarrantyCoverageFlag,
                            CatastrophicCoverageFlag: _datos.CatastrophicCoverageFlag,
                            SumAssured: _datos.SumAssured,
                            PaymentType: _datos.PaymentType,
                            PaymentMethod: _datos.PaymentMethod,
                            StateID: _datos.StateID,
                            Year: _datos.Year,
                            planType: _datos.planType,
                            idCliente:_datos.idCliente
                        }

                    }).then(function success(response) {
                        var _response;
                        
//                        response.data= JSON.parse("{\"outCarInsuranceQuotation\":{\"coverageList\":{\"coverageInformation\":[{\"code\":\"4000\",\"description\":\"DANOSMATERIALES\",\"sumAssured\":\"807936\",\"deductible\":\"5.0\",\"totalPremium\":\"8788.88\"}]},\"insuranceNextPaymentData\":{\"paymentMethod\":\"11recibosadicionalesde:\",\"netPremium\":\"1984.78\",\"surcharge\":\"175.65\",\"entitlement\":\"0.0\",\"vat\":\"345.67\",\"totalPremium\":\"2506.1\"},\"insurancePaymentData\":{\"entitlement\":\"0.0\",\"netPremium\":\"1984.82\",\"paymentMethod\":\"Pagomensual12recibosde:\",\"surcharge\":\"175.69\",\"totalPayments\":\"30595.26\",\"totalPremium\":\"3028.16\",\"vat\":\"345.65\"},\"insurancePaymentData\":{\"surcharge\":\"2107.84\",\"entitlement\":\"0.0\",\"vat\":\"4148.02\",\"totalPremium\":\"23817.4\"},\"quotationNumber\":\"1230104129288\"},\"outCommonHeader\":{\"clientID\":\"PRUEBABUS\",\"date\":{\"day\":0,\"eon\":0,\"eonAndYear\":0,\"fractionalSecond\":0,\"hour\":0,\"millisecond\":0,\"minute\":0,\"month\":0,\"second\":0,\"timezone\":0,\"valid\":true,\"xmlschemaType\":{\"localPart\":\"string\",\"namespaceURI\":\"string\",\"prefix\":\"string\"},\"year\":0},\"ipaddress\":\"127.0.0.1\",\"operationName\":\"CarInsuranceQuotation\",\"operationVersion\":\"1_1\",\"responseSystem\":\"MAPFRE\",\"result\":{\"messages\":[{\"responseSystemCode\":\"ACTIB001\",\"responseMessage\":\"EXITO\",\"responseType\":\"N\",\"responseCategory\":\"INFO\"}],\"nativeErrorCode\":\"string\",\"result\":\"1\",\"transactionID\":\"60bab7d9-62c5-4755-8f1a-10f06cfdfd55\"},\"sessionID\":\"3285\",\"time\":{\"day\":0,\"eon\":0,\"eonAndYear\":0,\"fractionalSecond\":0,\"hour\":0,\"millisecond\":0,\"minute\":0,\"month\":0,\"second\":0,\"timezone\":0,\"valid\":true,\"xmlschemaType\":{\"localPart\":\"string\",\"namespaceURI\":\"string\",\"prefix\":\"string\"},\"year\":0}}}");
                                
                        if ( response.data.outCommonHeader.result.result.toString() === "1" ) {
                            _response = response.data.outCarInsuranceQuotation;
                            resolve( {success: true, info: _response } );
                        }else{
                            resolve( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },
            //Servicio de Cotizacion Jorge

            //INICIA SERVICIOs DE SEND EMAIL CAMAÑO
            sendEmailNotificationCotizationCars: function ( objectJson ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'POST',
                        url: URLS.sendEmailNotificationCotization,
                        params: objectJson
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCommonHeader.result;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, info: 'not-found'} );
                    });
                });
            },

            sendEmailNotificationCompraSeguroCars: function ( objectJson ) {
                return $q(function( resolve, reject ){
                    $http({
                        method: 'POST',
                        url: URLS.sendEmailNotificationCompraSeguro,
                        params: objectJson
                    }).then(function success( response ) {
                        var _response;
                        if ( response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCommonHeader.result;
                            resolve( {success: true, info: _response } );
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            }
            //TERMINA SERVICIO DE SEND EMAIL CAMAÑO
        };

        return obj;

    }

    angular
    	.module( 'actinver.controllers' )
        .service( 'insuranceCarSrv', insuranceCarSrv );

})();

(function () {
    'use strict';
    insuranceLifeCtrl.$inject = ['$state', '$scope', '$filter', '$window', '$stateParams', '$sessionStorage', 'insuranceLifeSrv', 'CommonModalsSrv'];
    angular
        .module('actinver.controllers')
        .controller('insuranceLifeCtrl', insuranceLifeCtrl);


    function insuranceLifeCtrl($state, $scope, $filter, $window, $stateParams, $sessionStorage, insuranceLifeSrv, CommonModalsSrv) {
        var vm = this;
        var pageVisited = [];
        var agentCodeR = $scope.$parent.agentSelected.id;
        var usrRol = JSON.parse($sessionStorage.user).roles;
        var isProduccion = window.location.href.indexOf("asesoria.actinver.com/asesoria") === -1 ? false : true;
        var scrSize = $window.matchMedia("(max-width: 767px)");
        scrSize.onchange = function (ev) {
            vm.txtClass = ev.target.matches ? 'text-left' : 'text-right';
        };

        if (!$stateParams.model) {
            $state.go('insurance.main');
        }

        // VARIABLES
        vm.cmd = {};
        vm.indexUser = "";
        vm.actualPage = 0;
        vm.personType = '1';
        vm.numeroCliente = "";
        vm.disabledRFC = false;
        vm.txtClass = scrSize.matches ? 'text-left' : 'text-right';
        vm.mailRegex = /^[a-zA-Z._\-0-9]{4,}@[a-zA-Z_\-0-9]{2,}.[a-zA-Z]{2,5}([.a-zA-Z]+)?$/;
        // DATOS DEL CONTRATANTE
        vm.nombres = "";
        vm.apePaterno = "";
        vm.apeMaterno = "";
        vm.nombreCliente = "";
        vm.numeroPoliza = "";
        vm.CURP = "";
        vm.extUser = "";
        vm.intUser = "";
        vm.colonia = "";
        vm.calleUser = "";
        vm.emailUser = "";
        vm.phoneUser = "";
        vm.sexoCliente = "";
        vm.fiscalIDNumber = "";
        vm.fechaNacimiento = false;
        vm.nacionalidad = "";
        vm.ListPais = [];
        vm.ListEntidades = [];
        vm.ListEstadoCivil = [];
        vm.ListPoblaciones = [];
        vm.ListPostalCodeLife = [];
        vm.ListaBeneficiarios = [];
        vm.listaPorcentajeTotal = [];
        // DATOS DEL ASEGURADO
        vm.nombreAsegurado = "";
        vm.apePaternoAsegurado = "";
        vm.apeMaternoAsegurado = "";
        vm.fechaNacimientoAsegurado = false;
        vm.rfcAsegurado = "";
        vm.edadAsegurado = "";
        vm.generoAsegurado = "";
        vm.phoneAsegurado = "";
        vm.calleAsegurado = "";
        vm.estadoAsegurado = "";
        vm.coloniaAsegurado = "";
        vm.municipioAsegurado = "";
        vm.codigoPostalAsegurado = "";
        vm.numeroExteriorAsegurado = "";
        vm.paisAsegurado = "";
        vm.estadoCivilAsegurado = "";
        vm.ListPoblacionesAsegurado = [];
        // CUESTIONARIO MEDICO        
        vm.kgs = "";
        vm.mts = "";
        vm.fuma = null;
        vm.cuestionario = [];
        vm.ListOcupacionA = [];
        vm.estatusCuestionario = [];
        // TIPO PLAN Y COBERTURAS ADICIONALES
        vm.fechaVigencia = false;
        vm.fechaFinVigencia = "";
        vm.ListaSumAsegurada = [];
        vm.insuredSum = 0;
        vm.pBasica = {};
        vm.pMa = {};
        // DESIGNACIÓN DE BENEFICIARIOS
        vm.updateFlag = false;
        vm.tipoBeneficiario = "";
        vm.parentescoB = "";
        vm.ListParentesco = [];
        vm.ListBeneficiary = [];
        vm.nombreB = "";
        vm.apePaternoB = "";
        vm.apeMaternoB = "";
        vm.porcentajeB = "";
        vm.fechaNacB = false;
        vm.telefonoB = "";
        vm.emailB = "";
        vm.sexoB = "";
        // REGISTRO DE CUENTA PARA CARGO DEL SEGURO
        vm.nombreCard = "";
        vm.apellidoPCard = "";
        vm.apellidoMCard = "";
        vm.account = "";
        vm.clabeInter = "";
        vm.ListPaymentType = [];
        vm.ListBanks = [];
        vm.ListCardType = [];
        vm.yearExpirationList = [];
        vm.monthExpirationList = [];
        vm.comboMonthExpiration = "";
        vm.comboYearExpiration = "";
        vm.cvvLen = 3;
        vm.accLen = 16;
        vm.ListTypeCLABE = [{
            id: '1',
            text: 'CLABE'
        }, {
            id: '2',
            text: 'DEBITO'
        }];
        // OPCIONES DE CALENDARIOS
        vm.contractDatePickOp = {
            minDate: moment(new Date().setYear(new Date().getFullYear() - 64)).format('DD/MM/YYYY'),
            maxDate: moment(new Date().setYear(new Date().getFullYear() - 18)).format('DD/MM/YYYY')
        };
        vm.beneficiaryDatePickOp = {
            minDate: moment(new Date().setYear(new Date().getFullYear() - 110)).format('DD/MM/YYYY'),
            maxDate: moment(new Date()).format('DD/MM/YYYY')
        };
        vm.vigenciaDatePickOp = {
            minDate: moment(new Date()).format('DD/MM/YYYY'),
            maxDate: moment(new Date().setMonth(new Date().getMonth() + 1)).format('DD/MM/YYYY')
        };
        vm.payDatePickOp = {
            minDate: new Date(),
            maxDate: moment(new Date().setMonth(new Date().getMonth() + 1)).format('DD/MM/YYYY'),
            isInvalidDate: function (date) {
                return (date.day() === 0 || date.day() === 6) ? true : false;
            }
        };
        // DECLARACION DE FUNCIONES
        vm.go2page = go2page;
        vm.sumaanio = sumaanio;
        vm.regresoMain = regresoMain;
        vm.selectBankId = selectBankId;
        vm.selectTypeCard = selectTypeCard;
        vm.AseContratante = AseContratante;
        vm.activarCheckAseCon = activarCheckAseCon;
        vm.saveBeneficiario = saveBeneficiario;
        vm.editBeneficiario = editBeneficiario;
        vm.updateBeneficiario = updateBeneficiario;
        vm.deleteBeneficiario = deleteBeneficiario;
        vm.calculaEdadAsegurado = calculaEdadAsegurado;
        //vm.onChangeListEntity = onChangeListEntity;
        //vm.onChangeListPostalCode = onChangeListPostalCode;
        vm.forceKeyPressUppercase = forceKeyPressUppercase;
        vm.numberSecuential = numberSecuential;
        vm.soloTextAndNum = soloTextAndNum;
        vm.soloNumero = soloNumero;
        vm.charrepeat = charrepeat;
        vm.soloText = soloText;
        vm.imprimirPolizaLife = imprimirPolizaLife;
        vm.imprimirCondiciones = imprimirCondiciones;
        vm.imprimirSolicitudLife = imprimirSolicitudLife;
        vm.seleccionaPersonalidad = seleccionaPersonalidad;
        vm.ServiceEmailLifePolizaLista = ServiceEmailLifePolizaLista;
        vm.getInsuranceLifeHkJValidation = getInsuranceLifeHkJValidation;
        vm.ServiceLifeInsurancePolicyRegistration = ServiceLifeInsurancePolicyRegistration;
        //vm.ServiceEmailLifeSolicitudUsuario = ServiceEmailLifeSolicitudUsuario;
        //vm.ServiceEmailLifeNotificacionAsesor = ServiceEmailLifeNotificacionAsesor;
        //Funciones Eder Lugo
        vm.validateActinverEmail = validateActinverEmail;

        function getEmailDomain(email) {
            return email.split('@')[1];
        }

        function validateActinverEmail(email) {
            if (email != '' && email != null && email != undefined) {
                if (getEmailDomain(email.toLowerCase()) == 'actinver.com.mx') {
                    CommonModalsSrv.info("Por regulación no esta permitido ingresar un correo electrónico de Actinver");
                    return false;
                } else {
                    return true;
                }
            }
        }
        /*
        function validatedEachTotal() {
            var tipoBeneficiario = new Array(); //Creamos un array para almancear todos los tipos de beneficiarios            

            tipoBeneficiario = [
                'PRINCIPAL',
                'EN CASO DE FALLECIMIENTO',
                'EN CASO DE MINORIA DE EDAD',
                'EN CASO DE REMANANTE'
            ];

            if(vm.ListaBeneficiarios.length == 0) { //Validamos que por lo menos exista un beneficiario
                CommonModalsSrv.info('Favor de añadir por lo menos un beneficiario');
                return;
            }            

            for (var index = 0; index < tipoBeneficiario.length; index++) { //Recorremos el array que acabamos de crear. Atención, actualizar el array cuando existan más tipos de beneficiarios
                vm.totales = {}; //Creamos un objeto, el cual contendrá los totales por cada tipo de beneficiario.
                vm.totales[tipoBeneficiario[index]] = 0; //Inicializamos el total el 0
                vm.ListaBeneficiarios.forEach(function (element) { //Recorremos el array de beneficiarios y buscamos los que correspondan al tipo de beneficiario que actualmente se está iterando
                    if (tipoBeneficiario[index] == element.tipoBeneficiario) //Cuando coincidan significa que el usuario añadió un beneficiario y añadimos el total asignado
                    vm.totales[tipoBeneficiario[index]] += parseInt(element.porcentajeB, 10);
                });

                if (vm.totales[tipoBeneficiario[index]] != 100 && vm.totales[tipoBeneficiario[index]] != 0) { //Validamos el total final, si es 100 significa que ya está completo el porcentaje y si es 0 significa que no añadió ninguno beneficiario para la iteración actual
                    CommonModalsSrv.info('La suma del porcentaje de todos los beneficiarios de tipo ' + tipoBeneficiario[index] + ' debe ser igual al 100%. Actualmente tienes el ' + vm.totales[tipoBeneficiario[index]] + '%');
                    return false;
                }
            }
            return true;
        }
        //Fin funciones Eder ListCodPostalAsegurado         
        
        vm.getAvailableQuotation = getAvailableQuotation;
        vm.LiberacionConfirmada = LiberacionConfirmada;
        vm.CancelarPoliza = CancelarPoliza;
        vm.emission = emission;
        vm.liberacion = liberacion;

        ListaPolizasVida();
        */

        go2page(1);

        function go2page(pageNumber) {
            switch (pageNumber) {
                case 0:
                    vm.pageNotFound = false;
                    vm.actualPage = pageNumber;
                    break;
                case 1:
                    if (!pageVisited[pageNumber]) {
                        getCuestionario();
                        vm.ListOcupacionA = getCatalagoOcupaciones();
                        pageVisited[pageNumber] = true;
                    }
                    vm.actualPage = pageNumber;
                    break;
                case 2:
                    pagina2(pageNumber);
                    break;
                case 3:
                    if (vm.actualPage == 2) {
                        if(validaDatos()) {
                            if (!pageVisited[pageNumber]) {
                                vm.ListaSumAsegurada = getSumaryQuery();
                                pageVisited[pageNumber] = true;
                            }                        
                            vm.actualPage = pageNumber;
                        }
                    } else 
                        vm.actualPage = pageNumber;                      
                    break;
                case 4:
                    if (!pageVisited[pageNumber]) {
                        pageVisited[pageNumber] = true;
                        vm.ListParentesco = getCatalogoLifeParentescos();
                        vm.ListBeneficiary = getCatalogoLifeBeneficiarios();
                    } 
                    vm.actualPage = pageNumber;
                    break;
                case 5:
                    if(vm.ListaBeneficiarios.length > 0 && vm.listaPorcentajeTotal.every(function (benef) {
                        return benef.total == 100; })) {
                        if (!pageVisited[pageNumber]) {
                            pageVisited[pageNumber] = true;
                            vm.ListBanks = getCatalogBanks();
                            vm.ListCardType = getCatalogCardTypeQuery();
                            vm.ListPaymentType = getCatalogPaymentTypeQuery();
                            vm.monthExpirationList = getMonthExpirationList();
                            vm.yearExpirationList = getYearExpirationList();
                        }
                        vm.actualPage = pageNumber;
                    } else CommonModalsSrv.error('La suma del porcentaje por cada tipo de beneficiario debe ser igual al 100%.');
                    break;
                case 6:
                    CommonModalsSrv.info("Hago constar que el cliente actúa en nombre y cuenta propia o con las facultades suficientes otorgadas por su representada(do); y que los recursos utilizados en la o las operaciones provienen de actividades lícitas.")
                    vm.fechaVigencia = moment(vm.fechaVigencia).format("DD/MM/YYYY");
                    pageVisited[pageNumber] = true;    
                    vm.actualPage = pageNumber;
                    break;
                default:
                    vm.pageNotFound = true;
                    vm.actualPage = pageNumber;
                    CommonModalsSrv.error("No se encontró la página");
                break;
            }
        }
        
        function pagina2(pageNumber) {
            insuranceLifeSrv.getInsuranceLifeHighRiskJobValidation(vm.cmd.dataOcupacion.id).then(function (_res) {
                if (_res.success) {
                    if (_res.info === "true" || vm.kgs / (vm.mts * vm.mts) > 29.99 || !vm.estatusCuestionario.every(function (i){return i;})) {
                        CommonModalsSrv.info("Estimado Asesor lamento informarle que al ingresar los datos a nuestro sistema automático de suscripción, no nos permitió ofrecer ésta protección de manera inmediata, por lo que te invitamos a revisar con el área de seguros esta solicitud para evaluación.");
                        return;
                    }
                    if (!pageVisited[pageNumber]) {
                        valCotizar();
                        pageVisited[pageNumber] = true;
                    }
                    vm.actualPage = pageNumber;
                } else {
                    CommonModalsSrv.error("Ocurrió un error al validar la ocupación");
                }
            });
        }

        function valCotizar() {
            var datosCliente = $stateParams.model.datosCliente;
            var validatePoup = $stateParams.model.validatePopup;
            getNationality();
            vm.ListEstadoCivil = getMarital();
            vm.ListEntidades = getCatalogoEntidades();
            vm.personType = $stateParams.model.personType;
            vm.nombreCliente = $stateParams.model.nombreCliente;
            vm.nombres = $stateParams.model.nombres;
            vm.apePaterno = $stateParams.model.apePaterno;
            vm.apeMaterno = $stateParams.model.apeMaterno;
            vm.fiscalIDNumber = $stateParams.model.fiscalIDNumber;
            vm.CURP = $stateParams.model.curp;
            vm.disabledRFC = $stateParams.model.disabledRFC;
            vm.numeroCliente = $stateParams.model.numeroCliente;
            
            if (vm.nombreCliente !== "" && validatePoup === false) {
                CommonModalsSrv.confirm("¿" + vm.nombreCliente + " es el asegurado titular de la cuenta?")
                    .result.then(
                        function () {
                            vm.emailUser = (typeof datosCliente.email === 'undefined') ? '' : datosCliente.email[0].email;
                            vm.titular = true;
                            validatePoup = true;
                            vm.fechaNacimiento = $stateParams.model.birthDay;
                        }
                    ).catch(function (res) {
                        if ((res === "cancel" || res === "escape key press" || res === "backdrop click")) {
                            datosCliente = [];
                            vm.fiscalIDNumber = "";
                            vm.CURP = "";
                            vm.fechaNacimiento = false;
                            vm.disabledRFC = false;
                            vm.nombreCliente = "";
                            vm.nombres = "";
                            vm.apePaterno = "";
                            vm.apeMaterno = "";
                            validatePoup = true;
                            go2page(0);
                        }
                    });
            } else {
                vm.emailUser = '';
            }
        }
        
        function validaDatos() {
            if (!vm.fechaNacimiento) {
                if (vm.personType === '1') {
                    CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento");
                } else {
                    CommonModalsSrv.error("Favor de Capturar el campo de Fecha Constitutiva");
                }
                return false;
            }
            vm.edad = calculaEdad(moment(vm.fechaNacimiento, "DD/MM/YYYY"));
            if (!validateActinverEmail(vm.emailUser)) return false;
            if (vm.personType === '1' && (vm.edad < 18 || vm.edad > 64)) {
                CommonModalsSrv.error("La edad de contratación debe ser mayor a 18 años y menor a 64 años 11 meses");
                return false;
            } 
            if (vm.edadAsegurado != vm.edadAseguradoFake) {
                CommonModalsSrv.error("La fecha de nacimiento no corresponde con la edad capturada en el paso anterior");
                return false;
            }
            if (vm.numeroCliente == 9999)
                return validaRFCyCURP();
            
            return true;
        }

        function validaRFCyCURP() {
            var dateArray = [];
            var subDateCon = "";
            var subDateIns = "";
            var birthDateCon = moment(vm.fechaNacimiento).format('DD/MM/YYYY');
            var birthDateIns = moment(vm.fechaNacimientoAsegurado).format('DD/MM/YYYY');
            var rfcConDate = vm.personType == '1' ? vm.fiscalIDNumber.substring(4, 10) : vm.fiscalIDNumber.substring(3, 9);
            dateArray = birthDateCon.split("/");
            subDateCon += dateArray[2].substring(2, 4);
            subDateCon += dateArray[1];
            subDateCon += dateArray[0];
            dateArray = birthDateIns.split("/");
            subDateIns += dateArray[2].substring(2, 4);
            subDateIns += dateArray[1];
            subDateIns += dateArray[0];

            if (subDateCon === rfcConDate && subDateIns === vm.rfcAsegurado.substring(4, 10)) {
                if (vm.personType == '1') {
                    if (subDateCon === vm.CURP.substring(4, 10)) {
                        return true;
                    } else {
                        CommonModalsSrv.error("La fecha de nacimiento no coincide con el CURP");
                        return false;
                    }
                }
                return true;
            }
            CommonModalsSrv.error("La fecha de nacimiento" + (vm.personType == '2' ? 
                " y/o la fecha constitutiva" : "") + " no coincide" + (vm.personType == '2' ? "n" : "") + " con el RFC");
            return false;                        
        }

        function calculaEdad(fechaMoment) {
            return moment().diff(fechaMoment, 'years');
        }

        function calculaEdadAsegurado() {
            vm.edadAsegurado = vm.fechaNacimientoAsegurado ? calculaEdad(vm.fechaNacimientoAsegurado) : 0;
        }

        function sumaanio() {
            if (vm.fechaVigencia)
                vm.fechaFinVigencia = moment(new Date(vm.fechaVigencia)).add(1, 'years').format('DD/MM/YYYY');
        }
        
        function seleccionaPersonalidad(persona) {
            vm.personType = persona;
            vm.actualPage = 2;
        }

        function getCuestionario() {
            insuranceLifeSrv.getCuestionario().then(function (response) {
                vm.cuestionario = response.info;
                vm.estatusCuestionario = vm.cuestionario.map(function (i){return true;});                
            });
        }

        function getCatalagoOcupaciones() {
            var _listaObtenida = [];
            insuranceLifeSrv.getCatalogExpenseJob().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.jobID,
                            text: value.jobDescription,
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getMarital() {
            var _listaObtenida = [];
            insuranceLifeSrv.getInsuranceMaritalStatusQuery().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.maritalStatusID,
                            text: value.maritalStatus
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getNationality() {
            insuranceLifeSrv.getLifeinsuranceNationalityQuery().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info.data.outInsuranceCountryQuery.insuranceCountry, function (value) {
                        vm.ListPais.push({
                            id: value.countryISO,
                            text: value.country
                        });
                    });
                    vm.nacionalidad = vm.ListPais.find(function (country) {
                        return country.text.toUpperCase().startsWith("MEX");
                    });
                    vm.paisAsegurado = vm.nacionalidad;
                    vm.cmd.dataLifeContry = vm.nacionalidad;
                }
            });
        }

        function getCatalogoEntidades() {
            var _listaObtenida = [];
            insuranceLifeSrv.getLifeInsuranceStateQuery().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.federalEntityID,
                            text: value.federalEntityDescription
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogoLifeParentescos() {
            var _listaObtenida = [];
            insuranceLifeSrv.getLifeInsuranceRelationshipQuery().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        if (value.expenseRelationshipDescription !== "TITULAR") {
                            _listaObtenida.push({
                                id: value.expenseRelationshipID,
                                text: value.expenseRelationshipDescription
                            });
                        }
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogoLifeBeneficiarios() {
            var _listaObtenida = [];
            insuranceLifeSrv.getServiceInsuranceBeneficiaryTypeQuery().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {                    
                        _listaObtenida.push({
                            id: value.insuranceBeneficiaryTypeID,
                            text: value.insuranceBeneficiaryType
                        });                        
                    });
                    vm.tipoBeneficiario = _listaObtenida.find(function (beneficiario) {
                        return beneficiario.text.toUpperCase().startsWith("PRINCIPAL");
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogBanks() {
            var _listaObtenida = [];
            insuranceLifeSrv.getCatalogBanks().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.bankID,
                            text: value.bankName
                        });
                    });
                    _listaObtenida.sort(function (a, b) {
                        if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;
                        if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;
                        return 0;
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogPaymentTypeQuery() {
            var _listaObtenida = [];
            insuranceLifeSrv.getCatalogPaymentTypeQuery().then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        if (value.paymentManagerName !== "AGENTE") {
                            _listaObtenida.push({
                                id: value.paymentManagerID,
                                text: value.paymentManagerName
                            });
                        }
                    });
                }
            });
            return _listaObtenida;
        }

        function selectBankId() {
            vm.cmd.cardType = typeof vm.cmd.cardType === 'undefined' ? "" : vm.cmd.cardType;
            if (vm.cmd.dataCarsAccountIdBanks.text.toString().toUpperCase().startsWith("AMERICAN")) {
                vm.accLen = 15;
                vm.cvvLen = 4;
                vm.cmd.cardType = vm.ListCardType.find(function (bankName) {
                    return bankName.text.toUpperCase().startsWith("AMERICAN");
                });
            } else {
                vm.accLen = 16;
                vm.cvvLen = 3;
            }
        }

        function selectTypeCard() {
            if (vm.account) {
                vm.cmd.cardType = typeof vm.cmd.cardType === 'undefined' ? "" : vm.cmd.cardType;
                vm.validCard = true;
                switch (vm.account.toString().substr(0, 1)) {
                    case '3':
                        vm.cmd.cardType = vm.ListCardType.find(function (bankName) {
                            return bankName.text.toUpperCase().startsWith("AMERICAN");
                        });
                        break;
                    case '4':
                        vm.cmd.cardType = vm.ListCardType.find(function (bankName) {
                            return bankName.text.toUpperCase().startsWith("VISA");
                        });
                        break;
                    case '5':
                        vm.cmd.cardType = vm.ListCardType.find(function (bankName) {
                            return bankName.text.toUpperCase().startsWith("MASTER");
                        });
                        break;
                    default:
                        vm.validCard = false;
                        vm.cmd.cardType = [];
                        break;
                }
            }
        }

        vm.vaciaTarjeta = function (lastValue, newValue) {
            if (newValue.text === "CLABE") {
                vm.account = "";
                vm.cmd.cardType = "";
                vm.comboMonthExpiration = "";
                vm.comboYearExpiration = "";
                vm.cvv = "";
                vm.validCard = true;
            } else {
                vm.clabeInter = "";
            }
        };

        function getCatalogCardTypeQuery() {
            insuranceLifeSrv.getCatalogCardTypeQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.cardID,
                            text: value.cardType
                        });
                    });
                    vm.ListCardType = _listaObtenida;
                }
            })
        }

        vm.changeMunicipality = function (aseguradoSec) {
            var _listaObtenida = [];

            insuranceLifeSrv.getLifeInsuranceMunicipalityQuery(aseguradoSec ? vm.estadoAsegurado.id : vm.cmd.dataLifeEntity.id)
            .then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });                    
                    if(aseguradoSec) {
                        vm.ListPoblacionesAsegurado = _listaObtenida;
                        vm.municipioAsegurado = "";
                        vm.codigoPostalAsegurado = "";
                    } else {
                        vm.ListPoblaciones = _listaObtenida;
                        vm.cmd.dataLifeMunicipality = "";
                        vm.cmd.dataLifePostalCode = "";
                    }
                }
            });            
        };

        vm.changePostalCode = function (aseguradoSec) {
            var _listaObtenida = [];

            insuranceLifeSrv.getCatalogPostalCode(aseguradoSec ? vm.municipioAsegurado.id : vm.cmd.dataLifeMunicipality.id)
            .then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    if(aseguradoSec) {
                        vm.ListCodPostalAsegurado = _listaObtenida;
                        vm.codigoPostalAsegurado = "";
                    } else {
                        vm.ListPostalCodeLife = _listaObtenida;
                        vm.cmd.dataLifePostalCode = "";
                    }
                }
            });
        };

        /*vm.onChangeListEntity = function (lastValue, newValue) {
            var _listaObtenida = [];
            var _EntityId = "";
            var _banderaEntityId = (typeof newValue.id === 'undefined') ? false : true;

            if (!_banderaEntityId) {
                CommonModalsSrv.error("Favor de Capturar una Entidad Federativa.");
            }
            _EntityId = newValue.id;
            insuranceLifeSrv.getLifeInsuranceMunicipalityQuery(_EntityId).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                }
            });

            vm.ListPoblaciones = _listaObtenida;
            vm.ListPoblacionesAsegurado = _listaObtenida;
        };
        
        function onChangeListPostalCode(lastValue, newValue) {
            var _listaObtenida = [];
            var _MunicipalityId = "";
            var _banderaMunicipalityId = (typeof newValue.id === 'undefined') ? false : true;
            if (!_banderaMunicipalityId) {
                CommonModalsSrv.error("Favor de Capturar una Entidad Federativa.");
            }
            _MunicipalityId = newValue.id;
            insuranceLifeSrv.getCatalogPostalCode(_MunicipalityId).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    vm.cmd.dataHousePostalCodeRisk = {};
                    vm.ListPostalCodeLife = _listaObtenida;
                    vm.ListCodPostalAsegurado = _listaObtenida;
                }
            });
        }*/

        function AseContratante() {
            if (vm.isContratanteAsegurado) {
                vm.ListPoblacionesAsegurado = vm.ListPoblaciones;
                vm.ListCodPostalAsegurado = vm.ListPostalCodeLife;
                vm.nombreAsegurado = vm.nombres;
                vm.apePaternoAsegurado = vm.apePaterno;
                vm.apeMaternoAsegurado = vm.apeMaterno;
                vm.generoAsegurado = vm.sexoCliente;
                vm.rfcAsegurado = vm.fiscalIDNumber;
                vm.fechaNacimientoAsegurado = vm.fechaNacimiento;
                vm.calleAsegurado = vm.calleUser;
                vm.numeroExteriorAsegurado = vm.extUser;
                vm.coloniaAsegurado = vm.colonia;
                vm.edadAsegurado = calculaEdad(moment(vm.fechaNacimiento, "DD/MM/YYYY"));
                vm.phoneAsegurado = vm.phoneUser;
                vm.estadoCivilAsegurado = vm.cmd.dataLifeMarital;
                vm.estadoAsegurado = vm.cmd.dataLifeEntity;
                vm.municipioAsegurado = vm.cmd.dataLifeMunicipality;
                vm.codigoPostalAsegurado = vm.cmd.dataLifePostalCode;
                vm.paisAsegurado = vm.cmd.dataLifeContry;
            } else {
                vm.nombreAsegurado = "";
                vm.apePaternoAsegurado = "";
                vm.apeMaternoAsegurado = "";
                //vm.generoAsegurado = "";
                vm.rfcAsegurado = "";
                vm.fechaNacimientoAsegurado = false;
                vm.calleAsegurado = "";
                vm.numeroExteriorAsegurado = "";
                vm.coloniaAsegurado = "";
                vm.estadoCivilAsegurado = "";
                vm.estadoAsegurado = "";
                vm.municipioAsegurado = "";
                vm.codigoPostalAsegurado = "";
                vm.paisAsegurado = "";
                vm.phoneAsegurado = "";
                vm.edadAsegurado = "";
            }
        }

        vm.onAccumulateValidation = function (lastValue, newValue) {
            vm.insuredSum = parseFloat(newValue.id);
            serviceLifeInsuranceQuotation();

            var _params = {};
            _params.riskValidation = {
                edad: (vm.personType === '1') ? parseInt(vm.edadAsegurado) : parseInt(vm.edadAsegurado),
                nombre: (vm.personType === '1') ? vm.nombres : vm.nombreAsegurado,
                apePaterno: (vm.personType === '1') ? vm.apePaterno : vm.apePaternoAsegurado,
                apeMaterno: (vm.personType === '1') ? vm.apeMaterno : vm.apeMaternoAsegurado,
                birthDate: moment(vm.fechaNacimientoAsegurado, "DD/MM/YYYY").format("YYYY-MM-DD")
            }

            var _totalCummulo = parseFloat(vm.insuredSum) / 1.10;
            insuranceLifeSrv.getAccumulatedRisksValidation(parseInt(_totalCummulo), _params).then(function (response) {
                if (response.info.operationResult == 'N') {
                    CommonModalsSrv.info("Estimado Asesor lamento informarle que al ingresar sus datos a nuestro sistema automático de suscripción, no nos permitió ofrecerle ésta protección de manera inmediata, por lo que lo invitamos a enviar a las oficinas de MAPFRE su solicitud para su evaluación.");
                    vm.btnContinuarSA = false;
                } else {
                    vm.btnContinuarSA = true;
                    vm.primaTotal = response.info.totalBalance;
                    return vm.primaTotal;
                }
            });
        };
        
        function saveBeneficiario() {
            if (!validateActinverEmail(vm.emailB)) 
                return;            
            if(!porcentajeExcedido(vm.tipoBeneficiario.text, vm.porcentajeB)) {
                var beneficio = {
                    tipoBeneficiario: vm.tipoBeneficiario,
                    parentescoB: vm.parentescoB,
                    nombreB: vm.nombreB,
                    apePaternoB: vm.apePaternoB,
                    apeMaternoB: vm.apeMaternoB,
                    porcentajeB: vm.porcentajeB,
                    fechaNacB: vm.fechaNacB,
                    telefonoB: vm.telefonoB,
                    emailB: vm.emailB,
                    sexoB: vm.sexoB
                };
                vm.ListaBeneficiarios.push(beneficio);
                vm.tipoBeneficiario = "";
                vm.parentescoB = "";
                vm.nombreB = "";
                vm.apePaternoB = "";
                vm.apeMaternoB = "";
                vm.porcentajeB = "";
                vm.fechaNacB = false;
                vm.telefonoB = "";
                vm.emailB = "";
                vm.sexoB = "";
            } else CommonModalsSrv.error("El porcentaje total para el tipo de beneficiario "
                    + vm.tipoBeneficiario.text + " no se encuentra dentro de los límites permitidos (1 - 100)");
        }

        function editBeneficiario(index) {
            vm.tipoBeneficiario = vm.ListaBeneficiarios[index].tipoBeneficiario;
            vm.parentescoB = vm.ListaBeneficiarios[index].parentescoB;
            vm.nombreB = vm.ListaBeneficiarios[index].nombreB;
            vm.apePaternoB = vm.ListaBeneficiarios[index].apePaternoB;
            vm.apeMaternoB = vm.ListaBeneficiarios[index].apeMaternoB;
            vm.porcentajeB = vm.ListaBeneficiarios[index].porcentajeB;
            vm.porcentajeBAnterior = vm.ListaBeneficiarios[index].porcentajeB;
            vm.fechaNacB = vm.ListaBeneficiarios[index].fechaNacB;
            vm.telefonoB = vm.ListaBeneficiarios[index].telefonoB;
            vm.emailB = vm.ListaBeneficiarios[index].emailB;
            vm.sexoB = vm.ListaBeneficiarios[index].sexoB;
            vm.indexUser = index;
            vm.updateFlag = true;            
        }

        function updateBeneficiario() {
            // if (vm.porcentajeB != 0 && totalPorcentajeUp(vm.porcentajeB, vm.porcentajeBAnterior)) {
            if(!porcentajeUpdate(vm.tipoBeneficiario.text, vm.porcentajeB, vm.indexUser)) {
                vm.ListaBeneficiarios[vm.indexUser].tipoBeneficiario = vm.tipoBeneficiario;
                vm.ListaBeneficiarios[vm.indexUser].parentescoB = vm.parentescoB;
                vm.ListaBeneficiarios[vm.indexUser].nombreB = vm.nombreB;
                vm.ListaBeneficiarios[vm.indexUser].apePaternoB = vm.apePaternoB;
                vm.ListaBeneficiarios[vm.indexUser].apeMaternoB = vm.apeMaternoB;
                vm.ListaBeneficiarios[vm.indexUser].porcentajeB = vm.porcentajeB;
                vm.ListaBeneficiarios[vm.indexUser].fechaNacB = vm.fechaNacB;
                vm.ListaBeneficiarios[vm.indexUser].telefonoB = vm.telefonoB;
                vm.ListaBeneficiarios[vm.indexUser].emailB = vm.emailB;
                vm.ListaBeneficiarios[vm.indexUser].sexoB = vm.sexoB;
                vm.updateFlag = false;
                vm.tipoBeneficiario = "";
                vm.parentescoB = "";
                vm.nombreB = "";
                vm.apePaternoB = "";
                vm.apeMaternoB = "";
                vm.porcentajeB = "";
                vm.fechaNacB = false;
                vm.telefonoB = "";
                vm.emailB = "";
                vm.sexoB = "";
                vm.indexUser = "";
                vm.porcentajeBAnterior = "";
            } else CommonModalsSrv.error("El porcentaje total para el tipo de beneficiario "
                    + vm.tipoBeneficiario.text + " no se encuentra dentro de los límites permitidos (1 - 100)");
            // } else {
            //     if (vm.porcentajeB == 0) {
            //         CommonModalsSrv.info("El porcentaje asignado debe ser mayor a 0%.");
            //     } else {
            //         CommonModalsSrv.info("La suma del porcentaje de todos los beneficiarios no puede ser mayor al 100%");
            //     }
            // }
        }
        
        function deleteBeneficiario(index) {
            if (restaPorcentaje(vm.ListaBeneficiarios[index].tipoBeneficiario.text, vm.ListaBeneficiarios[index].porcentajeB)) {
                vm.ListaBeneficiarios.splice(index, 1);
                vm.tipoBeneficiario = "";
                vm.parentescoB = "";
                vm.nombreB = "";
                vm.apePaternoB = "";
                vm.apeMaternoB = "";
                vm.porcentajeB = "";
                vm.fechaNacB = false;
                vm.telefonoB = "";
                vm.emailB = "";
                vm.emailB = "";
                vm.indexUser = "";
                vm.porcentajeBAnterior = "";
            }            
        }
        
        function porcentajeExcedido(tipoBenefActual, porcentajeActual) {
            if (porcentajeActual > 100 || porcentajeActual <= 0)
                return true;
            var tiposBenef = vm.listaPorcentajeTotal.find(function (totalesObj) {
                return totalesObj.tipoBeneficiario == tipoBenefActual;
            });
            if(typeof tiposBenef === "undefined") {
                tiposBenef = {tipoBeneficiario: tipoBenefActual, total: parseInt(porcentajeActual, 10)};
                vm.listaPorcentajeTotal.push(tiposBenef);
                return false;
            } else {
                if(parseInt(tiposBenef.total, 10) + parseInt(porcentajeActual, 10) <= 100) { 
                    tiposBenef.total = parseInt(tiposBenef.total, 10) + parseInt(porcentajeActual, 10);
                    return false;
                }
            }
            return true;
        }

        function porcentajeUpdate(tipoBenefActual, porcentajeActual, index) {
            if (porcentajeActual > 100 || porcentajeActual <= 0)
                return true;
            var total = 0, count = 0;
            for(count = 0; count < vm.ListaBeneficiarios.length; count++) {
                if (count == index) 
                    continue;
                total += tipoBenefActual == vm.ListaBeneficiarios[count].tipoBeneficiario.text ? 
                    parseInt(vm.ListaBeneficiarios[count].porcentajeB, 10) : 0;                
            }
            if(total + parseInt(porcentajeActual, 10) <= 100) {
                var tiposBenef = vm.listaPorcentajeTotal.find(function (totalesObj) {
                    return totalesObj.tipoBeneficiario == tipoBenefActual;
                });
                if (tiposBenef) {
                    tiposBenef.total = parseInt(total, 10) + parseInt(porcentajeActual, 10);
                    return false;
                } else {
                    CommonModalsSrv.error("Ocurrió un error al actualizar el registro");
                    return true;
                }
            }
            return true;
        }

        function restaPorcentaje(tipoBenefActual, porcentajeActual) {
            var tiposBenef = vm.listaPorcentajeTotal.find(function (totalesObj) {
                return totalesObj.tipoBeneficiario == tipoBenefActual;
            });
            if(tiposBenef) {
                if(parseInt(tiposBenef.total, 10) - parseInt(porcentajeActual, 10) >= 0) {
                    tiposBenef.total = parseInt(tiposBenef.total, 10) - parseInt(porcentajeActual, 10);
                    return true;
                } else CommonModalsSrv.error("Ocurrió un error al eliminar el registro");
            } else CommonModalsSrv.error("Ocurrió un error al eliminar el registro");
            return false;
        }

        /*function totalPorcentaje(nuevoPorcentaje) {
            var total = 0;
            vm.ListaBeneficiarios.map(function benefunc(benef) {
                total += parseInt(benef.porcentajeB, 10);
            });
            return (total + parseInt(nuevoPorcentaje, 10)) <= 100;
        }

        function totalPorcentajeUp(nuevoPorcentaje, porcentajeBAnterior) {
            var total = 0;
            vm.ListaBeneficiarios.map(function benefunc(benef) {
                total += parseInt(benef.porcentajeB, 10);
            });
            total = total - porcentajeBAnterior;
            return total + parseInt(nuevoPorcentaje, 10) <= 100;
        }*/
        
        function getInsuranceLifeHkJValidation() {
            var _listaObtenida = [];
            insuranceLifeSrv.getInsuranceLifeHighRiskJobValidation().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.TotalBalance,
                            text: value.OperationResult
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getSumaryQuery() {
            var _listaObtenida = [];
            insuranceLifeSrv.getSumaryQuery().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        if (usrRol.includes('SEGUROS') || (usrRol.includes('ASESOR') && value.insuredSum >= 550000)) {
                            _listaObtenida.push({
                                id: value.insuredSumID,
                                text: $filter('currency')(value.insuredSum, '$', 2)
                            });
                        }
                    });
                }
            });
            return _listaObtenida;
        }

        //Funciones para las validaciones de campos
        function forceKeyPressUppercase(e) {
            var charInput = e.keyCode;
            if ((charInput >= 97) && (charInput <= 122)) { // lowercase
                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifier key
                    var newChar = charInput - 32;
                    var start = e.target.selectionStart;
                    var end = e.target.selectionEnd;
                    e.target.value = e.target.value.substring(0, start) + String.fromCharCode(newChar) + e.target.value.substring(end);
                    e.target.setSelectionRange(start + 1, start + 1);
                    e.preventDefault();
                }
            }
        }

        function soloNumero(e) {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function soloText(e) {
            var regex = new RegExp("^[\u00F1a-zA-Z]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function soloTextAndNum(e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z0-9 ]+$") : new RegExp("^[a-zA-Z0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                event.which === 233 || event.which === 237 || event.which === 243 ||
                event.which === 250 || event.which === 193 || event.which === 201 ||
                event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        }

        function charrepeat(e, value) {
            var begin;
            var first;
            var second;
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var tb = (typeof value !== 'undefined') ? value.toUpperCase() : String.fromCharCode(echc).toUpperCase();
            if (tb.length > 2) {
                var message = tb.substring(tb.length - 3, tb.length);
                if (checkRate(message)) {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (begin.toString() === first.toString() && first.toString() === second.toString()) {
                        event.preventDefault();
                        return false;
                    }
                } else {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (parseInt(first) === parseInt(second) - 1 && parseInt(begin) === parseInt(first) - 1) {
                        event.preventDefault();
                        return false;
                    }
                }
            }
            return false;
        }

        function checkRate(input) {
            //var re =/^[a-zA-Z0-9 ]+$/;
            var re = /^[1-9]+[0-9]*]*$/;
            if (!re.test(input)) {
                return true;
            } else {
                return true;
            }
        }

        function numberSecuential(event, idValue) {
            var strNum = "01234567890000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999";
            var inputValue = angular.element("#" + idValue).val();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            if (inputValue.toString() !== '01' && inputValue.toString() !== '001') {
                if (inputValue.toString().length > 5 && strNum.includes(inputValue.toString())) {
                    event.preventDefault();
                    return false;
                } else {
                    return true;
                }
            } else {
                event.preventDefault();
                return false;
            }
        }

        function getYearExpirationList() {
            var _list = [];

            for (var _year = (new Date()).getFullYear(), i = 0; i < 7; i++)
                _list.push({
                    id: _year + i,
                    text: _year + i
                });

            return _list;
        }

        function getMonthExpirationList() {
            var _list = [];

            for (var _month, i = 1; i <= 12; i++) {
                _month = i < 10 ? '0' + i : i;
                _list.push({
                    id: _month,
                    text: _month
                });
            }

            return _list;
        }

        function serviceLifeInsuranceQuotation() {
            var _params = {};
            _params.language = 'SPA',
                _params.insurancePolicyDate = moment(new Date()).format('YYYY-MM-DD'),
                _params.policyMaturityDate = moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD'),
                _params.agentCode = agentCodeR + "", //_params.agentCode='99998',
                _params.paymentManagerID = '1',
                _params.smokerFlag = vm.fuma,
                _params.clientNumber = vm.numeroCliente,
                _params.adviserID = '67890',
                _params.contractingData = {
                    name: vm.nombreAsegurado.toUpperCase(),
                    lastName: vm.apePaternoAsegurado.toUpperCase(),
                    secondLastName: vm.apeMaternoAsegurado.toUpperCase(),
                    fiscalIDNumber: vm.rfcAsegurado,
                    street: vm.calleAsegurado,
                    outdoorNumber: vm.numeroExteriorAsegurado,
                    neighborhood: vm.coloniaAsegurado,
                    postalCode: vm.codigoPostalAsegurado.id + "",
                    federalEntityID: parseInt(vm.estadoAsegurado.id),
                    delegationMunicipalityID: parseInt(vm.municipioAsegurado.id),
                    countryID: vm.paisAsegurado.id,
                    phoneNumber: vm.phoneAsegurado,
                    birthDate: moment(vm.fechaNacimientoAsegurado, "DD-MM-YYYY").format("YYYY-MM-DD"),
                    gender: vm.generoAsegurado,
                    maritalStatusID: vm.estadoCivilAsegurado.id,
                    nacionality: vm.paisAsegurado.id,
                    personType: (vm.personType === '1') ? 'F' : 'M',
                    email: vm.emailUser, //ERROR: no se actualiza
                    insuranceBeneficiaryTypeID: '6',
                    professionID: vm.cmd.dataOcupacion.id,
                    jobID: vm.cmd.dataOcupacion.id,
                    height: vm.mts,
                    weight: vm.kgs,
                    age: parseInt(vm.edadAsegurado)
                }
            _params.basicCoverage = {
                insuredSum: vm.insuredSum
            }
            _params.accidentalDeathCoverage = {
                insuredSum: vm.insuredSum
            }

            insuranceLifeSrv.getServiceLifeInsuranceQuotation(_params).then(function (response) {
                if (response.success) {
                    vm.pBasica = response.info.coverageList.coverageInformation[0].totalPremium;
                    vm.pMa = response.info.coverageList.coverageInformation[1].totalPremium;
                    vm.totalSum = vm.pBasica + vm.pMa;
                    vm.btnContinuarSAQuot = true;                    
                } else {
                    CommonModalsSrv.error("No se pudo realizar la cotización de su seguro, favor de comunicarse con el área de soporte. TX_ID: " + response.info.transactionID);
                    vm.btnContinuarSAQuot = false;
                }
            });
        }

        function ServiceLifeInsurancePolicyRegistration() {
            if (!validateActinverEmail(vm.email1)) //validamos que el correo no tenga dominio @actinver.com.mx
                return;
            if (!vm.validCard) {
                CommonModalsSrv.error("Número de Tarjeta Inválido.");
                return;
            }
            vm.AdviserID = '67890';
            vm.edad = calculaEdad(moment(vm.fechaNacimiento, "DD/MM/YYYY"));
            var numberDay;
            var nextValidDay;
            var _params = {};
            var tarjetaClabe = vm.cmd.paymentType.type.id == '2' && vm.cmd.ListTypeCLABE.type.id === '1' ? vm.cmd.ListTypeCLABE.type.text : 'TC';
            
            for (var day = 1; day < 7; day++) { //Función para encontrar el siguiente día habil
                nextValidDay = moment().add(day, 'days').format('YYYY-MM-DD'); //Automáticamente sumamos un día al día actual para obtener el día siguiente
                numberDay = moment(nextValidDay).isoWeekday(); //Obtenemos el valor numérico del día de la semana. 1 es para lunes, 7 para domingo.                
                
                if (numberDay < 6) { //Validamos que el número del día sea menor a 6, o sea, que no sea sábado o domingo
                    break; //Si es menor a 6 rompemos el ciclo for, de lo contrario continuamos hasta encontrar el siguiete día habil
                }
            }

            _params.language = 'SPA';
            _params.agentCode = agentCodeR + ""; //_params.agentCode = '99998';
            _params.clientNumber = vm.numeroCliente;
            _params.insurancePolicyDate = moment(vm.fechaVigencia).format("YYYY-MM-DD");
            _params.policyMaturityDate = moment(new Date(vm.fechaVigencia)).add(1, 'years').format('YYYY-MM-DD');
            _params.paymentManagerID = '1';
            _params.smokerFlag = vm.fuma;
            _params.adviserID = vm.AdviserID;
            _params.chargeManager = (vm.cmd.paymentType.type.id === '2') ? 'BA' : 'TA';
            _params.contractingData = {
                name: (vm.personType === '1') ? vm.nombres.toUpperCase() : vm.nombreAsegurado.toUpperCase(),
                lastName: (vm.personType === '1') ? vm.apePaterno.toUpperCase() : vm.apePaternoAsegurado.toUpperCase(),
                secondLastName: (vm.personType === '1') ? vm.apeMaterno.toUpperCase() : vm.apeMaternoAsegurado.toUpperCase(),
                fiscalIDNumber: (vm.personType === '1') ? vm.fiscalIDNumber.toUpperCase() : vm.rfcAsegurado.toUpperCase(),
                street: (vm.personType === '1') ? vm.calleUser.toUpperCase() : vm.calleAsegurado.toUpperCase(),
                outdoorNumber: (vm.personType === '1') ? vm.extUser : vm.numeroExteriorAsegurado,
                neighborhood: (vm.personType === '1') ? vm.colonia.toUpperCase() : vm.coloniaAsegurado.toUpperCase(),
                postalCode: (vm.personType === '1') ? vm.cmd.dataLifePostalCode.text : vm.codigoPostalAsegurado.id + "",
                federalEntityID: (vm.personType === '1') ? parseInt(vm.cmd.dataLifeEntity.id) : parseInt(vm.estadoAsegurado.id),
                delegationMunicipalityID: (vm.personType === '1') ? parseInt(vm.cmd.dataLifeMunicipality.id) : parseInt(vm.municipioAsegurado.id),
                countryID: (vm.personType === '1') ? vm.cmd.dataLifeContry.id : vm.paisAsegurado.id,
                phoneNumber: (vm.personType === '1') ? vm.phoneUser : vm.phoneAsegurado,
                birthDate: moment(vm.fechaNacimiento, "DD/MM/YYYY").format("YYYY-MM-DD"),
                gender: vm.sexoCliente,
                maritalStatusID: (vm.personType === '1') ? vm.cmd.dataLifeMarital.id : '0',
                nacionality: vm.nacionalidad.id,
                personType: (vm.personType === '1') ? 'F' : 'M',
                email: $filter('lowercase')(vm.emailUser),
                insuranceBeneficiaryTypeID: '6',
                professionID: vm.cmd.dataOcupacion.id + "",
                jobID: vm.cmd.dataOcupacion.id + "",
                height: parseFloat(vm.mts),
                weight: parseFloat(vm.kgs),
                age: (vm.personType === '1') ? parseInt(vm.edad) : parseInt(vm.edadAsegurado)
            };
            _params.insuredData = {
                name: vm.nombreAsegurado.toUpperCase() + "",
                lastName: vm.apePaternoAsegurado.toUpperCase() + "",
                secondLastName: vm.apeMaternoAsegurado.toUpperCase() + "",
                fiscalIDNumber: vm.rfcAsegurado.toUpperCase() + "",
                street: vm.calleAsegurado.toUpperCase() + "",
                outdoorNumber: vm.numeroExteriorAsegurado + "",
                neighborhood: vm.coloniaAsegurado.toUpperCase() + "",
                postalCode: vm.codigoPostalAsegurado.id + "",
                federalEntityID: parseInt(vm.estadoAsegurado.id),
                delegationMunicipalityID: parseInt(vm.municipioAsegurado.id),
                countryID: vm.paisAsegurado.id + "",
                phoneNumber: vm.phoneAsegurado + "",
                birthDate: moment(vm.fechaNacimientoAsegurado, "DD/MM/YYYY").format("YYYY-MM-DD"),
                gender: vm.generoAsegurado,
                maritalStatusID: vm.estadoCivilAsegurado.id + "",
                personType: (vm.personType === '1') ? 'F' : 'M',
                insuranceBeneficiaryTypeID: '6',
                jobID: vm.cmd.dataOcupacion.id + "",
                height: parseFloat(vm.mts),
                weight: parseFloat(vm.kgs),
                age: parseInt(vm.edadAsegurado)
            };
            _params.beneficiaryDataList = [];
            angular.forEach(vm.ListaBeneficiarios, function (value) {
                var beneficiaryData = {
                    name: value.nombreB.toUpperCase() + "",
                    lastName: value.apePaternoB.toUpperCase() + "",
                    secondLastName: value.apeMaternoB.toUpperCase() + "",
                    personType: (vm.personType === '1') ? 'F' : 'M',
                    jobID: '0',
                    insuranceBeneficiaryTypeID: value.tipoBeneficiario.id,
                    participationPercentage: parseInt(value.porcentajeB),
                    birthDate: moment(value.fechaNacB).format("YYYY-MM-DD"),
                    age: parseInt(calculaEdad(value.fechaNacB)),
                    relationshipID: value.parentescoB.id
                };
                _params.beneficiaryDataList.push(beneficiaryData);
            });
            _params.basicCoverage = {
                insuredSum: vm.insuredSum
            };
            _params.accidentalDeathCoverage = {
                insuredSum: vm.insuredSum
            };
            _params.bankingData = {
                paymentMethod: tarjetaClabe,
                name: vm.nombreCard.toUpperCase(),
                lastName: vm.apellidoPCard.toUpperCase(),
                secondLastName: vm.apellidoMCard.toUpperCase(),
                email: $filter('lowercase')(vm.email1),
                bankID: vm.cmd.dataCarsAccountIdBanks.id,
                expirationDate: tarjetaClabe === "CLABE" ? '2024-01-01' : moment(vm.comboYearExpiration.text + '-' + vm.comboMonthExpiration.text + '-01').format("YYYY-MM-DD"),
                cardVerificationValue: tarjetaClabe === "CLABE" ? "" : parseInt(vm.cvv),
                cardNumber: tarjetaClabe === "CLABE" ? "" : vm.account,
                cardID: tarjetaClabe === "CLABE" ? "" : vm.cmd.cardType.id + "",
                CLABE: tarjetaClabe === "CLABE" ? vm.clabeInter : "",
                cutoffDate: nextValidDay
            };

            insuranceLifeSrv.getServiceLifeInsurancePolicyRegistration(_params).then(function (response) {
                if (response.success) {
                    vm.numeroPoliza = response.info.policyNumber;
                    vm.urlCondiciones = isProduccion ?
                        'https://zonaliados.mapfre.com.mx/zonaaliadosextra/vida/pdf/Plan%20de%20Vida%20Individual.pdf' :
                        'https://10.184.62.77/zonaaliadosextra/vida/pdf/Plan%20de%20Vida%20Individual.pdf';
                    vm.urlSolicitud = isProduccion ?
                        "https://zonaliados.mapfre.com.mx/impresionSeGA/TWImpSolicitudMarco.aspx?noPoliza=" + vm.numeroPoliza + "&sector=1&usuario=actinver&agente=" + agentCodeR + "&eMail=&btnPoliza=N&RelSol=MEXICO|" + (vm.fuma === "false" ? "NO" : "SI") + "|" + vm.cmd.dataOcupacion.text + "|TEMPORAL 1 AÑO|" + vm.kgs + "|" + vm.mts + "|" + (vm.personType === '1' ? vm.edad : vm.edadAsegurado) + "|X|X|X|X|" :
                        "https://10.184.62.77/impresionSeGA/TWImpSolicitudMarco.aspx?noPoliza=" + vm.numeroPoliza + "&sector=1&usuario=actinver&agente=" + agentCodeR + "&eMail=&btnPoliza=N&RelSol=MEXICO|" + (vm.fuma === "false" ? "NO" : "SI") + "|" + vm.cmd.dataOcupacion.text + "|TEMPORAL 1 AÑO|" + vm.kgs + "|" + vm.mts + "|" + (vm.personType === '1' ? vm.edad : vm.edadAsegurado) + "|X|X|X|X|";
                    vm.urlPoliza = isProduccion ?
                        'https://zonaliados.mapfre.com.mx/impresionSeGA/TWImpPolizaMarco.aspx?noPoliza=' + vm.numeroPoliza + '&sector=1&simpol=n&usuario=actinver&agente=' + agentCodeR :
                        'https://10.184.62.77/impresionSeGA/TWImpPolizaMarco.aspx?noPoliza=' + vm.numeroPoliza + '&sector=1&simpol=n&usuario=actinver&agente=' + agentCodeR;
                    /*var agenteCorreo = JSON.parse($sessionStorage.user).mail;
                    ListaPolizasVidaAdd(vm.numeroPoliza,
                        moment(vm.fechaVigencia).format("YYYY/MM/DD"),
                        moment(new Date(vm.fechaVigencia), 'DD/MM/YYYY').add(1, 'years').format('YYYY/MM/DD'),
                        vm.totalSum,
                        "EMIT",
                        ((vm.personType === '1') ? vm.nombres : vm.nombreAsegurado).toUpperCase(),
                        ((vm.personType === '1') ? vm.apePaterno : vm.apePaternoAsegurado).toUpperCase(),
                        ((vm.personType === '1') ? vm.apeMaterno : vm.apeMaternoAsegurado).toUpperCase(),
                        $filter('lowercase')(vm.emailUser),
                        $scope.$parent.agentSelected.id,
                        $filter('lowercase')(agenteCorreo));*/
                    go2page(6);
                } else {
                    CommonModalsSrv.error("Estimado usuario su póliza no fue emitida, favor de comunicarse con el área de soporte. TX_ID: " + response.info.transactionID);
                }
            });
        }

        vm.banderasCheckAsCoArr = [false, false, false, false, false, false, false, false, false, false];
        
        function activarCheckAseCon() {
            if (vm.personType == '2') return;
            vm.activarCheck = true;

            vm.banderasCheckAsCoArr[0] = true;
            if (!vm.nombres == "") {
                vm.banderasCheckAsCoArr[0] = true;
            } else {
                vm.banderasCheckAsCoArr[0] = false;
            }
            if (!vm.apePaterno == "") {
                vm.banderasCheckAsCoArr[1] = true;
            } else {
                vm.banderasCheckAsCoArr[1] = false;
            }
            if (!vm.apeMaterno == "") {
                vm.banderasCheckAsCoArr[2] = true;
            } else {
                vm.banderasCheckAsCoArr[2] = false;
            }
            if (!vm.fiscalIDNumber == "") {
                vm.banderasCheckAsCoArr[3] = true;
            } else {
                vm.banderasCheckAsCoArr[3] = false;
            }
            if (!vm.CURP == "") {
                vm.banderasCheckAsCoArr[4] = true;
            } else {
                vm.banderasCheckAsCoArr[4] = false;
            }
            if (!vm.phoneUser == "") {
                vm.banderasCheckAsCoArr[5] = true;
            } else {
                vm.banderasCheckAsCoArr[5] = false;
            }
            if (!vm.emailUser == "") {
                vm.banderasCheckAsCoArr[6] = true;
            } else {
                vm.banderasCheckAsCoArr[6] = false;
            }
            if (!vm.calleUser == "") {
                vm.banderasCheckAsCoArr[7] = true;
            } else {
                vm.banderasCheckAsCoArr[7] = false;
            }
            if (!vm.extUser == "") {
                vm.banderasCheckAsCoArr[8] = true;
            } else {
                vm.banderasCheckAsCoArr[8] = false;
            }
            if (!vm.colonia == "") {
                vm.banderasCheckAsCoArr[9] = true;
            } else {
                vm.banderasCheckAsCoArr[9] = false;
            }
            if (!vm.fechaNacimiento == "") {
                vm.banderasCheckAsCoArr[10] = true;
            } else {
                vm.banderasCheckAsCoArr[10] = false;
            }

            for (var i = 0; i < vm.banderasCheckAsCoArr.length; i++) {
                vm.activarCheck = vm.activarCheck && vm.banderasCheckAsCoArr[i];
            }
            if (vm.activarCheck) {
                document.getElementById("checkContAse").disabled = false;
            } else {
                document.getElementById("checkContAse").disabled = true;
            }
        }

        function ServiceEmailLifePolizaLista() {
            var _inicioVigencia = moment(vm.fechaVigencia).format("YYYY-MM-DD");
            var _finVigencia = moment(new Date(vm.fechaVigencia)).add(1, 'years').format('YYYY-MM-DD');
            var nombreCompletoCon = vm.personType === '1' ? vm.nombres.toUpperCase() + " " + vm.apePaterno.toUpperCase() + " " + vm.apeMaterno.toUpperCase() : vm.nombreCliente.toUpperCase();
            
            insuranceLifeSrv.ServiceEmailSendingAsesoriaPolizaLista(vm.emailUser, nombreCompletoCon, vm.numeroPoliza, 
                _inicioVigencia, _finVigencia, vm.urlPoliza, vm.urlSolicitud, vm.urlCondiciones).then(function (response) {
                if (response.info.responseMessage === "EXITO") {
                    CommonModalsSrv.info("Estimado usuario el correo ha sido enviado correctamente.");
                } else {
                    CommonModalsSrv.error("Estimado usuario no se ha podido enviar el correo, favor de comunicarse con el área de soporte.");
                }
            });
        }

        function imprimirCondiciones() {
            window.open(vm.urlCondiciones, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function imprimirSolicitudLife() {
            window.open(vm.urlSolicitud, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function imprimirPolizaLife() {            
            window.open(vm.urlPoliza, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        /*
        function ServiceEmailLifeNotificacionAsesor(mailTo, noPoliza) {
            vm._noPoliza = noPoliza;
            vm._mailTo = mailTo;
            insuranceLifeSrv.ServiceEmailSendingAsesoriaNotificacionAsesor(vm._mailTo, vm._noPoliza).then(function (response) {
                vm.response = "EXITO";
                if (response.info.responseMessage == "EXITO") {
                    CommonModalsSrv.info("Estimado usuario el correo ha sido enviado correctamente.");
                } else {
                    CommonModalsSrv.error("Estimado usuario no se ha podido enviar el correo, favor de comunicarse con el área de soporte.");
                }
            });
        }

        function ServiceEmailLifeSolicitudUsuario(mailTo, nombre, noPoliza) {
            vm._noPoliza = noPoliza;
            vm._nombre = nombre;
            vm._mailTo = mailTo;
            insuranceLifeSrv.ServiceEmailSendingAsesoriaSolicitudUsuario(vm._mailTo, vm._nombre, vm._noPoliza, agentCodeR, vm.fuma, vm.cmd.dataOcupacion.text, vm.kgs, vm.mts, (vm.personType === '1' ? parseInt(vm.edad) : parseInt(vm.edadAsegurado)), "UAT").then(function (response) {
                vm.response = "EXITO";
                if (response.info.responseMessage == "EXITO") {
                    CommonModalsSrv.info("Estimado usuario el correo ha sido enviado correctamente.");
                } else {
                    CommonModalsSrv.error("Estimado usuario no se ha podido enviar el correo, favor de comunicarse con el área de soporte.");
                }
            });
        }

        function ListaPolizasVida() {
            var _response = [];
            var polizaApro = false;
            insuranceLifeSrv.ListaPolizasVida(usrRol).then(function (response) {
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        if (value.policyStatus === "APRO") {
                            polizaApro = true;
                        }
                        value.policyDate = moment(new Date(value.policyDate)).format('DD/MM/YYYY');
                        value.policyDateEnd = moment(new Date(value.policyDateEnd)).format('DD/MM/YYYY');
                        _response.push(value);
                    });
                    if (_response.length > 0) {
                        if (usrRol === "ASESOR" && polizaApro) {
                            getAvailableQuotation();
                        } else if (usrRol === "ASESOR" && !polizaApro) {
                            pagina1();
                        } else {
                            getAvailableQuotation();
                        }
                    } else {
                        pagina1();
                    }
                }
            });

            vm.jsonPolizaPrueba = _response;
        }
        
        function ListaPolizasVidaAdd(_noPoliza, _polizaDate, _polizaDateEnd, _polizaAmount, _polizaStatus, _clientName, _clientLastname, _clientSecondname, _clientEmail, _idAgente, _agentEmail) {
            insuranceLifeSrv.ListaPolizasVidaAdd(_noPoliza, _polizaDate, _polizaDateEnd, _polizaAmount, _polizaStatus, _clientName, _clientLastname, _clientSecondname, _clientEmail, _idAgente, _agentEmail).then(function (response) {
            });
        }

        function getAvailableQuotation() {
            vm.stepForm = {
                step: 3,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false,
                stepI: true
            };
        }

        function emission(index) {
            vm.idPoliza = index;
            vm.clientEmailJson = vm.jsonPolizaPrueba[vm.idPoliza].clientEmail;
            vm.nombreClienteJson = vm.jsonPolizaPrueba[vm.idPoliza].clientName;
            vm.numeroPolizaJson = vm.jsonPolizaPrueba[vm.idPoliza].policyId;
            vm.inicioVigJson = vm.jsonPolizaPrueba[vm.idPoliza].policyDate;
            vm.finVigJson = vm.jsonPolizaPrueba[vm.idPoliza].policyDateEnd;
            vm.stepForm = {
                step: 8,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false,
                stepI: false,
                stepJ: true
            };
        }

        function liberacion(id_poliza, fecha_poliza, suma_poliza, status_poliza, nombre_cliente, apellido_pat_cliente, apellido_mat_cliente, correo_cliente, correo_agente) {
            vm.clientEmailJson = correo_cliente;
            vm.nombreClienteJson = nombre_cliente + " " + apellido_pat_cliente + " " + apellido_mat_cliente;
            vm.numeroPolizaJson = id_poliza;
            vm.sumaPolizaJson = suma_poliza;
            vm.fechaPolizaJson = fecha_poliza;
            vm.statusPolizaJson = status_poliza;
            vm.emailAgentePolizaJson = correo_agente;
            vm.liberacionPolizaEmail = vm.AMBT === 'PRO' ? $filter('lowercase')(vm.emailAgentePolizaJson) : $filter('lowercase')(vm.clientEmailJson);
            vm.stepForm = {
                step: 9,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false,
                stepI: false,
                stepJ: false,
                stepK: true
            };
        }

        function LiberacionConfirmada(idPoliza, mail) {
            CommonModalsSrv.confirm("Desea confirmar la liberación de la póliza con ID: " + idPoliza + ".").result.then(
                function () {
                    ListaPolizasVidaUp(idPoliza, "APRO", mail);
                }
            );
        }

        function CancelarPoliza(idPoliza) {
            CommonModalsSrv.confirm("Desea cancelar la póliza con ID: " + idPoliza + ".").result.then(
                function () {
                    ListaPolizasVidaUp(idPoliza, "RECH");
                    vm.btn1 = document.getElementById("btnCancelPol");
                    vm.btn2 = document.getElementById("btnLiberaPol");
                    vm.btn1.style.display = "none";
                    vm.btn2.style.display = "none";
                }
            );
        }
        
        function ListaPolizasVidaUp(_noPoliza, _estatusPoliza, mail) {
            vm._noPoliza = _noPoliza;
            vm._estatusPoliza = _estatusPoliza;

            insuranceLifeSrv.ListaPolizasVidaUp(vm._noPoliza, vm._estatusPoliza).then(function (response) {
                if (response.success) {
                    ListaPolizasVida();
                    if (_estatusPoliza === "APRO") {
                        vm.btn1 = document.getElementById("btnCancelPol");
                        vm.btn2 = document.getElementById("btnLiberaPol");
                        vm.btn1.style.display = "none";
                        vm.btn2.style.display = "none";
                        ServiceEmailLifeNotificacionAsesor(mail, _noPoliza);
                    }
                } else {
                    CommonModalsSrv.error("Estimado usuario no se realizó el cambio de estatus.");
                }
            });
        }

        function limpiarDependiente() {
            if (vm.dependientes.length !== 0) {
                vm.dataParentescoList.type = undefined;
            }

            if (!vm.dependientes || vm.dependientes.length === 0) {
                //vm.ListMedicalParentescos = getCatalogoMedicalParentescos();
                vm.dataParentescoList.type = vm.ListMedicalParentescos[0];
            }
            if (vm.dependientes.length !== 0 || vm.clienteEsTitularAsegurado === "2") {
                vm.nombresCliente = "";
                vm.primerApellidoCliente = "";
                vm.segundoApellidoCliente = "";
                vm.fechaNacimientoCliente = moment();
                vm.edadCliente = "";
                vm.rfcCliente = "";
            }

            vm.sexoCliente = "";
            vm.sexoB = "";
            vm.dataOcupacionList.type = undefined;
            vm.dataDeporteList.type = undefined;
            vm.deporteCliente = "";
            vm.isClienteBanco = false;
            vm.editandoCliente = false;
            vm.buttonNameClientData = vm.nombreBotonAgregar;
            vm.buttonNameCleanData = vm.nombreBotonLimpiar;
        }

        function editarDependientes(index) {
            vm.dataParentescoList.type = {
                id: vm.dependientes[index].relationshipID,
                text: vm.dependientes[index].relationship
            };
            vm.nombresCliente = vm.dependientes[index].name;
            vm.primerApellidoCliente = vm.dependientes[index].lastName;
            vm.segundoApellidoCliente = vm.dependientes[index].secondLastName;
            vm.fechaNacimientoCliente = moment(vm.dependientes[index].birthDate, 'YYYY-MM-DD');
            vm.edadCliente = vm.dependientes[index].age;
            vm.rfcCliente = vm.dependientes[index].fiscalIDNumber;
            vm.sexoCliente = vm.dependientes[index].genderDesc;
            vm.dataOcupacionList.type = {
                id: vm.dependientes[index].jobID,
                text: vm.dependientes[index].jobDescription
            };
            vm.dataDeporteList.type = {
                id: vm.dependientes[index].sportID,
                text: vm.dependientes[index].sport
            };
            vm.indexTitular = index;
            vm.editandoCliente = true;
            vm.buttonNameClientData = vm.nombreBotonModificar;
            vm.buttonNameCleanData = vm.nombreBotonCancelar;

            if (vm.clienteEsTitularAsegurado === "1" && vm.rfcCliente === vm.fiscalIDNumber) {
                vm.isClienteBanco = true;
            }
        }

        function agregarEditados(index) {
            vm.dependientes[index].relationshipID = vm.dataParentescoList.type.id;
            vm.dependientes[index].relationship = vm.dataParentescoList.type.text;
            vm.dependientes[index].name = vm.nombresCliente;
            vm.dependientes[index].lastName = vm.primerApellidoCliente;
            vm.dependientes[index].secondLastName = vm.segundoApellidoCliente;
            vm.dependientes[index].birthDate = moment(vm.fechaNacimientoCliente).format('YYYY-MM-DD');
            vm.dependientes[index].age = calculaEdad(vm.fechaNacimientoCliente);
            vm.dependientes[index].gender = vm.sexoCliente === "Masculino" ? 1 : 0,
            vm.dependientes[index].genderDesc = vm.sexoCliente;
            vm.dependientes[index].jobID = vm.edadCliente >= 18 && vm.dataOcupacionList.type != undefined ? vm.dataOcupacionList.type.id : "";
            vm.dependientes[index].jobDescription = vm.edadCliente >= 18 && vm.dataOcupacionList.type != undefined ? vm.dataOcupacionList.type.text : "";
            vm.dependientes[index].sportID = vm.dataDeporteList.type.id === "1" || vm.dataDeporteList.type === undefined ? "" : vm.dataDeporteList.type.id;
            vm.dependientes[index].sport = vm.dataDeporteList.type.text === "NINGUNO" || vm.dataDeporteList.type === undefined ? "" : vm.dataDeporteList.type.text;
            vm.isClienteBanco = false;
        }

        function getAccumulatedRisksValidation() {
            var _listaObtenida = [];
            insuranceLifeSrv.getAccumulatedRisksValidation().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.TotalBalance,
                            text: value.OperationResult
                        });
                    });
                }
            });
            return _listaObtenida;
        }
        */

        function regresoMain() {
            vm = null;
            $state.go('insurance.main');
        }
    }
})();

(function () {
    'use strict';

    insuranceLifeSrv.$inject = ['URLS', '$q', '$http', '$filter'];
    function insuranceLifeSrv(URLS, $q, $http, $filter) {
        var obj = {
            getLifeInsuranceStateQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogEntityFederal,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outFederalEntityQuery.federalEntityCatalogData.federalEntity;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getInsuranceLifeHighRiskJobValidation: function (_idJob) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getinsuranceLifeHighRiskJobValidation,
                        params: {
                            language: 'SPA',
                            jobID: _idJob,
                            insuranceTypeID: '100'
                        }

                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceLifeHighRiskJobValidation.operationResult;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getAccumulatedRisksValidation: function (_idEntityValidar, _params) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getinsuranceAccumulatedRisksValidation,
                        params: {
                            insuranceTypeID: '100',
                            packageCode: '10011',
                            currencyID: '1',
                            age: _params.riskValidation.edad,
                            name: _params.riskValidation.nombre,
                            lastName: _params.riskValidation.apePaterno,
                            secondLastName: _params.riskValidation.apeMaterno,
                            birthDate: _params.riskValidation.birthDate,
                            insuredSum: _idEntityValidar,
                            validityDate: moment().format("YYYY-MM-DD"),
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceAccumulatedRisksValidation;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getCatalogPostalCode: function (_idMunicipality) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogPostalCodeQuery + _idMunicipality,
                        params: {
                            language: 'SPA',
                            MunicipalityID: _idMunicipality
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outPostalCodeQuery.postalCodeList;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getCuestionario: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getLifeInsuranceQuestionnaireQuery,
                        params: {
                            insuranceTypeID: '100',
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outLifeInsuranceQuestionnaireQuery.condition;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getSumaryQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getInsuranceInsuredSumQuery,
                        params: {
                            language: 'SPA',
                            insuranceTypeID: '100',
                            currencyID: '1',
                            validityDate: '2019-09-09'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceInsuredSumQuery.insuranceInsuredSumQueryEntity;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getLifeinsuranceNationalityQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getInsuranceCountryQuery,
                        params: {
                            language: 'SPA',
                            insuranceTypeID: '100'
                        }
                    }).then(function success(response) {
                        var _response;
                        _response = response;
                        resolve({
                            success: true,
                            info: _response
                        });
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceCountryQuery.insuranceCountry;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getInsuranceMaritalStatusQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getInsuranceMaritalStatusQuery,
                        params: {
                            insuranceTypeID: '100',
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceMaritalStatusQuery.insuranceMaritalStatus;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getCatalogExpenseJob: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getLifeInsuranceExpenseJobQuery,
                        params: {
                            language: 'SPA',
                            insuranceTypeID: 100
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outLifeInsuranceJobQuery.ocupationList;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }), function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            getLifeInsuranceRelationshipQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getLifeInsuranceRelationshipQuery,
                        params: {
                            language: 'SPA',
                            insuranceTypeID:'100'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outLifeInsuranceRelationshipQuery.relationships;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }), function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            getCatalogPaymentTypeQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogPaymentTypeQuery,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outPaymentTypeQuery.paymentTypeList;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getCatalogBanks: function () {
                return $q(function( resolve, reject ) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogBanks,
                        params: {
                            language : 'SPA'
                        }
                    }).then(function success( response ) {
                        if ( response.data.outCommonHeader.result.result === 1 ) {
                            resolve({ success: true, info: response.data.outInsuranceBanksQuery.insuranceBanksCatalogData.bank });
                        }else{
                            reject( {success: false, info: response.data.outCommonHeader.result });
                        }
                    }, function error(){
                        reject( {success: false, type: 'not-found'} );
                    });
                });
            },

            getLifeInsuranceMunicipalityQuery: function (_idEntityFederative) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogMunicipalityCars + _idEntityFederative,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outMunicipalityQuery.municipalityCatalogData.municipality;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },

            getCatalogCardTypeQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getCatalogCardTypeQuery,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outInsuranceCardTypeQuery.cardTypeList;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });
                });
            },
            
            getServiceLifeInsuranceQuotation: function (_datos) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.getLifeInsuranceQuotation,
                        params: {
                            language: _datos.language,
                            insurancePolicyDate: _datos.insurancePolicyDate,
                            policyMaturityDate: _datos.policyMaturityDate,
                            agentCode: _datos.agentCode,
                            paymentManagerID: _datos.paymentManagerID,
                            smokerFlag: _datos.smokerFlag,
                            clientNumber: _datos.clientNumber,
                            adviserID: _datos.adviserID,
                            contractingData: JSON.stringify({
                                name: _datos.contractingData.name,
                                lastName: _datos.contractingData.lastName,
                                secondLastName: _datos.contractingData.secondLastName,
                                fiscalIDNumber: _datos.contractingData.fiscalIDNumber,
                                street: _datos.contractingData.street,
                                outdoorNumber: _datos.contractingData.outdoorNumber,
                                neighborhood: _datos.contractingData.neighborhood,
                                postalCode: _datos.contractingData.postalCode,
                                federalEntityID: _datos.contractingData.federalEntityID,
                                delegationMunicipalityID: _datos.contractingData.delegationMunicipalityID,
                                countryID: _datos.contractingData.countryID,
                                phoneNumber: _datos.contractingData.phoneNumber,
                                birthDate: _datos.contractingData.birthDate,
                                gender: _datos.contractingData.gender,
                                maritalStatusID: _datos.contractingData.maritalStatusID,
                                nacionality: _datos.contractingData.nacionality,
                                personType: _datos.contractingData.personType,
                                email: _datos.contractingData.email,
                                insuranceBeneficiaryTypeID: _datos.contractingData.insuranceBeneficiaryTypeID,
                                professionID: _datos.contractingData.professionID,
                                jobID: _datos.contractingData.jobID,
                                height: _datos.contractingData.height,
                                weight: _datos.contractingData.weight,
                                age: _datos.contractingData.age
                            }),

                            basicCoverage: JSON.stringify({
                                insuredSum: _datos.accidentalDeathCoverage.insuredSum
                            }),
                            accidentalDeathCoverage: JSON.stringify({
                                insuredSum: _datos.accidentalDeathCoverage.insuredSum
                            })
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result.toString() === "1") {
                            _response = response.data.outLifeInsuranceQuotation;
                            resolve({
                                success: true,
                                info: _response,
                                response: response.data
                            });
                        } else {
                            resolve({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }), function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },
            
            getServiceLifeInsurancePolicyRegistration: function (_datos) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.getLifeInsurancePolicyRegistration,
                        params: {
                            language: _datos.language,
                            insurancePolicyDate: _datos.insurancePolicyDate,
                            policyMaturityDate: _datos.policyMaturityDate,
                            agentCode: _datos.agentCode,
                            paymentManagerID: _datos.paymentManagerID,
                            smokerFlag: _datos.smokerFlag,
                            clientNumber: _datos.clientNumber,
                            adviserID: _datos.adviserID,
                            chargeManager: _datos.chargeManager,
                            contractingData: JSON.stringify(_datos.contractingData),
                            insuredData: JSON.stringify(_datos.insuredData),
                            beneficiaryDataList: JSON.stringify(_datos.beneficiaryDataList),
                            basicCoverage: JSON.stringify(_datos.basicCoverage),
                            accidentalDeathCoverage: JSON.stringify(_datos.accidentalDeathCoverage),
                            bankingData: JSON.stringify(_datos.bankingData)
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outLifeInsurancePolicyRegistration;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            resolve({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }), function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },
            
            getServiceInsuranceBeneficiaryTypeQuery: function () {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getInsuranceBeneficiaryTypeQuery,
                        params: {
                            language: 'SPA',
                            insuranceTypeID: '100'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({
                                success: true,
                                info: response.data.outInsuranceBeneficiaryTypeQuery.beneficiary
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }), function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ServiceEmailSendingAsesoriaSolicitudUsuario: function (_mailTo, _nombre, _noPoliza, _agente, _smoke, ocupacion, kg, mts, edad, AMBT) {
                var urlSolicitudPRO = "https://zonaliados.mapfre.com.mx/impresionSeGA/TWImpSolicitudMarco.aspx?noPoliza=" + _noPoliza + "&sector=1&usuario=actinver&agente=" + _agente + "&eMail=&btnPoliza=N&RelSol=MEXICO|" + (_smoke === "false" ? "NO" : "SI") + "|" + ocupacion + "|TEMPORAL 1 AÑO|" + kg + "|" + mts + "|" + edad + "|X|X|X|X|";
                var urlSolicitudUAT = "https://10.184.62.77/impresionSeGA/TWImpSolicitudMarco.aspx?noPoliza=" + _noPoliza + "&sector=1&usuario=actinver&agente=" + _agente + "&eMail=&btnPoliza=N&RelSol=MEXICO|" + (_smoke === "false" ? "NO" : "SI") + "|" + ocupacion + "|TEMPORAL 1 AÑO|" + kg + "|" + mts + "|" + edad + "|X|X|X|X|";

                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.sendCustomizedEmailNotificationSending,
                        params: {
                            language: 'SPA',
                            emailFrom: 'seguros@actinver.com.mx',
                            idTemplate: 'buildDBTemplate|26',
                            emailSubject: 'Estas a un paso de obtener tu Seguro de Vida Inversión Actinver.',
                            mailTo: [_mailTo],
                            mailCC: [''],
                            nombre: _nombre,
                            noPoliza: _noPoliza,
                            urlSolicitud: (AMBT === 'PRO' ? urlSolicitudPRO : urlSolicitudUAT)
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCommonHeader.result.messages[0];
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            resolve({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }),
                    function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ServiceEmailSendingAsesoriaNotificacionAsesor: function (_mailTo, _noPoliza) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.sendCustomizedEmailNotificationSending,
                        params: {
                            language: 'SPA',
                            emailFrom: 'seguros@actinver.com.mx',
                            idTemplate: 'buildDBTemplate|27',
                            emailSubject: 'La póliza ' + _noPoliza + ' esta lista en el módulo.',
                            mailTo: [_mailTo],
                            mailCC: [''],
                            noPoliza: _noPoliza
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCommonHeader.result.messages[0];
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            resolve({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }),
                    function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ServiceEmailSendingAsesoriaPolizaLista: function (_mailTo, _nombre, _noPoliza, _inicioVigencia, _finVigencia, _urlPoliza, _urlSolicitud, _urlCondiciones) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'POST',
                        url: URLS.sendCustomizedEmailNotificationSending,
                        params: {
                            language: 'SPA',
                            emailFrom: 'seguros@actinver.com.mx',
                            idTemplate: 'buildDBTemplate|26',
                            emailSubject: 'Póliza emitida seguro de vida inversión Actinver ' + _noPoliza,
                            mailTo: [_mailTo],
                            mailCC: [''],
                            nombre: _nombre,
                            noPoliza: _noPoliza,
                            inicioVigencia: _inicioVigencia,
                            finVigencia: _finVigencia,
                            urlPoliza: _urlPoliza,
                            urlSolicitud: _urlSolicitud,
                            urlCondiciones: _urlCondiciones                            
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outCommonHeader.result.messages[0];
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            resolve({
                                success: false,
                                info: response.data.outCommonHeader.result
                            });
                        }
                    }),
                    function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ListaPolizasVida: function (employeeRole) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getPolizasVida,
                        params: {
                            language: 'SPA',
                            employeeRole: employeeRole
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.return.status === 1) {
                            _response = response.data.return.data.polizaVidaListRs;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.return
                            });
                        }
                    }),
                    function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ListaPolizasVidaUp: function (_noPoliza, _estatusPoliza) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.PolizaVidaUp,
                        params: {
                            language: 'SPA',
                            policyId: _noPoliza,
                            policyStatus: _estatusPoliza
                        }
                    }).then(function success(response) {
                        resolve({
                            success: true,
                            info: response
                        });
                    }),
                    function error() {
                        resolve({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            },

            ListaPolizasVidaAdd: function (_noPoliza, _polizaDate, _polizaDateEnd, _polizaAmount,
                _polizaStatus, _clientName, _clientLastname, _clientSecondname, _clientEmail, _idAgente, _agentEmail) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.PolizaVidaAdd,
                        params: {
                            language: 'SPA',
                            policyId: _noPoliza,
                            policyDate: _polizaDate,
                            policyDateEnd: _polizaDateEnd,
                            policyAmount: _polizaAmount,
                            policyStauts: _polizaStatus,
                            clientName: _clientName,
                            clientLastname: _clientLastname,
                            clientSecondname: _clientSecondname,
                            clientEmail: _clientEmail,
                            idAgente: _idAgente,
                            agentEmail: _agentEmail
                        }
                    }).then(function success(response) {

                        var _response;
                        if (response.data.return.status === 1) {
                            _response = response.data.return;
                            resolve({
                                success: true,
                                info: _response
                            });
                        } else {
                            reject({
                                success: false,
                                info: response.data.return
                            });
                        }
                    }),
                    function error() {

                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    };
                });
            }
        };
        
        return obj;
    }

    angular
        .module('actinver.controllers')
        .service('insuranceLifeSrv', insuranceLifeSrv);

})();
/* global moment */

(function () {
    'use strict';
    insuranceMainCtrl.$inject = ['insuranceMainSrv', '$uibModal', '$state', '$stateParams', 'pResumeSrv', '$scope', '$q', '$sessionStorage', 'CommonModalsSrv', 'accountModalSrv', '$rootScope', 'ErrorMessage'];
    angular
            .module('actinver.controllers')
            .controller('insuranceMainCtrl', insuranceMainCtrl);

    function insuranceMainCtrl(insuranceMainSrv, $uibModal, $state, $stateParams, pResumeSrv, $scope, $q, $sessionStorage, CommonModalsSrv, accountModalSrv, $rootScope, ErrorMessage) {
        var vm = this;

        vm.cleanForm = cleanForm;
        vm.clean = clean;
        vm.seleccionaPersonalidad = seleccionaPersonalidad;
        vm.buscar = true;

        vm.mostrarDatos = false;
        vm.nombreCliente = "";

        vm.personType = '1';
        vm.datosCliente = [];

        vm.client = '';
        vm.person = {};
        vm.contract = '';
        vm.personType = '1';
        vm.contractUser = 0;
        vm.fiscalIDNumber = "";
        vm.curp = "";
        vm.disabledRFC = false;

        var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
        vm.roles = user.roles;

        vm.validatePopup = false;

        vm.reinicia = reinicia;
        vm.pagina1 = pagina1;
        vm.pagina2 = pagina2;
        vm.pagina2regreso = pagina2regreso;
        vm.pagina3 = pagina3;
        vm.submitSearch = submitSearch;
        vm.cotizar = cotizar;
        vm.valCotizar = valCotizar;
        vm.valCotizarVida = valCotizarVida;
        vm.valCotizarCasas = valCotizarCasas;
        vm.cotizarNoCliente = cotizarNoCliente;
        vm.ValCotizarPyme= ValCotizarPyme;
        var model;

        vm.valCotizarProteccionMedica = valCotizarProteccionMedica;

        vm.stepForm = {
            step: 0,
            stepA: false,
            stepB: false,
            stepC: false,
            stepD: false,
            stepDB: false,
            stepE: false,
            stepF: false,
            stepG: false,
            stepH: false
        };

        pagina1();
        pagina2regreso();

        function clean() {
            vm.contract = null;
            vm.client = null;
            vm.person = null;
        }

        function cleanForm() {
            vm.stepForm = {
                step: 0,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false,
                stepDB: false,
                stepE: false,
                stepF: false,
                stepG: false,
                stepH: false
            };
        }

        function reinicia() {
            vm.numeroCliente = "";
            vm.emailUser = "";
            vm.personType = '1';

            vm.datosCliente = [];
            vm.nombres = "";
            vm.apePaterno = "";
            vm.apeMaterno = "";
            vm.contract = '';
            vm.fiscalIDNumber = "";
            vm.curp = "";
            vm.disabledRFC = false;
            vm.mostrarDatos = false;
            vm.nombreCliente = "";
            vm.birthDay = "";
            vm.client = '';
            vm.person = {};
            vm.validatePerson = false;
            vm.validatePopup = false;

            vm.tipoVehiculo = "";

            $stateParams = null;
        }

        function pagina1() {
            vm.contract = "";
            vm.validatePopup = false;

            vm.cleanForm();
            vm.stepForm.step = 1;
            vm.stepForm.stepA = true;

            vm.buscar = true;
            vm.tipoPersonalidad = false;
        }

        function pagina2regreso() {
            $scope.$parent.agentDisabled = false;
            
            if ($stateParams.model) {
                model = $stateParams.model;

                vm.numeroCliente = model.numeroCliente;
                vm.emailUser = model.emailUser;
                vm.tipoVehiculo = model.tipoVehiculo;
                vm.personType = model.personType;

                vm.datosCliente = model.datosCliente;
                vm.nombres = model.nombres;
                vm.apePaterno = model.apePaterno;
                vm.apeMaterno = model.apeMaterno;
                vm.contract = model.contract;
                vm.fiscalIDNumber = model.fiscalIDNumber;
                vm.curp = model.curp;
                vm.disabledRFC = model.disabledRFC;
                vm.mostrarDatos = model.mostrarDatos;
                vm.nombreCliente = model.nombreCliente;
                vm.birthDay = model.birthDay;
                vm.client = model.client;
                vm.person = model.person;
                vm.validatePopup = model.validatePopup;
                vm.validatePerson = model.validatePerson;
                vm.roles = model.roles;
                
                if (model.numeroCliente !== "") {
                    pagina2();
                    submitSearch();
                }
            }
        }

        function pagina2() {
            vm.cleanForm();
            vm.stepForm.step = 2;
            vm.stepForm.stepB = true;
        }

        function pagina3() {
            vm.cleanForm();
            vm.stepForm.step = 3;
            vm.stepForm.stepB = true;
        }


        function seleccionaPersonalidad(persona) {
            vm.personType = persona;
            pagina2();
        }

        function cotizarNoCliente() {
            vm.datosCliente = "";
            vm.fiscalIDNumber = "";
            vm.curp = "";
            vm.disabledRFC = false;
            vm.nombreCliente = "";
            vm.nombres = "";
            vm.apePaterno = "";
            vm.apeMaterno = "";
            vm.contract = "";
            vm.mostrarDatos = false;
            vm.numeroCliente = "9999";
            vm.birthDay = "";
            vm.fechaNacimiento = "";

            vm.buscar = false;
            vm.tipoPersonalidad = true;

        }

        function llenaModelo() {
            var mod = {
                numeroCliente: vm.numeroCliente,
                emailUser: vm.emailUser,
                tipoVehiculo: vm.tipoVehiculo,
                personType: vm.personType,
                datosCliente: vm.datosCliente,
                nombres: vm.nombres,
                apePaterno: vm.apePaterno,
                apeMaterno: vm.apeMaterno,
                contract: vm.contract,
                fiscalIDNumber: vm.fiscalIDNumber,
                curp: vm.curp,
                disabledRFC: vm.disabledRFC,
                mostrarDatos: vm.mostrarDatos,
                nombreCliente: vm.nombreCliente,
                birthDay: vm.birthDay,
                client: vm.client,
                person: vm.person,
                validatePopup: vm.validatePopup,
                validatePerson: vm.validatePerson,
                roles: vm.roles,
                phoneUser: vm.phoneUser
                
            };

            return mod;
        }

        function valCotizar() {
            //pagina3();
            var sendModel = llenaModelo();
            $scope.$parent.agentDisabled = true;
            $state.go('insurance.cars', {model: sendModel});
        }
        
        
        function valCotizarVida() {
            //pagina3();
            var sendModel = llenaModelo();
            $scope.$parent.agentDisabled = true;
            $state.go('insurance.life', {model: sendModel});
        }

        
        function ValCotizarPyme(){
            if ($scope.$parent.agentLength <= 0) {
                CommonModalsSrv.warning("Estimado usuario, te informamos que aún no estas registrado en esta plataforma, "
                    + "por favor ponte en contacto con el equipo de seguros en la extensión 4444 para solicitar tu acceso.");
                //return;
            }

            if (vm.nombreCliente !== "" && vm.validatePopup === false) {
                CommonModalsSrv.confirm("¿" + vm.nombreCliente + " es el asegurado titular de la cuenta?")
                        .result.then(
                                function () {
                                    var _validateEmail = (typeof vm.datosCliente.email === 'undefined') ? false : true;
                                    if (_validateEmail) {
                                        cotizar(true, vm.nombreCliente, vm.datosCliente.email[0].email);
                                    } else {
                                        cotizar(false, "", "");
                                    }
                                    vm.validatePopup = true;

                                    var sendModel = llenaModelo();
                                    $scope.$parent.agentDisabled = true;
                                    $state.go('insurance.pyme', {model: sendModel});
                                }
                        ).catch(function (res) {
                    if ((res === "cancel" || res === "escape key press" || res === "backdrop click")) {
                        vm.client = '';
                        vm.person = {};
                        vm.contract = '';
                        vm.datosCliente = [];
                        vm.fiscalIDNumber = "";
                        vm.curp = "";
                        vm.disabledRFC = false;
                        vm.nombreCliente = "";
                        vm.nombres = "";
                        vm.apePaterno = "";
                        vm.apeMaterno = "";
                        vm.contract = "";
                        vm.validatePopup = true;
                        vm.mostrarDatos = false;
                        cotizar(false, "", "");

                        var sendModel = llenaModelo();
                        $scope.$parent.agentDisabled = true;
                        $state.go('insurance.pyme', {model: sendModel});
                    }
                });
            } else {
                var sendModel = llenaModelo();
                $scope.$parent.agentDisabled = true;
                $state.go('insurance.pyme', {model: sendModel});
            }
        }
          
        
        
        function valCotizarCasas() {
            if ($scope.$parent.agentLength <= 0) {
                CommonModalsSrv.warning("Estimado usuario, te informamos que aún no estas registrado en esta plataforma, "
                    + "por favor ponte en contacto con el equipo de seguros en la extensión 4444 para solicitar tu acceso.");
                //return;
            }

            if (vm.nombreCliente !== "" && vm.validatePopup === false) {
                CommonModalsSrv.confirm("¿" + vm.nombreCliente + " es el asegurado titular de la cuenta?")
                        .result.then(
                                function () {
                                    var _validateEmail = (typeof vm.datosCliente.email === 'undefined') ? false : true;
                                    if (_validateEmail) {
                                        cotizar(true, vm.nombreCliente, vm.datosCliente.email[0].email);
                                    } else {
                                        cotizar(false, "", "");
                                    }
                                    vm.validatePopup = true;

                                    var sendModel = llenaModelo();
                                    sendModel.flujo = 1;
                                    $scope.$parent.agentDisabled = true;
                                    $state.go('insurance.houses', {model: sendModel});
                                }
                        ).catch(function (res) {
                    if ((res === "cancel" || res === "escape key press" || res === "backdrop click")) {
                        vm.client = '';
                        vm.person = {};
                        vm.contract = '';
                        vm.datosCliente = [];
                        vm.fiscalIDNumber = "";
                        vm.curp = "";
                        vm.disabledRFC = false;
                        vm.nombreCliente = "";
                        vm.nombres = "";
                        vm.apePaterno = "";
                        vm.apeMaterno = "";
                        vm.contract = "";
                        vm.validatePopup = true;
                        vm.mostrarDatos = false;
                        cotizar(false, "", "");

                        var sendModel = llenaModelo();
                        sendModel.flujo = 1;
                        $scope.$parent.agentDisabled = true;
                        $state.go('insurance.houses', {model: sendModel});
                    }
                });
            } else {
                var sendModel = llenaModelo();
                sendModel.flujo = 1;
                $scope.$parent.agentDisabled = true;
                $state.go('insurance.houses', {model: sendModel});
            }
        }

        function calcularEdad(rfc){
            var log = moment(new Date()).format("YY")
            var fecha  = rfc.substring(3, 9);
            var anio = fecha.substring(0,2);
            var mes = fecha.substring(2,4);
            var dia = fecha.substring(4,6);
            if(anio>log){
                anio = "19"+anio;
            }else{
                anio= "20"+anio;
            }
            fecha = dia+"/"+mes+"/"+anio;
            return fecha;
        }

        function cotizar(personaExistente, nombreCompleto, emailUser) {

            vm.validatePerson = personaExistente;

            if (vm.validatePerson === true) {
                vm.emailUser = emailUser;
            }

        }

        function getPhone(datosCliente) {
            var num = new Number((typeof datosCliente.phoneNumber === 'undefined') ? 0 : datosCliente.phoneNumber);
            var lada = new Number((typeof datosCliente.areaCode === 'undefined') ? 0 : datosCliente.areaCode);
            vm.phoneUser = lada.toString() + num.toString();
        }

        function valCotizarProteccionMedica() {
            
            if (vm.datosCliente) {
                if (vm.datosCliente.email) {
                    cotizar(true, vm.nombreCliente, vm.datosCliente.email[0].email);
                } else {
                    cotizar(false, "", "");
                }
                if (vm.datosCliente.telephoneData) {
                    getPhone(vm.datosCliente.telephoneData[0]);
                }
            }

            $scope.$parent.agentDisabled = true;
            var sendModel = llenaModelo();
            $state.go('insurance.medical', {model: sendModel});
        }

        function submitSearch() {
            if (vm.client) {
                insuranceMainSrv.getContractByAdviser(vm.client).then(
                        function successCallback(response) {
                            if (response.success) {
                                vm.personType = response.data.client[0].personType;
                                vm.datosCliente = response.data.client[0];
                                vm.nombres = response.data.client[0].name;
                                vm.apePaterno = response.data.client[0].lastName;
                                vm.apeMaterno = response.data.client[0].secondLastName;
                                vm.contract = response.data.client[0].contractNumber;
                                vm.fiscalIDNumber = response.data.client[0].fiscalIDNumber;
                                vm.curp = response.data.client[0].curp;
                                vm.disabledRFC = true;
                                vm.mostrarDatos = true;
                                vm.numeroCliente = vm.client;

                                getPhone(vm.datosCliente.telephoneData[0]);

                                try {
                                    vm.contract = response.data.contract[0].contractNumber;
                                } catch (e) {
                                    vm.contract = "";
                                }

                                if (vm.personType === '1') {
                                    vm.nombreCliente = response.data.client[0].name + " " + response.data.client[0].lastName + " " + response.data.client[0].secondLastName;
                                    vm.birthDay = moment(response.data.client[0].birthDate).format('DD/MM/YYYY');
                                } else {
                                    vm.nombreCliente = response.data.client[0].companyName;
                                    //vm.birthDay = moment(response.data.client[0].registryData).format('DD/MM/YYYY');
                                    vm.birthDay = calcularEdad(vm.fiscalIDNumber);
                                }
                                pagina2();

                            } else {
                                CommonModalsSrv.error(response.msg);
                                cotizarNoCliente();
                            }
                        }, function errorCallback(error) {
                    if (error.type === 'not-found') {
                        $scope.operations.showSystemError();
                        cotizarNoCliente();
                    } else {
                        CommonModalsSrv.error(ErrorMessage.createError(error.messages));
                        cotizarNoCliente();
                    }
                });
            } else if (vm.contract) {

                insuranceMainSrv.getClientInfo(vm.contract, vm.contract, 999).then(//BANCO
                        function successCallback(response) {
                            vm.personType = response.info[0].personType;
                            vm.datosCliente = response.info[0];//Datos cliente
                            vm.nombres = response.info[0].name;
                            vm.apePaterno = response.info[0].lastName;
                            vm.apeMaterno = response.info[0].secondLastName;
                            vm.fiscalIDNumber = response.info[0].fiscalIDNumber;
                            vm.curp = response.info[0].curp;
                            vm.disabledRFC = true;
                            vm.mostrarDatos = true;
                            vm.numeroCliente = response.clientId;
                            //vm.birthDay = moment(response.info[0].birthDate).format('DD/MM/YYYY');
                            getPhone(vm.datosCliente.telephoneData[0]);
                            if (vm.personType === '1') {
                                vm.nombreCliente = response.info[0].name + " " + response.info[0].lastName + " " + response.info[0].secondLastName;
                                vm.birthDay = moment(response.info[0].birthDate).format('DD/MM/YYYY');
                            } else {
                                vm.nombreCliente = response.info[0].companyName;
                                //vm.birthDay = moment(response.info[0].registryData).format('DD/MM/YYYY');
                                vm.birthDay =  calcularEdad(vm.fiscalIDNumber);

                            }
                            pagina2();
                        }, function errorCallback(error) {
                    insuranceMainSrv.getClientInfo(vm.contract, vm.contract, 998).then(///CASA
                            function successCallback(response) {
                                vm.personType = response.info[0].personType;
                                vm.datosCliente = response.info[0];//Datos cliente
                                vm.nombres = response.info[0].name;
                                vm.apePaterno = response.info[0].lastName;
                                vm.apeMaterno = response.info[0].secondLastName;
                                vm.fiscalIDNumber = response.info[0].fiscalIDNumber;
                                vm.curp = response.info[0].curp;
                                vm.disabledRFC = true;
                                vm.mostrarDatos = true;
                                vm.numeroCliente = response.clientId;
                                //vm.birthDay = moment(response.info[0].birthDate).format('DD/MM/YYYY');
                                getPhone(vm.datosCliente.telephoneData[0]);
                                if (vm.personType === '1') {
                                    vm.nombreCliente = response.info[0].name + " " + response.info[0].lastName + " " + response.info[0].secondLastName;
                                    vm.birthDay = moment(response.info[0].birthDate).format('DD/MM/YYYY');
                                } else {
                                    vm.nombreCliente = response.info[0].companyName;
                                    //vm.birthDay = moment(response.info[0].registryData).format('DD/MM/YYYY');
                                    vm.birthDay =  calcularEdad(vm.fiscalIDNumber);
                                }
                                pagina2();

                            }, function errorCallback() {
                        CommonModalsSrv.error(error.info.error.responseMessage);
                        cotizarNoCliente();
                    });
                });

            } else if (vm.person) {
                var message;
                if (vm.person.name) {
                    var search = (vm.person.name ? vm.person.name.toUpperCase() : "");
                    accountModalSrv.detail({
                        list: [],
                        wordToSearch: search,
                        personType: '1'
                    }).result.then(
                            function () {
                                insuranceMainSrv.getContractByAdviser($rootScope.selectedClient.uniqueClientNumber)
                                        .then(function successCallback(response) {
                                            if (response.success) {
                                                vm.personType = response.data.client[0].personType;
                                                vm.datosCliente = response.data.client[0];
                                                vm.nombres = response.data.client[0].name;
                                                vm.apePaterno = response.data.client[0].lastName;
                                                vm.apeMaterno = response.data.client[0].secondLastName;
                                                vm.fiscalIDNumber = response.data.client[0].fiscalIDNumber;
                                                vm.curp = response.data.client[0].fiscalIDNumber;
                                                vm.numeroCliente = response.data.client[0].clientNumber;
                                                vm.disabledRFC = true;
                                                try {
                                                    vm.contract = response.data.contract[0].contractNumber;

                                                } catch (e) {
                                                    vm.contract = "";
                                                }
                                                vm.mostrarDatos = true;
                                                if (vm.personType === '1') {
                                                    vm.nombreCliente = response.data.client[0].name + " " + response.data.client[0].lastName + " " + response.data.client[0].secondLastName;
                                                    vm.birthDay = moment(response.data.client[0].birthDate).format('DD/MM/YYYY');
                                                } else {
                                                    vm.nombreCliente = response.data.client[0].companyName;
                                                    //vm.birthDay = moment(response.data.client[0].registryData).format('DD/MM/YYYY');
                                                    vm.birthDay =  calcularEdad(vm.fiscalIDNumber);
                                                }
                                                pagina2();
                                            } else {
                                                CommonModalsSrv.error(response.msg);
                                                cotizarNoCliente();
                                            }
                                        }, function errorCallback(error) {
                                            var message;
                                            if (error.type === 'not-found') {
                                                $scope.operations.showSystemError();
                                                cotizarNoCliente();
                                            } else {
                                                message = error.info.error.responseMessage ? error.info.error.responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                                CommonModalsSrv.error(message);
                                                cotizarNoCliente();
                                            }
                                        });
                            });
                } else if (vm.person.fiscalIDNumber) {
                    insuranceMainSrv.getClientName(vm.person)
                            .then(function successCallback(response) {
                                if (response.info[0]) {
                                    accountModalSrv.detail({
                                        list: response.info,
                                        wordToSearch: '',
                                        personType: '2'
                                    }).result.then(function () {
                                        insuranceMainSrv.getContractByAdviser($rootScope.selectedClient.clientNumber)
                                                .then(function successCallback(response) {
                                                    if (response.success) {
                                                        vm.datosCliente = response.data.client[0];
                                                        vm.nombreCliente = response.data.client[0].name + " " + response.data.client[0].lastName + " " + response.data.client[0].secondLastName;
                                                        vm.nombres = response.data.client[0].name;
                                                        vm.apePaterno = response.data.client[0].lastName;
                                                        vm.apeMaterno = response.data.client[0].secondLastName;
                                                        vm.fiscalIDNumber = response.data.client[0].fiscalIDNumber;
                                                        vm.curp = response.data.client[0].curp;
                                                        vm.disabledRFC = true;
                                                        try {
                                                            vm.contract = response.data.contract[0].contractNumber;

                                                        } catch (e) {
                                                            vm.contract = "";
                                                        }
                                                        vm.mostrarDatos = true;
                                                        pagina2();
                                                    } else {
                                                        CommonModalsSrv.error(response.msg);
                                                        cotizarNoCliente();
                                                    }
                                                }, function errorCallback(error) {
                                                    var message;
                                                    if (error.type === 'not-found') {
                                                        $scope.operations.showSystemError();
                                                        cotizarNoCliente();
                                                    } else {
                                                        message = error.info.error.responseMessage ? error.info.error.responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                                        CommonModalsSrv.error(message);
                                                        cotizarNoCliente();
                                                    }
                                                });
                                    });
                                } else {
                                    message = 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                    CommonModalsSrv.error(message);
                                    cotizarNoCliente();
                                }
                            }, function errorCallback(error) {
                                if (error.type === 'not-found') {
                                    $scope.operations.showSystemError();
                                    cotizarNoCliente();
                                } else {
                                    message = error.info.messages ? error.info.messages[0].responseMessage : 'No se han encontrado los datos con el criterio seleccionado.<br />Te pedimos vuelvas a intentar.';
                                    CommonModalsSrv.error(message);
                                    cotizarNoCliente();
                                }
                            });
                } else {
                    CommonModalsSrv.info("Se cotizará a un no cliente");
                    cotizarNoCliente();
                }
            }
            pagina2();
        }





    }

})();

(function () {
    'use strict';

    insuranceMainSrv.$inject = ['URLS', '$q', '$http', '$filter'];
    function insuranceMainSrv(URLS, $q, $http, $filter) {


        var obj = {

            getContractByAdviser: function (_clientNumber) {
                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContractByAdviser + _clientNumber,
                        params: {
                            language: 'SPA'

                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({
                                success: true,
                                data: response.data.result,
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        } else {
                            resolve({
                                success: false,
                                data: [],
                                msg: response.data.outCommonHeader.result.messages[0].responseMessage
                            });
                        }
                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found',
                            data: [],
                            msg: 'Ha ocurrido un error Interno'
                        });
                    });
                });
            },

            getClientInfo: function (type, search, contractType) {
                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getClientInfo,
                        params: {
                            descripcion: search,
                            typeQuery: type,
                            language: 'SPA',
                            titularFlag: true,
                            bankingArea: contractType,
                            contractNumber: type === 1 ? '' : search,
                            clientNumber: type === 1 ? search : ''
                        }
                    }).then(function success(response) {
                        var _response;
                        var _clientId;
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.messages[0].responseCategory !== 'ERROR') {
                            _response = response.data.outClientOrContractClientInfoQuery.client;
                            _clientId = response.data.outClientOrContractClientInfoQuery.client[0].clientNumber;
                            resolve({
                                success: true,
                                info: _response,
                                clientId: _clientId
                            });
                        } else {
                            response.data = {
                                error: {
                                    responseMessage: response.data.outCommonHeader.result.messages[0].responseMessage
                                }
                            };
                            reject({
                                success: false,
                                info: response.data,
                                type: 'empty'
                            });
                        }

                    }, function error() {
                        reject({
                            success: false,
                            type: 'not-found'
                        });
                    });

                });

            },

            /**
             * Get client information
             * @param {string} _client - Search type
             * @return  {object}
             */

            getClientName: function (_client) {
                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getClientName,
                        params: {
                            language: 'SPA',
                            lastName: _client.lastName ? _client.lastName.toUpperCase() : ' ',
                            surname: _client.surname ? '' : '',
                            name: _client.name ? _client.name.toUpperCase() : ' ',
                            companyName: _client.companyName,
                            personType: _client.name ? 1 : 2,
                            tIN: _client.fiscalIDNumber
                        }
                    }).then(function success(response) {
                        var _response;
                        if (response.data.outCommonHeader.result.result === 1) {
                            _response = response.data.outClientInfoQuery.clientList.client;
                            resolve({success: true, info: _response});
                        } else {
                            reject({success: false, info: response.data.outCommonHeader.result});
                        }
                    }, function error() {
                        reject({success: false, type: 'not-found'});
                    });
                });
            },

            /**
             * Get current contracts list
             * @param {string} client - Search item
             * @return  {object}
             */
            getContracts: function (client, contractType) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContracts,
                        params: {
                            language: 'SPA',
                            bankingArea: contractType || 999,
                            clientID: client
                        }
                    }).then(function success(response) {
                        if (typeof response !== 'undefined' && response.data.outContractsBalancesByPortfolioQuery) {
                            resolve({success: true, contracts: response.data.outContractsBalancesByPortfolioQuery.contractInformation});
                        } else {
                            reject({success: false, data: response.data, type: 'empty'});
                        }

                    }, function error() {
                        reject({success: false, type: 'not-found'});
                    });

                });

            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getContractHistorical: function (contract) {

                return $q(function (resolve, reject) {
                    $http({

                        method: 'GET',
                        url: URLS.getContractHistorical,
                        params: {
                            language: 'SPA',
                            contractNumber: '[{"idContrato":"' + contract + '"}]'
                        }
                    }).then(function success(response) {

                        if (response.data.outCommonHeader.result.result === 1) {

                            var info = response.data.outBrokerMonthlyBalanceQuery.clients.client[0],
                                    empty = true, historicalInfo = [];
                            //generamos los meses para el año
                            historicalInfo = getMonthsYears();
                            angular.forEach(info.historicalInfo, function (data) {
                                if (empty && data.amount !== 0) {
                                    empty = false;
                                }
                                for (var j = 0; j < historicalInfo.length; j++) {
                                    if (historicalInfo[j].paymentPeriod === data.paymentPeriod) {
                                        historicalInfo[j].amount = parseFloat(data.amount);
                                        j = historicalInfo.length;
                                    }
                                }
                            });
                            info.historicalInfo = historicalInfo;
                            resolve({success: true, historical: info, empty: empty});
                        } else {
                            resolve({success: false, data: response.data.outCommonHeader.result});
                        }
                    }, function error() {
                        reject({success: false});
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             * @return  {object}
             */
            getBrokerHistoricalBalanceQuery: function (_contractNumber, _numberPeriods) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getBrokerHistoricalBalanceQuery + '/' + _contractNumber + '/' + _numberPeriods,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {

                            var info = response.data.outBrokerHistoricalBalanceQuery.balanceFound,
                                    empty = true, historicalInfo = [], historical = {}, contractNumbre;

                            historicalInfo = getMonthsYears();

                            angular.forEach(info, function (data) {
                                if (empty && data.contractBalance !== 0) {
                                    empty = false;
                                }
                                for (var j = 0; j < historicalInfo.length; j++) {
                                    if (historicalInfo[j].paymentPeriod === data.period) {
                                        historicalInfo[j].amount = parseFloat(data.contractBalance);
                                        j = historicalInfo.length;
                                    }
                                }
                                contractNumbre = data.contractNumber;
                            });

                            historical = {contractNumber: contractNumbre, historicalInfo: historicalInfo};
                            resolve({success: true, historical: historical, empty: empty});
                        } else {
                            resolve({success: false, data: response.data.outCommonHeader.result});
                        }
                    }, function error() {
                        reject({success: false});
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getBankContractBalance: function (_contractNumber) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.bankPortfolioQuery + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1 && response.data.outBankPortfolioQuery.bankPortfolio !== null) {
                            resolve({success: true, contractNumber: _contractNumber, totalBalance: response.data.outBankPortfolioQuery.bankPortfolio.bankPortfolioElement[10].actualValue});
                        } else {
                            resolve({success: false, data: response.data.outCommonHeader.result});
                        }
                    }, function error() {
                        reject({success: false});
                    });
                });
            },

            /**
             * Get unique contract information
             * @param {string} contract - Contract ID
             */
            getPortfolioGlobalDetailQuery: function (_contractNumber) {

                return $q(function (resolve, reject) {
                    $http({
                        method: 'GET',
                        url: URLS.getPortfolioGlobalDetailQuery + _contractNumber,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        if (response.data.outCommonHeader.result.result === 1) {
                            resolve({success: true, contractNumber: _contractNumber, totalBalance: response.data.outPortfolioGlobalDetailQuery.totalValuation});
                        } else {
                            resolve({success: false, data: response.data.outCommonHeader.result});
                        }
                    }, function error() {
                        reject({success: false});
                    });
                });
            },

            getContractInfoDetail: function (_model) {

                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getContractInfoDetail + _model.contractNumber + '/' + _model.bankingArea,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {


                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            resolve(response.data.outSimplifiedBankContractQuery.contract);
                        } else {
                            reject(response.data.outCommonHeader.result);
                        }
                    }, function error(error) {
                        reject(error);
                    });

                });

            },

            getBankContractsByClientQuery: function (wordToSearch, page, rowsByPage) {
                return $q(function (resolve, reject) {

                    $http({
                        method: 'GET',
                        url: URLS.getBankContractsByClientQuery + wordToSearch + '/1/Modulo Asesor/' + page + '/' + rowsByPage,
                        params: {
                            language: 'SPA'
                        }
                    }).then(function success(response) {
                        var record = {
                            success: true,
                            data: null,
                            msg: response.data.outCommonHeader.result.messages[0].responseMessage
                        };
                        if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                            record.data = response.data.outBankContractsByClientQuery;
                            resolve(record);
                        } else {
                            record.success = false;
                            resolve(record);
                        }
                    }, function error( ) {
                        reject({success: false, data: null, msg: "Error Interno"});
                    });
                });
            }







        };

        return obj;

    }

    angular
            .module('actinver.controllers')
            .service('insuranceMainSrv', insuranceMainSrv);

})();

/* global moment */

(function () {
    'use strict';
    insuranceMedicalCtrl.$inject = ['validateIn', 'insuranceMedicalSrv', 'insuranceMedicalEmission', 'insuranceMedicalQuotation', 'insuranceHousesSrv', '$state', '$stateParams', '$scope', '$timeout', 'CommonModalsSrv'];
    angular
        .module('actinver.controllers')
        .controller('insuranceMedicalCtrl', insuranceMedicalCtrl);

    function insuranceMedicalCtrl(validateIn, insuranceMedicalSrv, insuranceMedicalEmission, insuranceMedicalQuotation, insuranceHousesSrv, $state, $stateParams, $scope, $timeout, CommonModalsSrv) {
        var vm = this;
        var model = $stateParams.model, redHospAmp;
        vm.numeroCliente = model ? model.numeroCliente : "";
        vm.contrato = model ? model.contract : "";
        vm.cliente = model ? model.client : "";
        vm.person = model ? model.person : {};
        vm.primaN = "";
        vm.flujoCompleto = true;

        vm.datosCliente = model ? model.datosCliente : undefined;
        vm.nombres = model ? model.nombres : "";
        vm.primerApellido = model ? model.apePaterno : "";
        vm.segundoApellido = model ? model.apeMaterno : "";
        vm.nombreCliente = model ? model.nombreCliente : "";
        vm.fechaNacimiento = model ? model.birthDay : "";
        vm.fiscalIDNumber = model ? model.fiscalIDNumber : "";
        vm.email = model ? model.emailUser : "";
        vm.tipoPersona = model ? model.personType : '1';
        vm.telefono = model ? model.phoneUser : "";

        vm.disabledRFC = model ? model.disabledRFC : false;
        vm.mostrarDatos = model ? model.mostrarDatos : false;
        vm.validatePopup = model ? model.validatePopup : false;
        vm.validatePerson = model ? model.validatePerson : false;
        vm.roles = model ? model.roles : [];
        
        vm.sexo = undefined; // sexo del cliente actinver, se llenará cuando se
        // agregue a la lista de dependientes con el valor de sexoCliente
        vm.sexoCliente = "Masculino";
        vm.checkDisabled = true;
       
        vm.fechaNacimientoCliente = moment();
        

        // vm.cuestionarioMedico = getCuestionarioEmision();
        vm.clienteEsTitularAsegurado='2';
        vm.typePeopleContract = "1";
        vm.emitContratante = {
            sexContract : 'masculino',
            fechaNacimiento : moment().subtract(18, 'years')
        };
        vm.faltaTitular = true;
        vm.primaNeta = 3698;
        vm.emission = {};
        vm.indexFormaPago = 0;
        vm.indexPaquete = 0;
        vm.indexPago = 0;
        vm.dependientes = [];
        vm.dependientesFront = [];
        vm.paquetes = [];
        vm.asegurados = [];
        vm.mensajeN = false;
        vm.toggleCoberturaText = "OCULTAR";
        vm.ListOcupacion = getCatalagoOcupaciones();
        vm.ListNumAsegurados = getCatalogoNumAsegurados();
        vm.ListMedicalEstados = getCatalogoMedicalEntidades();  
        vm.ListMedicalParentescos = getCatalogoMedicalParentescos();
        vm.ListMedicalDeportes = getCatalagoDeportes();
        vm.ListMedicalProfesiones = getCatalogoMedicalProfesiones();
        vm.ListMedicalIdentificacion = getCatalogoIdentificacion();
        vm.ListMedicalLocacion;
        vm.ListMedicalLocacionEmission;
        vm.ListMunicipios = [];
        vm.validaMun = true;
        vm.validaMunEmission = true;
        vm.margenInferior = "Inferior";
        vm.bandera=undefined;
        vm.comboDependientes = [];
        
        vm.dataParentescoList = {};
        vm.dataOcupacionList = {};
        vm.dataDeporteList = {};
        
        vm.nombreBotonAgregar = "AGREGAR";
        vm.nombreBotonModificar = "MODIFICAR";
        vm.nombreBotonLimpiar = "LIMPIAR";
        vm.nombreBotonCancelar = "CANCELAR";
        vm.editandoCliente = false;
        vm.buttonNameClientData = vm.nombreBotonAgregar;
        vm.buttonNameCleanData = vm.nombreBotonLimpiar;
        
        vm.esValidoFirmar = false;
        
        
        vm.contractProfesion = null;
        vm.ListProfesionContract = [{ "id": "1", "text": "PROGRAMADOR" }, { "id": "2", "text": "ABOGADO" }, { "id": "3", "text": "PROJECT MANAGER" }, { "id": "4", "text": "CONTADOR" }];

        vm.Imc = [];
        
        // -------------Variables colorean colapsables-------------
        vm.colorCollapsables = "colorCollapsables";
        vm.colapse1 = false;
        vm.colapse2 = false;
        vm.colapse3 = false;
        vm.colapse4 = false;
        vm.colapse5 = false;
        vm.colapse6 = false;
        vm.colapse7 = false;
        vm.colapse8 = false;
        vm.colapse9 = false;
        //--------------Variables que colorean colapsables de emision---------------
        vm.colapseEmision1 = false;
        vm.colapseEmision2 = [];
        vm.colapseEmision3 = false;
        vm.colapseEmision4 = false;

        //---------Variables para cambio de pestañas cotizacion/emision/entrega---------

        vm.pestCotiza = true;
        vm.pestEmision = false;
        vm.pestEntrega = false;
        vm.trianguloAzul = "triangulo";
        vm.trianguloBlanco = "trianguloBlanco";
        vm.trianguloBorde = "trianguloBorde";
        // -------------------------Variables de avance entre páginas------------------
        
        getAvailableQuotation();
        
        vm.optionsdpx = {
            autoApply: true,
            showDropdowns: true,
            minDate: moment().subtract(65, 'years'),
            maxDate: moment(),
            singleDatePicker: true,
            locale: {
                format: "DD/MM/YYYY",
                daysOfWeek: [
                    "DO",
                    "LU",
                    "MA",
                    "MI",
                    "JU",
                    "VI",
                    "SA"
                ],
                monthNames: [
                    "Enero",
                    "Febrero",
                    "Marzo",
                    "Abril",
                    "Mayo",
                    "Junio",
                    "Julio",
                    "Agosto",
                    "Septiembre",
                    "Octubre",
                    "Noviembre",
                    "Diciembre"
                ],
                firstDay: 0
            },
            eventHandlers: {
                'apply.daterangepicker': function () {
                    calcularEdadCliente('cliente');
                    calcularRFCCliente();
                }
            }
        };

        vm.optionsdpxContract = {
            autoApply: true,
            showDropdowns: true,
            minDate: moment().subtract(100, 'years'),
            maxDate: moment().subtract(18, 'years'),
            singleDatePicker: true,
            locale: {
                format: "DD/MM/YYYY",
                daysOfWeek: [
                    "DO",
                    "LU",
                    "MA",
                    "MI",
                    "JU",
                    "VI",
                    "SA"
                ],
                monthNames: [
                    "Enero",
                    "Febrero",
                    "Marzo",
                    "Abril",
                    "Mayo",
                    "Junio",
                    "Julio",
                    "Agosto",
                    "Septiembre",
                    "Octubre",
                    "Noviembre",
                    "Diciembre"
                ],
                firstDay: 0
            },
            eventHandlers: {
                'apply.daterangepicker': function () {
                    calcularEdadCliente('contratante');
                    calcularRFCContratante();
                }
            }
        };
        
        $scope.sendEmailEmission = function(){
           var params = {
                'nombre': vm.emitContratante.nombres.toUpperCase() + " " + vm.emitContratante.primerApellido.toUpperCase() + " " + vm.emitContratante.segundoApellido.toUpperCase(),
                'numTramite': vm.emission.numeroTramite,
                'language': 'SPA',
                'emailFrom': 'seguros@actinver.com.mx',
                'idTemplate': 'buildDBTemplate|24',
                'emailSubject': 'Solicitud de póliza Gastos Médicos Folio ' + vm.emission.numeroTramite,
                'mailTo': vm.email,
                'mailCC': '',
            }

            insuranceMedicalQuotation.sendEmailEmision(params);
        }
        

        $scope.sendEmail = function(tipo){
            var params= {};
            var elemental = '';
            var redHospitalaria = '';
            var tabulador = '';
            var deducible = '';
            var gastosHospitalarios = '';
            var honorariosMedicos = '';
            var auxiliaresDeDiagnostico = '';
            var medicamentos = '';
            var ambulancia = '';
            var asistenciaTelefonica = '';
            var asistenciaEnViaje = '';
            var protesisYAparatosOrtopedicos = '';
            var rehabilitaciones = '';
            var tratamientosDentales = '';
            var tratamientosReconstructivosYEsteticos = '';
            var complicacionesDeGastosNoCubiertos = '';
            var procedimientosDeVanguardia = '';
            var padecimientosPreexistentesDeclarados = '';
            var padecimientosPreexistentesNoDeclarados = '';
            var homeopatiaQuiropracticaYAcupuntura = '';
            var psiquiatraYPsicologo = '';
            var emergenciaEnElExtranjero = '';
            var enfermedadesCatastroficasEnElExtranjero = '';
            var internacional = '';
            var dental = '';
            var vision = '';
            var prevision = '';
            var atencionNacionalTotal = '';
            var reduccionDeDeduciblePorAccidente = '';
            var hogar = '';
            var funeraria = '';
            var enfermedadesFrecuentes = '';
            var enfermedadesCatastroficas = '';
            var hombre = '';
            var cancer = '';
            var muerteAccidental = '';
            var perdidasOrganicas = '';
            var hospitalizacion = '';
            var maternidad = '';
            var mujer = '';
            var infantil = '';
            var incapacidad = '';
            var primaTotal = 0;
            var primaNeta = 0;
            var iva = 0;
            var gastosEspedicion = 0;
            var recargos = 0;
            var paquete = 0;
            var pago = 0;
            var coverageData = [];

                paquete = vm.paquetes[vm.indexPaquete];
                pago = vm.formasPago[vm.indexFormaPago].pagos[vm.indexPago];
                pago.montos.forEach(function(p){
                    if(p.cod_paquete === paquete.cod_paquete){
                        primaTotal= p.primatotal;
                        iva = p.impuestos;
                        gastosEspedicion = p.derechos;
                        primaNeta = p.primaneta;
                        recargos = p.recargos;
                    }
                });
                vm.grupos.forEach(function(grup){
                    if(grup.grupo_id === "GCE"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '1'){
                                elemental = cob.intervalos.sa.intervaloSelected.id;
                                redHospitalaria = cob.intervalos.redHosp.intervaloSelected.text;
                                tabulador = cob.intervalos.tabulador.intervaloSelected.text;
                                deducible =  cob.intervalos.deducible.intervaloSelected.id;
                            }
                            if(cob.cod_cob === '2'){
                                if(cob.sa_def === 'Amparada')
                                    gastosHospitalarios = 'AMPARADA';
                            }
                            if(cob.cod_cob === '3'){
                                if(cob.sa_def === 'Amparada')
                                    honorariosMedicos = 'AMPARADA';
                            }
                            if(cob.cod_cob === '4'){
                                if(cob.sa_def === 'Amparada')
                                    auxiliaresDeDiagnostico = 'AMPARADA';
                            }
                            if(cob.cod_cob === '5'){
                                if(cob.sa_def === 'Amparada')
                                    medicamentos = 'AMPARADA';
                            }
                            if(cob.cod_cob === '6'){
                                if(cob.sa_def === 'Amparada')
                                    ambulancia = 'AMPARADA';
                            }
                            if(cob.cod_cob === '10'){
                                if(cob.sa_def === 'Amparada')
                                    asistenciaTelefonica = 'AMPARADA';
                            }
                            if(cob.cod_cob === '11'){
                                if(cob.sa_def === 'Amparada')
                                    asistenciaEnViaje = 'AMPARADA';
                            }
                        });
                    }
                    if(grup.grupo_id === "GCH"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '12'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        protesisYAparatosOrtopedicos = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '13'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        rehabilitaciones = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '14'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        tratamientosDentales = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '15'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        tratamientosReconstructivosYEsteticos = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GC2"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '16'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        complicacionesDeGastosNoCubiertos = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '17'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        procedimientosDeVanguardia = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '18'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        padecimientosPreexistentesDeclarados = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '19'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        padecimientosPreexistentesNoDeclarados = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GEA"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '20'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        homeopatiaQuiropracticaYAcupuntura = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '21'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        psiquiatraYPsicologo = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GIE"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '22'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        emergenciaEnElExtranjero = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '23'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        enfermedadesCatastroficasEnElExtranjero = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '24'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        internacional = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GCO"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '25'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        dental = p.mod_chk === '1'? cob.intervalos.planDental.intervaloSelected.text : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '26'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        vision = p.mod_chk === '1'? cob.intervalos.planVision.intervaloSelected.text : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '28'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        maternidad = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '29'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        prevision = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '30'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        atencionNacionalTotal = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '31'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        reduccionDeDeduciblePorAccidente = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GAA"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '34'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        hogar = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '36'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        funeraria = p.mod_chk === '1'? 'AMPARADA' : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GTE"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '40'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        enfermedadesFrecuentes = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '41'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        enfermedadesCatastroficas = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '42'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        mujer = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '43'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        hombre = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '44'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        infantil = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '45'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        cancer = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '47'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        muerteAccidental = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '48'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        perdidasOrganicas = p.mod_chk === '1'? cob.intervalos.sa.intervaloSelected.id : '';
                                    }
                                });
                            }
                        });
                    }
                    if(grup.grupo_id === "GAE"){
                        grup.coberturas.forEach(function(cob){
                            if(cob.cod_cob === '50'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        hospitalizacion = p.mod_chk === '1'? cob.intervalos.saCarencia.intervaloSelected.id : '';
                                    }
                                });
                            }
                            if(cob.cod_cob === '51'){
                                cob.paquetes.forEach(function(p){
                                    if(p.cod_paquete === paquete.cod_paquete){
                                        incapacidad = p.mod_chk === '1'? cob.intervalos.saCarencia.intervaloSelected.id : '';
                                    }
                                });
                            }
                        });
                    }
                });

                
            
            params = {
                'language': 'SPA',
                'emailFrom': 'seguros@actinver.com.mx',
                'idTemplate':  'buildDBTemplate|22',
                'emailSubject': 'Num de Cotización '+ vm.jsonCotizacion.quotationNumber,
                'mailTo': vm.email,
                'mailCC': '',
                'elemental' : elemental,
                'redHospitalaria' : redHospitalaria,
                'tabulador' : tabulador,
                'deducible' : deducible,
                'gastosHospitalarios' : gastosHospitalarios,
                'honorariosMedicos' : honorariosMedicos,
                'auxiliaresDeDiagnostico' : auxiliaresDeDiagnostico,
                'medicamentos' : medicamentos,
                'ambulancia' : ambulancia,
                'asistenciaTelefonica' : asistenciaTelefonica,
                'asistenciaEnViaje' : asistenciaEnViaje,
                'protesisYAparatosOrtopedicos' : protesisYAparatosOrtopedicos,
                'rehabilitaciones' : rehabilitaciones,
                'tratamientosDentales' : tratamientosDentales,
                'tratamientosReconstructivosYEsteticos' : tratamientosReconstructivosYEsteticos,
                'complicacionesDeGastosNoCubiertos' : complicacionesDeGastosNoCubiertos,
                'procedimientosDeVanguardia' : procedimientosDeVanguardia,
                'padecimientosPreexistentesDeclarados' : padecimientosPreexistentesDeclarados,
                'padecimientosPreexistentesNoDeclarados' : padecimientosPreexistentesNoDeclarados,
                'homeopatiaQuiropracticaYAcupuntura' : homeopatiaQuiropracticaYAcupuntura,
                'psiquiatraYPsicologo' : psiquiatraYPsicologo,
                'emergenciaEnElExtranjero' : emergenciaEnElExtranjero,
                'enfermedadesCatastroficasEnElExtranjero' : enfermedadesCatastroficasEnElExtranjero,
                'internacional' : internacional,
                'dental' : dental,
                'vision' : vision,
                'prevision' : prevision,
                'atencionNacionalTotal' : atencionNacionalTotal,
                'reduccionDeDeduciblePorAccidente' : reduccionDeDeduciblePorAccidente,
                'hogar' : hogar,
                'funeraria' : funeraria,
                'enfermedadesFrecuentes' : enfermedadesFrecuentes,
                'enfermedadesCatastroficas' : enfermedadesCatastroficas,
                'hombre' : hombre,
                'cancer' : cancer,
                'muerteAccidental' : muerteAccidental,
                'perdidasOrganicas' : perdidasOrganicas,
                'hospitalizacion' : hospitalizacion,
                'incapacidad' : incapacidad,
                'iva' : iva,
                'maternidad' : maternidad,
                'coverageData' : JSON.stringify(coverageData),
                'mujer' : mujer,
                'infantil' : infantil,
                'gastosEspedicion' : gastosEspedicion,
                'primaNeta' : primaNeta,
                "recargos" : recargos,
                'primaTotalAnual' : primaTotal
            };

            if(tipo === 'cotizacion'){
                insuranceMedicalQuotation.sendEmailQuotation(params);
            }
        };

        vm.steps = { 
            search: false,
            cotizacion: false,
            recotizacion: false,
            emision: false,
            entrega: false
        };

        vm.showCollapseDatosCliente = false;
        vm.collapseInClassDatosCliente = false;
        vm.collapseInClassDatosRiesgo = true;
        vm.collapseDatosCliente = "desc";
        vm.collapseQuotationDetail = "plus";
        // vm.isPersonalizada = false;
        // vm.isPerfilador = false;


        vm.setArrows = setArrows;
        function setArrows(){
            vm.flechasCollapse = [];
            for(var i = 0; i< vm.grupos.length;i++){
                vm.flechasCollapse.push(false);
            }
            vm.toggleColapse = toggleColapse;
            function toggleColapse(indiceGrupo){
                vm.flechasCollapse[indiceGrupo] = !vm.flechasCollapse[indiceGrupo];
                
            }

        }

        vm.collQuotationDetail = collQuotationDetail;
        function collQuotationDetail() {
            vm.collapseQuotationDetail = vm.collapseQuotationDetail === "plus" ? "minus" : "plus";
        }
        
        vm.goRegresarMain = goRegresarMain;
        function goRegresarMain(){
            $state.go('insurance.main');
        }

            vm.goDatosRiesgo = goDatosRiesgo;
        function goDatosRiesgo() {
            vm.steps.search = false;
            vm.steps.entrega = false;
            vm.steps.cotizacion = true;
            //Si el flujo es completo el valor es true;
            vm.flujoCompleto = true;
            
            vm.collapseInClassDatosRiesgo = true;
            vm.dependientes = [];
            if (vm.cmd) {
                vm.cmd.estado = undefined;
                vm.cmd.municipio = undefined;
            }
            vm.clienteEsTitularAsegurado = '2';
            if (vm.dataNumAseguradosList) {
                vm.dataNumAseguradosList.type = undefined;
            }
            if (vm.dataParentescoList) {
                vm.dataParentescoList.type = vm.ListMedicalParentescos[0];
            }
        }
        vm.btnVolver = btnVolver;
        function btnVolver(){
            vm.steps.emision = false;
            vm.steps.entrega = false;
            if(vm.flujoCompleto){
                vm.steps.cotizacion = true;
                vm.steps.recotizacion = true;
            }else{
                vm.steps.recotizacion = false;
                vm.steps.cotizacion = false;
                getAvailableQuotation();
                vm.flujoCompleto = true;
            }
            vm.pestCotiza = true;
            vm.pestEmision = false;
            vm.trianguloAzul = "triangulo";
            vm.trianguloBorde = "trianguloBlanco";
        }

        vm.goCotizacion = goCotizacion;
        function goCotizacion() {
            getJsonCotizacion();
        }

        vm.goRecotizacion = goRecotizacion;
        function goRecotizacion() {
           
            
            vm.recotizacionDisabled = true;
            vm.emailDisabled = true;
            
            getJsonRecotizacion();
        }
        
        vm.createEmisionAmbiente = createEmisionAmbiente;
        function createEmisionAmbiente(){
            vm.ListGiroMercantil = getCatalogoGiroMercantil();
            vm.ListNacionalidad = getMedicalNacionalidad();
            asignaNacionalidadDefault();
            vm.getCuestionarioEmision = getCuestionarioEmision();
        }
        
        vm.goEmision = goEmision;
        function goEmision() {
            
            vm.ListMedicalLocacion=[];
            getCatalogoMedicalEntidadesEmision();
            vm.steps.cotizacion = false;
            vm.steps.recotizacion = false;
            vm.steps.emision = true;
            vm.steps.entrega = false;
            vm.trianguloAzul = "trianguloBlanco";
            vm.trianguloBorde = "triangulo";
            vm.pestCotiza = false;
            vm.pestEmision = true;
            
            datosEmision(vm.jsonCotizacion.quotationNumber);
            
            createEmisionDependientes();
            createEmisionAmbiente();
        }
        
        vm.goEntrega = goEntrega;
        function goEntrega() {

            if (!validaContratante()) {
                CommonModalsSrv.error("Debe completar los datos requeridos del Contratante");
                return false;
            }

            for (var i = 0; i < vm.emitDependientes.length; i++) {
                if (!validaDependiente(i)) {
                    CommonModalsSrv.error("Debe completar los datos requeridos de " + vm.emitDependientes[i].relationship);
                    return false;
                }
            }
            
            vm.firmasjuntas = document.getElementById("firmasJuntas");
            vm.steps.search = false;
            vm.steps.cotizacion = false;
            vm.steps.recotizacion = false;
            console.log("go entrega");
            if (vm.fileB64) {
                cargaDocumento();
            }
            registroCuestionario();
        }

        vm.dibujarFirmasJuntas = dibujarFirmasJuntas;
        function dibujarFirmasJuntas() {
            
            html2canvas(vm.firmasjuntas, {
                onrendered: function (canvas) {
                  vm.firmasEnBase64 = canvas.toDataURL("image/jpeg");
                  servicioEnvioDeFirmas();
                }
            });
        }

        vm.formatCurrency = formatCurrency;
        function formatCurrency(amount) {
            return validateIn.formatCurrency(amount);
        }

        vm.charrepeatText = charrepeatText;
        function charrepeatText(event, idValue) {
            return validateIn.charrepeatText(event, idValue);
        }

        vm.soloNumAndPunto = soloNumAndPunto;
        function soloNumAndPunto(event, idValue) {
            return validateIn.soloNumAndPunto(event, idValue);
        }

        vm.soloText = soloText;
        function soloText(e, espacios, valor) {
            return validateIn.soloText(e, espacios,valor);
        }


        vm.soloNum = soloNum;
        function soloNum(e) {
            return validateIn.soloNum(e);
        }

        vm.cambiaN = cambiaN;
        function cambiaN(e) {
             validateIn.cambiaN(e);
        }
        

        vm.soloTextAndNum = soloTextAndNum;
        function soloTextAndNum(e, espacios) {
            return validateIn.soloTextAndNum(e, espacios);
        }

        vm.calcularEdadRfc = calcularEdadRfc;
        function calcularEdadRfc(rfc, type) {
            return validateIn.calcularEdadRfc(rfc, type);
        }
        
        vm.onValidateDuplicateTel = onValidateDuplicateTel;
        function onValidateDuplicateTel (newValue, type) {
            var telefono = 0;
            var celular = 0;
            if (type === 'c') {
                telefono = (typeof vm.emitContratante.telefono !== 'undefined') ? vm.emitContratante.telefono : 0;
                celular = (typeof newValue !== 'undefined') ? newValue : 0;
                //console.log("Tipo: " + type + "Telefono Particular: " + telefono + " Celular: " + celular);
                if (telefono === celular && telefono !== 0 && celular !== 0) {
                    CommonModalsSrv.error("Favor de Capturar un Celular Diferente");
                    return false;
                }
            } else if (type === 'f') {
                telefono = (typeof newValue !== 'undefined') ? newValue : 0;
                celular = (typeof vm.emitContratante.celular !== 'undefined') ? vm.emitContratante.celular : 0;
                //console.log("Tipo: " + type + "Telefono Particular: " + telefono + " Celular: " + celular);
                if (telefono === celular && telefono !== 0 && celular !== 0) {
                    CommonModalsSrv.error("Favor de Capturar un Teléfono Diferente");
                    return false;
                }
            }
        }

        vm.colorTablaMontos = colorTablaMontos;
        function colorTablaMontos(e, x, y, z) {
            colorMontos(x, y, z);
        }
        vm.comparaTitularD = true;

        function comparaTitularDoble(){
            angular.forEach(vm.dependientes, function (value) {
                if(value.relationship === "TITULAR"){
                    vm.comparaTitularD= false;
                }
            });
        }

        vm.agregarFamiliar = agregarFamiliar;
        function agregarFamiliar() {
            
            agregarDependiente();
        }
        
        vm.limpiarDependiente = limpiarDependiente;
        function limpiarDependiente() {
            
            if (vm.dependientes.length !== 0) {
                vm.dataParentescoList.type = undefined;
            }

            if(!vm.dependientes || vm.dependientes.length === 0){
                //vm.ListMedicalParentescos = getCatalogoMedicalParentescos();
                vm.dataParentescoList.type = vm.ListMedicalParentescos[0];
            }
            if (vm.dependientes.length !== 0 || vm.clienteEsTitularAsegurado === "2") {
                vm.nombresCliente = "";
                vm.primerApellidoCliente = "";
                vm.segundoApellidoCliente = "";
                vm.fechaNacimientoCliente = moment();
                vm.edadCliente = "";
                vm.rfcCliente = "";
            }
            
            vm.sexoCliente = "Masculino";
            vm.dataOcupacionList.type = undefined;
            vm.dataDeporteList.type = undefined;
            vm.deporteCliente = "";
            
            vm.isClienteBanco = false;
            vm.editandoCliente = false;
            vm.buttonNameClientData = vm.nombreBotonAgregar;
            vm.buttonNameCleanData = vm.nombreBotonLimpiar;
        }

        vm.borrarDependientes = borrarDependientes;
        function borrarDependientes(index){
            vm.banderaPrimerMayor18 = true;
            if(vm.dependientes[index].relationship === 'TITULAR'){
                angular.forEach(vm.dependientes, function (value) {
                    if(vm.banderaPrimerMayor18){
                        if(value.age >= 18 && value.relationshipID !== 1){
                             value.relationshipID = 1;
                             value.relationship = 'TITULAR';
                             vm.banderaPrimerMayor18 = false;
                        }
                    }
                });
                vm.clienteEsTitularAsegurado = "2";
            }
            vm.dependientes.splice(index,1);
            vm.editandoCliente = false;
            limpiarDependiente();

            if (vm.dependientes.length === 0 || !vm.dependientes) {
                //vm.ListMedicalParentescos = getCatalogoMedicalParentescos();
                vm.dataParentescoList.type = vm.ListMedicalParentescos[0];
            }
        }

        vm.editarDependientes = editarDependientes;
        function editarDependientes(index){
            vm.dataParentescoList.type = {
                id: vm.dependientes[index].relationshipID,
                text : vm.dependientes[index].relationship
            };
            vm.nombresCliente = vm.dependientes[index].name;
            vm.primerApellidoCliente = vm.dependientes[index].lastName;
            vm.segundoApellidoCliente = vm.dependientes[index].secondLastName;
            vm.fechaNacimientoCliente = moment(vm.dependientes[index].birthDate, 'YYYY-MM-DD');
            vm.edadCliente = vm.dependientes[index].age;
            vm.rfcCliente = vm.dependientes[index].fiscalIDNumber;
            vm.sexoCliente = vm.dependientes[index].genderDesc;
            vm.dataOcupacionList.type = {
                id: vm.dependientes[index].jobID,
                text : vm.dependientes[index].jobDescription
            };
            vm.dataDeporteList.type = {
                id: vm.dependientes[index].sportID,
                text: vm.dependientes[index].sport
            };
            vm.indexTitular = index;
            
            vm.editandoCliente = true;
            vm.buttonNameClientData = vm.nombreBotonModificar;
            vm.buttonNameCleanData = vm.nombreBotonCancelar;
            
            if(vm.clienteEsTitularAsegurado === "1" && vm.rfcCliente === vm.fiscalIDNumber){
                vm.isClienteBanco = true;
            }
        }

        vm.agregarEditados = agregarEditados;
        function agregarEditados(index){
            vm.dependientes[index].relationshipID = vm.dataParentescoList.type.id;
            vm.dependientes[index].relationship = vm.dataParentescoList.type.text;
            vm.dependientes[index].name = vm.nombresCliente;
            vm.dependientes[index].lastName = vm.primerApellidoCliente;
            vm.dependientes[index].secondLastName = vm.segundoApellidoCliente;
            vm.dependientes[index].birthDate = moment(vm.fechaNacimientoCliente).format('YYYY-MM-DD');
            vm.dependientes[index].age = calculaEdad(vm.fechaNacimientoCliente);
            vm.dependientes[index].fiscalIDNumber = vm.rfcCliente;
            vm.dependientes[index].gender = vm.sexoCliente === "Masculino" ? 1 : 0,
            vm.dependientes[index].genderDesc = vm.sexoCliente;
            vm.dependientes[index].jobID = vm.edadCliente>=18 && vm.dataOcupacionList.type !== undefined ? vm.dataOcupacionList.type.id : "";
            vm.dependientes[index].jobDescription = vm.edadCliente>=18 && vm.dataOcupacionList.type !== undefined ? vm.dataOcupacionList.type.text : "";
            vm.dependientes[index].sportID = vm.dataDeporteList.type.id === "1" || vm.dataDeporteList.type === undefined ? "":vm.dataDeporteList.type.id ;
            vm.dependientes[index].sport = vm.dataDeporteList.type.text === "NINGUNO" || vm.dataDeporteList.type === undefined ? "": vm.dataDeporteList.type.text ;
            
            vm.isClienteBanco = false;
        }

    

        vm.agregarTitularAsegurado = agregarTitularAsegurado;
        function agregarTitularAsegurado() {
           
                vm.nombresCliente = vm.nombres;
                vm.primerApellidoCliente = vm.primerApellido;
                vm.segundoApellidoCliente = vm.segundoApellido;
                vm.rfcCliente=vm.fiscalIDNumber;
                vm.fechaNacimientoCliente = moment(vm.fechaNacimiento, 'DD/MM/YYYY');
                vm.edadCliente = calculaEdad(vm.fechaNacimientoCliente);
                
                vm.isClienteBanco = true;
         }
        
        
        vm.calcularEdadCliente = calcularEdadCliente;
        function calcularEdadCliente(tipo) {
            if (vm.fechaNacimientoCliente && tipo === 'cliente'){
                vm.edadCliente = calculaEdad(vm.fechaNacimientoCliente);
            }
            if (vm.emitContratante.fechaNacimiento && tipo === 'contratante'){
                vm.emitContratante.edad = calculaEdad(vm.emitContratante.fechaNacimiento);
            }
        }
        
        vm.calculaEdad = calculaEdad;
        function calculaEdad(fechaMoment) {
            return moment().diff(fechaMoment, 'years');
        }

        vm.calcularRFCContratante = calcularRFCContratante;
        function calcularRFCContratante(){
            if(vm.emitContratante.nombres && vm.emitContratante.primerApellido && vm.emitContratante.segundoApellido && vm.emitContratante.fechaNacimiento){
                    var name = vm.emitContratante.nombres.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                    var lastName = vm.emitContratante.primerApellido.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                    var secondLastName = vm.emitContratante.segundoApellido.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                    calcularRFC(name, lastName, secondLastName,
                        moment(vm.emitContratante.fechaNacimiento).format('YYYY-MM-DD'), 'contratante');
                }
                
        }
        
        vm.calcularRFCCliente = calcularRFCCliente;
        function calcularRFCCliente() {
            if (vm.nombresCliente && vm.primerApellidoCliente && vm.segundoApellidoCliente && vm.fechaNacimientoCliente) {

                var name = vm.nombresCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                var lastName = vm.primerApellidoCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                var secondLastName = vm.segundoApellidoCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');

                calcularRFC(name, lastName, secondLastName,
                    moment(vm.fechaNacimientoCliente).format('YYYY-MM-DD'), 'cliente');
            }
        }
        
        vm.calcularRFC = calcularRFC;
        function calcularRFC(name, lastName, secondLastName, birthdate, tipo) {
            
            var _params = {
                language: "SPA",
                name: name,
                lastName: lastName,
                secondLastName: secondLastName,
                birthDate: birthdate
            };

            insuranceMedicalSrv.getMedicalInsuranceFiscalIDNumber(_params).then(function (response) {
                if (response.success) {
                    if(tipo === 'cliente'){
                        vm.rfcCliente = response.info.fiscalIDNumber;
                        vm.homoclaveRFCCliente = response.info.fiscalSingleKey;
                    }

                    if(tipo === 'contratante'){
                        vm.emitContratante.rfc = response.info.fiscalIDNumber;
                        vm.homoclaveRFCContratante = response.info.fiscalSingleKey;
                    }
                    if(vm.emitDependientes){
                    validaRfcContratanteAsegurados();
                    }
                }
            });
        }
        
        vm.agregarDependiente = agregarDependiente;
        function agregarDependiente() {
            
            if (vm.nombresCliente && vm.primerApellidoCliente && vm.segundoApellidoCliente && vm.fechaNacimientoCliente) {

                var name = vm.nombresCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                var lastName = vm.primerApellidoCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
                var secondLastName = vm.segundoApellidoCliente.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');

                var _params = {
                    language: "SPA",
                    name: name,
                    lastName: lastName,
                    secondLastName: secondLastName,
                    birthDate: moment(vm.fechaNacimientoCliente).format('YYYY-MM-DD')
                };

                insuranceMedicalSrv.getMedicalInsuranceFiscalIDNumber(_params).then(function (response) {
                    if (response.success) {
                        vm.rfcCliente = response.info.fiscalIDNumber;
                        vm.homoclaveRFCCliente = response.info.fiscalSingleKey;

                        if (!vm.editandoCliente) {
                            if (parseInt(vm.dataNumAseguradosList.type.text) > vm.dependientes.length) {

                                if (vm.dependientes.length === 0 && vm.clienteEsTitularAsegurado === '1') {
                                    vm.sexo = vm.sexoCliente;
                                }

                                vm.comparaTitularD = true;

                                if (vm.dataParentescoList.type.text === 'TITULAR') {
                                    comparaTitularDoble();
                                }

                                if (vm.comparaTitularD) {

                                    var ultimo = vm.dependientes.length + 1;

                                    vm.edadCliente = calculaEdad(vm.fechaNacimientoCliente);

                                    vm.dependientes.push({
                                        riskNumber: ultimo,
                                        relationshipID: vm.dataParentescoList.type.id,
                                        relationship: vm.dataParentescoList.type.text,
                                        name: vm.nombresCliente,
                                        lastName: vm.primerApellidoCliente,
                                        secondLastName: vm.segundoApellidoCliente,
                                        birthDate: moment(vm.fechaNacimientoCliente).format('YYYY-MM-DD'),
                                        age: vm.edadCliente,
                                        fiscalIDNumber: vm.rfcCliente,
                                        curp: "",
                                        gender: vm.sexoCliente === "Masculino" ? 1 : 0,
                                        genderDesc: vm.sexoCliente,
                                        jobID: vm.edadCliente >= 18 && vm.dataOcupacionList.type !== undefined ? vm.dataOcupacionList.type.id : "",
                                        jobDescription: vm.edadCliente >= 18 && vm.dataOcupacionList.type !== undefined ? vm.dataOcupacionList.type.text : "",
                                        sport: vm.dataDeporteList.type === undefined || vm.dataDeporteList.type.text === "NINGUNO" ? "" : vm.dataDeporteList.type.text,
                                        sportID: vm.dataDeporteList.type === undefined || vm.dataDeporteList.type.text === "NINGUNO" ? "" : vm.dataDeporteList.type.id
                                    });

                                    limpiarDependiente();
                                    vm.faltaTitular = false;
                                } else {
                                    CommonModalsSrv.error("Solo puede existir un solo TITULAR");
                                }


                            } else {
                                CommonModalsSrv.error("El límite de dependientes económicos es " + vm.dataNumAseguradosList.type.text);
                            }

                        } else {
                            agregarEditados(vm.indexTitular);
                            limpiarDependiente();
                        }

                    }
                });
            
            }
        }
        
        vm.onChangeNombre = onChangeNombre;
        function onChangeNombre(){
            calcularEdadCliente('cliente');
            calcularRFCCliente();
        }
        
        vm.onChangeNombreContrc = onChangeNombreContrc;
        function onChangeNombreContrc(){
            calcularEdadCliente('contratante');
            calcularRFCContratante();
            

        }
        
        vm.validaAseg = validaAseg;
        function validaAseg() {
            vm.cont = 0;
            vm.cotizarDisabled = true;
            if($scope.$parent.agentSelected === undefined || $scope.$parent.agentSelected === null){
                CommonModalsSrv.error("Favor de seleccionar un Agente para continuar.");
                vm.cotizarDisabled = false;
                 return;
            }
            angular.forEach(vm.dependientes, function (val) {
                if (val.relationship === "TITULAR") {
                    vm.cont++;
                }
            });

            if (vm.dependientes.length === parseInt(vm.dataNumAseguradosList.type.text)) {
                if (vm.cont === 1) {
                    goCotizacion();
                } else {
                    if (vm.cont === 0) {
                        CommonModalsSrv.error("Favor de agregar un Titular.");
                    } else {
                        CommonModalsSrv.error("Solo puede haber un asegurado Titular.");
                    }
                    vm.cotizarDisabled = false;
                }
            } else {
                CommonModalsSrv.error("El número de dependientes registrados es distinto al número de asegurados seleccionados. Favor de actualizar los dependientes registrados.");
                vm.cotizarDisabled = false;
            }
        }



        vm.colorMontos = colorMontos;
        function colorMontos(x, y, z) {
            vm.indexFormaPago = x;
            vm.indexPaquete = y;
            vm.indexPago = z;
            
            var formaPago = vm.jsonCotizacion.ofertaComercial.formasPago.formaPago;
            var paquete = getPaquetes();
            
            actualizarSolicitud(vm.paquetes[vm.indexPaquete].nom_paquete, vm.paquetes[vm.indexPaquete].cod_paquete, vm.jsonCotizacion.quotationNumber);
            guardarSeleccion(vm.paquetes[vm.indexPaquete].cod_paquete, formaPago[vm.indexFormaPago].pagoID, vm.jsonCotizacion.quotationNumber);

            vm.cajasMontos = new Array(formaPago.length);

            for (var i = 0; i < formaPago.length; i++) {

                vm.cajasMontos[i] = new Array(paquete.length);

                for (var j = 0; j < paquete.length; j++) {

                    if (Array.isArray(formaPago[i].pagos.pago)) {
                        vm.cajasMontos[i][j] = new Array(formaPago[i].pagos.pago.length);
                        for (var k = 0; k < formaPago[i].pagos.pago.length; k++) {
                            vm.cajasMontos[i][j][k] = false;
                        }
                    } else {
                        vm.cajasMontos[i][j] = false;
                    }
                }
            }

            if (Array.isArray(formaPago[x].pagos.pago)) {
                vm.cajasMontos[x][y][z] = true;
            } else {
                vm.cajasMontos[x][y] = true;
            }
            getResumenCotizacion(vm.oferta);
        }

        vm.getJsonCotizacion = getJsonCotizacion;
        function getJsonCotizacion() {
            
            vm.collapseInClassDatosRiesgo = true;
            
            var i = 0;
            angular.forEach(vm.dependientes, function (value) {
                value.riskNumber = ++i;
            });
            
            vm.emission.fechaInicioVigCotizacion = moment().format('DD/MM/YYYY');
            vm.emission.fechaFinVigCotizacion = moment().add(1, 'years').format('DD/MM/YYYY');

            var paramsCotizacion = {
                insurancePolicyDate: moment(vm.emission.fechaInicioVigCotizacion, 'DD/MM/YYYY').format('YYYY-MM-DD'),
                policyMaturityDate: moment(vm.emission.fechaFinVigCotizacion, 'DD/MM/YYYY').format('YYYY-MM-DD'),
                customizeInsuranceQuotationFlag: 0,
                businessPackage: 'N',
                insuredPersonsQuantity: vm.dependientes.length,
                //package: '',
                //discountCode: '',
//                discountCampaignID: '',
                discountCampaignValue: 0,
                dependientes: JSON.stringify(vm.dependientes),
                commissionCessionFlag: 0,
                federalEntityID: vm.cmd.estado.id,
                federalEntity: vm.cmd.estado.text,
                delegationMunicipalityID: vm.cmd.municipio.id,
                delegationOrMunicipality: vm.cmd.municipio.text,
                agentCode: $scope.$parent.agentSelected.id,
                clientNumber : vm.numeroCliente,
                adviserID : '951753'
            };

            insuranceMedicalSrv.getCotizacionSrv(paramsCotizacion).then(function (response) {

                if (response.success) {
                    vm.jsonCotizacion = response.info;
                    vm.oferta = vm.jsonCotizacion.ofertaComercial.asegurados.asegurado;
                    colorMontos(0, 0, 0);
                    getResumenCotizacion(vm.oferta);
                    getIntervalos();
                    getGrupos();
                    setArrows();
                    getFormasPago(vm.jsonCotizacion.ofertaComercial.formasPago.formaPago);
                    
                    vm.primaN = vm.formasPago[vm.indexFormaPago].pagos[vm.indexPago].montos[vm.indexPaquete].primaneta;
                    vm.trianguloAzul = "triangulo";
                    vm.trianguloBorde = "trianguloBorde";
                    vm.pestCotiza = true;
                    vm.pestEmision = false;
                    
                    guardarCotizacionBD();

                } else {
                    vm.cotizarDisabled = false;
                }
            }).catch(function (error) {
                console.log(error);
                CommonModalsSrv.error("El servicio de cotización no está disponible por el momento.");
                vm.cotizarDisabled = false;
            });
        }

        vm.getJsonDetalleCotizacion = getJsonDetalleCotizacion;
        function getJsonDetalleCotizacion(idCotizacion) {

            insuranceMedicalSrv.getDetalleCotizacion(idCotizacion).then(function (response) {

                if (response.success) {
                    vm.jsonCotizacion = response.info;
                    vm.oferta = vm.jsonCotizacion.ofertaComercial.asegurados.asegurado;
                    getResumenCotizacion(vm.oferta);
                    
                    createEmisionDependientesFromDetail();
                    createEmisionAmbiente();
                    
//                    colorMontos(0, 0, 0);
//                    getResumenCotizacion();
//                    getIntervalos();
//                    getGrupos();
//                    setArrows();
//                    getFormasPago(vm.jsonCotizacion.ofertaComercial.formasPago.formaPago);
                }else{
                    CommonModalsSrv.error("Error al cargar esta Cotizacion.");
                    btnVolver();
                }
            }).catch(function () {
                CommonModalsSrv.error("Error al cargar esta Cotizacion.");
                btnVolver();
            });
        }

        vm.getIntervalos = getIntervalos;
        function getIntervalos() {
            /*
             * Rellena los combos y nombres de cada cobertura en Elemental
             */

            for (var group = 0; group < vm.jsonCotizacion.xmlCoberturas.agrupado.grupo.length; group++) {
                for (var renglon = 0; renglon < vm.jsonCotizacion.xmlCoberturas.agrupado.grupo[group].coberturas.cobertura.length; renglon++) {
                    var int = vm.jsonCotizacion.xmlCoberturas.agrupado.grupo[group].coberturas.cobertura[renglon].intervalos;
                    angular.forEach(int, function (value, key) {
                        if (group !== 7 && !(group === 5 && renglon === 4)) {
                            switch (key) {
                                case "sa":
                                    if (int.sa) {
                                        int.sa.name = "Suma asegurada";
                                    }
                                    break;
                                case "deducible":
                                    if (int.deducible) {
                                        int.deducible.name = "Deducible";
                                    }
                                    break;
                                case "coaseguro":
                                    if (int.coaseguro) {
                                        int.coaseguro.name = "Coaseguro";
                                    }
                                    break;
                                case "topecoaseguro":
                                    if (int.topecoaseguro) {
                                        int.topecoaseguro.name = "Tope de Coaseguro";
                                    }
                                    break;
                                case "deduciblePad":
                                    if (int.deduciblePad) {
                                        int.deduciblePad.name = "Deducible Pad.";
                                    }
                                    break;
                                case "tabulador":
                                    if (int.tabulador) {
                                        int.tabulador.name = "Tabulador";
                                    }
                                    break;
                                case "redHosp":
                                    if (int.redHosp) {
                                        int.redHosp.name = "Red hosp.";
                                    }
                                    break;
                                case "planDental":
                                    if (int.planDental) {
                                        int.planDental.name = "Plan Dental";
                                    }
                                    break;
                                case "planVision":
                                    if (int.planVision) {
                                        int.planVision.name = "Plan Visión";
                                    }
                                    break;
                                case "diaCarencia":
                                    if (int.diaCarencia) {
                                        int.diaCarencia.name = "Días de carencia";
                                    }
                                    break;
                                case "saCarencia":
                                    if (int.saCarencia) {
                                        int.saCarencia.name = "Renta Diaria";
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                        if (value && value.intervalo) {
                            value.listIntervalo = createListCotizacionCmd(value.intervalo);

                            if (vm.cmd.estado.id === "23" && key === "redHosp" && group === 0) {

                                switch (vm.cmd.municipio.id) {
                                    case "23001":
                                    case "23003":
                                    case "23005":
                                    case "23008":
                                        redHospAmp = value.listIntervalo.pop();
                                        break;
                                    default:
                                        break;
                                }
                            }

                            angular.forEach(value.listIntervalo, function (v) {
                                if (v.id === value.valDef) {
                                    value.intervaloSelected = v;
                                }
                            });
                        }

                    });
                }
            }

            angular.forEach(int, function (value) {
                if (value && value.intervalo) {
                    value.listIntervalo = createListCotizacionCmd(value.intervalo);
                }
                
            });
        }

        vm.createListCotizacionCmd = createListCotizacionCmd;
        function createListCotizacionCmd(list) {
            var _listaObtenida = [];

            if (Array.isArray(list)) {
                angular.forEach(list, function (value) {
                    _listaObtenida.push(
                        {
                            id: value.key,
                            text: value.value
                        }
                    );
                });
                vm.listaQuinta = _listaObtenida;
                return _listaObtenida;
            
            } else if (list === "") {
                return 0;
            } else {
                angular.forEach(createListObject(list), function (value) {
                    _listaObtenida.push(
                        {
                            id: value.key,
                            text: value.value
                        }
                    );
                });
                return _listaObtenida;
            }
        }



        vm.getResumenCotizacion = getResumenCotizacion;
        function getResumenCotizacion(ase) {

            var _lista = [];
            var asegurado = ase;

            if (Array.isArray(asegurado)) {
                angular.forEach(asegurado, function (value, index) {
                    _lista.push(getAsegurado(value, index));
                });
            } else {
                _lista.push(getAsegurado(asegurado));
            }

            vm.asegurados = _lista;
            return vm.asegurados;
        }

        vm.getAsegurado = getAsegurado;
        function getAsegurado(value) {
            var paquetes = getPaquetesAsegurado(value);

            return {
                edad: value.edad,
                nombre: value.nombre,
                num_riesgo: value.numRiesgo,
                ocupacion: value.ocupacion,
                parentesco: value.parentesco,
                sexo: value.sexo,
                suma_asegu: value.sumaAseg,
                paquete: paquetes[vm.indexPaquete].nomPaquete,
                formaPago: paquetes[vm.indexPaquete].formasPago.formaPago[vm.indexFormaPago].nomForma,
                prima: paquetes[vm.indexPaquete].formasPago.formaPago[vm.indexFormaPago].prima
            };
        }

        vm.getPaqueteAsegurado = getPaqueteAsegurado;
        function getPaqueteAsegurado(value) {
            return {
                codPaquete: value.codPaquete,
                nomPaquete: value.nomPaquete,
                formasPago: value.formasPago
            };
        }

        vm.getPaquetesAsegurado = getPaquetesAsegurado;
        function getPaquetesAsegurado(asegurado) {

            var _lista = [];
            var paquete = asegurado.paquetes.paquete;

            if (Array.isArray(paquete)) {
                angular.forEach(paquete, function (value) {
                    _lista.push(getPaqueteAsegurado(value));
                });
            } else {
                _lista.push(getPaqueteAsegurado(paquete));
            }

            return _lista;
        }

        vm.getPaqueteCobertura = getPaqueteCobertura;
        function getPaqueteCobertura(value) {
            return {
                cod_paquete: value.codPaquete,
                mca_opc: value.mcaOpc,
                mod_chk: value.modChk
            };
        }

        vm.getPaquetesCoberturas = getPaquetesCoberturas;
        function getPaquetesCoberturas(cobertura) {
            var _lista = [];
            var paquete = cobertura.paquetes.paquete;

            if (Array.isArray(paquete)) {
                angular.forEach(paquete, function (value) {
                    _lista.push(getPaqueteCobertura(value));
                });
            } else {
                _lista.push(getPaqueteCobertura(paquete));
            }

            return _lista;
        }

        vm.getGrupos = getGrupos;
        function getGrupos() {

            vm.grupos = [];
            var grupo = vm.jsonCotizacion.xmlCoberturas.agrupado.grupo;

            for (var i = 0; i < grupo.length; i++) {

                var grup = {
                    grupo_desc: grupo[i].grupoDesc,
                    grupo_id: grupo[i].grupoId
                };

                var coberturas = [];
                var cobertura = grupo[i].coberturas.cobertura;

                for (var j = 0; j < cobertura.length; j++) {

                    coberturas.push({
                        cod_cob: cobertura[j].codCob,
                        intervalos: cobertura[j].intervalos,
                        nom_cob: cobertura[j].nomCob,
                        paquetes: getPaquetesCoberturas(cobertura[j]),
                        sa_def: cobertura[j].saDef,
                        sa_des: cobertura[j].saDes,
                        tool_tip: cobertura[j].toolTip
                    });
                }
                grup.coberturas = coberturas;
                vm.grupos.push(grup);
            }
            return vm.grupos;
        }

        vm.getPaquete = getPaquete;
        function getPaquete(value) {
            return {
                cod_paquete: value.codPaquete,
                nom_paquete: value.nomPaquete
            };
        }


        vm.getPaquetes = getPaquetes;
        function getPaquetes() {

            var _lista = [];
            var paquete = vm.jsonCotizacion.ofertaComercial.paquetes.paquete;

            if (Array.isArray(paquete)) {
                angular.forEach(paquete, function (value) {
                    _lista.push(getPaquete(value));
                });
            } else {
                _lista.push(getPaquete(paquete));
            }
            vm.paquetes = _lista;
            return _lista;
        }







        vm.getPagos = getPagos;
        function getPagos(value) {

            var _lista = [];

            if (Array.isArray(value)) {
                angular.forEach(value, function (v) {
                    _lista.push(getPago(v));
                });
            } else {
                _lista.push(getPago(value));
            }
            return _lista;
        }

        vm.getPago = getPago;
        function getPago(value) {

            return {
                montos: getMontos(value.montospaquetes.montos),
                numPagos: value.numPagos
            };
        }



        vm.getMontos = getMontos;
        function getMontos(value) {

            var _lista = [];

            if (Array.isArray(value)) {
                angular.forEach(value, function (v) {
                    _lista.push(getMonto(v));
                });
            } else {
                _lista.push(getMonto(value));
            }
            return _lista;

        }

        vm.getMonto = getMonto;
        function getMonto(value) {

            return {
                cod_paquete: value.codPaquete,
                derechos: value.derechos,
                impuestos: value.impuestos,
                monto: value.monto,
                primaneta: value.primaneta,
                primatotal: value.primatotal,
                recargos: value.recargos
            };
        }


        vm.getFormasPago = getFormasPago;
        function getFormasPago(formasPago) {

            vm.formasPago = [];
            var formaPago = formasPago;

            /**}
             * 
             * Varias formas = contado, semestral, trimestral, mensual
             */
            for (var i = 0; i < formaPago.length; i++) {

                /**
                 * valida si pago es lista (contado (1) o cuando es 1 pago y 11 pagos (2) etc)
                 */
                vm.formasPago.push({
                    pagoDesc: formaPago[i].pagoDesc,
                    pagoID: formaPago[i].pagoID,
                    pagos: getPagos(formaPago[i].pagos.pago)
                });
            }
            return vm.formasPago;
        }

        vm.createListObject = createListObject;
        function createListObject(objeto) {

            var listaOb = [];

            listaOb.push(objeto);

            return listaOb;
        }

        vm.revisaCombosContratante = revisaCombosContratante;
        function revisaCombosContratante() {
            var js =vm.emitContratante;
            if(vm.emitContratante.edad >= 18){
                if(!js.tipoIdentificacion  || !js.estado || !js.municipio || !js.profesion){
                        return true;
                }else{
                return false;
                }
            }else if(!js.tipoIdentificacion || !js.estado || !js.municipio){
                    return true;
                }else{
                     return false;
                }
        }


        vm.revisaCombosDependientes = revisaCombosDependientes;
        function revisaCombosDependientes(index) {

            if (index === 0) {
                return revisaCombosContratante();
            } else {
                var ind = index - 1;
                if(vm.emitDependientes[ind].age >=18){
                    if (!vm.emitDependientes[ind].businessID || !vm.emitDependientes[ind].professionID) {
                        return true;
                    } else {
                        return false;
                    }
                }else{
                    if (!vm.emitDependientes[ind].businessID) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        }


        vm.onChangeList = onChangeList;
        function onChangeList(lastValue, newValue, grupo, codigoCobertura, keyIntervalo, valueIntervalo) {
            var llave = "";
            var keyVarCob = "";
            if(keyIntervalo === "deducible" && grupo === 0){
                vm.grupos[grupo].coberturas[0].intervalos.deduciblePad.intervaloSelected.text = "PADECIMIENTO";
                vm.grupos[grupo].coberturas[0].intervalos.deduciblePad.intervaloSelected.id= "1";
                 llave = vm.grupos[0].coberturas[0].intervalos.deduciblePad.nomDv;
                 keyVarCob = toCamelCase(llave);
                 vm.jsonCotizacion.ofertaComercial.datosVarCob[keyVarCob] = vm.grupos[grupo].coberturas[0].intervalos.deduciblePad.intervaloSelected.id;
                getCatalogoMedicalCoaseguro(newValue.id);
                getCatalogoMedicalDeducible(newValue.id);
                getCatalogoMedicalDeducibleRed(newValue.id);
            }
            if(keyIntervalo === "sa" && grupo === 0){
                vm.grupos[grupo].coberturas[0].intervalos.topecoaseguro.intervaloSelected.text ="SIN LÍMITE";
                vm.grupos[grupo].coberturas[0].intervalos.topecoaseguro.intervaloSelected.id = "1";
                llave = vm.grupos[0].coberturas[0].intervalos.topecoaseguro.nomDv;
                keyVarCob = toCamelCase(llave);
                vm.jsonCotizacion.ofertaComercial.datosVarCob[keyVarCob] = vm.grupos[grupo].coberturas[0].intervalos.topecoaseguro.intervaloSelected.id;
                getCatalogoMedicalTopeCoaseguro(newValue.id);
                
            }
            
            if(vm.cmd.estado.id === "23" && grupo === 0 && keyIntervalo === "tabulador") {
                if(vm.cmd.municipio.id === "23001" || vm.cmd.municipio.id === "23003" || vm.cmd.municipio.id === "23005" || vm.cmd.municipio.id === "23008") {
                    $timeout(function () {
                        if(redHospAmp === null && (valueIntervalo.intervaloSelected.text === 'A' || valueIntervalo.intervaloSelected.text === 'B' || valueIntervalo.intervaloSelected.text === 'C')) {
                            redHospAmp = vm.grupos[0].coberturas[0].intervalos.redHosp.listIntervalo.pop();
                            vm.grupos[0].coberturas[0].intervalos.redHosp.intervaloSelected = vm.grupos[0].coberturas[0].intervalos.redHosp.listIntervalo[0];
                        } else if(redHospAmp !== null && (valueIntervalo.intervaloSelected.text === 'D' || valueIntervalo.intervaloSelected.text === 'E' || valueIntervalo.intervaloSelected.text === 'F')) { 
                            vm.grupos[0].coberturas[0].intervalos.redHosp.listIntervalo.push(redHospAmp);
                            vm.grupos[0].coberturas[0].intervalos.redHosp.intervaloSelected = vm.grupos[0].coberturas[0].intervalos.redHosp.listIntervalo[0];
                            redHospAmp = null;
                        }
                    }, 100);
                }
            }

            if (keyIntervalo === "planDental") {
                vm.grupos[grupo].coberturas[1].intervalos.planVision.intervaloSelected = newValue;
                 llave = vm.grupos[grupo].coberturas[1].intervalos.planVision.nomDv;
                keyVarCob = toCamelCase(llave);
                vm.jsonCotizacion.ofertaComercial.datosVarCob[keyVarCob] = newValue.id;
            } else if (keyIntervalo === "planVision") {
                vm.grupos[grupo].coberturas[0].intervalos.planDental.intervaloSelected = newValue;
                 llave = vm.grupos[grupo].coberturas[0].intervalos.planDental.nomDv;
                keyVarCob = toCamelCase(llave);
                vm.jsonCotizacion.ofertaComercial.datosVarCob[keyVarCob] = newValue.id;
            }

            vm.recotizacionDisabled = false;
            vm.emailDisabled = true;
            
            keyVarCob = toCamelCase(valueIntervalo.nomDv);
            
            vm.jsonCotizacion.ofertaComercial.datosVarCob[keyVarCob] = newValue.id;

        }
        
        function toCamelCase(cadena){
            var arreglo = cadena.split('_');
            for (var i = 1; i < arreglo.length; i++) {
                arreglo[i] = arreglo[i].charAt(0).toUpperCase() + arreglo[i].slice(1);
            }
            
            return arreglo.join('');
        }
        
        vm.clickCheckBox = clickCheckBox;
        function clickCheckBox(){
            vm.recotizacionDisabled = false;
            vm.emailDisabled = true;
        }

         vm.validarCheckbox = validarCheckbox;
         function validarCheckbox(grupoIndex,coberturaIndex,paqueteIndex){
             if (grupoIndex === 5 && coberturaIndex === 0) {
                 vm.grupos[grupoIndex].coberturas[1].paquetes[paqueteIndex].mod_chk = vm.grupos[grupoIndex].coberturas[coberturaIndex].paquetes[paqueteIndex].mod_chk;
             } else if (grupoIndex === 5 && coberturaIndex === 1) {
                 vm.grupos[grupoIndex].coberturas[0].paquetes[paqueteIndex].mod_chk = vm.grupos[grupoIndex].coberturas[coberturaIndex].paquetes[paqueteIndex].mod_chk;
             } else if (grupoIndex === 1 && coberturaIndex === 0) {
                 vm.grupos[grupoIndex].coberturas[1].paquetes[paqueteIndex].mod_chk = vm.grupos[grupoIndex].coberturas[coberturaIndex].paquetes[paqueteIndex].mod_chk;
             } else if (grupoIndex === 1 && coberturaIndex === 1) {
                 vm.grupos[grupoIndex].coberturas[0].paquetes[paqueteIndex].mod_chk = vm.grupos[grupoIndex].coberturas[coberturaIndex].paquetes[paqueteIndex].mod_chk;
             }
         }
        // ------------------------Funciones para seccion de Firmas-------------------------
         vm.firmaDibujadaServicioTitular = false;
         vm.firmaDibujadaServicioContratante = false;
         vm.firmaDibujadaServicioAgente = false;
         
         vm.empezarDibujoTitular = empezarDibujoTitular;
         function empezarDibujoTitular() {
             vm.firmaDibujadaServicioTitular = true;
             vm.pintarLineaTitular = true;
             vm.lineasTitular.push([]);
         }

         vm.dibujarLineaTitular = dibujarLineaTitular;
         function dibujarLineaTitular(event) {
            event.preventDefault();
            if (vm.pintarLineaTitular) {

                // Estilos de linea
                vm.ctxTitular.lineJoin = vm.ctxTitular.lineCap = 'round';
                vm.ctxTitular.lineWidth = 2;
                // Color de la linea
                vm.ctxTitular.strokeStyle = 'black';
                // Marca el nuevo punto
                vm.nuevaPosicionXTitular = 0;
                vm.nuevaPosicionYTitular = 0;
                if (event.changedTouches === undefined) {
                    // Versión ratón
                    vm.nuevaPosicionXTitular = event.offsetX;
                    vm.nuevaPosicionYTitular = event.offsetY;
                } else {
                    // Versión touch, pantalla tactil
                    vm.nuevaPosicionXTitular = event.changedTouches[0].pageX - vm.correccionXTitular;
                    vm.nuevaPosicionYTitular = event.changedTouches[0].pageY - vm.correccionYTitular;
                }
                // Guarda la linea
              
                vm.lineasTitular[vm.lineasTitular.length - 1].push({
                    x: vm.nuevaPosicionXTitular,
                    y: vm.nuevaPosicionYTitular
                });
                // Redibuja todas las lineasContratante guardadas
               
                vm.ctxTitular.beginPath();
                    vm.lineasTitular.forEach(function (segmento) {
                            vm.ctxTitular.moveTo(segmento[0].x, segmento[0].y);
                            segmento.forEach(function (punto) {
                                vm.ctxTitular.lineTo(punto.x, punto.y);
                            });
                    });
                vm.ctxTitular.stroke();
            }
        }

        vm.pararDibujarTitular = pararDibujarTitular;
        function pararDibujarTitular() {
            vm.pintarLineaTitular = false;
        }


        vm.activarVariablesFirmaTitular = activarVariablesFirmaTitular;
        function activarVariablesFirmaTitular() {
            
            if (vm.steps.emision) {
                vm.canvasTitular = document.querySelector('#canvasFirmaTitular');
                vm.ctxTitular = vm.canvasTitular.getContext('2d');

                vm.lineasTitular = [];
                vm.correccionXTitular = 0;
                vm.correccionYTitular = 0;
                vm.pintarLineaTitular = false;

                vm.posicionTitular = vm.canvasTitular.getBoundingClientRect();
                vm.correccionXTitular = vm.posicionTitular.x;
                vm.correccionYTitular = vm.posicionTitular.y;

                vm.canvasTitular.width = 500;
                vm.canvasTitular.height = 200;
            }
        }

        vm.empezarDibujoContratante = empezarDibujoContratante;
        function empezarDibujoContratante() {
            vm.firmaDibujadaServicioContratante = true;
            vm.pintarLineaContratante = true;
            vm.lineasContratante.push([]);
        }

        vm.dibujarLineaContratante = dibujarLineaContratante;
        function dibujarLineaContratante(event) {
            event.preventDefault();
            if (vm.pintarLineaContratante) {

                // Estilos de linea
                vm.ctxContratante.lineJoin = vm.ctxContratante.lineCap = 'round';
                vm.ctxContratante.lineWidth = 2;
                // Color de la linea
                vm.ctxContratante.strokeStyle = 'black';
                // Marca el nuevo punto
                vm.nuevaPosicionXContratante = 0;
                vm.nuevaPosicionYContratante = 0;
                if (event.changedTouches === undefined) {
                    // Versión ratón
                    vm.nuevaPosicionXContratante = event.offsetX;
                    vm.nuevaPosicionYContratante = event.offsetY;
                } else {
                    // Versión touch, pantalla tactil
                    vm.nuevaPosicionXContratante = event.changedTouches[0].pageX - vm.correccionXContratante;
                    vm.nuevaPosicionYContratante = event.changedTouches[0].pageY - vm.correccionYContratante;
                }
                // Guarda la linea
                vm.lineasContratante[vm.lineasContratante.length - 1].push({
                    x: vm.nuevaPosicionXContratante,
                    y: vm.nuevaPosicionYContratante
                });
                // Redibuja todas las lineasContratante guardadas
                vm.ctxContratante.beginPath();
                vm.lineasContratante.forEach(function (segmento) {
                    vm.ctxContratante.moveTo(segmento[0].x, segmento[0].y);
                    segmento.forEach(function (punto) {
                        vm.ctxContratante.lineTo(punto.x, punto.y);
                    });
                });
                vm.ctxContratante.stroke();
            }
            
        }

        vm.pararDibujarContratante = pararDibujarContratante;
        function pararDibujarContratante() {
            vm.pintarLineaContratante = false;
            
        }


        vm.activarVariablesFirmaContratante = activarVariablesFirmaContratante;
        function activarVariablesFirmaContratante() {
            if (vm.steps.emision) {
                vm.canvasContratante = document.querySelector('#canvasFirmaContratante');
                vm.ctxContratante = vm.canvasContratante.getContext('2d');

                vm.ctxContratante.fillStyle = '#fff';  /// set white fill style
                vm.ctxContratante.fillRect(0, 0, vm.canvasContratante.width, vm.canvasContratante.height);

                vm.lineasContratante = [];
                vm.correccionXContratante = 0;
                vm.correccionYContratante = 0;
                vm.pintarLineaContratante = false;

                vm.posicionContratante = vm.canvasContratante.getBoundingClientRect();
                vm.correccionXContratante = vm.posicionContratante.x;
                vm.correccionYContratante = vm.posicionContratante.y;

                vm.canvasContratante.width = 500;
                vm.canvasContratante.height = 200;
            }
        }


        vm.empezarDibujoAgente = empezarDibujoAgente;
        function empezarDibujoAgente() {
            vm.firmaDibujadaServicioAgente = true;
            vm.lineasAgente.push([]);
            vm.pintarLineaAgente = true;
        }

        vm.dibujarLineaAgente = dibujarLineaAgente;
        function dibujarLineaAgente(event) {
            event.preventDefault();
            if (vm.pintarLineaAgente) {
                // Estilos de linea
                vm.ctxAgente.lineJoin = vm.ctxAgente.lineCap = 'round';
                vm.ctxAgente.lineWidth = 2;
                // Color de la linea
                vm.ctxAgente.strokeStyle = 'black';
                // Marca el nuevo punto
                vm.nuevaPosicionXAgente = 0;
                vm.nuevaPosicionYAgente = 0;
                if (event.changedTouches === undefined) {
                    // Versión ratón
                    vm.nuevaPosicionXAgente = event.offsetX;
                    vm.nuevaPosicionYAgente = event.offsetY;
                } else {
                    // Versión touch, pantalla tactil
                    vm.nuevaPosicionXAgente = event.changedTouches[0].pageX - vm.correccionXAgente;
                    vm.nuevaPosicionYAgente = event.changedTouches[0].pageY - vm.correccionYAgente;
                }
                // Guarda la linea
                vm.lineasAgente[vm.lineasAgente.length - 1].push({
                    x: vm.nuevaPosicionXAgente,
                    y: vm.nuevaPosicionYAgente
                });
                if(vm.lineasAgente)
                    // Redibuja todas las lineasContratante guardadas
                    vm.ctxAgente.beginPath();
                    vm.lineasAgente.forEach(function (segmento) {
                    vm.ctxAgente.moveTo(segmento[0].x, segmento[0].y);
                    segmento.forEach(function (punto) {
                        vm.ctxAgente.lineTo(punto.x, punto.y);
                    });
                });
                vm.ctxAgente.stroke();
            }
            
        }

        vm.pararDibujarAgente = pararDibujarAgente;
        function pararDibujarAgente() {
            vm.pintarLineaAgente = false;
        }


        vm.activarVariablesFirmaAgente = activarVariablesFirmaAgente;
        function activarVariablesFirmaAgente() {
            if (vm.steps.emision) {
                vm.canvasAgente = document.querySelector('#canvasFirmaAgente');
                vm.ctxAgente = vm.canvasAgente.getContext('2d');

                vm.ctxAgente.fillStyle = '#fff';  /// set white fill style
                vm.ctxAgente.fillRect(0, 0, vm.canvasAgente.width, vm.canvasAgente.height);

                vm.lineasAgente = [];
                vm.correccionXAgente = 0;
                vm.correccionYAgente = 0;
                vm.pintarLineaAgente = false;

                vm.posicionAgente = vm.canvasAgente.getBoundingClientRect();
                vm.correccionXAgente = vm.posicionAgente.x;
                vm.correccionYAgente = vm.posicionAgente.y;

                vm.canvasAgente.width = 500;
                vm.canvasAgente.height = 200;
            }
        }

        vm.limpiarFirmaContratante = limpiarFirmaContratante;
        function limpiarFirmaContratante() {
            
            vm.ctxContratante.clearRect(0, 0, vm.canvasContratante.width, vm.canvasContratante.height);
            vm.lineasContratante = [];
            vm.correccionXContratante = 0;
            vm.correccionYContratante = 0;
            vm.pintarLineaContratante = false;
            vm.firmaDibujadaServicioContratante = false;
        }

        vm.esFumador = esFumador;
        function esFumador(indiceAsegurado){
            if(vm.jsonCuestionario[0].answerDataList.answerSelected[indiceAsegurado].id === "1"){
                
                for(var i=0; i<vm.jsonCuestionario[0].subquestionDataList.subquestionData.length;i++){
                    vm.jsonCuestionario[0].subquestionDataList.subquestionData[i].answerDataList.answerSelected[indiceAsegurado] = vm.jsonCuestionario[0].subquestionDataList.subquestionData[i].answerDataList.answerList[0];
                } 
                return true;
            }else{
                return false;
            }
        }

               function tieneInput(){
                    var _input = [];
                        for(var i = 0 ;  i< vm.asegurados.length;  i++){
                        _input[i] ="";
                   }
    
                return _input;
            }
                    
                   
                 
             


        //  }

        vm.limpiarFirmaAgente = limpiarFirmaAgente;
        function limpiarFirmaAgente() {
            
            vm.ctxAgente.clearRect(0, 0, vm.canvasAgente.width, vm.canvasAgente.height);
            vm.lineasAgente = [];
            vm.correccionXAgente = 0;
            vm.correccionYAgente = 0;
            vm.pintarLineaAgente = false;
            vm.firmaDibujadaServicioAgente = false;
        }

        vm.limpiarFirmaTitular = limpiarFirmaTitular;
        function limpiarFirmaTitular() {
            
            vm.ctxTitular.clearRect(0, 0, vm.canvasTitular.width, vm.canvasTitular.height);
            vm.lineasTitular = [];
            vm.correccionXTitular = 0;
            vm.correccionYTitular = 0;
            vm.pintarLineaTitular = false;
            vm.firmaDibujadaServicioTitular = false;
        }
        

        vm.cargaDocumento = cargaDocumento;
        function cargaDocumento() {

            var params = {
                language: 'SPA',
                usuario: vm.emitContratante.nombres,
                nombreUsuario: vm.emitContratante.nombres,
                apellidoUsuario: vm.emitContratante.primerApellido,
                fecNacimiento: moment(vm.emitContratante.fechaNacimiento).format("DD/MM/YYYY"),
                nacionalidad: 'MEXICANA',
                rfc: vm.emitContratante.rfc,
                nombre: vm.fileName,
                contenido: vm.fileB64
            };

            insuranceMedicalEmission.setMedicalExpenseDocsRegistration(params).then(function (response) {

                if (response.success) {
                    console.log("setMedicalExpenseDocsRegistration correcto");
                }
                
            }).catch(function (error) {
                console.log("error carga de documento: ", error);
            });
        }
        
    vm.getCatalagoOcupaciones = getCatalagoOcupaciones;
        function getCatalagoOcupaciones() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogExpenseJob().then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                          _listaObtenida.push({
                              id: value.jobID,
                              text: value.jobDescription
                          });
                     });
                 }
                 vm.listaCatalagoOcupaciones = _listaObtenida;
            });
            return _listaObtenida;
        }

        

        vm.getCatalagoDeportes = getCatalagoDeportes;
        function getCatalagoDeportes() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogExpenseSports().then(function (response) {
                
                
                if (response.success) {
                    _listaObtenida.push({
                        id: "1",
                        text: "NINGUNO"
                    });
                     angular.forEach(response.info, function (value) {
                          _listaObtenida.push({
                              id: value.sportID,
                              text: value.sport
                          });
                     });
                 }
                // vm.listaCatalogoDeportes = _listaObtenida;
            });
            return _listaObtenida;
        }

        vm.getCatalogoNumAsegurados = getCatalogoNumAsegurados;
        function getCatalogoNumAsegurados() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogPolicyNumber().then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                          _listaObtenida.push({
                              id: value.policyHolderID,
                              text: value.policyHolderDescription
                          });
                     });
                 }
            });
            return _listaObtenida;
        }

        vm.validaMuniciEmission = validaMuniciEmission;
        function validaMuniciEmission() {
            if(vm.emitContratante.municipio){
                vm.validaMunEmission =  false;
            }else{
                vm.validaMunEmission =  true;
            }  
        }

        vm.validaMunici = validaMunici;
        function validaMunici() {
            if(vm.cmd.municipio){
                vm.validaMun =  false;
            }else{
                vm.validaMun =  true;
            }  
        }




        vm.getCatalogoMedicalEntidadesEmision = getCatalogoMedicalEntidadesEmision;
        function getCatalogoMedicalEntidadesEmision() {
            var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogMedicalState().then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.stateID,
                            text: value.stateDescription
                        });
                    });
                }
            });
            vm.entidadesEmision = _listaObtenida;
            return vm.entidadesEmision;
        }

        vm.getCatalogoMedicalEntidades = getCatalogoMedicalEntidades;
        function getCatalogoMedicalEntidades() {
            var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogMedicalState().then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.stateID,
                            text: value.stateDescription
                        });
                    });
                }
            });
            return _listaObtenida;
        }
        vm.selectRadio = selectRadio;
        function selectRadio(lastValue, newValue, indexAsegurado, indexSub, indexPreg, indexResp){
            
            if(indexSub !== null && indexSub !== ''){
                vm.jsonCuestionario[indexPreg].answerDataList.answerSelected[indexAsegurado] = vm.jsonCuestionario[indexPreg].answerDataList.answerList[indexResp] ;
            }else{
                vm.jsonCuestionario[indexPreg].subquestionDataList.subquestionData[indexSub].answerDataList.answerSelected[indexAsegurado] = vm.jsonCuestionario[indexPreg].subquestionDataList.subquestionData[indexSub].answerDataList.answerList[indexResp];
            }
        }
        
        vm.onChangeNumAsegurados = onChangeNumAsegurados;
        function onChangeNumAsegurados(lastValue, newValue) {
            vm.showCollapseDatosCliente = true;
            vm.collapseInClassDatosCliente = true;

            if (parseInt(newValue.text) < vm.dependientes.length) {
                CommonModalsSrv.error("El número de dependientes registrados es mayor al número de asegurados seleccionados. Favor de actualizar los dependientes registrados.");
            }
        }

        vm.onChangeListEntityEmission = onChangeListEntityEmission;
        function onChangeListEntityEmission(newValue) {
            var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogMedicalLocation(newValue.id).then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.locationID,
                            text: value.locationDescription
                        });
                    });
                }
                if (!vm.emitContratante) {
                    vm.emitContratante = {};
                }
                vm.emitContratante.municipio = null;
                vm.ListMedicalLocacionEmission = _listaObtenida;
                validaMuniciEmission();
            });
            return vm.ListMedicalLocacionEmission;
        }


        vm.onChangeListEntity = onChangeListEntity;
        function onChangeListEntity(newValue) {
            var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogMedicalLocation(newValue.id).then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.locationID,
                            text: value.locationDescription
                        });
                    });
                }
                if (!vm.cmd) {
                    vm.cmd = {};
                }
                vm.cmd.municipio = null;
                vm.ListMedicalLocacion = _listaObtenida;
                validaMunici();
            });
            return vm.ListMedicalLocacion;
        }

        vm.getCatalogoMedicalParentescos = getCatalogoMedicalParentescos;
        function getCatalogoMedicalParentescos() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getMedicalExpenseRelationship().then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                          _listaObtenida.push({
                              id: value.expenseRelationshipID,
                              text: value.expenseRelationshipDescription
                          });
                     });
                     
                     vm.dataParentescoList = {};
                     vm.dataParentescoList.type = _listaObtenida[0];
                 }
            });
            return _listaObtenida;
        }

        vm.getCatalogoMedicalProfesiones = getCatalogoMedicalProfesiones;
        function getCatalogoMedicalProfesiones() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getCatalogExpenseProfessions().then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                          _listaObtenida.push({
                              id: value.professionID,
                              text: value.profession
                          });
                     });
                 }
            });
            return _listaObtenida;
        }

        // 4 servicios coaseguro, Tope coaseguro, deducible, deducible red
            
        vm.getCatalogoMedicalDeducible = getCatalogoMedicalDeducible;
        function getCatalogoMedicalDeducible(newValue) {
             var _listaObtenida = [];
            insuranceMedicalSrv.getMedicalExpenseDeductible(newValue).then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                           _listaObtenida.push({
                               id: value.deductibleID,
                               text: value.deductibleDescription
                           });
                     });
                     vm.listaDeduciblePad = _listaObtenida;
                     vm.grupos[0].coberturas[0].intervalos.deduciblePad.listIntervalo = vm.listaDeduciblePad;
                 }
            });
        }

        vm.getCatalogoMedicalCoaseguro = getCatalogoMedicalCoaseguro;
        function getCatalogoMedicalCoaseguro(newValue) {
             var _listaObtenida = [];
            insuranceMedicalSrv.getMedicalExpenseCoinsurance(newValue).then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                           _listaObtenida.push({
                               id: value.coinsuranceID,
                               text: value.coinsuranceDescription
                           });
                     });
                     vm.listaCoaseguro = _listaObtenida;
                     vm.grupos[0].coberturas[0].intervalos.coaseguro.listIntervalo = vm.listaCoaseguro;
                 }
            });
        }

        vm.getCatalogoMedicalDeducibleRed = getCatalogoMedicalDeducibleRed;
        function getCatalogoMedicalDeducibleRed(newValue) {
             var _listaObtenida = [];
            insuranceMedicalSrv.getMedicalExpenseDeductibleRed(newValue).then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                           _listaObtenida.push({
                               id: value.deductibleRedID,
                               text: value.deductibleRedDescription
                           });
                     });
                     vm.listaDeducibleRed = _listaObtenida;
                     if(vm.grupos.length === 5){
                        vm.grupos[1].coberturas[4].intervalos.sa.listIntervalo = vm.listaDeducibleRed;
                     }else{
                         vm.grupos[5].coberturas[4].intervalos.sa.listIntervalo = vm.listaDeducibleRed;
                     }
                 }
            });
        }

        vm.getCatalogoMedicalTopeCoaseguro = getCatalogoMedicalTopeCoaseguro;
        function getCatalogoMedicalTopeCoaseguro(newValue) {
             var _listaObtenida = [];
            insuranceMedicalSrv.getMedicalExpenseMaxCoinsurance(newValue).then(function (response) {
                
                if (response.success) {
                     angular.forEach(response.info, function (value) {
                           _listaObtenida.push({
                               id: value.maxCoinsuranceID,
                               text: value.maxCoinsuranceDescription
                           });
                     });
                     vm.listaTopeCoaseguro = _listaObtenida;
                     vm.grupos[0].coberturas[0].intervalos.topecoaseguro.listIntervalo = vm.listaTopeCoaseguro;
                 }
            });
        }
        
        
        vm.getMedicalNacionalidad = getMedicalNacionalidad;
        function getMedicalNacionalidad(){
            
            var _listaObtenida = [];
            
            var _params = {
                language: 'SPA'
            };

            insuranceMedicalSrv.getInsuranceCountryQuery(_params).then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.countryISO,
                            text: value.country
                        });
                    });
                }
            });

            return _listaObtenida;
        }
        
        vm.asignaNacionalidadDefault = asignaNacionalidadDefault;
        function asignaNacionalidadDefault() {
            
            if (!vm.emitContratante) {
                vm.emitContratante = {};
            }
            vm.emitContratante.paisNacimiento = {
                type: {
                    id: "MEX",
                    text: "MEXICO"
                }
            };

            vm.emitContratante.nacionalidad = {
                type: {
                    id: "MEX",
                    text: "MEXICO"
                }
            };

            for (var i = 0; i < vm.emitDependientes.length; i++) {

                if (!vm.comboDependientes[i]) {
                    vm.comboDependientes[i] = {};
                }

                vm.comboDependientes[i].pais = {
                    id: "MEX",
                    text: "MEXICO"
                };
                
                vm.comboDependientes[i].nacionalidad = {
                    id: "MEX",
                    text: "MEXICO"
                };
                
                vm.emitDependientes[i].nacionality = "MEX";
                vm.emitDependientes[i].countryISO = "MEX";
            }
        }
        
        vm.getCatalogoGiroMercantil = getCatalogoGiroMercantil;
        function getCatalogoGiroMercantil() {
            var _listaObtenida = [];
            insuranceMedicalSrv.getInsuranceBusinessActivityQuery().then(function (response) {

                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.businessID,
                            text: value.businessName
                        });
                    });
                }
            });
            return _listaObtenida;
        }
        
        
        vm.getCatalogoIdentificacion = getCatalogoIdentificacion;
        function getCatalogoIdentificacion() {
             var _listaObtenida = [];
            insuranceMedicalSrv.getInsuranceIdentificationTypeQuery().then(function (response) {

                if (response.success) {
                     angular.forEach(response.info, function (value) {
                             _listaObtenida.push({
                              id: value.identificationTypeID,
                              text: value.identificationType
                          });
                     });
                }
            });
             return _listaObtenida;
        }

        //SETVICIO DE FIRMAS 

        vm.servicioEnvioDeFirmas = servicioEnvioDeFirmas;
        function servicioEnvioDeFirmas() {
            var _paramsFirmas ={
                 language : "SPA",
                 usuario : vm.emitContratante.nombres,
                 nombreUsuario : vm.emitContratante.nombres,
                 apellidoUsuario : vm.emitContratante.primerApellido,
                 fecNacimiento : moment(vm.emitContratante.fechaNacimiento).format("DD/MM/YYYY"),
                 nacionalidad :"MEXICANA" ,
                 rfc : vm.emitContratante.rfc ,
                 nomArchivo :"FIRMA" + vm.emission.policyNumber + ".jpg",
                 base64: vm.firmasEnBase64
             };
            insuranceMedicalEmission.servicioFirmas(_paramsFirmas).then(function (response) {
                if (response.success) {
                    
                }
            });
        }

        //Guardar Selección

        vm.guardarSeleccion = guardarSeleccion;
        function guardarSeleccion(codigoPaquete,metodoPago,numeroCotizacion) {
            var _paramsGuardaSeleccion = {
                language : 'SPA',
                quotationNumber :numeroCotizacion,
                packageCode : codigoPaquete,
                paymentMethod : metodoPago
            };
            insuranceMedicalEmission.saveSelection(_paramsGuardaSeleccion).then(function (response) {
                if (response.success) {
                }
            });
        }

        //Actualizar Solicitud

        vm.actualizarSolicitud = actualizarSolicitud;
        function actualizarSolicitud(nombrePaquete,paqueteCodigo,numeroDeCotizacion) {
            var _paramsActualizarSolicitud ={
                language : 'SPA',
                quotationNumber : numeroDeCotizacion,
                _package : nombrePaquete,
                packageCode : paqueteCodigo
            };
            insuranceMedicalEmission.updateRequest(_paramsActualizarSolicitud).then(function (response) {
                if (response.success) {
                }
            });
        }

        //SERVICIO DE EMISION

        vm.getJsonEmision = getJsonEmision;  
        function getJsonEmision() {
            console.log("comienza a emitir");
            vm.clientData={ 
                name : vm.emitContratante.nombres, 
                lastName : vm.emitContratante.primerApellido, 
                secondLastName : vm.emitContratante.segundoApellido, 
                birthDate : moment(vm.emitContratante.fechaNacimiento, 'DD/MM/YYYY').format('YYYY-MM-DD'), 
                age : vm.emitContratante.edad ? vm.emitContratante.edad : "" , 
                gender : vm.emitContratante.sexContract === "masculino" ? "1" : "0", 
                curp : vm.emitContratante.curp ? vm.emitContratante.curp.toUpperCase() : "", 
                fiscalIDNumber : vm.emitContratante.rfc, 
                renewalNumber : "0", 
                imcAttemps : "0", 
                countryISO : vm.emitContratante.paisNacimiento ? vm.emitContratante.paisNacimiento.type.id : "", 
                nacionality : vm.emitContratante.nacionalidad.type.id,
                professionID : vm.emitContratante.profesion ? vm.emitContratante.profesion.type.id : ""
            };
    
            vm.notificationMeansData={
                email : vm.emitContratante.email ? vm.emitContratante.email : "", 
                cellPhone : vm.emitContratante.celular ? vm.emitContratante.celular : "" , 
                phoneNumber : vm.emitContratante.telefono ? vm.emitContratante.telefono : ""
            };
    
            vm.addressData={
                street: vm.emitContratante.calle, 
                outdoorNumber: vm.emitContratante.numeroExterior, 
                interiorNumber: vm.emitContratante.numeroInterior ? vm.emitContratante.numeroInterior : "", 
                postalCode: vm.emitContratante.codigoPostal, 
                federalEntityID: vm.emitContratante.estado.id, 
                delegationMunicipalityID: vm.emitContratante.municipio.id, 
                neighborhood: vm.emitContratante.colonia
            };
    
                //  vm.dependentDataList = [{
                //      riskNumber : "1", 
                //      name : "LUIS", 
                //      lastName : "CASTANEDA", 
                //      secondLastName : "MEDINA", 
                //      birthDate : "1970-05-06", 
                //      age : "49", 
                //      genderDesc : "Masculino",
                //      gender : "1", 
                //      jobDescription : "-", 
                //      sport : "-", 
                //      relationshipID : "1", 
                //      relationship : "TITULAR", 
                //      fiscalIDNumber : "TETS7005065E4", 
                //      renewalNumber : "0", 
                //      weight : "60", 
                //      height : "1.60", 
                //      imc : "23.44", 
                //      imcAttemps : "0", 
                //      countryISO : "MEX", 
                //      nacionality : "MEX", 
                //      businessID : "0", 
                //      handlesMachineryFlag :"0", //vm.emitTitular.tipoMaquinaria ? "1" : 
                //      excludedFlag : "0", 
                //      professionID : ""
                //      }]

                    var paramsEmision = {
                        language:'SPA',
                        clientData: JSON.stringify(vm.clientData),
                        notificationMeansData: JSON.stringify(vm.notificationMeansData),
                        addressData: JSON.stringify(vm.addressData),
                        dependentDataList : JSON.stringify(vm.emitDependientes),
                        accidentalDeathFlag:false, 
                        insurancePolicyDate:moment().format('YYYY-MM-DD'), 
                        policyMaturityDate:moment().add(1, 'years').format('YYYY-MM-DD'),
                        quotationNumber:vm.emission.quotationNumber,
                        quotationName:"", 
                        agentCode:$scope.$parent.agentSelected.id, 
                        personType: vm.tipoPersona ="1" ? "F" : "M", 
                        companyName:"",
                        establishmentDate:"1996-08-10",
                        businessID:0,
                        identificationTypeID:vm.emitContratante.tipoIdentificacion.type.id, 
                        numberID:64464654654546,
                        clientNumber : vm.numeroCliente,
                        adviserID : '951753'
                    };
             insuranceMedicalEmission.getMedExpInsurancePolicyRegistration(paramsEmision).then(function (response) {

                if (response.success) {
                    console.log("éxito al emitir", response.info);
                    vm.jsonEmision =  response.info;

                    vm.emission.policyNumber = vm.jsonEmision.policyNumber;
                    if(vm.firmaDibujadaServicioTitular && vm.firmaDibujadaServicioAgente && vm.firmaDibujadaServicioContratante && vm.firmaLabel){
                        dibujarFirmasJuntas();
                    }
                    setAperturaTramite(paramsEmision, response);

                } else {
                    
                    if (response.info.result === 2 && response.info.messages && response.info.messages.length > 0 && response.info.messages[0].responseMessage.includes('LA FECHA DE NACIMIENTO ES DIFERENTE A LA FECHA CONTENIDA EN EL RFC')) {
                        CommonModalsSrv.error("No se ha podido realizar la emisión. La fecha de nacimiento es diferente a la fecha contenida en el RFC.");
                    } else {
                        CommonModalsSrv.error("No se ha podido realizar la emisión. Intente más tarde. Error 1");
                    }
                    vm.emitirDisabled = false;
                }
            }).catch(function (error) {
                console.log("error emision: ", error);
                CommonModalsSrv.error("No se ha podido realizar la emisión. Intente más tarde. Error 2");
                vm.emitirDisabled = false;
            });
        }
        
        // servicio de cuestionario
        vm.getCuestionarioEmision = getCuestionarioEmision;
        function getCuestionarioEmision() {
            insuranceMedicalEmission.getMedExpInsuranceQuestionnaireQuery().then(function (response) {
                if (response.success) {
                        vm.jsonCuestionario = response.info.questionData;
                        angular.forEach(vm.jsonCuestionario, function(res){
                            if(res.freeTextFlag){
                                res.answerDataList.answerInput=tieneInput();
                            }
                            if(res.answerDataList.answerData !== undefined && res.answerDataList.answerData.length !== 0){
                                res.answerDataList.answerList = getRespuestas(res.answerDataList.answerData);
                                angular.forEach(res.answerDataList.answerData, function(resp){
                                    if(res.value === resp.key){
                                        res.answerDataList.answerSelected = getSelecteds(resp);
                                    }
                                });
                            }
                            angular.forEach(res.subquestionDataList.subquestionData, function(ques){
                                if(ques.answerDataList.answerData !== undefined && ques.answerDataList.answerData.length !== 0){
                                    ques.answerDataList.answerList = getRespuestas(ques.answerDataList.answerData);
                                    angular.forEach(ques.answerDataList.answerData, function(subres){
                                        if(ques.value === subres.key){
                                            ques.answerDataList.answerSelected = getSelecteds(subres);
                                        }
                                    });
                                }
                            });

                        });
                     
                        console.log(vm.jsonCuestionario);      
                 }
            });
        }

        function getSelecteds(object){
            var _selected = [];
            for(var i = 0 ;  i< vm.asegurados.length;  i++){
                _selected[i] = {id : object.key, text :  object.value};
            }

            return _selected;
        }

        function getRespuestas(list){
            var _listaObtenida = [];

            if (Array.isArray(list)) {
                angular.forEach(list, function (value) {
                    _listaObtenida.push(
                        {
                            id: value.key,
                            text: value.value
                        }
                    );
                });
                return _listaObtenida;
            
            } else if (list === "") {
                return 0;
            } else {
                angular.forEach(createListObject(list), function (value) {
                    _listaObtenida.push(
                        {
                            id: value.key,
                            text: value.value
                        }
                    );
                });
                return _listaObtenida;
            }
        }
        
        
        vm.registroCuestionario = registroCuestionario;
        function registroCuestionario() {
            
            vm.emitirDisabled = true;
            
            vm.answer = {
                answerDataList: []
            };

            angular.forEach(vm.jsonCuestionario, function (value) {

                var _dependentDataList = [];

                angular.forEach(value.answerDataList.answerSelected, function (v, index) {

                    var dD = {
                        riskNumber: vm.asegurados[index].num_riesgo,
                        answer: v.id
                    };

                    if (value.freeTextFlag) {
                        console.log("value.freeTextFlag ", value.freeTextFlag, value.questionID);
                        if (v.id === '2') {
                            dD.freeText = value.answerDataList.answerInput[index];
                        }
                    }

                    _dependentDataList.push({
                        dependentData: dD
                    });
                });

                if (_dependentDataList.length > 0) {
                    vm.answer.answerDataList.push({
                        answerData: {
                            questionID: value.questionID,
                            dependentDataList: _dependentDataList
                        }
                    });
                }

                if (value.subquestionDataList && value.subquestionDataList.subquestionData && value.subquestionDataList.subquestionData.length > 0) {

                    angular.forEach(value.subquestionDataList.subquestionData, function (sub) {

                        var _dependentDataList = [];
                        if (sub.answerDataList.answerSelected) {
                            angular.forEach(sub.answerDataList.answerSelected, function (subAnsDep, index) {
                                _dependentDataList.push({
                                    dependentData: {
                                        riskNumber: vm.asegurados[index].num_riesgo,
                                        answer: subAnsDep.id
                                    }
                                });
                            });

                            if (_dependentDataList.length > 0) {
                                vm.answer.answerDataList.push({
                                    answerData: {
                                        questionID: sub.questionID,
                                        dependentDataList: _dependentDataList
                                    }
                                });
                            }
                        }
                    });
                }
            });

            console.log("vm.answer, ", vm.answer);
            var params = {
                language: 'SPA',
                quotationNumber: vm.emission.quotationNumber,
                answerDataList: JSON.stringify(vm.answer)
            };

            insuranceMedicalEmission.getMedExpInsuranceQuestRegistration(params).then(function (response) {

                if (response.success) {
                    console.log("éxito al mandar cuestionario 1");
                    validaCuestionario();
                    console.log("éxito al mandar cuestionario 2");
                    
                    
                }
                else{
                    vm.emitirDisabled = false;
                }
            }).catch(function (error) {
                console.log("error registro cuestionario: ", error);
                vm.emitirDisabled = false;
            });
        }
        
        vm.validaCuestionario = validaCuestionario;
        function validaCuestionario() {
            
            var params = {
                language: 'SPA',
                numSolicitud: vm.emission.quotationNumber
            };
            
            insuranceMedicalEmission.getMedExpInsuranceQuestValidation(params).then(function (response) {

                console.log("validar cuestionario", response);
                if (response.success) {
                    console.log("éxito al validar cuestionario", response.info);
                    
                    vm.jsonValidacionC = response.info;

                    var excluido = false;
                    var aseguradosExcluidos = "";

                    angular.forEach(vm.jsonValidacionC, function (asegurado) {
                        if (asegurado.padExcl !== '' || asegurado.padPunt !== '' || asegurado.padRechazo !== '') {
                            excluido = true;
                            aseguradosExcluidos += asegurado.nomRiesgo + ", ";
                        }
                    });

                    if (!excluido) {
                        getJsonEmision();
                    } else {
                        CommonModalsSrv.error("Debido a que no cumple con los parámetros aceptados de suscripción, no es posible asegurar a " + aseguradosExcluidos + " por lo cual se procederá a la cancelación de la cotización.");
                        cancelarCotizacionBD();
                        $state.go('insurance.main');
                    }
                } else {
                    CommonModalsSrv.error("No se ha podido realizar la emisión de la póliza. Inténtelo más tarde.");
                    vm.emitirDisabled = false;
                }
            }).catch(function (error) {
                console.log("error validacion: ", error);
                CommonModalsSrv.error("No es posible realizar la emisión de la póliza en este momento. Inténtelo más tarde.");
                vm.emitirDisabled = false;
            });
        }
        
        vm.setAperturaTramite = setAperturaTramite;
        function setAperturaTramite(paramsEmision, respEmision) {

            var _params = {
                language: 'SPA',
                codSecc: '2', //fijo
                ntSegCAcceso: '99687', //fijo
                wfSisCDocu: '1', //fijo
                codAgente: $scope.$parent.agentSelected.id,
                contratante: '0', //fijo
                complementarios: '0', //fijo
                rfcAsegStr: vm.titular.fiscalIDNumber,
                nomTercero: vm.titular.name,
                apePaterno: vm.titular.lastName,
                apeMaterno: vm.titular.secondLastName,
                domicilio: vm.emitContratante.calle + " " + vm.emitContratante.numeroExterior + " " + vm.emitContratante.numeroInterior,
                codPostal: vm.emitContratante.codigoPostal,
                colonia: vm.emitContratante.colonia,
                fechaNacimiento: moment(vm.titular.birthDate, 'YYYY-MM-DD').format('DD-MM-YYYY'),
                pTipoPersona: 'F', // persona Fisica (Asegurado Titular)
                pNacionalidad: vm.emitContratante.nacionalidad.type.id,
                fecIniVig: moment().format('DD-MM-YYYY'),
                fecFinVig: moment().add(1, 'years').format('DD-MM-YYYY'),
                productoAeInt: '34', //fijo
                planAeInt: '3401', //fijo
                codRamo: '288', //fijo
                contrato: '28801', //fijo
                observaciones: 'SE EMITE LA PÓLIZA: ' + vm.emission.policyNumber + ' FAVOR DE LIBERAR EN CASO DE QUE LA INFORMACIÓN SEA CORRECTA, SALUDOS Y GRACIAS.',
                numPoliza: vm.emission.policyNumber,
                movimientoPoli: '0'
            };

            insuranceMedicalEmission.setMedicalExpenseProcessingRequest(_params).then(function (response) {

                if (response.success) {
                    console.log("apertura correcta ", response);

                    vm.emission.numeroTramite = response.info.wfOtMOt;

                    actualizarCotizacionBD(paramsEmision, respEmision);
                } else {
                    CommonModalsSrv.error("No se ha podido realizar la apertura del trámite. Inténtelo más tarde. Error 1");
                    vm.emitirDisabled = false;
                }
            }).catch(function (error) {
                console.log("error tramite: ", error);
                CommonModalsSrv.error("No se ha podido realizar la apertura del trámite. Inténtelo más tarde. Error 2");
                vm.emitirDisabled = false;
            });
        }

        

       
            
            
        // vm.dependentDataList = [
        //     {
        //       riskNumber: 1,
        //       relationshipID: 1,
        //       relationship: "TITULAR",
        //       name: "ABRAHAM",
        //       lastName: "GUERRERO",
        //       secondLastName: "FLORES",
        //       gender: 1,
        //       genderDesc: "MASCULINO",
        //       jobID: 2,
        //       jobDescription: "ABODADO",
        //       birthDate: "2019-07-08",
        //       age: 37,
        //       fiscalIDNumber: "GUFA820331C49",
        //       curp: "",
        //       sportID: 0,
        //       sport: ""
        //     }
        // ];

        vm.createCoverageDataList = createCoverageDataList;
        function createCoverageDataList() {

            vm.coverageDataList = [];

            angular.forEach(vm.grupos, function (grup) {

                angular.forEach(grup.coberturas, function (cob) {

                    var insuredSumSelected = "1";
                    if (cob.intervalos.sa) {
                        insuredSumSelected = cob.intervalos.sa.intervaloSelected.id;
                    }

                    var packageList = [];
                    angular.forEach(cob.paquetes, function (paq) {

                        var flagPaquete = false;
                        if ((paq.mca_opc === "S" && paq.mod_chk === "1") || paq.mca_opc === "N") {
                            flagPaquete = true;
                        }

                        packageList.push({
                            packageCode: parseInt(paq.cod_paquete),
                            contractedPackageFlag: flagPaquete
                        });
                    });

                    vm.coverageDataList.push({
                        coverageCode: parseInt(cob.cod_cob),
                        insuredSum: parseInt(insuredSumSelected),
                        packageDataList: packageList
                    });
                });
            });
        }

          vm.datosVarCob = {
            codDeducible2800: "1",
            codPlanDental2824: "1",
            codPlanVision2825: "1",
            codRedHosp2800: "1",
            codTabulador2800: "1",
            codZonaInt: "",
            codZonaInt2821: "",
            fecAntigMat: "",
            impDeducible2800: "15000",
            impDeducible2821: "",
            impDeducible2823: "2000",
            impGtosRecienNac: "",
            numDiasCar2848: "0",
            numDiasCar2850: "0",
            pctCoaseguro2800: "10",
            pctCoaseguro2821: "0",
            pctCoaseguro2823: "10",
            pctTopeCoaseguro2800: "1",
            pctTopeCoaseguro2823: "6",
            sumaAseg2800: "40000000",
            sumaAseg2821: "25000",
            sumaAseg2823: "1000000",
            sumaAseg2826: "",
            sumaAseg2827: "",
            sumaAseg2830: "4000",
            sumaAseg2839: "10000",
            sumaAseg2840: "10000",
            sumaAseg2841: "",
            sumaAseg2842: "10000",
            sumaAseg2843: "",
            sumaAseg2844: "10000",
            sumaAseg2845: "",
            sumaAseg2846: "50000",
            sumaAseg2847: "50000",
            sumaAseg2849: "",
            sumaAseg2851: "",
            sumaAseg2852: "",
            sumaAseg2853: "",
            sumaAsegCar2848: "250",
            sumaAsegCar2850: "250"
          };

          

          

        //SERVICIO DE RECOTIZACIÓN

        vm.getJsonRecotizacion = getJsonRecotizacion;
        function getJsonRecotizacion() {
            
            createCoverageDataList();

            var paramsRecotizacion = {
                language : 'SPA',
                dependentDataList: JSON.stringify(vm.dependientes),
                coverageDataList: JSON.stringify(vm.coverageDataList),
                datosVarCob: JSON.stringify(vm.jsonCotizacion.ofertaComercial.datosVarCob),
                quotationNumber: vm.jsonCotizacion.quotationNumber,
                insurancePolicyDate: moment().format('YYYY-MM-DD'),
                policyMaturityDate: moment().add(1, 'years').format('YYYY-MM-DD'),
                customizeInsuranceQuotationFlag: 0,
                businessPackage: 'N',
                insuredPersonsQuantity: vm.dependientes.length,
                _package: vm.paquetes[vm.indexPaquete].nom_paquete,
                discountCode: '',
                discountCampaignID: '',
                discountCampaignValue: 0,
                commissionCessionFlag: 0,
                federalEntityID: vm.cmd.estado.id,
                federalEntity: vm.cmd.estado.text,
                delegationMunicipalityID: vm.cmd.municipio.id,
                delegationOrMunicipality: vm.cmd.municipio.text,
                agentCode: $scope.$parent.agentSelected.id
            };

            insuranceMedicalSrv.getMedicalExpenseInsuranceRequotation(paramsRecotizacion).then(function (response) {

                if (response.success) {
                    
                    vm.jsonRecotizacion = response.info;
                    vm.formasPago = getFormasPago(vm.jsonRecotizacion.ofertaComercial.formasPago.formaPago);
                    vm.oferta = vm.jsonRecotizacion.ofertaComercial.asegurados.asegurado;
                    getResumenCotizacion(vm.oferta);
                    vm.emailDisabled = false;
                    vm.recotizacionDisabled = true;
                }
                else{
                    vm.recotizacionDisabled = false;
                    CommonModalsSrv.error("El servicio de recotización  no está disponible por el momento.");
                }
            
            });
        }


        
        vm.guardarCotizacionBD = guardarCotizacionBD;
        function guardarCotizacionBD(){
            
            vm.titular = {};

            angular.forEach(vm.dependientes, function (val) {
                if (val.relationship === "TITULAR") {
                    vm.titular = val;
                }
            });

            var typePeople = vm.tipoPersona;

            if(vm.tipoPersona === '1' || vm.tipoPersona === 'F'){
                typePeople = '1';
            }else{
                typePeople = '2';
            }

            var _params = {
                language: 'SPA',
                idCliente: vm.numeroCliente,
                idCotizacion: vm.jsonCotizacion.quotationNumber,
                idPoliza: 0,
                fechaCotizacion: moment(new Date()).format('YYYY-MM-DD'),
                vigenciaCotizacion: moment(new Date(), 'YYYY-MM-DD').add(15, 'days').format('YYYY-MM-DD'),
                monto: 0,
                tipoCliente: typePeople,
                isCliente: vm.numeroCliente === "9999" ? '0' : '1',
                nombreCliente: typePeople === '1' ? vm.datosCliente ? vm.datosCliente.name : vm.titular.name.toUpperCase() : vm.datosCliente ? vm.datosCliente.companyName.toUpperCase() : vm.titular.name.toUpperCase(),
                apellidoPaternoCliente: typePeople === '1' ? vm.datosCliente ? vm.datosCliente.lastName : vm.titular.lastName.toUpperCase() : vm.datosCliente ? "" : vm.titular.lastName.toUpperCase(),
                apellidoMaternoCliente: typePeople === '1' ? vm.datosCliente ? vm.datosCliente.secondLastName : vm.titular.secondLastName.toUpperCase() : vm.datosCliente ? "" : vm.titular.secondLastName.toUpperCase(),
                fechaNacimiento: vm.datosCliente ? moment(vm.fechaNacimiento, 'DD/MM/YYYY').format('YYYY-MM-DD') : vm.titular.birthDate,
                rfcCliente: vm.datosCliente ? vm.datosCliente.fiscalIDNumber : vm.titular.fiscalIDNumber,
                sexoCliente: vm.datosCliente ? '1' : vm.titular.gender === 1 ? '1' : '2',
                mailCliente: vm.datosCliente ? vm.email : "email@email.com",
                telefonoCliente: vm.datosCliente ? vm.telefono : "5555555555",
                quotationJsonInit: {},
                quotationJsonEnd: {},
                productKey: 'PMM'
            };
            
            
            insuranceHousesSrv.getCotizationAdd(_params).then(function (_res) {
                if (_res.success) {
                    
                    vm.steps.recotizacion = true;
                    vm.collapseInClassDatosRiesgo = false;
                    vm.collapseInClassRequotationDetail = true;
                    
                    vm.recotizacionDisabled = true;
                    vm.emailDisabled = false;
                    
                    CommonModalsSrv.done("Envío de Cotización exitosa Número de Cotización: " + vm.jsonCotizacion.quotationNumber);
                    
                } else {
                    CommonModalsSrv.error("Envío de Cotización no fue exitoso.");
                }
                vm.cotizarDisabled = false;
            }).catch(function () {
                vm.cotizarDisabled = false;
            });
        }
        
        vm.actualizarCotizacionBD = actualizarCotizacionBD;
        function actualizarCotizacionBD() {

            var _data = {
                language: 'SPA',
                idCotizacion: vm.emission.quotationNumber,
                idPoliza: vm.emission.policyNumber,
                quotationJsonInit: {},
                quotationJsonEnd: {},
                numberAuthorizer: vm.emission.numeroTramite
            };

            insuranceMedicalEmission.procedureQuotation(_data).then(function (response) {

                if (response.success) {
                    CommonModalsSrv.done("Proceso Exitoso. Número de trámite asignado: " + vm.emission.numeroTramite);

                    vm.steps.emision = false;
                    vm.steps.entrega = true;
                } else {
                    CommonModalsSrv.error("El servicio de emisión no está disponible por el momento. Error 1");
                }
                vm.emitirDisabled = false;
            }).catch(function (error) {
                console.log("error actualizar: ", error);
                CommonModalsSrv.error("El servicio de emisión no está disponible por el momento. Error 2");
                vm.emitirDisabled = false;
            });

        }
        
        vm.cancelarCotizacionBD = cancelarCotizacionBD;
        function cancelarCotizacionBD() {

            var _data = {
                language: 'SPA',
                idCotizacion: vm.emission.quotationNumber,
                idPoliza: vm.emission.quotationNumber,
                quotationJsonInit: {},
                quotationJsonEnd: {},
                numberAuthorizer: '0'
            };

            // procedureJson
            insuranceMedicalEmission.cancelQuotation(_data).then(function (response) {

                if (response.success) {
                    console.log("cancelacion exitosa");
                }
                else{
                    console.log("cancelacion no exitosa 1");
                }

            }).catch(function () {
                console.log("cancelacion no exitosa 2");
            });
        }

        /*
        *
        * PANTALLA DE COTIZACIONES VIGENTES
        *
        * */

        function getAvailableQuotation() {

            var _clientData = model;

            var _params = {
                language: 'SPA',
                estado: 'VIGENTE',
                idCliente: _clientData.numeroCliente,
                productKey: 'PMM'
            };

            insuranceHousesSrv.getListQuotations(_params).then(function (list) {
                if (list.info !== "not-found" && list.info.length > 0) {
                    vm.steps.search = true;
                    angular.forEach(list.info, function (item, key) {
                        list.info[key].fechaCotizacion = moment(new Date(item.fechaCotizacion)).format('DD/MM/YYYY');
                        list.info[key].vigenciaCotizacion = moment(new Date(item.vigenciaCotizacion)).format('DD/MM/YYYY');
                        if(!item.apellidoPaternoCliente){
                            item.apellidoPaternoCliente = "";
                        }
                        if(!item.apellidoMaternoCliente){
                            item.apellidoMaternoCliente = "";
                        }
                        list.info[key].nombreCompleto = item.nombreCliente + " " + item.apellidoPaternoCliente + " " + item.apellidoMaternoCliente;
                    });
                    vm.responseAvailableQuotation = list.info;
                } else {
                    goDatosRiesgo();
                }

            });

        }

        vm.emitFromQuotation = function emitFromQuotation( q ) {
            localStorage.setItem('__quotation', JSON.stringify(q));
            vm.steps.search = false;
            vm.steps.cotizacion = false;
            vm.steps.recotizacion = false;
            vm.steps.emision = true;
            vm.trianguloAzul = "trianguloBlanco";
            vm.trianguloBorde = "triangulo";
            vm.pestCotiza = false;
            vm.pestEmision = true;
            getCatalogoMedicalEntidadesEmision();
            //Si el flujo se pasa directo desde la lista de cotizacion es false
            vm.flujoCompleto = false;
            
            datosEmision(q.idCotizacion);
            getJsonDetalleCotizacion(q.idCotizacion);
        };
        
        function datosEmision(idCotizacion){
            vm.emission.quotationNumber = idCotizacion;
        }


        vm.validaRfcContratanteAsegurados = validaRfcContratanteAsegurados;
        function validaRfcContratanteAsegurados() {
            
            var i;
            if (vm.dependientes.length > 0) {
                for (i = 0; i < vm.dependientes.length; i++) {
                    if ((vm.emitContratante.rfc === vm.dependientes[i].fiscalIDNumber) && (vm.emitContratante.sexContract.toLowerCase() !== vm.dependientes[i].genderDesc.toLowerCase())) {
                        CommonModalsSrv.error("El sexo del contratante no es igual al del asegurado " + vm.dependientes[i].relationship);
                        return true;
                    }

                }
            } else if((vm.dependientes.length === 0)) {
                for (i = 0; i < vm.emitDependientes.length; i++) {
                    if ((vm.emitContratante.rfc === vm.emitDependientes[i].fiscalIDNumber) && (vm.emitContratante.sexContract.toLowerCase() !== vm.emitDependientes[i].genderDesc.toLowerCase())) {
                        CommonModalsSrv.error("El sexo del contratante no es igual al del asegurado " + vm.emitDependientes[i].relationship);
                        return true;
                    }

                }

            }else{

            }
        }

        vm.validaRfcAseguradoContratante = validaRfcAseguradoContratante;
        function validaRfcAseguradoContratante() {
            
            var i;
            if (vm.dependientes.length > 0) {
                for (i = 0; i < vm.dependientes.length; i++) {
                    if ((vm.emitDependientes[i].fiscalIDNumber === vm.emitContratante.rfc) && (vm.emitDependientes[i].genderDesc.toLowerCase() !== vm.emitContratante.sexContract.toLowerCase())) {
                        CommonModalsSrv.error("El sexo del asegurado " + vm.emitDependientes[i].relationship + " no es igual al del contratante");
                        return true;
                    }

                }
            } else if((vm.dependientes.length === 0))  {
                for (i = 0; i < vm.emitDependientes.length; i++) {
                    if ((vm.emitDependientes[i].fiscalIDNumber === vm.emitContratante.rfc) && (vm.emitDependientes[i].genderDesc.toLowerCase() !== vm.emitContratante.sexContract.toLowerCase())) {
                        CommonModalsSrv.error("El sexo del asegurado " + vm.emitDependientes[i].relationship + " no es igual al del contratante");
                        return true;
                    }

                }
            }else{

            }
        }
        

        //FUNCIÓN PARA CALCULAR IMC
        vm.calcularImc = calcularImc;
        function calcularImc(index) {
            if (vm.emitDependientes[index].weight && vm.emitDependientes[index].height) {
                vm.Imc[index] = vm.emitDependientes[index].weight / Math.pow(vm.emitDependientes[index].height, 2);
                if (vm.Imc[index] >= 35) {
                    CommonModalsSrv.error("Índice de masa corporal. No es posible asegurar, debido a que no cumple con los parámetros aceptados de peso y estatura");
                    vm.emitDependientes[index].weight = undefined;
                    vm.emitDependientes[index].height = undefined;
                }
            }
            vm.emitDependientes[index].imc = vm.Imc[index];
        }
        
        vm.validaContratante = validaContratante;
        function validaContratante() {
            var invalid = angular.element(document.getElementById("collapseDatosdelContratante")).scope().formEmitContractor.$invalid;
            return (!invalid && !revisaCombosContratante());
        }

        vm.validaDependiente = validaDependiente;
        function validaDependiente(ind) {
            var invalid = angular.element(document.getElementById('accordion_' + ind)).scope()['formEmitDependent_' + ind].$invalid;
            return (!invalid && !revisaCombosDependientes(ind + 1));
        }
        
        vm.validaSiDependiente = validaSiDependiente;
        function validaSiDependiente(index) {

            var invalid = false;
            var relation = "";
            validaRfcContratanteAsegurados();

            if (index === 0) {
                invalid = angular.element(document.getElementById("collapseDatosdelContratante")).scope().formEmitContractor.$invalid;
                relation = "Contratante";
            } else {
                var ind = index - 1;
                invalid = angular.element(document.getElementById('accordion_' + ind)).scope()['formEmitDependent_' + ind].$invalid;
                relation = vm.emitDependientes[ind].relationship;
            }
            
            var id = "collapseDatos_" + index;
            if (invalid || revisaCombosDependientes(index) || validaRfcContratanteAsegurados()) {
                $('#' + id).on('show.bs.collapse', function (e) {
                    e.preventDefault();
                });
                vm.colapseEmision2[index] = false;
                CommonModalsSrv.error("Es necesario completar los datos requeridos de la sección \"Datos de " + relation + "\"");
                return false;
            } else {
                if(vm.emitDependientes[index].age >= 18){
                    vm.emitDependientes[index].asteriscoRequerido = "*";
                }else{
                    vm.emitDependientes[index].asteriscoRequerido = "";
                }
                    
                $('#' + id).unbind('show.bs.collapse');
                return true;
            }

        }

        vm.validaSiCuestionario = validaSiCuestionario;
        function validaSiCuestionario() {
            validaRfcAseguradoContratante();
            

            var ind = vm.emitDependientes.length - 1;
            var relation = vm.emitDependientes[ind].relationship;
            var invalid = angular.element(document.getElementById('accordion_' + ind)).scope()['formEmitDependent_' + ind].$invalid;
            
            if (invalid || revisaCombosDependientes(vm.emitDependientes.length) || validaRfcAseguradoContratante() || validaRfcContratanteAsegurados() ) {
                $('#collapseCuestionarioMedico').on('show.bs.collapse', function (e) {
                    e.preventDefault();
                });
                vm.colapseEmision3 = false;
                CommonModalsSrv.error("Es necesario completar los datos requeridos de la sección \"Datos de " + relation + "\"");
                // CommonModalsSrv.done("Envío de Cotización exitosa Número de Cotización: " + vm.jsonCotizacion.quotationNumber);
                return false;
            } else {
                $('#collapseCuestionarioMedico').unbind('show.bs.collapse');
                vm.esValidoFirmar = true;
                return true;
            }
        }

           vm.validaSiFirmaElectronica = validaSiFirmaElectronica;
           function validaSiFirmaElectronica() {

               var invalid = angular.element(document.getElementById("collapseCuestionarioMedico")).scope().formEmitSurvey.$invalid;
               if(invalid){
                   $('#collapseFirmaElectronica').on('show.bs.collapse', function (e) {
                       e.preventDefault();
                   });
                   vm.colapseEmision4 = false;
                   CommonModalsSrv.error("Favor de Completar sus respuestas para continuar");
               }else{

                   $('#collapseFirmaElectronica').on('show.bs.collapse', function (e) {
                       e.preventDefault();
                   });
                   vm.colapseEmision4 = false;
    
                   CommonModalsSrv.warning('Este seguro no cubre ningún padecimiento o enfermedad preexistente, entendiendo como tal, aquella enfermedad, lesión o defecto congénito y/o físico y/o mental que hayan sido diagnosticados o sea aparente a la vista, que se presuma se hayan originado con anterioridad a la fecha de la contratación del seguro. Favor de confirmar que no cuenta con ningún padecimiento preexistente.')
                       .result.then(
                           function ( ) {
    
                               if (vm.esValidoFirmar) {
    
                                   $('#collapseFirmaElectronica').unbind('show.bs.collapse');
                                   vm.colapseEmision4 = true;
                               }
    
                           }
                       ).catch(function () {
                        
    
                   });
               }
      
           }
        
        vm.getValoresEmision = getValoresEmision;
       function getValoresEmision(newValue,nombreCombo,index){
           switch (nombreCombo){
                case 'nacionalidad':
                    vm.emitDependientes[index].nacionality = newValue.id;
                    break;
                case 'profesion':
                    vm.emitDependientes[index].professionID = newValue.id ? newValue.id : "";
                    break;
                case 'pais':
                    vm.emitDependientes[index].countryISO = newValue.id ? newValue.id : "";
                    break;
                case 'giro':
                    vm.emitDependientes[index].businessID = newValue.id;
                    break;
           }

       }

        vm.createEmisionDependientes = createEmisionDependientes;
        function createEmisionDependientes() {
            
            vm.emitDependientes = [];
            angular.forEach(vm.dependientes, function (v) {

                vm.emitDependientes.push({
                    age: v.age !== undefined ? v.age : "",
                    birthDate: v.birthDate,
                    fiscalIDNumber: v.fiscalIDNumber,
                    gender: v.gender === 1 ? "1" : "0",
                    genderDesc: v.gender === 1 ? "Masculino" : "Femenino",
                    jobDescription: v.jobDescription ? v.jobDescription : "",
                    jobID: v.jobID ? v.jobID : "",
                    lastName: v.lastName,
                    name: v.name,
                    relationship: v.relationship,
                    relationshipID: v.relationshipID,
                    riskNumber: v.riskNumber,
                    secondLastName: v.secondLastName,
                    sport: v.sport ? v.sport : "",
                    sportID: v.sportID ? v.sportID : "",
                    handlesMachineryFlag: "0",
                    renewalNumber : "0",
                    imcAttemps:"0",
                    excludedFlag:"0"
            
                });
            });

        }
        
        vm.createEmisionDependientesFromDetail = createEmisionDependientesFromDetail;
        function createEmisionDependientesFromDetail(){
            
            vm.emitDependientes = [];
            angular.forEach(vm.jsonCotizacion.cotizar.datosVar.dependientes.dependiente, function (v) {
                
                console.log("fecha ", v.fechaNac);
                var fechaN = v.fechaNac.toString();
                if (fechaN.length < 8) {
                    fechaN = '0' + fechaN;
                }
                
                console.log("fecha1 ", fechaN);

                vm.emitDependientes.push({
                    age: v.edad !== undefined ? v.edad : "",
                    birthDate: moment(fechaN, 'DDMMYYYY').format("YYYY-MM-DD"),
                    fiscalIDNumber: v.rfc,
                    gender: v.sexo,
                    genderDesc: v.sexoDesc,
                    jobDescription: v.ocupacionDesc !== undefined && v.ocupacionDesc !== null && v.ocupacionDesc !== 'null' ? v.ocupacionDesc : '',
                    jobID: v.idOcupacion !== undefined && v.idOcupacion !== null && v.idOcupacion !== 'null' ? v.idOcupacion : '',
                    lastName: v.apllPat,
                    name: v.nombre,
                    relationship: v.parentescoDesc,
                    relationshipID: v.idParentesco,
                    riskNumber: v.numRiesgo,
                    secondLastName: v.apllMat,
                    sport: v.deporteDesc !== undefined && v.deporteDesc !== null && v.deporteDesc !== 'null' ? v.deporteDesc : '',
                    sportID: v.idDeporte !== undefined && v.idDeporte !== null && v.idDeporte !== 'null' ? v.idDeporte : '',
                    handlesMachineryFlag: "0",
                    renewalNumber : v.numRenovacion,
                    imcAttemps:"0",
                    excludedFlag:"0"
            
                });
            });

            vm.titular = {};

            angular.forEach(vm.emitDependientes, function (val) {
                if (val.relationship === "TITULAR") {
                    vm.titular = val;
                }
            });
        }
        
        vm.handleFileSelect = handleFileSelect;
        function handleFileSelect(evt) {

            if (evt.target.files.length > 0) {

                console.log("event fileSelector: ", evt);

                var f = evt.target.files[0]; // FileList object
                var reader = new FileReader();
                // Closure to capture the file information.
                reader.onload = (function () {
                    return function (e) {
                        var binaryData = e.target.result;
                        //Converting Binary Data to base 64
                        var base64String = window.btoa(binaryData);
                        //showing file converted to base64
                        vm.fileB64 = base64String;
                    };
                })(f);
                // Read in the image file as a data URL.
                vm.fileName = f.name;
                reader.readAsBinaryString(f);
            }
        }
        
    }
})();

(function () {
    'use strict';

    insuranceMedicalEmission.$inject = ['URLS', '$q', '$http'];
    function insuranceMedicalEmission(URLS, $q, $http) {

        function InsuranceMedicalEmission() { }
        
        InsuranceMedicalEmission.prototype.setMedicalExpenseDocsRegistration = function (params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.setMedicalExpenseDocsRegistration,
                    data: $.param(params)
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data;
                        resolve({success: true, info: _response});
                    }else{
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };
        
        InsuranceMedicalEmission.prototype.getMedExpInsuranceQuestionnaireQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedExpInsuranceQuestionnaireQuery,
                    params: {
                            language:'SPA'
                        }        
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedExpInsuranceQuestionnaireQuery.questionDataList;
                        resolve({success: true, info: _response});
                    }else{
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };
        
        InsuranceMedicalEmission.prototype.getMedExpInsuranceQuestRegistration = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedExpInsuranceQuestRegistration,
                    data: $.param(_params)
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMedExpInsuranceQuestRegistration;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }

                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };

        
        InsuranceMedicalEmission.prototype.getMedExpInsuranceQuestValidation = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedicalExpenseQuestValidation,
                    params: _params
                }).then(function success(response) {
                    console.log("respQuest: ", response);
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMedicalExpenseQuestValidation.questValidationResponse;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }

                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };
        
        InsuranceMedicalEmission.prototype.setMedicalExpenseProcessingRequest = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.setMedicalExpenseProcessingRequest,
                    params: _params
                }).then(function success(response) {
                    console.log("setMedicalExpenseProcessingRequest: ", response);
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMedicalExpenseProcessingRequest.processingRequestResponse;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }

                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };

        InsuranceMedicalEmission.prototype.getMedExpInsurancePolicyRegistration = function (paramsEmision) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedExpInsurancePolicyRegistration,
                    data: $.param(paramsEmision)
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMedExpInsurancePolicyRegistration;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };
        
        InsuranceMedicalEmission.prototype.procedureQuotation = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationProcedure,
                    params: _datos

                }).then(function success(response) {
                    console.log('response procedure', response);
                    var _response;
                    if (response.data.return.status === 1) {
                        _response = response.data;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    console.log('response procedure error');
                    reject({success: false, type: 'not-found'});
                });
            });
        };
        
        InsuranceMedicalEmission.prototype.cancelQuotation = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationCancel,
                    params: _datos

                }).then(function success(response) {
                    console.log('response cancel', response);
                    var _response;
                    if (response.data.return.status === 1) {
                        _response = response.data;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    console.log('response cancel error');
                    reject({success: false, type: 'not-found'});
                });
            });
        };

         InsuranceMedicalEmission.prototype.servicioFirmas = function (_paramsFirmas) {

             return $q(function (resolve, reject) {
                 $http({
                     method: 'POST',
                     url: URLS.getMedicalExpenseSignRegistration,
                     data: $.param(_paramsFirmas)

                 }).then(function success(response) {
                     var _response;
                     if (response.data.outCommonHeader.result.result === 1) {
                         resolve({success: true, info: _response, response: response.data});
                     } else {
                         resolve({success: false, info: response.data.outCommonHeader.result});
                     }
                 }, function error() {
                     reject({success: false, type: 'not-found'});
                 });
             });
         };

         InsuranceMedicalEmission.prototype.saveSelection = function (_paramsGuardaSeleccion) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedicalExpensePackageRegistration,
                    params: _paramsGuardaSeleccion

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceMedicalEmission.prototype.updateRequest = function (_paramsActualizarSolicitud) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedicalExpensePackageUpdate,
                    params: _paramsActualizarSolicitud

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };



        return new InsuranceMedicalEmission();

    }

    angular
        .module('actinver.controllers')
        .service('insuranceMedicalEmission', insuranceMedicalEmission);


    

})();

(function () {
    'use strict';

    insuranceMedicalQuotation.$inject = ['URLS', '$q', '$http', '$filter', 'insuranceMedicalSrv', 'CommonModalsSrv'];
    function insuranceMedicalQuotation(URLS, $q, $http, $filter,insuranceMedicalSrv,CommonModalsSrv) {

        function InsuranceMedicalQuotation() {}

        InsuranceMedicalQuotation.prototype.sendEmailQuotation = function (_params) {
            try{
                var copia = _params;
                insuranceMedicalSrv.sendEmailNotificationCotizationPMM(copia).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado");
                    }
                });
            }catch(e){

            }
            // CommonModalsSrv.done("Correo Enviado");
        };

        InsuranceMedicalQuotation.prototype.sendEmailEmision = function (_params) {
            try{
                var copia = _params;
                insuranceMedicalSrv.sendEmailNotificationEmisionPMM(copia).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado");
                    }
                });
            }catch(e){

            }
            // CommonModalsSrv.done("Correo Enviado");
        };

        return new InsuranceMedicalQuotation();

    }

    angular
        .module('actinver.controllers')
        .service('insuranceMedicalQuotation', insuranceMedicalQuotation);

})();

(function () {
    'use strict';

    insuranceMedicalSrv.$inject = ['URLS', '$q', '$http'];
    function insuranceMedicalSrv(URLS, $q, $http) {

        function InsuranceMedicalSrv() { }

        InsuranceMedicalSrv.prototype.getCotizacionSrv = function (_params) {
            return $q(function (resolve, reject) {

                _params.language = "SPA";
                
                $http({
                    method: 'POST',
                    url: URLS.getMedicalExpenseInsuranceQuotation,
                    data: $.param(_params)
                    // params: _params
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseInsuranceQuotation;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };

            });
        };

        InsuranceMedicalSrv.prototype.getDetalleCotizacion = function (_idCotizacion) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedExpInsuranceDetailQuotationQuery,
                    params: {
                        language: 'SPA',
                        quotationNumber: _idCotizacion
                    }
                }).then(function success(response) {
                    var _response;
                    console.log(response);
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMedExpInsuranceDetailQuotationQuery;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }

                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };
        
        InsuranceMedicalSrv.prototype.sendEmailNotificationEmisionPMM = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationEmisionPMM,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceMedicalSrv.prototype.sendEmailNotificationCotizationPMM = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationCotizationPMM,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogExpenseJob = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseJobQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseJobQuery.medicalExpenseJob;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };


        
        InsuranceMedicalSrv.prototype.getCatalogProfesiones = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseJobQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseJobQuery.medicalExpenseJob;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogPolicyNumber = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpensePolicyHolderNumQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpensePolicyHolderNumQuery.medicalExpensePolicyHolderNum;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogMedicalState = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseStateQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseStateQuery.medicalExpenseState;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogMedicalLocation = function (idEntity) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseLocationQuery,
                    params: {
                        language: 'SPA',
                        stateID: idEntity
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseLocationQuery.medicalExpenseLocation;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getMedicalExpenseRelationship = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseRelationshipQuery,
                    params: {
                        language: 'SPA',
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseRelationshipQuery.medicalExpenseRelationship;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogExpenseSports = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseSportsQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseSportsQuery.medicalExpenseSport;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogExpenseProfessions = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseProfessionsQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseProfessionsQuery.medicalExpenseProfession;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

        InsuranceMedicalSrv.prototype.getCatalogExpenseProfessions = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseProfessionsQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseProfessionsQuery.medicalExpenseProfession;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

    //Deducible    
        InsuranceMedicalSrv.prototype.getMedicalExpenseDeductible = function (newValue) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseDeductibleQuery,
                    params: {
                        language: 'SPA',
                        deductibleDesc: newValue
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseDeductibleQuery.medicalExpenseDeductible;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

    //Coaseguro
        InsuranceMedicalSrv.prototype.getMedicalExpenseCoinsurance = function (newValue) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseCoinsuranceQuery,
                    params: {
                        language: 'SPA',
                        deductibleDesc:newValue
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseCoinsuranceQuery.medicalExpenseCoinsurance;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

    //Deducible red
        InsuranceMedicalSrv.prototype.getMedicalExpenseDeductibleRed = function (newValue) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseDeductibleRedQuery,
                    params: {
                        language: 'SPA',
                        deductibleDesc: newValue
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseDeductibleRedQuery.medicalExpenseDeductibleRed;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };

    //Tope coaseguro
        InsuranceMedicalSrv.prototype.getMedicalExpenseMaxCoinsurance = function (newValue) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalExpenseMaxCoinsuranceQuery,
                    params: {
                        language: 'SPA',
                        deductibleDesc: newValue
                    }
                }).then(function success(response) {
                    var _response;
                    if(response.data.outCommonHeader.result.result === 1){
                        _response = response.data.outMedicalExpenseMaxCoinsuranceQuery.medicalExpenseMaxCoinsurance;
                        resolve({success: true, info: _response});
                    }else{
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                    
                 }),function error() {
                     reject({success: false, type: 'not-found'});
                 };
            });
        };


        InsuranceMedicalSrv.prototype.getMedicalInsuranceFiscalIDNumber = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getMedicalInsuranceFiscalIDNumberQuery,
                    params: _params
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceFiscalIDNumberQuery;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };

        InsuranceMedicalSrv.prototype.getMedicalExpenseInsuranceRequotation = function (paramsRecotizacion) {
            
            paramsRecotizacion.language = 'SPA';
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getMedicalExpenseInsuranceRequotationQuery,
                   
                    data: $.param(paramsRecotizacion)
                }).then(function success(response) {
                        var _response;
                        if(response.data.outCommonHeader.result.result === 1){
                            _response = response.data.outMedicalExpenseInsuranceRequotation;
                            resolve({success: true, info: _response});
                        }else{
                            reject({success: false, info: response.data.outCommonHeader.result});
                        }
                        
                     }),function error() {
                         reject({success: false, type: 'not-found'});
                     };      

            });
        };
        
        InsuranceMedicalSrv.prototype.getInsuranceCountryQuery = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getInsuranceCountryQuery,
                    params: _params
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceCountryQuery.insuranceCountry;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };
        
        InsuranceMedicalSrv.prototype.getInsuranceBusinessActivityQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getInsuranceBusinessActivityQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceBusinessActivityQuery.businessActivityData;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };

        InsuranceMedicalSrv.prototype.getInsuranceIdentificationTypeQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getInsuranceIdentificationTypeQuery,
                    params: {
                        language: 'SPA'
                    }

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceIdentificationTypeQuery.identificationTypeData;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }), function error() {
                    reject({success: false, type: 'not-found'});
                };
            });
        };


        return new InsuranceMedicalSrv();
    }

    angular
        .module('actinver.controllers')
        .service('insuranceMedicalSrv', insuranceMedicalSrv);

})();

(function () {
    'use strict';

    function validateIn() {

        function ValidateIn() { }

        ValidateIn.prototype.formatCurrency = function (amount) {

            var decimals = 2;
            amount += ''; // por si pasan un numero en vez de un string
            amount = parseFloat(amount.replace(/[^0-9\.]/g, '')); // elimino cualquier cosa que no sea numero o punto

            decimals = decimals || 0; // por si la variable no fue fue pasada
            // si no es un numero o es igual a cero retorno el mismo cero
            if (isNaN(amount) || amount === 0)
                return parseFloat(0).toFixed(decimals);
            // si es mayor o menor que cero retorno el valor formateado como numero
            amount = '' + amount.toFixed(decimals);

            var amount_parts = amount.split('.'),
                regexp = /(\d+)(\d{3})/;

            while (regexp.test(amount_parts[0]))
                amount_parts[0] = amount_parts[0].replace(regexp, '$1' + ',' + '$2');

            return amount_parts.join('.');
        };

        ValidateIn.prototype.calcularEdadRfc = function (rfc, type) {
            var log = moment(new Date()).format("YY");
            var fecha = type === "1" ? rfc.substring(4, 10) : rfc.substring(3, 9);
            var anio = fecha.substring(0, 2);
            var mes = fecha.substring(2, 4);
            var dia = fecha.substring(4, 6);
            if (anio > log) {
                anio = "19" + anio;
            } else {
                anio = "20" + anio;
            }
            fecha = dia + "/" + mes + "/" + anio;
            return fecha;
        };

        ValidateIn.prototype.charrepeatText = function (event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            //console.log("inputValue:" + inputValue + "   >>   key:" + key);
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key) {
                event.preventDefault();
                return false;
            }
        };

    
        ValidateIn.prototype.soloNumAndPunto = function (e, espacios) {
            var regex = espacios ? new RegExp("^[0-9.]+$") : new RegExp("^[0-9.]+$");
            var echc = (typeof e.charCode !== 'undefined') ? e.charCode : e.which;
            var key = String.fromCharCode(echc);
            if (e.which === 241 || e.which === 209 || e.which === 225 ||
                e.which === 233 || e.which === 237 || e.which === 243 ||
                e.which === 250 || e.which === 193 || e.which === 201 ||
                e.which === 205 || e.which === 211 || e.which === 218 || e.which === 32)
                return true;
            else {
                if (!regex.test(key) && e.charCode !== 0) {

                    e.preventDefault();
                    return false;
                }
            }
        };

        ValidateIn.prototype.soloText = function (e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z]+$") : new RegExp("^[a-zA-Z]+$");
            var echc = (typeof e.charCode !== 'undefined') ? e.charCode : e.which;
            var key = String.fromCharCode(echc);
            if (e.which === 241 || e.which === 209 || e.which === 225 ||
                e.which === 233 || e.which === 237 || e.which === 243 ||
                e.which === 250 || e.which === 193 || e.which === 201 ||
                e.which === 205 || e.which === 211 || e.which === 218 || e.which === 32)
                return true;
            else {
                if (!regex.test(key) && e.charCode !== 0) {

                    e.preventDefault();
                    return false;
                }
            }
        };

        ValidateIn.prototype.soloTextAndNum = function (e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z0-9 ]+$") : new RegExp("^[a-zA-Z0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                event.which === 233 || event.which === 237 || event.which === 243 ||
                event.which === 250 || event.which === 193 || event.which === 201 ||
                event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        };

        ValidateIn.prototype.soloNum = function () {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                event.which === 233 || event.which === 237 || event.which === 243 ||
                event.which === 250 || event.which === 193 || event.which === 201 ||
                event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        };

        ValidateIn.prototype.forceKeyPressUppercase = function (e) {
            var charInput = e.keyCode;
            if ((charInput >= 97) && (charInput <= 122)) { // lowercase
                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifier key
                    var newChar = charInput - 32;
                    var start = e.target.selectionStart;
                    var end = e.target.selectionEnd;
                    e.target.value = e.target.value.substring(0, start) + String.fromCharCode(newChar) + e.target.value.substring(end);
                    e.target.setSelectionRange(start + 1, start + 1);
                    e.preventDefault();
                }
            }
        };
        
        ValidateIn.prototype.cambiaN = function (e) {
            e.target.value = e.target.value.replace(/Ñ/g, 'N').replace(/ñ/g, 'n');
        };

        return new ValidateIn();

    }

    angular
        .module('actinver.controllers')
        .service('validateIn', validateIn);

})();

/* global parseFloat, moment */

(function () {
    'use strict';
    insurancePymeCtrl.$inject = ['$state', '$stateParams', '$scope', '$window', 'CommonModalsSrv', 'insurancePymeSrv'];
    angular
            .module('actinver.controllers')
            .controller('insurancePymeCtrl', insurancePymeCtrl);

    function insurancePymeCtrl($state, $stateParams, $scope, $window, CommonModalsSrv, insurancePymeSrv) {
        var vm = this;
        var scrSize = $window.matchMedia("(max-width: 767px)");
        scrSize.onchange = function(ev) { vm.txtClass = ev.target.matches ? 'text-left' : 'text-right'; };
        vm.pagina1 = pagina1;
        vm.pagina2 = pagina2;
        vm.pagina3 = pagina3;
        vm.cleanForm = cleanForm;
        vm.regresarMain = regresarMain;
        vm.regresarPaginaCotizacion = regresarPaginaCotizacion;
        vm.cotizarContratar = cotizarContratar;
        vm.validateBirthdateRFC = validateBirthdateRFC;
        vm.justAlphabet = justAlphabet;
        vm.justAlphanumeric = justAlphanumeric;
        vm.justNumeric = justNumeric;
        vm.soloNumero = soloNumero;
        vm.charrepeat = charrepeat;
        vm.charrepeatText = charrepeatText;
        vm.charrepeatTextTres = charrepeatTextTres;
        vm.soloTextAndNum = soloTextAndNum;
        vm.numberSecuential = numberSecuential;
        vm.forceKeyPressUppercase = forceKeyPressUppercase;
        vm.calculaRFC = calculaRFC;
        vm.validarDatosACotizar = validarDatosACotizar;
        vm.cotizarSeguroPyme = cotizarSeguroPyme;
        vm.setValueGastosExtrasCasaHabitacion = setValueGastosExtrasCasaHabitacion;
        vm.setRemocionEscombros = setRemocionEscombros;
        vm.emisionSeguroHogar = emisionSeguroHogar;
        vm.changeSameAddress = changeSameAddress;
        vm.imprimirCondiciones = imprimirCondiciones;
        vm.printPolicy = printPolicy;
        vm.endEmission = endEmission;
        vm.isClienteObt = false;
        vm.getListaCotizaciones = getListaCotizaciones;
        vm.getRolUsuario = getRolUsuario;
        vm.backToEmission = backToEmission;
        vm.yearExpirationList = [];
        vm.monthExpirationList = [];
        vm.cvvLen = 3;
        vm.accLen = 16;
        vm.txtClass = scrSize.matches ? 'text-left' : 'text-right';
        vm.selectBankId = selectBankId;
        vm.selectTypeCard = selectTypeCard;
        vm.emissionFunction = emissionFunction;
        vm.numPoliza = '';
        vm.jsonCotizacion = {};
        vm.primatotalImpresion = '';
        vm.emission = {};
        vm.cmd = {
            kindPaid: {
                type : null
            }
        };
        vm.cmd.emission = {
            contract : null
        };
        vm.stepForm = {
            step: 0,
            stepA: false,
            stepB: false,
            stepC: false,
            stepD: false
        };
        vm.insurancePolicyDate = moment(new Date()).format('YYYY-MM-DD');
        vm.policyMaturityDate = moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD');
        var model = $stateParams.model;
        vm.numeroCliente = model ? model.numeroCliente : "";
        vm.contract = model ? model.contract : "";
        vm.client = model ? model.client : "";
        vm.person = model ? model.person : {};
        vm.datosCliente = model ? model.datosCliente : [];
        vm.nombres = model ? model.nombres : "";
        vm.apePaterno = model ? model.apePaterno : "";
        vm.apeMaterno = model ? model.apeMaterno : "";
        vm.nombreCliente = model ? model.nombreCliente : "";
        vm.birthDay = model ? model.birthDay : "";
        vm.fiscalIDNumber = model ? model.fiscalIDNumber : "";
        vm.emailUser = model ? model.emailUser : "";
        vm.personType = model ? model.personType : '1';
        vm.phoneUser = model ? model.phoneUser : "";
        vm.importeEdificio = "";
        vm.limiteMaximoEquipoMovil = 0;
        vm.limiteMaximoCristales = 0;
        vm.limiteMaximoRoboMenaje = 0;
        vm.limiteMaximoRcFamiliar = 0;
        vm.limiteMaximoUsoTarjetas = 0;
        vm.dineroMontoInicial = 0;
        vm.bicicletasMontoInicial = 0;
        vm.objetosMontoInicial = 0;
        vm.equipoMovilMontoInicial = 0;
        vm.botonContratar = "Cotizar";
        vm.cotizacionSeleccionada = undefined;
        vm.soloText = soloText;
        vm.pageSize = 3;
        vm.currentPage = 1;
        vm.disabledRFC = model ? model.disabledRFC : false;
        vm.mostrarDatos = model ? model.mostrarDatos : false;
        vm.validatePopup = model ? model.validatePopup : false;
        vm.validatePerson = model ? model.validatePerson : false;
        vm.roles = model ? model.roles : [];
        vm.rol = getRolUsuario();
        vm.revisaCotizaciones = revisaCotizaciones;
        vm.tieneCotizaciones = false;
        vm.cargandoCotizacion = false;
        vm.datosCotizacion = {};
        vm.datosCotizados = {};
        vm.fechaNacimiento = "";
        vm.email = "";
        vm.rfc = "";
        vm.sexo = "masculino";
        vm.telefono = "";
        vm.fechaConstitutiva = "";
        vm.ContInsuredSum = "";
        vm.ExtExpHomeInsuredSum = "";
        vm.DebRemInsuredSum = "";
        vm.FamCivLiaInsuredSum = "";
        vm.ListCotizaciones = [];
        vm.ListEntityFederativeHouse = getCatalogoEntidades();
        vm.ListMunicipalityHouse = [];
        vm.ListBanksHouse = [];
        vm.ListPostalCodeHouse = [];
        vm.ListTypeCLABE = [
            {id: '1', text: 'CLABE'},
            {id: '2', text: 'DEBITO'}
        ];
        vm.optionsdpx = {
            minDate: moment(new Date().setYear(new Date().getFullYear() - 150)).format('DD/MM/YYYY'),
            maxDate: moment(new Date().setYear(new Date().getFullYear() - 18)).format('DD/MM/YYYY')
        };
        vm.optionsdpxPM = {
            maxDate: moment(new Date().setYear(new Date().getFullYear())).format('DD/MM/YYYY')
        };
        vm.ListCurrency = getCatalogCurrency();
        vm.ListSecurityMeasurements = getCatalogSecurityMeasurements();
        vm.ListPaymentMethods = getCatalogPaymentMethods();
        vm.ListBorderWall = getCatalogBorderWall();
        vm.ListBanks = getCatalogoBanks();
        vm.jsonCoberturas = "{}";
        vm.tipoRiesgo = "";
        vm.getCatalogRoof = getCatalogRoof;
        vm.getCatalogEntity = getCatalogEntity;
        vm.getCatalogCodes = getCatalogCodes;
        vm.getJsonCoberturas = getJsonCoberturas;
        vm.getJsonCoberturasService = getJsonCoberturasService;
        vm.onChangeTipoDeRiesgo = onChangeTipoDeRiesgo;
        vm.cambiaJoyasTipoDeRiesgo = cambiaJoyasTipoDeRiesgo;
        vm.getCantidadLimite = getCantidadLimite;
        vm.realizaOperaciones = realizaOperaciones;
        vm.validarTabla = validarTabla;
        vm.validarSiCumple = validarSiCumple;
        vm.formatCurrency = formatCurrency;
        vm.validaRFCFecha = validaRFCFecha;
        vm.validaFechaConRFC = validaFechaConRFC;
        vm.onChangeListMunicipality = onChangeListMunicipality;
        vm.onChangeListEntity = onChangeListEntity;
        vm.encode = encode;
        vm.decode = decode;
        vm.eventClickCheckbox = eventClickCheckbox;
        vm.event = "";
        vm.edificio = {};
        vm.contenidos = {};
        vm.rcFamiliar = {};
        vm.roboMenaje = {};
        vm.dinero = {};
        vm.objetosPersonales = {};
        vm.electrodomesticos = {};
        vm.gastosAsalto = {};
        vm.gastosFinales = {};
        vm.gastosExtras = {};
        vm.remocionEscombros = {};
        vm.cristales = {};
        vm.asistenciaInformatica = {};
        vm.asistenciaLegal = {};
        vm.asistenciaViajes = {};
        vm.extensionViajes = {};

        revisaCotizaciones();
        getCatalogRiskType();
        getCatalogStructure();
        getCatalogClasification(); //agregada creación de Catálogo Clasificación

        function getCatalogStreetType() {
            insurancePymeSrv.getCatalogStreetTypeQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.typeID,
                            text: value.street
                        });
                    });
                    vm.listStreetType = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        //creada funcion para creación de Catálogo Clasification
        function getCatalogClasification() {
            insurancePymeSrv.getCatalogClasificationQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.typeID, //modificar
                            text: value.street //modificar
                        });
                    });
                    vm.listClasification = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogCardTypeQuery() {
            insurancePymeSrv.getCatalogCardTypeQuery().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.cardID,
                            text: value.cardType
                        });
                    });
                    vm.ListCardType = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogPaymentTypeQuery() {
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;
            insurancePymeSrv.getCatalogPaymentTypeQuery().then(function (response) {
                var _listaObtenida = [];
                var _listaObtenidaSinAgentes = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        
                        if (value.paymentManagerID === "2" || value.paymentManagerID === "8") {
                            _listaObtenidaSinAgentes.push({
                                id: value.paymentManagerID,
                                text: value.paymentManagerName
                            });
                        }
                        _listaObtenida.push({
                            id: value.paymentManagerID,
                            text: value.paymentManagerID === "1" ? "PAGO REFERENCIADO" : value.paymentManagerName
                        });
                    });

                    vm.ListPaymentTypeAll = _listaObtenida;
                    vm.ListPaymentTypeSinAgentes = _listaObtenidaSinAgentes;
                    if(_type) {
                        if(_quotation.catalogosCotizacion.kindPaid.type.id == 1 || _quotation.catalogosCotizacion.kindPaid.type.id == 2){
                            vm.ListPaymentType = _listaObtenida;
                        } else {
                            vm.ListPaymentType = _listaObtenidaSinAgentes;
                        }                        
                    } else {
                        if(vm.cmd.kindPaid.type.id == 1 || vm.cmd.kindPaid.type.id == 2){
                            vm.ListPaymentType = _listaObtenida;
                        } else {
                            vm.ListPaymentType = _listaObtenidaSinAgentes;
                        }
                    }
                }
            }).catch(function (error) {
                
            });
        }

        function getCatalogRoof(lastValue, newValue) {
            insurancePymeSrv.getCatalogRoofType(newValue.id).then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.roofTypeID,
                            text: value.roofType
                        });
                    });
                    vm.cmd.kindRoof = {};
                    vm.listRoof = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogStructure() {
            insurancePymeSrv.getCatalogWallType().then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.wallTypeID,
                            text: value.wallType
                        });
                    });

                    vm.listStructure = _listaObtenida;
                }
            }).catch(function (error) {

            });
        }

        function getCatalogRiskType() {
            insurancePymeSrv.getCatalogInsuranceRiskType(1, 1).then(function (response) {
                var _listaObtenida = [];
                if (response.success) {
                    angular.forEach(response.info, function (value) {
                        _listaObtenida.push({
                            id: value.areaCode,
                            text: value.description
                        });
                    });
                    vm.listRiskType = _listaObtenida;
                }
            }).catch(function (error) {

            });

            return [
                {id: 1, text: 'UNIFAMILIAR'},
                {id: 2, text: 'FINES DE SEMANA'},
                {id: 3, text: 'CABAÑAS'},
                {id: 4, text: 'CONDOMINIO VERTICAL O CONDOMINIO HORIZONTAL'}
            ];
        }

        function getCatalogCurrency() {
            return [
                {id: 1, text: "PESOS"},
                {id: 2, text: "DOLARES"}
            ];
        }

        function getCatalogBorderWall() {
            return [
                {id: "true", text: "SI"},
                {id: "false", text: "NO"}
            ];
        }

        function getCatalogSecurityMeasurements() {
            return [
                {id: 1, text: "VIGILANCIA"},
                {id: 2, text: "ALARMA LOCAL/CENTRAL"},
                {id: 3, text: "VIGILANCIA Y ALARMA LOCAL/CENTRAL"},
                {id: 99999, text: "SIN MEDIDAS DE SEGURIDAD"}
            ];
        }

        function getCatalogPaymentMethods() {
            return [
                {id: 1, text: "CONTADO"},
                {id: 2, text: "SEMESTRAL"},
                {id: 3, text: "TRIMESTRAL"},
                {id: 4, text: "MENSUAL"}
            ];
        }

        function getCatalogoEntidades() {
            var _listaObtenida = [];

            insurancePymeSrv.getCatalogEntityFederativePyme().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.federalEntityID,
                            text: value.federalEntityDescription
                        });
                    });
                }
            });
            return _listaObtenida;
        }

        function getCatalogEntity(newValue, type) {
            var _listaObtenida = [];
            insurancePymeSrv.getCatalogMunicipalityPyme(newValue.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                    switch (type) {
                        case 'fiscal':
                            vm.ListEntityFiscal = _listaObtenida;
                            break;
                        case 'contractor':
                            vm.cmd.emission.contract.entityContractor = {};
                            vm.cmd.emission.contract.pcContractor = {};
                            vm.ListEntityContractor = _listaObtenida;
                            break;
                        case 'beneficiary':
                            vm.cmd.emission.beneficiary.entityBeneficiary = {};
                            vm.cmd.emission.beneficiary.pcBeneficiary = {};
                            vm.ListEntityBeneficiary = _listaObtenida;
                            break;
                    }
                }
            });
        }

        function changeSameAddress() {
            if (vm.cmd.emission.sameAddress) {
                initEmission();
            } else {
                cleanDataEmission();
            }
        }

        function getCatalogCodes(newValue, type) {
            var _listaObtenida = [];
            insurancePymeSrv.getCatalogPostalCode(newValue.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    switch (type) {
                        case 'fiscal':
                            vm.ListPCFiscal = _listaObtenida;
                            break;
                        case 'contractor':
                            vm.cmd.emission.contract.pcContractor = {};
                            vm.ListPCContractor = _listaObtenida;
                            break;
                        case 'beneficiary':
                            vm.cmd.emission.beneficiary.pcBeneficiary = {};
                            vm.ListPCBeneficiary = _listaObtenida;
                            break;
                    }
                }
            });
        }

        function onChangeListEntity() {
            var _listaObtenida = [];
            if(!vm.cmd.dataHouseEntityRisk.type) return;
            
            insurancePymeSrv.getCatalogMunicipalityCars(vm.cmd.dataHouseEntityRisk.type.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.municipalityID,
                            text: value.delegationOrMunicipality
                        });
                    });
                    vm.cmd.dataHouseMunicipalityRisk = {};
                    vm.cmd.dataHousePostalCodeRisk = {};
                    vm.ListPostalCodeHouse = [];
                    vm.ListMunicipalityHouse = _listaObtenida;
                }
            });
        }

        function onChangeListMunicipality() {
            var _listaObtenida = [];
            if (!vm.cmd.dataHouseMunicipalityRisk.type) return;

            insurancePymeSrv.getCatalogPostalCode(vm.cmd.dataHouseMunicipalityRisk.type.id).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info.postalCode, function (value) {
                        _listaObtenida.push({
                            id: value,
                            text: value
                        });
                    });
                    vm.cmd.dataHousePostalCodeRisk = {};
                    vm.ListPostalCodeHouse = _listaObtenida;
                }
            });
        }

        function getCatalogoBanks() {
            var _listaObtenida = [];
            console.log();

            insurancePymeSrv.getCatalogBanksPyme().then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        _listaObtenida.push({
                            id: value.bankID,
                            text: value.bankName
                        });
                    });
                    _listaObtenida.sort(function(a, b) {
                        if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;
                        if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;
                        return 0;
                    });
                }
            });

            return _listaObtenida;
        }

        function getYearExpirationList() {
            var _list = [];
                        
            for (var _year = (new Date()).getFullYear(), i = 0; i < 7; i++) 
                _list.push({
                    id: _year + i,
                    text: _year + i
                });

            return _list;
        }

        function getMonthExpirationList() {
            var _list = [];
            
            for (var _month, i = 1; i <= 12; i++) {
                _month = i < 10 ? '0' + i : i;
                _list.push({
                    id: _month,
                    text: _month
                });
            }

            return _list;
        }

        function selectBankId() {
            vm.cmd.cardType = typeof vm.cmd.cardType === 'undefined' ? {} : vm.cmd.cardType;            
            if(vm.cmd.dataBanks.type.text.toString().toUpperCase().startsWith("AMERICAN EXPRESS")) {
                vm.accLen = 15;
                vm.cvvLen = 4;
                vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('AMERICAN')];
            } else {
                vm.accLen = 16;
                vm.cvvLen = 3;
                vm.cmd.cardType.type = [];
            }
        }

        function selectTypeCard() {
            if(vm.emission.payment.accountNumber) {
                switch (vm.emission.payment.accountNumber.toString().substr(0, 1)) {
                    case '3':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('AMERICAN')];
                        break;
                    case '4':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('VISA')];
                        break;
                    case '5':
                        vm.cmd.cardType.type = vm.ListCardType[getIndexListCardType('MASTER')];
                        break;
                }
            }
        }

        function getIndexListCardType(bankName) {
            for(var i = 0; i < vm.ListCardType.length; i++) {
                if(vm.ListCardType[i].text.toString().toUpperCase().startsWith(bankName))
                    return i;
            }
        }

        function cleanForm() {
            vm.stepForm = {
                step: 0,
                stepA: false,
                stepB: false,
                stepC: false,
                stepD: false
            };
        }

        function regresarMain() {
            $state.go('insurance.main', {model: $stateParams.model});
        }

        function regresarPaginaCotizacion() {
            if (vm.ListCotizaciones.length > 1) {
                pagina1();
            } else {
                var sendModel = $stateParams.model;
                $state.go('insurance.main', {model: sendModel});
            }
        }

        function cotizarContratar() {
            vm.isClienteObt = false;
            if (vm.cotizacionSeleccionada) {
                pagina3();
            } else {
                pagina2();
            }
        }

        function pagina1() {
            cleanForm();
            vm.stepForm.step = 1;
            vm.stepForm.stepA = true;
        }

        function pagina2() {
            cleanForm();
            vm.stepForm.step = 2;
            vm.stepForm.stepB = true; 
            getJsonCoberturasService();
        }

        function pagina3() {
            cleanForm();
            getCatalogStreetType();
            getCatalogCardTypeQuery();
            getCatalogPaymentTypeQuery();
            vm.yearExpirationList = getYearExpirationList();
            vm.monthExpirationList = getMonthExpirationList();
            vm.emission.payment = {};
            vm.emission.payment.email = vm.emailUser;
            vm.emissionPersonType = model.personType === '1' ? 'F' : 'M';
            if (vm.cotizacionSeleccionada) {
                vm.emissionPersonType = vm.cotizacionSeleccionada.tipoCliente === 1 ? 'F' : 'M';
                vm.jsonQuotation = JSON.parse(vm.cotizacionSeleccionada.quotationJsonFin).outHomeInsuranceQuotation.insurancePaymentData;
                vm.cmd.kindPaid.type = JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni).catalogosCotizacion.kindPaid.type;
            }
            vm.stepForm.step = 3;
            vm.stepForm.stepC = true;
            window.scrollTo(0, angular.element('contratacion').offsetTop);
        }

        function revisaCotizaciones() {
            vm.tieneCotizaciones = false;
            vm.ListCotizaciones = getListaCotizaciones();
        }

        function getListaCotizaciones() {

            var _listaObtenida = [];
            var _params = {
                language: 'SPA',
                estado: "VIGENTE",
                idCliente: vm.numeroCliente,
                tipoCliente: vm.personType,
                productKey: 'PYME'
            };

            insurancePymeSrv.getListQuotations(_params).then(function (_res) {
                if (_res.success) {
                    angular.forEach(_res.info, function (value) {
                        var primerApe = vm.personType === '1' ? value.apellidoPaternoCliente : "";
                        var segundoApe = vm.personType === '1' ? value.apellidoMaternoCliente : "";
                        var name = value.nombreCliente + " " + primerApe + " " + segundoApe;
                        _listaObtenida.push({
                            cotizacion: value.idCotizacion,
                            poliza: value.idPoliza,
                            nombre: value.nombreCliente,
                            primerApellido: primerApe,
                            segundoApellido: segundoApe,
                            nombreCompleto: name,
                            fecha: moment(new Date().setTime(value.fechaCotizacion)).format('DD-MM-YYYY'),
                            vigencia: moment(new Date().setTime(value.vigenciaCotizacion)).format('DD-MM-YYYY'),
                            prima: value.monto,
                            estadoPoliza: value.estado,
                            numeroCliente: value.idCliente,
                            tipoCliente: value.tipoCliente,
                            isCliente: value.isCliente,
                            fechaNacimiento: vm.personType === '1' ? moment(new Date().setTime(value.fechaNacimiento)).format('DD-MM-YYYY') : value.fechaNacimiento,
                            rfcCliente: value.rfcCliente,
                            sexoCliente: value.sexoCliente,
                            emailCliente: value.mailCliente,
                            telefonoCliente: value.telefonoCliente,
                            quotationJsonIni: value.quotationJsonIni,
                            quotationJsonFin: value.quotationJsonFin,
                            emisionJsonIni: value.emisionJsonIni,
                            emisionJsonFin: value.emisionJsonFin,
                            status: value.vstatus
                        });
                    });
                    
                    if (_res.info.length > 0) {
                        vm.tieneCotizaciones = true;
                        pagina1();
                    } else {
                        pagina2();
                    }
                } else {
                    pagina2();
                }
            });
            return _listaObtenida;
        }

        function setCotizacion(json) {
            vm.jsonCotizacion.catalogosCotizacion = vm.cmd;
            var _fechaNacimiento = "";
            
            if (vm.validatePerson) {
                _fechaNacimiento = moment(vm.birthDay, "DD/MM/YYYY").format('YYYY-MM-DD');
            } else {
                _fechaNacimiento = moment(vm.fechaNacimiento).format('YYYY-MM-DD');
            }

            var _params = {
                language: 'SPA',
                idCliente: vm.numeroCliente,
                idCotizacion: vm.datosCotizados.numeroCotizacion,
                idPoliza: 0,
                fechaCotizacion: moment(new Date()).format('YYYY-MM-DD'),
                vigenciaCotizacion: moment(new Date(), 'YYYY-MM-DD').add(15, 'days').format('YYYY-MM-DD'),
                monto: Math.ceil(vm.datosCotizados.primaTotal),
                tipoCliente: vm.personType,
                isCliente: vm.numeroCliente === "9999" ? '0' : '1',
                nombreCliente: vm.personType.toString() === '1' ? vm.nombres.toUpperCase() : vm.nombreCliente.toUpperCase(),
                fechaNacimiento: _fechaNacimiento,
                rfcCliente: vm.fiscalIDNumber,
                sexoCliente: vm.sexo === 'masculino' ? '1' : '2',
                mailCliente: vm.emailUser,
                telefonoCliente: vm.phoneUser,
                quotationJsonInit: vm.jsonCotizacion,
                quotationJsonEnd: json,
                productKey: 'PYME'
            };

            if (vm.personType.toString() === '1') {
                _params.apellidoPaternoCliente = vm.apePaterno.toUpperCase();
                _params.apellidoMaternoCliente = vm.apeMaterno.toUpperCase();
            }

            insurancePymeSrv.getCotizationAdd(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizacion = vm.datosCotizados;
                    CommonModalsSrv.done("Envío de Cotización exitosa Número de Cotización: " + vm.datosCotizacion.numeroCotizacion);
                    vm.jsonQuotation = json.outHomeInsuranceQuotation.insurancePaymentData;
                } else {
                    CommonModalsSrv.error("Envío de Cotización no fue exitoso.");
                }
                vm.cargandoCotizacion = false;
            });
        }

        function getRolUsuario() {
            var user = JSON.parse(JSON.parse(sessionStorage["ngStorage-user"]));
            vm.roles = user.roles;

            if (angular.isDefined(vm.roles) && angular.isArray(vm.roles)) {
                if (vm.roles.length === 1) {
                    return vm.roles[0];
                } else {
                    if (vm.roles.length > 1) {

                        var prioridad = 999;

                        for (var i = 0; i < vm.roles.length; i++) {
                            if (vm.roles[i] === "SEGUROS") {
                                if (prioridad > 1) {
                                    prioridad = 1;
                                }
                            }
                            if (vm.roles[i] === "ASESOR") {
                                if (prioridad > 2) {
                                    prioridad = 2;
                                }
                            }
                        }

                        switch (prioridad) {
                            case 1:
                                vm.rol = "SEGUROS";
                                return "SEGUROS";
                            case 2:
                                vm.rol = "ASESOR";
                                return "ASESOR";
                        }
                    }
                }
            }
        }

        function validateBirthdateRFC() {
            var v_birthday = moment(vm.fechaNacimiento).format('DD/MM/YYYY') + '';
            var v_constitutive_date = vm.fechaConstitutiva + '';
            var v_rfc = vm.rfc;
            var birthdayFromRFC = v_rfc.replace(/^([A-ZÑ\x26]{3,4})(([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1]))(((([A-Z]|[a-z]|[0-9]){3}))?)$/, "$2") + '';
            v_birthday = v_birthday.replace(/^([0-9]{2})(\/)([0-9]{2})(\/)([0-9]{2})([0-9]{2})$/, "$6$3$1") + '';

            if (v_birthday !== null && v_birthday !== '' && birthdayFromRFC !== null && birthdayFromRFC !== '' && birthdayFromRFC !== v_birthday && (vm.personType + '') === '1') {
                CommonModalsSrv.error("La fecha de nacimiento no coincide con la fecha del RFC");
                
            }

            if (v_birthday !== null && v_birthday !== '' && v_constitutive_date !== null && v_constitutive_date !== '' && v_constitutive_date !== v_birthday && vm.personType === 2) {
                CommonModalsSrv.error("La fecha constitutiva no coincide con la fecha del RFC");
                
            }
        }

        function justAlphabet(field) {
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[a-zA-ZÁÉÍÓÚÑáéíóúñ ]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function validarDatosACotizar() {
            if (!vm.disabledRFC && !vm.validatePerson) {
                if (vm.fechaNacimiento === "") {
                    if (vm.personType === '1') {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento");
                        return false;
                    } else {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Constitución");
                        return false;
                    }
                }
            }
            if (!vm.disabledRFC) {
                calculaRFC();
            } else {
                vm.bnd = true;
            }
            if (vm.bnd) {
                cotizarSeguroPyme();
            }
        }

        function cotizarSeguroPyme() {
            vm.cargandoCotizacion = true;
            var edificioSum = vm.jsonCoberturas.coberturas.edificio.monto;
            var hidroEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.monto;
            var bienesEdificioSum;
            var edificioTerminadoSum;
            var edificioDesocupadoSum;
            var edificioConstruccionSum;
            var edificioFijaSum;
            var securityId = typeof vm.cmd.securityActions === 'undefined' ? '' : vm.cmd.securityActions.type.id;
            var colindanciaId = typeof vm.cmd.borderWall === 'undefined' ? "false" : vm.cmd.borderWall.type.id;
            if (vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes) {
                bienesEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto;
                edificioTerminadoSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limTerminado.monto;
                edificioDesocupadoSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limDesocupado.monto;
                edificioConstruccionSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limConstruccion.monto;
                edificioFijaSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limFija.monto;
            }
            var terremotoEdificioSum = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.terremotoEdificio.monto;
            var bienesEdificioChecked;
            var edificioTerminadoChecked;
            var edificioDesocupadoChecked;
            var edificioConstruccionChecked;
            var edificioFijaChecked;
            if (vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes) {
                bienesEdificioChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked;
                edificioTerminadoChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limTerminado.checked;
                edificioDesocupadoChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limDesocupado.checked;
                edificioConstruccionChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limConstruccion.checked;
                edificioFijaChecked = vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes.hidroEdificio.coberturasIntegrantes.limFija.checked;
            }
            var contenidosMontoSum = vm.jsonCoberturas.coberturas.contenidos.monto;
            var hidroContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.monto;
            var bienesContenidosSum;
            var limContenidosSum;
            if (vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes) {
                bienesContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto;
                limContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.hidroContenidos.coberturasIntegrantes.limContenidos.monto;
            }
            var terremotoContenidosSum = vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes.terremotoContenidos.monto;
            var remocionEscombrosSum = vm.jsonCoberturas.coberturas.remocionEscombros.monto;
            var rcFamiliarSum = vm.jsonCoberturas.coberturas.rcFamiliar.monto;
            var rcFamiliarArrendatarioSum = vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes.rcArrendatario.monto;
            var rcFamiliarArrendatarioChecked = vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes.rcArrendatario.checked;
            var cristalesSum = vm.jsonCoberturas.coberturas.cristales.monto;
            var cristalesChecked = vm.jsonCoberturas.coberturas.cristales.checked;
            var roboMenajeSum = vm.jsonCoberturas.coberturas.roboMenaje.monto;
            var joyasSum = vm.jsonCoberturas.coberturas.roboMenaje.coberturasIntegrantes.joyas.monto;
            var gastosAsaltoSum = vm.jsonCoberturas.coberturas.gastosAsalto.monto;
            var dineroSum = vm.jsonCoberturas.coberturas.dinero.monto;
            var dineroCreditSum = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.monto;
            var dineroCreditChecked = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.checked;
            var objetosPersonalesSum = vm.jsonCoberturas.coberturas.objetosPersonales.monto;
            var objetosPersonalesObjetosSum;
            if (vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos) {
                objetosPersonalesObjetosSum = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.monto;
            }
            var objetosPersonalesBicicletaSum = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.bicicletasObjetos.monto;
            var objetosPersonalesObjetosChecked;
            if (vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos) {
                objetosPersonalesObjetosChecked = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.checked;
            }
            var electrodomesticosSum = vm.jsonCoberturas.coberturas.electrodomesticos.monto;
            var electrodomesticosMovilSum = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.monto;
            var electrodomesticosChecked = vm.jsonCoberturas.coberturas.electrodomesticos.checked;
            var electrodomesticosMovilChecked = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.checked;
            var asistenciaViajesSum = vm.jsonCoberturas.coberturas.asistenciaViajes.monto;
            var extensionViajesSum;
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                extensionViajesSum = vm.jsonCoberturas.coberturas.extensionViajes.monto;
            }
            var asistenciaLegalSum;
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                asistenciaLegalSum = vm.jsonCoberturas.coberturas.asistenciaLegal.monto;
            }
            asistenciaInformaticaSum = undefined;
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                var asistenciaInformaticaSum = vm.jsonCoberturas.coberturas.asistenciaInformatica.monto;
            }
            var gastosFinalesSum = vm.jsonCoberturas.coberturas.gastosFinales.monto;
            var gastosExtrasSum = vm.jsonCoberturas.coberturas.gastosExtras.monto;
            var asistenciaViajesChecked = vm.jsonCoberturas.coberturas.asistenciaViajes.checked;
            var extensionViajesChecked;
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                extensionViajesChecked = vm.jsonCoberturas.coberturas.extensionViajes.checked;
            }
            var asistenciaLegalChecked;
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                asistenciaLegalChecked = vm.jsonCoberturas.coberturas.asistenciaLegal.checked;
            }
            var asistenciaInformaticaChecked;
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                asistenciaInformaticaChecked = vm.jsonCoberturas.coberturas.asistenciaInformatica.checked;
            }
            var gastosFinalesChecked = vm.jsonCoberturas.coberturas.gastosFinales.checked;
            var hidroContenidosFlag = hidroContenidosSum ? "true" : "false";
            var terremotoContenidosFlag = terremotoContenidosSum ? "true" : "false";
            var hidroEdificioFlag = hidroEdificioSum ? "true" : "false";
            var terremotoEdificioFlag = terremotoEdificioSum ? "true" : "false";
            var edificioFlag = edificioSum ? "true" : "false";
            var gastosAsaltoFlag = gastosAsaltoSum === 'AMPARADO' ? "true" : "false";
            var asistenciaViajesFlag = asistenciaViajesSum === 'AMPARADO' ? "true" : "false";
            var extensionViajesFlag = extensionViajesSum === 'AMPARADO' ? "true" : "false";
            var asistenciaLegalFlag = asistenciaLegalSum === 'AMPARADO' ? "true" : "false";
            var asistenciaInformaticaFlag = asistenciaInformaticaSum === 'AMPARADO' ? "true" : "false";
            var gastosFinalesFlag = gastosFinalesSum === 'AMPARADO' ? "true" : "false";
            hidroContenidosSum = hidroContenidosSum ? hidroContenidosSum : 0;
            terremotoContenidosSum = terremotoContenidosSum ? terremotoContenidosSum : 0;
            hidroEdificioSum = hidroEdificioSum ? hidroEdificioSum : 0;
            terremotoEdificioSum = terremotoEdificioSum ? terremotoEdificioSum : 0;
            bienesEdificioSum = bienesEdificioSum ? bienesEdificioSum : 0;
            edificioTerminadoSum = edificioTerminadoSum ? edificioTerminadoSum : 0;
            edificioDesocupadoSum = edificioDesocupadoSum ? edificioDesocupadoSum : 0;
            edificioConstruccionSum = edificioConstruccionSum ? edificioConstruccionSum : 0;
            edificioFijaSum = edificioFijaSum ? edificioFijaSum : 0;
            edificioSum = edificioSum ? edificioSum : 0;
            contenidosMontoSum = contenidosMontoSum ? contenidosMontoSum : 0;
            remocionEscombrosSum = remocionEscombrosSum ? remocionEscombrosSum : 0;
            rcFamiliarSum = rcFamiliarSum ? rcFamiliarSum : 0;
            rcFamiliarArrendatarioSum = rcFamiliarArrendatarioSum === 'AMPARADO' ? rcFamiliarSum : 0;
            cristalesSum = cristalesSum ? cristalesSum : 0;
            roboMenajeSum = roboMenajeSum ? roboMenajeSum : 0;
            joyasSum = joyasSum ? joyasSum : 0;
            dineroSum = dineroSum ? dineroSum : 0;
            dineroCreditSum = dineroCreditSum ? dineroCreditSum : 0;
            objetosPersonalesSum = objetosPersonalesSum ? objetosPersonalesSum : 0;
            objetosPersonalesObjetosSum = objetosPersonalesObjetosSum ? objetosPersonalesObjetosSum : 0;
            objetosPersonalesBicicletaSum = objetosPersonalesBicicletaSum ? objetosPersonalesBicicletaSum : 0;
            electrodomesticosSum = electrodomesticosSum ? electrodomesticosSum : 0;
            electrodomesticosMovilSum = electrodomesticosMovilSum ? electrodomesticosMovilSum : 0;
            gastosExtrasSum = gastosExtrasSum ? gastosExtrasSum : 0;
            remocionEscombrosSum = remocionEscombrosSum ? remocionEscombrosSum : 0;
            var beachFrontCode = hidroContenidosFlag === "true" ? 2 : 1;
            var _params = {};
            _params.language = 'SPA';
            _params.agentID = $scope.$parent.agentSelected.id;
            _params.ClientNumber = vm.numeroCliente;
            _params.InsurancePolicyDate = moment(new Date()).format('YYYY-MM-DD');
            _params.PolicyMaturityDate = moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD');
            switch (vm.cmd.currency.type.id) {
                case 1:
                    _params.Currency = "MXN";
                    break;
                case 2:
                    _params.Currency = "USD";
                    break;
            }
            _params.PaymentMethod = vm.cmd.kindPaid.type.id;
            _params.FederalEntityID = vm.cmd.dataHouseEntityRisk.type.id;
            _params.DelegationMunicipalityID = vm.cmd.dataHouseMunicipalityRisk.type.id;
            _params.PostalCode = vm.cmd.dataHousePostalCodeRisk.type.id;
            _params.Street = vm.calle;
            _params.WallTypeID = vm.cmd.kindStructure.type.id;
            _params.RoofTypeID = vm.cmd.kindRoof.type.id;
            _params.RiskTypeDetailAreaCode = vm.cmd.kindRisk.type.id;
            _params.BeachFrontCode = beachFrontCode;
            _params.ContInsuredSum = contenidosMontoSum;
            _params.ContHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.ContHydromPhenomCoverageInsuredSum = hidroContenidosSum;
            _params.ContHydromPhenomCoverageStoredItemsInsuredSum = bienesEdificioSum;
            _params.ContEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.ContEarthquakeEruptCoverageInsuredSum = terremotoContenidosSum;
            _params.ExtExpHomeInsuredSum = gastosExtrasSum;
            _params.ExtExpHomeHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.ExtExpHomeHydromPhenomInsuredSum = "0";
            _params.ExtExpHomeEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.ExtExpHomeEarthquakeEruptInsuredSum = "0";
            _params.DebRemInsuredSum = remocionEscombrosSum;
            _params.DebRemHydromPhenomCoverageFlag = hidroContenidosFlag;
            _params.DebRemHydromPhenomInsuredSum = "0";
            _params.DebRemEarthquakeEruptCoverageFlag = terremotoContenidosFlag;
            _params.DebRemEarthquakeEruptInsuredSum = "0";
            _params.FamCivLiaInsuredSum = rcFamiliarSum;
            if (rcFamiliarArrendatarioChecked) {
                _params.FamCivLiaTenCivLiaInsuredSum = rcFamiliarArrendatarioSum;
            }
            _params.BuilCoverageFlag = edificioFlag;
            _params.BuilInsuredSum = edificioSum;
            _params.BuilHydromPhenomCoverageFlag = hidroEdificioFlag;
            _params.BuilHydromPhenomInsuredSum = hidroEdificioSum;
            _params.BuilHydromPhenomFinishedBuildingInsuredSum = edificioTerminadoSum;
            _params.BuilHydromPhenomVacatedBuildingInsuredSum = edificioDesocupadoSum;
            _params.BuilHydromPhenomConstructionBuildingInsuredSum = edificioConstruccionSum;
            _params.BuilHydromPhenomFixedAdaptationsInsuredSum = edificioFijaSum;
            _params.BuilEarthquakeEruptCoverageFlag = terremotoEdificioFlag;
            _params.BuilEarthquakeEruptInsuredSum = terremotoEdificioSum;
            if (cristalesChecked) {
                _params.CrystalsInsuredSum = cristalesSum;
            }
            _params.HouseholdEquipmentTheftInsuredSum = roboMenajeSum;
            _params.JewelryAndValuablesInsuredSum = joyasSum;
            _params.MedicalExpensesCoverage = gastosAsaltoFlag;
            _params.CashSecInsuredSum = dineroSum;
            if (dineroCreditChecked) {
                _params.CashSecCreditCardFraudInsuredSum = dineroCreditSum;
            }
            _params.PerItemsInsuredSum = objetosPersonalesSum;
            _params.PerItemsPersonalItemsInsuredSum = objetosPersonalesObjetosSum;
            _params.PerItemsBicycleInsuredSum = objetosPersonalesBicicletaSum;
            _params.SecurityMeasuresCode = securityId;
            _params.AdjoiningHomeFlag = colindanciaId;
            if (electrodomesticosChecked) {
                _params.ElecEquipInsuredSum = electrodomesticosSum;
            }
            if (electrodomesticosMovilChecked) {
                _params.ElecEquipMobileInsuredSum = electrodomesticosMovilSum;
            }
            if (asistenciaViajesChecked) {
                _params.HomeAssistanceCoverageFlag = asistenciaViajesFlag;
            }
            if (extensionViajesChecked) {
                _params.TravelsCoverageFlag = extensionViajesFlag;
            }
            if (asistenciaLegalChecked) {
                _params.LegalAssistanceCoverageFlag = asistenciaLegalFlag;
            }
            if (asistenciaInformaticaChecked) {
                _params.CompAssistServCoverageFlag = asistenciaInformaticaFlag;
            }
            if (gastosFinalesChecked) {
                _params.FinalExpensesCoverageFlag = gastosFinalesFlag;
            }

            vm.jsonCotizacion.Street = _params.Street;
            
            insurancePymeSrv.getServiceCotizacionPyme(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizados = {
                        primaNeta: _res.info.insurancePaymentData.netPremium,
                        derechosPoliza: _res.info.insurancePaymentData.entitlement,
                        recargos: _res.info.insurancePaymentData.surcharge,
                        iva: _res.info.insurancePaymentData.vat,
                        primaTotal: _res.info.insurancePaymentData.totalPremium,
                        numeroCotizacion: _res.info.quotationNumber,
                        coberturas: _res.info.coverageList

                    };
                    var jsonEnd = _res.response;
                    vm.primatotalImpresion = _res.info.insurancePaymentData.totalPremium;
                    jsonEnd.outCommonHeader = {};
                    setCotizacion(jsonEnd);

                } else {
                    CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - code: " + _res.info.transactionID);
                    vm.cargandoCotizacion = false;
                }
            });
        }

        function cleanDataEmission() {
            vm.isClienteObt = false;
            vm.emission.contract = {
                gender: '1',
                name: '',
                lastName: '',
                secondLastName: '',
                birthdate: moment(new Date()).format('YYYY-MM-DD'),
                fiscalIDNumber: '',
                email: '',
                phone: '',
                street: '',
                numberExt: '',
                numberInt: '',
                neighboarhood: '',
                stateContractor: {
                    type: {}
                },
                entityContractor: {
                    type: {}
                },
                pcContractor: {
                    type: {}
                }
            };
            vm.cmd.emission.contract = {
                stateContractor: {
                    type: null
                },
                entityContractor: {
                    type: null
                },
                pcContractor: {
                    type: null
                }
            };
        }

        function initEmission() {
            var fecha = "";
            var fechaSeleccion = "";
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;
            vm.flagSameAddressCheckBox = !!vm.cotizacionSeleccionada;
            vm.isClienteObt = true;
            
            if (vm.numeroCliente === "9999") {
                if (typeof vm.fechaNacimiento === 'string') {
                    fecha = vm.fechaNacimiento;
                } else {
                    fecha = moment(vm.fechaNacimiento).format("DD/MM/YYYY");
                    if (typeof fecha === 'undefined' || fecha === 'Invalid date') {
                        fecha = moment(vm.fechaNacimiento, "DD/MM/YYYY");
                        fecha = moment(fecha).format("DD/MM/YYYY");
                    }
                }
            } else {
                if (typeof vm.birthDay === 'string') {
                    fecha = vm.birthDay;
                } else {
                    fecha = moment(vm.birthDay).format("DD/MM/YYYY");
                    if (typeof fecha === 'undefined' || fecha === 'Invalid date') {
                        fecha = moment(vm.birthDay, "DD/MM/YYYY");
                        fecha = moment(fecha).format("DD/MM/YYYY");
                    }
                }
            }

            vm.isClienteObt = true;

            switch (vm.emissionPersonType) {
                case 'F':
                    fecha = calcularEdad(_type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber, "1");
                    vm.emission.contract = {
                        gender: _type ? vm.cotizacionSeleccionada.sexoCliente === '1' ? '1' : '2' : vm.sexo === 'masculino' ? '1' : '2',
                        name: _type ? vm.cotizacionSeleccionada.nombre : vm.nombres,
                        lastName: _type ? vm.cotizacionSeleccionada.primerApellido : vm.apePaterno,
                        secondLastName: _type ? vm.cotizacionSeleccionada.segundoApellido : vm.apeMaterno,
                        birthdate: fecha,
                        fiscalIDNumber: _type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber,
                        email: _type ? vm.cotizacionSeleccionada.emailCliente : vm.emailUser,
                        phone: _type ? vm.cotizacionSeleccionada.telefonoCliente : vm.phoneUser,
                        street: _type ? _quotation.Street : vm.calle,
                        numberExt: vm.emission.riskNumberExt,
                        numberInt: vm.emission.riskInterior,
                        neighboarhood: vm.emission.riskNeighborhood,
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }
                    };
                    vm.cmd.emission.contract = {
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }

                    };
                    break;
                
                case 'M':
                    if (_type) {
                        if (vm.cotizacionSeleccionada.isCliente === 1) {
                            if (typeof vm.cotizacionSeleccionada.fechaNacimiento === 'string') {
                                fechaSeleccion = vm.cotizacionSeleccionada.fechaNacimiento;
                            } else {
                                fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento).format("DD/MM/YYYY");
                                if (typeof fechaSeleccion === 'undefined' || fechaSeleccion === 'Invalid date') {
                                    fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento, "DD/MM/YYYY");
                                    fechaSeleccion = moment(fechaSeleccion).format("DD/MM/YYYY");
                                }
                            }
                        } else {
                            if (typeof vm.cotizacionSeleccionada.fechaNacimiento === 'string') {
                                fechaSeleccion = vm.cotizacionSeleccionada.fechaNacimiento;
                            } else {
                                fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento).format('DD/MM/YYYY');
                                if (typeof fechaSeleccion === 'undefined' || fechaSeleccion === 'Invalid date') {
                                    fechaSeleccion = moment(vm.cotizacionSeleccionada.fechaNacimiento, "DD/MM/YYYY");
                                    fechaSeleccion = moment(fecha).format("DD/MM/YYYY");
                                }
                            }
                        }
                    }

                    fechaSeleccion = calcularEdad(_type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber, "2");
                    vm.emission.contract = {
                        gender: '1',
                        name: _type ? vm.cotizacionSeleccionada.nombre : vm.nombreCliente,
                        lastName: '',
                        secondLastName: '',
                        birthdate: fechaSeleccion,
                        fiscalIDNumber: _type ? vm.cotizacionSeleccionada.rfcCliente : vm.fiscalIDNumber,
                        email: _type ? vm.cotizacionSeleccionada.emailCliente : vm.emailUser,
                        phone: _type ? vm.cotizacionSeleccionada.telefonoCliente : vm.phoneUser,
                        street: _type ? _quotation.Street : vm.calle,
                        numberExt: vm.emission.riskNumberExt,
                        numberInt: vm.emission.riskInterior,
                        neighboarhood: vm.emission.riskNeighborhood,
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }
                    };
                    vm.cmd.emission.contract = {
                        stateContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseEntityRisk.type : vm.cmd.dataHouseEntityRisk.type
                        },
                        entityContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHouseMunicipalityRisk.type : vm.cmd.dataHouseMunicipalityRisk.type
                        },
                        pcContractor: {
                            type: _type ? _quotation.catalogosCotizacion.dataHousePostalCodeRisk.type : vm.cmd.dataHousePostalCodeRisk.type
                        }

                    };
                    break;
            }
        }

        function calcularEdad(rfc, type) {
            var log = moment(new Date()).format("YY");
            var fecha = type === "1" ? rfc.substring(4, 10) : rfc.substring(3, 9);
            var anio = fecha.substring(0, 2);
            var mes = fecha.substring(2, 4);
            var dia = fecha.substring(4, 6);
            if (anio > log) {
                anio = "19" + anio;
            } else {
                anio = "20" + anio;
            }
            fecha = dia + "/" + mes + "/" + anio;
            return fecha;
        }

        function emissionFunction() {
            var _fechaExpiracionYear = typeof vm.comboYearExpiration === 'undefined' ? '' : vm.comboYearExpiration.id;
            var _fechaExpiracionMonth = typeof vm.comboMonthExpiration === 'undefined' ? '' : vm.comboMonthExpiration.id;
            var _typeCardByClabe = typeof vm.cmd.ListTypeCLABE === 'undefined' ? '' : vm.cmd.ListTypeCLABE.type.text;
            var _fechaPago = typeof vm.emission.payment.dateAprox === 'undefined' ? moment(new Date()).format('YYYY-MM-DD') : moment(vm.emission.payment.dateAprox).format('YYYY-MM-DD');
            var _numeroTarjeta = typeof vm.emission.payment.accountNumber === 'undefined' ? '' : vm.emission.payment.accountNumber;
            var _claveTarjeta = typeof vm.emission.payment.cvv === 'undefined' ? '' : vm.emission.payment.cvv;
            var _clabeInterbancaria = typeof vm.emission.payment.clabe === 'undefined' ? '' : vm.emission.payment.clabe;
            var _fechaVencimiento = "";
            var _fechaProximaPago = "";
            var fechaBirthDate = "";
            
            if (typeof vm.emission.contract.birthdate === 'string') {
                fechaBirthDate = vm.emission.contract.birthdate.split("/").reverse().join("-");
            } else {
                fechaBirthDate = moment(new Date(vm.emission.contract.birthdate)).format('YYYY-MM-DD');
            }
            if (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') {
                _fechaVencimiento = _fechaExpiracionYear + '-' + _fechaExpiracionMonth + "-01";
                _fechaProximaPago = _fechaPago;
            }
            if (vm.cmd.paymentType.type.id === '2' && _typeCardByClabe === 'CLABE') {
                _fechaVencimiento = _fechaPago;
                _fechaProximaPago = _fechaPago;
            }
            var _params = {
                QuotationNumber: vm.datosCotizacion.numeroCotizacion || vm.cotizacionSeleccionada.cotizacion,
                InsuInsurancePolicyDate: moment(new Date()).format('YYYY-MM-DD'),
                InsuPolicyMaturityDate: moment(new Date(), 'YYYY-MM-DD').add(1, 'years').format('YYYY-MM-DD'),
                InsuNumberOfFloors: vm.emission.floors,
                InsuNumberOfBasements: vm.emission.basements,
                InsuPaymentManagerID: vm.cmd.paymentType.type.id,
                RiskStreetTypeID: vm.cmd.emission.streetType.type.id,
                RiskStreet: vm.emission.riskStreet,
                RiskInteriorNumber: vm.emission.riskInterior,
                RiskOutdoorNumber: vm.emission.riskNumberExt,
                RiskNeighborhood: vm.emission.riskNeighborhood,
                RiskSameAddressContractingPartyFlag: vm.cmd.emission.sameAddress === true ? '1' : '0',
                ContractPersonType: vm.emissionPersonType,
                ContractFiscalIDNumber: vm.emission.contract.fiscalIDNumber,
                ContractName: vm.emission.contract.name,
                ContractLastName: vm.emission.contract.lastName,
                ContractSecondLastName: vm.emission.contract.secondLastName,
                ContractBirthDate: fechaBirthDate,
                ContractGender: vm.emissionPersonType === 'F' ? vm.emission.contract.gender : '1',
                ContractPhoneNumber: vm.emission.contract.phone,
                ContractEmail: vm.emission.contract.email,
                ContractStreet: vm.emission.contract.street,
                ContractNeighborhood: vm.emission.contract.neighboarhood,
                ContractFederalEntityID: vm.cmd.emission.contract.stateContractor.type.id,
                ContractDelegationMunicipalityID: vm.cmd.emission.contract.entityContractor.type.id,
                ContractPostalCode: vm.cmd.emission.contract.pcContractor.type.id,
                CheckBeneficiary: vm.checkBeneficiary ? 'true' : 'false',
                BeneficiaryPersonType: vm.checkBeneficiary ? vm.emission.beneficiary.type : '',
                BeneficiaryFiscalIDNumber: vm.checkBeneficiary ? vm.emission.beneficiary.rfc : '',
                BeneficiaryName: vm.checkBeneficiary ? vm.emission.beneficiary.type === 'F' ? vm.emission.beneficiary.name : vm.emission.beneficiary.social : '',
                BeneficiaryLastName: vm.checkBeneficiary ? vm.emission.beneficiary.lastName : '',
                BeneficiarySecondLastName: vm.checkBeneficiary ? vm.emission.beneficiary.secondLastName : '',
                BeneficiaryStreet: vm.checkBeneficiary ? vm.emission.beneficiary.street : '',
                BeneficiaryNeighborhood: vm.checkBeneficiary ? vm.emission.beneficiary.neighboarhood : '',
                BeneficiaryFederalEntityID: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.stateBeneficiary.type.id : '',
                BeneficiaryDelegationMunicipalityID: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.entityBeneficiary.type.id : '',
                BeneficiaryPostalCode: vm.checkBeneficiary ? vm.cmd.emission.beneficiary.pcBeneficiary.type.id : '',
                //DATOS DE TITULAR LOS MISMOS QUE DATOS DE CONTRATANTE
                TitularPersonType: vm.emissionPersonType,
                TitularFiscalIDNumber: vm.emission.contract.fiscalIDNumber,
                TitularName: vm.emission.contract.name,
                TitularLastName: vm.emission.contract.lastName,
                TitularSecondLastName: vm.emission.contract.secondLastName,
                TitularBirthDate: fechaBirthDate,
                TitularGender: vm.emissionPersonType === 'F' ? vm.emission.contract.gender : '1',
                TitularPhoneNumber: vm.emission.contract.phone,
                TitularEmail: vm.emission.contract.email,
                TitularStreet: vm.emission.contract.street,
                TitularNeighborhood: vm.emission.contract.neighboarhood,
                TitularFederalEntityID: vm.cmd.emission.contract.stateContractor.type.id,
                TitularDelegationMunicipalityID: vm.cmd.emission.contract.entityContractor.type.id,
                TitularPostalCode: vm.cmd.emission.contract.pcContractor.type.id,
                //fin datos de titular
                BankingPaymentMethod: vm.cmd.paymentType.type.id === '8' ? 'TC' : vm.cmd.paymentType.type.id === '1' ? '' : vm.cmd.ListTypeCLABE.type.text,
                BankingBankID: (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') && (typeof vm.cmd.dataBanks.type !== 'undefined') ? vm.cmd.dataBanks.type.id : '',
                BankingName: vm.emission.payment.name,
                BankingLastName: vm.emission.payment.lastName,
                BankingSecondLastName: vm.emission.payment.secondLastName,
                BankingEmail: vm.emission.payment.email,
                BankingAccountNumber: _numeroTarjeta,
                BankingCardVerificationValue: _claveTarjeta,
                BankingExpirationDate: _fechaVencimiento,
                BankingCardID: (vm.cmd.paymentType.type.id === '8' || vm.cmd.paymentType.type.id === '2') && (typeof vm.cmd.cardType.type !== 'undefined') ? vm.cmd.cardType.type.id : '',
                BankingCLABE: _clabeInterbancaria,
                BankingPaymentDate: _fechaProximaPago,
                TypeCardByClabe: vm.cmd.ListTypeCLABE === undefined ? '' : vm.cmd.ListTypeCLABE.type.text,
                language: 'SPA'
            };

            insurancePymeSrv.getServiceEmisionPyme(_params).then(function (_res) {
                if (_res.success) {
                    vm.datosCotizacion = _res.info;
                    vm.numPoliza = _res.info.policyNumber;
                    vm.stepForm.stepD = false;
                    vm.stepForm.stepE = true;

                    var _data = {
                        language: 'SPA',
                        idCotizacion: _params.QuotationNumber,
                        idPoliza: vm.numPoliza,
                        quotationJsonInit: JSON.stringify(_params),
                        quotationJsonEnd: JSON.stringify(_res.response),
                        numberAuthorizer: 0
                    };

                    insurancePymeSrv.updateQuotation(_data).then(function (response) {
                        
                        CommonModalsSrv.done("Emisión Exitosa. Número de póliza: " + vm.numPoliza + '');
                    }).catch();
                } else {
                    CommonModalsSrv.error("Error en el Servicio, no se encuentra disponible - code: " + _res.info.transactionID);

                }
            });
        }

        vm.datepicker_opts = {
            minDate: new Date(),
            isInvalidDate: function (date) {
                return (date.day() === 0 || date.day() === 6) ? true : false;
            }
        };

        function printPolicy() {
            var _url = window.location.href.indexOf('asesoria.actinver.com/asesoria') !== -1 ?
                    'https://negocios.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0' :
                    'https://negociosuat.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0';

            window.open(_url, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function imprimirCondiciones() {
            var _urlCondiciones;
            _urlCondiciones = 'img/pdfs/actinver-condiciones-generales-mapfre-hogar30052019.pdf';
            window.open(_urlCondiciones, '_blank', 'width=' + screen.width + 'px,height=' + screen.height + 'px,resizable=0');
        }

        function endEmission() {
            $state.go('insurance.main', {model: null});
        }

        function emisionSeguroHogar() {
            if (Number(vm.emission.floors) <= 0) {
                CommonModalsSrv.error("El número de PISOS debe ser MAYOR a CERO");
                return;
            }
            
            if (validaRFCFecha()) {
                vm.stepForm.stepC = false;
                vm.stepForm.stepD = true;
            }
        }

        function backToEmission() {
            vm.stepForm.stepC = true;
            vm.stepForm.stepD = false;
        }

        function validaRFCFecha() {
            var fechaC = moment(vm.emission.contract.birthdate).format("DD/MM/YYYY");

            if (!validaFechaConRFC(fechaC, vm.emission.contract.fiscalIDNumber, vm.personType, "Contratante")) {
                return false;
            }

            if (vm.checkBeneficiary) {
                var fechaB = "";
                var personaPY = "";

                if (vm.emission.beneficiary.type === "F") {
                    personaBeneficiario = "1";
                } else {
                    if (vm.emission.beneficiary.type === "M") {
                        personaBeneficiario = "2";
                    }
                }

                if (personaBeneficiario === "1") {
                    if (vm.emission.beneficiary.dateF) {
                        fechaB = vm.emission.beneficiary.dateF;
                    } else {
                        CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Nacimiento del Beneficiario");
                    }
                } else {
                    if (personaBeneficiario === "2") {
                        if (vm.emission.beneficiary.dateM) {
                            fechaB = vm.emission.beneficiary.dateM;
                        } else {
                            CommonModalsSrv.error("Favor de Capturar el campo de Fecha de Constitución del Beneficiario");
                        }
                    }
                }

                fechaB = moment(fechaB).format("DD/MM/YYYY");

                if (!validaFechaConRFC(fechaB, vm.emission.beneficiary.rfc, personaBeneficiario, "Beneficiario")) {
                    return false;
                }
            }

            return true;
        }

        function validaFechaConRFC(fecha, rfcOri, tipoPersona, persona) {
            if (!vm.isClienteObt) {
                var rfc = "";
                var arrayFecha = fecha.split("/");
                rfc += arrayFecha[2].substring(2, 4);
                rfc += arrayFecha[1];
                rfc += arrayFecha[0];
                if (tipoPersona === '1') {
                    if (rfc === rfcOri.substring(4, 10)) {
                        vm.bnd = true;       
                    } else {
                        CommonModalsSrv.error("La fecha de nacimiento del " + persona + " no coincide con la fecha del RFC.");    
                        return false;
                    }
                } else if (tipoPersona === '2') {
                    if (rfc === rfcOri.substring(3, 9)) {
                        vm.bnd = true;
                    } else {
                        if (rfcOri.length > 12 && tipoPersona === '2') {
                            CommonModalsSrv.error("El RFC del " + persona + " no cumple con la longitud correcta. ");
                            return false;
                        } else {
                            CommonModalsSrv.error("La fecha constitutiva del " + persona + " no coincide con la fecha del RFC.");
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return true;
            }
        }

        function calculaRFC() {
            vm.bnd = false;

            if (!vm.isClienteObt) {
                var fecha = vm.disabledRFC ? vm.birthDay : vm.fechaNacimiento;
                fecha = typeof fecha === 'string' ? fecha : moment(fecha).format('DD/MM/YYYY');//$("#F_NACIMIENTO").val();
                var rfcOri = vm.fiscalIDNumber;
                var rfc = "";
                var arrayFecha = fecha.split("/");
                rfc += arrayFecha[2].substring(2, 4);
                rfc += arrayFecha[1];
                rfc += arrayFecha[0];
                if (vm.personType === '1') {
                    if (rfc === rfcOri.substring(4, 10)) {
                        vm.bnd = true;
                    } else {
                        CommonModalsSrv.error("La fecha de nacimiento no coincide con la fecha del RFC.");
                    }
                } else if (vm.personType === '2') {
                    if (rfc === rfcOri.substring(3, 9)) {
                        vm.bnd = true;
                    } else {
                        if (rfcOri.length > 12 && vm.personType === '2') {
                            CommonModalsSrv.error("El RFC no cumple con la longitud correcta. ");
                        } else {
                            CommonModalsSrv.error("La fecha constitutiva no coincide con la fecha del RFC.");
                        }
                    }
                }
            } else {
                vm.bnd = true;
            }
        }

        function justAlphanumeric(field) {            
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[0-9a-zA-ZÁÉÍÓÚÑáéíóúñ ]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function justNumeric(field) {        
            var target = document.getElementById(field);
            var v_names = (target.value + '').split('');
            var res = "";

            for (var count = 0; count < v_names.length; count++) {
                if ((v_names[count] + '').match(/^[0-9]+$/)) {
                    res += v_names[count];
                }
            }
            target.value = res + '';
        }

        function soloNumero(e) {
            var regex = new RegExp("^[0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (!regex.test(key) && event.charCode !== 0) {
                event.preventDefault();
                return false;
            }
        }

        function checkRate(input) {
            //var re =/^[a-zA-Z0-9 ]+$/;
            var re = /^[1-9]+[0-9]*]*$/;
            if (!re.test(input)) {
                return true;
            } else {
                return true;
            }
        }

        var begin;
        var first;
        var second;

        function charrepeat(e, value) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var tb = (typeof value !== 'undefined') ? value.toUpperCase() : String.fromCharCode(echc).toUpperCase();
            if (tb.length > 2) {
                var message = tb.substring(tb.length - 3, tb.length);
                if (checkRate(message)) {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (begin.toString() === first.toString() && first.toString() === second.toString()) {
                        event.preventDefault();
                        return false;
                    }
                } else {
                    begin = message.substring(0, 1);
                    first = message.substring(1, 2);
                    second = message.substring(2, 3);
                    if (parseInt(first) === parseInt(second) - 1 && parseInt(begin) === parseInt(first) - 1) {
                        event.preventDefault();
                        return false;
                    }
                }
            }
            return false;
        }

        function charrepeatText(event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key) {
                event.preventDefault();
                return false;
            }
        }

        function charrepeatTextTres(event, idValue) {
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc).toUpperCase();
            var inputValue = angular.element("#" + idValue).val().toString().toUpperCase();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            
            if (inputValue.substring(inputValue.length - 1, inputValue.length) === key && inputValue.substring(inputValue.length - 2, inputValue.length - 1) === key && inputValue.substring(inputValue.length - 3, inputValue.length - 2) === key) {
                event.preventDefault();
                return false;
            }
        }

        function soloTextAndNum(e, espacios) {
            var regex = espacios ? new RegExp("^[a-zA-Z0-9 ]+$") : new RegExp("^[a-zA-Z0-9]+$");
            var echc = (typeof event.charCode !== 'undefined') ? event.charCode : event.which;
            var key = String.fromCharCode(echc);
            if (event.which === 241 || event.which === 209 || event.which === 225 ||
                    event.which === 233 || event.which === 237 || event.which === 243 ||
                    event.which === 250 || event.which === 193 || event.which === 201 ||
                    event.which === 205 || event.which === 211 || event.which === 218)
                return true;
            else {
                if (!regex.test(key) && event.charCode !== 0) {
                    event.preventDefault();
                    return false;
                }
            }
        }

        function soloText(e, espacios, valor) {
            var regex = espacios ? new RegExp("^[a-zA-Z]+$") : new RegExp("^[a-zA-Z]+$");
            var echc = (typeof e.charCode !== 'undefined') ? e.charCode : e.which;
            var key = String.fromCharCode(echc);
            if (e.which === 241 || e.which === 209 || e.which === 225 ||
                    e.which === 233 || e.which === 237 || e.which === 243 ||
                    e.which === 250 || e.which === 193 || e.which === 201 ||
                    e.which === 205 || e.which === 211 || e.which === 218 || e.which === 32)
                return true;
            else {
                if (!regex.test(key) && e.charCode !== 0) {

                    e.preventDefault();
                    return false;
                }
            }
        }

        function numberSecuential(event, idValue) {
            var strNum = "01234567890000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999";
            var inputValue = angular.element("#" + idValue).val();
            inputValue = (typeof inputValue === 'undefined') ? "" : inputValue;
            if (inputValue.toString() !== '01' && inputValue.toString() !== '001') {
                if (inputValue.toString().length > 5 && strNum.includes(inputValue.toString())) {
                    event.preventDefault();
                    return false;
                } else {
                    return true;
                }
            } else {
                event.preventDefault();
                return false;
            }
        }

        function forceKeyPressUppercase(e) {
            var charInput = e.keyCode;
            if ((charInput >= 97) && (charInput <= 122)) { // lowercase
                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifier key
                    var newChar = charInput - 32;
                    var start = e.target.selectionStart;
                    var end = e.target.selectionEnd;
                    e.target.value = e.target.value.substring(0, start) + String.fromCharCode(newChar) + e.target.value.substring(end);
                    e.target.setSelectionRange(start + 1, start + 1);
                    e.preventDefault();
                }
            }
        }

        function setValueGastosExtrasCasaHabitacion() {
            
            var imp_edificio = vm.importeEdificio * 1;
            vm.sumaGastosExtras = (imp_edificio + (imp_edificio * 0.1)) + '';
            document.getElementById("sumaGastosExtras").disabled = "true";
        }

        function setRemocionEscombros() {
            var imp_edificio = vm.importeEdificio * 1;
            vm.sumaRemEsco = (imp_edificio + (imp_edificio * 0.1)) + '';
            document.getElementById("sumaRemEsco").disabled = "true";
        }

        function onChangeTipoDeRiesgo(tipoRiesgo) {
            vm.tipoRiesgo = tipoRiesgo;
            cambiaJoyasTipoDeRiesgo();
        }

        function cambiaJoyasTipoDeRiesgo() {
            if (vm.tipoRiesgo.id === "2") {
                vm.roboMenaje.c.checked = false;
                vm.roboMenaje.ci.joyas.checked = false;
                vm.dinero.c.checked = false;
                vm.dinero.ci.usoTarjetasDinero.checked = false;

                if (vm.rol === "SEGUROS") {
                    vm.roboMenaje.c.montoDisabled = true;
                    vm.roboMenaje.c.obligatorio = true;
                    vm.dinero.c.montoDisabled = true;
                    vm.dinero.c.obligatorio = true;
                }
            } else {
                if (vm.rol === "ASESOR") {
                    vm.roboMenaje.c.checked = true;
                    vm.dinero.c.checked = true;
                    vm.roboMenaje.ci.joyas.checked = true;
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = false;
                        vm.roboMenaje.c.obligatorio = false;
                        vm.dinero.c.montoDisabled = false;
                        vm.dinero.c.obligatorio = false;
                    }
                }
            }
            realizaOperaciones();
        }

        function getJsonCoberturasService(newValue) {
            var _listaObtenida = [];
            insurancePymeSrv.getCoverage().then(function (_res) {
                angular.forEach(_res.info, function (value) {

                    var jS = {};
                    try {
                        jS = JSON.parse(decode(value.json));
                    } catch (err) {
                        try {
                            jS = JSON.parse(value.json);
                        } catch (err) {
                            CommonModalsSrv.error("No fue posible obtener las coberturas.");
                        }
                    }

                    _listaObtenida.push({
                        id: value.idCobertura,
                        isCliente: value.isCliente,
                        json: jS,
                        moneda: value.moneda,
                        rollUsuario: value.rollUsuario,
                        status: value.status,
                        tipoCliente: value.tipoCliente
                    });
                });
                
                for (var i = 0; i < _listaObtenida.length; i++) {
                    if ("ASESOR" === _listaObtenida[i].rollUsuario && "MXN" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasAsesorMXN = _listaObtenida[i].json;
                    }
                    if ("ASESOR" === _listaObtenida[i].rollUsuario && "USD" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasAsesorUSD = _listaObtenida[i].json;
                    }
                    if ("SEGUROS" === _listaObtenida[i].rollUsuario && "MXN" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasSegurosMXN = _listaObtenida[i].json;
                    }
                    if ("SEGUROS" === _listaObtenida[i].rollUsuario && "USD" === _listaObtenida[i].moneda) {
                        vm.jsonCoberturasSegurosUSD = _listaObtenida[i].json;
                    }
                }

                getJsonCoberturas(newValue);
            });
        }

        function getJsonCoberturas(newValue) {
            var moneda = 1;

            if (newValue) {
                moneda = newValue.id;
            }
            if (vm.rol === "ASESOR") {
                switch (moneda) {
                    case 1:
                        vm.jsonCoberturas = vm.jsonCoberturasAsesorMXN;
                        break;
                    case 2:
                        vm.jsonCoberturas = vm.jsonCoberturasAsesorUSD;
                        break;
                }
            }
            if (vm.rol === "SEGUROS") {
                switch (moneda) {
                    case 1:
                        vm.jsonCoberturas = vm.jsonCoberturasSegurosMXN;
                        break;
                    case 2:
                        vm.jsonCoberturas = vm.jsonCoberturasSegurosUSD;
                        break;
                }
            }

            vm.limiteMaximoEquipoMovil = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.limiteMaximo;
            vm.limiteMaximoCristales = vm.jsonCoberturas.coberturas.cristales.limiteMaximo;
            vm.limiteMaximoRoboMenaje = vm.jsonCoberturas.coberturas.roboMenaje.limiteMaximo;
            vm.limiteMaximoRcFamiliar = vm.jsonCoberturas.coberturas.rcFamiliar.limiteMaximo;
            vm.dineroMontoInicial = vm.jsonCoberturas.coberturas.dinero.monto;
            vm.limiteMaximoUsoTarjetas = vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes.usoTarjetasDinero.limiteMaximo;
            vm.bicicletasMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.bicicletasObjetos.monto;
            vm.objetosObjetosMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes.objetosObjetos.monto;
            vm.objetosMontoInicial = vm.jsonCoberturas.coberturas.objetosPersonales.monto;
            vm.equipoMovilMontoInicial = vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes.equipoMovil.monto;

            vm.edificio = {
                "c": vm.jsonCoberturas.coberturas.edificio,
                "ci": vm.jsonCoberturas.coberturas.edificio.coberturasIntegrantes
            };
            vm.contenidos = {
                "c": vm.jsonCoberturas.coberturas.contenidos,
                "ci": vm.jsonCoberturas.coberturas.contenidos.coberturasIntegrantes
            };
            vm.rcFamiliar = {
                "c": vm.jsonCoberturas.coberturas.rcFamiliar,
                "ci": vm.jsonCoberturas.coberturas.rcFamiliar.coberturasIntegrantes
            };
            vm.roboMenaje = {
                "c": vm.jsonCoberturas.coberturas.roboMenaje,
                "ci": vm.jsonCoberturas.coberturas.roboMenaje.coberturasIntegrantes
            };
            vm.dinero = {
                "c": vm.jsonCoberturas.coberturas.dinero,
                "ci": vm.jsonCoberturas.coberturas.dinero.coberturasIntegrantes
            };
            vm.objetosPersonales = {
                "c": vm.jsonCoberturas.coberturas.objetosPersonales,
                "ci": vm.jsonCoberturas.coberturas.objetosPersonales.coberturasIntegrantes
            };
            vm.electrodomesticos = {
                "c": vm.jsonCoberturas.coberturas.electrodomesticos,
                "ci": vm.jsonCoberturas.coberturas.electrodomesticos.coberturasIntegrantes
            };
            vm.remocionEscombros = {
                "c": vm.jsonCoberturas.coberturas.remocionEscombros,
                "ci": vm.jsonCoberturas.coberturas.remocionEscombros.coberturasIntegrantes
            };
            vm.gastosAsalto = {
                "c": vm.jsonCoberturas.coberturas.gastosAsalto,
                "ci": vm.jsonCoberturas.coberturas.gastosAsalto.coberturasIntegrantes
            };
            vm.gastosFinales = {
                "c": vm.jsonCoberturas.coberturas.gastosFinales,
                "ci": vm.jsonCoberturas.coberturas.gastosFinales.coberturasIntegrantes
            };
            vm.gastosExtras = {
                "c": vm.jsonCoberturas.coberturas.gastosExtras,
                "ci": vm.jsonCoberturas.coberturas.gastosExtras.coberturasIntegrantes
            };

            vm.cristales = {
                "c": vm.jsonCoberturas.coberturas.cristales,
                "ci": vm.jsonCoberturas.coberturas.cristales.coberturasIntegrantes
            };
            if (vm.jsonCoberturas.coberturas.asistenciaInformatica) {
                vm.asistenciaInformatica = {
                    "c": vm.jsonCoberturas.coberturas.asistenciaInformatica,
                    "ci": vm.jsonCoberturas.coberturas.asistenciaInformatica.coberturasIntegrantes
                };
            }
            if (vm.jsonCoberturas.coberturas.asistenciaLegal) {
                vm.asistenciaLegal = {
                    "c": vm.jsonCoberturas.coberturas.asistenciaLegal,
                    "ci": vm.jsonCoberturas.coberturas.asistenciaLegal.coberturasIntegrantes
                };
            }
            vm.asistenciaViajes = {
                "c": vm.jsonCoberturas.coberturas.asistenciaViajes,
                "ci": vm.jsonCoberturas.coberturas.asistenciaViajes.coberturasIntegrantes
            };
            if (vm.jsonCoberturas.coberturas.extensionViajes) {
                vm.extensionViajes = {
                    "c": vm.jsonCoberturas.coberturas.extensionViajes,
                    "ci": vm.jsonCoberturas.coberturas.extensionViajes.coberturasIntegrantes
                };
            }

            cambiaJoyasTipoDeRiesgo();
            realizaOperaciones();

        }

        function getCantidadLimite(amount) {

            if (!isNaN(amount)) {
                return "$" + formatCurrency(amount);
            } else {
                if ("NA" === amount) {
                    return "";
                }
            }

        }

        function eventClickCheckbox($event) {
            var tarjet = $event.currentTarget;

            if (tarjet.id === "edificio1") {
                if (tarjet.checked) {
                    vm.edificio.c.monto = vm.edificio.c.limiteMinimo;
                    vm.edificio.c.montoDisabled = false;
                    vm.edificio.ci.incendioEdificio.checked = true;

                    if (vm.contenidos.ci.hidroContenidos.checked) {
                        vm.edificio.ci.hidroEdificio.checked = true;
                    }
                    if (vm.contenidos.ci.terremotoContenidos.checked) {
                        vm.edificio.ci.terremotoEdificio.checked = true;
                    }

                    vm.rcFamiliar.ci.rcArrendatario.checked = false;
                    vm.rcFamiliar.ci.rcArrendatario.monto = undefined;
                    vm.rcFamiliar.ci.rcArrendatario.montoDisabled = true;
                } else {
                    vm.edificio.c.monto = undefined;
                    vm.edificio.c.montoDisabled = true;
                    vm.edificio.ci.incendioEdificio.checked = false;
                    vm.edificio.ci.incendioEdificio.monto = undefined;
                    vm.edificio.ci.incendioEdificio.montoDisabled = true;
                    vm.edificio.ci.hidroEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.monto = undefined;
                    vm.edificio.ci.hidroEdificio.montoDisabled = true;
                    vm.edificio.ci.terremotoEdificio.checked = false;
                    vm.edificio.ci.terremotoEdificio.monto = undefined;
                    vm.edificio.ci.terremotoEdificio.montoDisabled = true;
                    vm.rcFamiliar.ci.rcArrendatario.checked = true;
                    vm.rcFamiliar.ci.rcArrendatario.obligatorio = true;
                    vm.rcFamiliar.ci.rcArrendatario.monto = "AMPARADO";
                }
            }

            // si es hidrometeorologicos de edificio
            if (tarjet.id === "hidroEdificio1" && vm.edificio.c.checked) {

                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.checked = true;
                } else {
                    vm.edificio.ci.hidroEdificio.monto = undefined;

                    vm.contenidos.ci.hidroContenidos.checked = false;
                    vm.contenidos.ci.hidroContenidos.monto = undefined;

                }
            }
            
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (!vm.edificio.ci.hidroEdificio.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = true;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked = false;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = true;
                }
            }

            //si es hidrometeorologicos de contenidos
            if (tarjet.id === "hidroContenidos1") {
                if (tarjet.checked) {
                    if (vm.edificio.c.checked) {
                        vm.edificio.ci.hidroEdificio.checked = true;
                    }
                } else {
                    vm.contenidos.ci.hidroContenidos.monto = undefined;
                    vm.edificio.ci.hidroEdificio.checked = false;
                    vm.edificio.ci.hidroEdificio.monto = undefined;

                    if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes !== undefined) {
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.checked = false;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto = undefined;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = true;

                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.checked = false;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.monto = undefined;
                        vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = true;
                    }
                }
            }


            /**
             * bienes de edificio
             */
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = false;
            }

            /*
             * si limitaciones
             */
            if (tarjet.id === "limConstruccion1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.montoDisabled = true;
                }
            }
            if (tarjet.id === "limDesocupado1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.montoDisabled = true;
                }
            }
            if (tarjet.id === "limFija1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.montoDisabled = true;
                }
            }
            if (tarjet.id === "limTerminado1") {
                if (tarjet.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = false;
                    
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.monto = undefined;
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.montoDisabled = true;
                }
            }

            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked) {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.checked = true;
                }
            }

            /**
             * bienes de contenidos
             */
            if (tarjet.id === "bienesContenidos1") {
                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = false;
                } else {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.monto = undefined;
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.montoDisabled = true;
                }
            }

            if (tarjet.id === "limContenidos1") {
                if (tarjet.checked) {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = false;
                } else {
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.monto = undefined;
                    vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.montoDisabled = true;
                }
            }

            /*
             * si es terremoto de edificio
             */
            if (tarjet.id === "terremotoEdificio1" && vm.edificio.c.checked) {

                if (tarjet.checked) {
                    vm.contenidos.ci.terremotoContenidos.checked = true;
                } else {
                    vm.edificio.ci.terremotoEdificio.monto = undefined;

                    vm.contenidos.ci.terremotoContenidos.checked = false;
                    vm.contenidos.ci.terremotoContenidos.monto = undefined;
                }
            }

            /*
             * si es terremoto de contenidos
             */
            if (tarjet.id === "terremotoContenidos1") {

                if (tarjet.checked) {
                    if (vm.edificio.c.checked) {
                        vm.edificio.ci.terremotoEdificio.checked = true;
                    }
                } else {
                    vm.contenidos.ci.terremotoContenidos.monto = undefined;

                    vm.edificio.ci.terremotoEdificio.checked = false;
                    vm.edificio.ci.terremotoEdificio.monto = undefined;
                }
            }

            /**
             * si cristales
             */
            if (tarjet.id === "cristales1") {
                if (tarjet.checked) {
                    vm.cristales.c.montoDisabled = false;
                } else {
                    vm.cristales.c.monto = undefined;
                    vm.cristales.c.montoDisabled = true;
                }
            }

            /**
             * si robo menaje
             */
            if (tarjet.id === "roboMenaje1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.c.montoDisabled = true;
                    }

                    vm.roboMenaje.c.monto = undefined;
                    vm.roboMenaje.ci.joyas.checked = false;
                }
            }

            /**
             * si joyas
             */
            if (tarjet.id === "joyas1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.ci.joyas.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.roboMenaje.ci.joyas.montoDisabled = true;
                    }
                    vm.roboMenaje.ci.joyas.monto = undefined;
                }
            }

            /**
             * si dinero
             */
            if (tarjet.id === "dinero1") {
                if (tarjet.checked) {
                    vm.dinero.c.montoDisabled = false;
                } else {
                    vm.dinero.c.monto = undefined;
                    vm.dinero.c.montoDisabled = true;

                    vm.dinero.ci.usoTarjetasDinero.checked = false;
                }
            }

            /**
             * si tarjetas
             */
            if (tarjet.id === "usoTarjetasDinero1") {
                if (tarjet.checked) {
                    vm.dinero.ci.usoTarjetasDinero.montoDisabled = false;
                } else {
                    vm.dinero.ci.usoTarjetasDinero.monto = undefined;
                    vm.dinero.ci.usoTarjetasDinero.montoDisabled = true;
                }
            }

            /**
             * si objetos personales
             */
            if (tarjet.id === "objetosPersonales1") {
                if (!tarjet.checked) {
                    vm.objetosPersonales.c.monto = undefined;

                    vm.objetosPersonales.ci.objetosObjetos.checked = false;
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = true;

                    vm.objetosPersonales.ci.bicicletasObjetos.checked = false;
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = undefined;
                    vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = true;
                }
            }

            /**
             * si objetos personales de objetos
             */
            if (tarjet.id === "objetosObjetos1") {
                if (tarjet.checked) {
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = false;
                } else {
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                    vm.objetosPersonales.ci.objetosObjetos.montoDisabled = true;
                }
            }

            /**
             * si bicicletas 
             */
            if (tarjet.id === "bicicletasObjetos1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.objetosPersonales.ci.bicicletasObjetos.montoDisabled = true;
                    }
                }
            }

            /**
             * si electrodomesticos
             */
            if (tarjet.id === "electrodomesticos1") {
                if (tarjet.checked) {
                    vm.electrodomesticos.c.montoDisabled = false;
                } else {
                    vm.electrodomesticos.c.monto = undefined;
                    vm.electrodomesticos.c.montoDisabled = true;

                    vm.electrodomesticos.ci.equipoMovil.checked = false;
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                    vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                }
            }

            /**
             * si equipo movil 
             */
            if (tarjet.id === "equipoMovil1") {
                if (tarjet.checked) {
                    if (vm.rol === "SEGUROS") {
                        vm.electrodomesticos.ci.equipoMovil.montoDisabled = false;
                    }
                } else {
                    if (vm.rol === "SEGUROS") {
                        vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                    }
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                }
            }

            if (tarjet.id === "asistenciaViajes1") {
                if (!tarjet.checked) {
                    if (vm.jsonCoberturas.coberturas.extensionViajes) {
                        vm.extensionViajes.c.checked = false;
                    }
                }
            }

            if (tarjet.id === "extensionViajes1") {
                if (tarjet.checked) {
                    vm.asistenciaViajes.c.checked = true;
                }
            }

            realizaOperaciones();
        }

        function realizaOperaciones() {
            var montoEdificio = vm.edificio.c.monto ? vm.edificio.c.monto : 0;
            var montoContenido = vm.contenidos.c.monto ? vm.contenidos.c.monto : 0;
            var percMontCont = 0.1 * (parseFloat(montoEdificio) + parseFloat(montoContenido));

            /*
             * 10 por ciento de suma de edificio y contenidos
             */
            vm.gastosExtras.c.monto = percMontCont;
            vm.remocionEscombros.c.monto = percMontCont;


            /*
             * incendios, hidrometereologicos, terremoto de edificio
             * mismo valor que edificio
             */
            if (vm.edificio.ci.incendioEdificio.checked) {
                vm.edificio.ci.incendioEdificio.monto = montoEdificio;
            }
            if (vm.edificio.ci.hidroEdificio.checked) {
                vm.edificio.ci.hidroEdificio.monto = montoEdificio;
            }
            if (vm.edificio.ci.terremotoEdificio.checked) {
                vm.edificio.ci.terremotoEdificio.monto = montoEdificio;
            }

            /*
             * incendios, hidrometereologicos, terremoto de contenidos
             * mismo valor que contenidos
             */
            if (vm.contenidos.ci.incendioContenidos.checked) {
                vm.contenidos.ci.incendioContenidos.monto = vm.contenidos.c.monto;
            }
            if (vm.contenidos.ci.hidroContenidos.checked) {
                vm.contenidos.ci.hidroContenidos.monto = vm.contenidos.c.monto;
            }
            if (vm.contenidos.ci.terremotoContenidos.checked) {
                vm.contenidos.ci.terremotoContenidos.monto = vm.contenidos.c.monto;
            }

            /**
             * limites hidrometeorologicos Edificio
             */
            var percContenido = 0.3 * montoEdificio;
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.limiteMaximo = percContenido;
                vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.limiteMaximo = percContenido;
            }

            /**
             * monto de bienes Edificio
             */
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija.checked ||
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado.checked) {
                    var lim = vm.edificio.ci.hidroEdificio.coberturasIntegrantes;
                    var monto1 = lim.limConstruccion.monto ? lim.limConstruccion.monto : 0;
                    var monto2 = lim.limDesocupado.monto ? lim.limDesocupado.monto : 0;
                    var monto3 = lim.limFija.monto ? lim.limFija.monto : 0;
                    var monto4 = lim.limTerminado.monto ? lim.limTerminado.monto : 0;

                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = monto1 + monto2 + monto3 + monto4;
                } else {
                    vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio.monto = undefined;
                }
            }

            /**
             * limites bienes Contenidos
             */
            var percContenido = 0.3 * montoContenido;
            if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes) {
                vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos.limiteMaximo = percContenido;
                vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos.limiteMaximo = percContenido;
            }

            /**
             * limite maximo de cristales
             */
            percContenido = 0.15 * parseFloat(montoContenido);

            if (percContenido < vm.limiteMaximoCristales) {
                vm.cristales.c.limiteMaximo = percContenido;
            } else {
                vm.cristales.c.limiteMaximo = vm.limiteMaximoCristales;
            }

            /**
             * limite maximo de robo menaje
             */
            percContenido = 0.8 * parseFloat(montoContenido);

            if (percContenido < vm.limiteMaximoRoboMenaje) {
                vm.roboMenaje.c.limiteMaximo = percContenido;
            } else {
                vm.roboMenaje.c.limiteMaximo = vm.limiteMaximoRoboMenaje;
            }

            /**
             * monto de robo de menaje en asesor
             */
            if (vm.tipoRiesgo.id === "2") {
                vm.roboMenaje.c.monto = undefined;
            } else {
                if (vm.rol === "ASESOR") {
                    vm.roboMenaje.c.montoDisabled = true;
                    percContenido = 0.5 * parseFloat(montoContenido);
                    if (percContenido < vm.limiteMaximoRoboMenaje) {
                        vm.roboMenaje.c.monto = percContenido;
                    } else {
                        vm.roboMenaje.c.monto = vm.limiteMaximoRoboMenaje;
                    }
                }
            }

            /**
             * limite maximo de joyas
             */
            percContenido = 0.5 * parseFloat(vm.roboMenaje.c.monto);
            vm.roboMenaje.ci.joyas.limiteMaximo = percContenido;

            /**
             * monto de joyas en asesor
             */
            if (vm.rol === "ASESOR") {
                vm.roboMenaje.ci.joyas.monto = vm.roboMenaje.c.monto * 0.5;
            }

            if (!vm.roboMenaje.c.monto) {
                vm.roboMenaje.ci.joyas.checked = false;
                vm.roboMenaje.ci.joyas.monto = undefined;
                vm.roboMenaje.ci.joyas.montoDisabled = true;
            }

            /**
             * monto de dinero en asesor
             */
            if (vm.tipoRiesgo.id === "2") {
                vm.dinero.c.monto = undefined;
            } else {
                if (vm.rol === "ASESOR") {
                    vm.dinero.c.monto = vm.dineroMontoInicial;
                }
            }

            /**
             * limiteMaximo de tarjetas
             */

            if (vm.dinero.c.monto) {
                if (vm.dinero.c.monto < vm.limiteMaximoUsoTarjetas) {
                    vm.dinero.ci.usoTarjetasDinero.limiteMaximo = vm.dinero.c.monto;
                } else {
                    vm.dinero.ci.usoTarjetasDinero.limiteMaximo = vm.limiteMaximoUsoTarjetas;
                }
            }

            /**
             * monto de tarjetas
             */
            if (!vm.dinero.c.monto) {
                vm.dinero.ci.usoTarjetasDinero.checked = false;
                vm.dinero.ci.usoTarjetasDinero.monto = undefined;
                vm.dinero.ci.usoTarjetasDinero.montoDisabled = true;
            }

            /**
             * monto de bicicletas de objetos personales
             */
            if (vm.rol === "ASESOR") {
                if (vm.objetosPersonales.ci.bicicletasObjetos.checked) {
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = vm.bicicletasMontoInicial;
                } else {
                    vm.objetosPersonales.ci.bicicletasObjetos.monto = undefined;
                }
            }

            /**
             * monto de objetos de objetos personales
             */
            if (vm.rol === "ASESOR") {
                if (vm.objetosPersonales.ci.objetosObjetos.checked) {
                    vm.objetosPersonales.ci.objetosObjetos.monto = vm.objetosObjetosMontoInicial;
                } else {
                    vm.objetosPersonales.ci.objetosObjetos.monto = undefined;
                }
            }

            /**
             * monto de objetos personales
             */
            if (vm.objetosPersonales.c.checked) {
                var cob = vm.objetosPersonales.ci;

                var monto1 = cob.objetosObjetos.monto ? cob.objetosObjetos.monto : 0;
                var monto2 = cob.bicicletasObjetos.monto ? cob.bicicletasObjetos.monto : 0;

                vm.objetosPersonales.c.monto = monto1 + monto2;
            }

            /**
             * limite de electrodomesticos
             */
            percContenido = 0.5 * parseFloat(montoContenido);
            vm.electrodomesticos.c.limiteMaximo = percContenido;

            /*
             * limite de equipomovil
             * 30 por ciento de electrodomesticos o [15000 (vm.limiteMaximoEquipoMovil)]
             */
            var percElectro = 0.3 * parseFloat(vm.electrodomesticos.c.monto);

            if (vm.rol === "SEGUROS") {
                if (percElectro < vm.limiteMaximoEquipoMovil) {
                    vm.electrodomesticos.ci.equipoMovil.limiteMaximo = percElectro;
                } else {
                    vm.electrodomesticos.ci.equipoMovil.limiteMaximo = vm.limiteMaximoEquipoMovil;
                }

                if (!vm.electrodomesticos.c.monto) {
                    vm.electrodomesticos.ci.equipoMovil.checked = false;
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                    vm.electrodomesticos.ci.equipoMovil.montoDisabled = true;
                }
            }

            /*
             * monto de equipomovil
             * 30 por ciento de electrodomesticos o [15000 (vm.limiteMaximoEquipoMovil)]
             */
            if (vm.rol === "ASESOR") {
                if (vm.electrodomesticos.ci.equipoMovil.checked) {
                    if (percElectro < vm.equipoMovilMontoInicial) {
                        vm.electrodomesticos.ci.equipoMovil.monto = percElectro;
                    } else {
                        vm.electrodomesticos.ci.equipoMovil.monto = vm.equipoMovilMontoInicial;
                    }
                } else {
                    vm.electrodomesticos.ci.equipoMovil.monto = undefined;
                }
            }

            vm.gastosAsalto.c.monto = undefined;
            vm.asistenciaViajes.c.monto = undefined;
            vm.gastosFinales.c.monto = undefined;
            if (vm.extensionViajes.c) {
                vm.extensionViajes.c.monto = undefined;
            }
            if (vm.asistenciaInformatica.c) {
                vm.asistenciaInformatica.c.monto = undefined;
            }
            if (vm.asistenciaLegal.c) {
                vm.asistenciaLegal.c.monto = undefined;
            }


            /**
             * siempre cambia montos si están seleccionados
             */
            if (vm.gastosAsalto.c.checked) {
                vm.gastosAsalto.c.monto = "AMPARADO";
            }
            if (vm.asistenciaViajes.c.checked) {
                vm.asistenciaViajes.c.monto = "AMPARADO";
            }
            if (vm.extensionViajes.c) {
                if (vm.extensionViajes.c.checked) {
                    vm.extensionViajes.c.monto = "AMPARADO";
                }
            }
            if (vm.asistenciaInformatica.c) {
                if (vm.asistenciaInformatica.c.checked) {
                    vm.asistenciaInformatica.c.monto = "AMPARADO";
                }
            }
            if (vm.asistenciaLegal.c) {
                if (vm.asistenciaLegal.c.checked) {
                    vm.asistenciaLegal.c.monto = "AMPARADO";
                }
            }

            if (vm.gastosFinales.c.checked) {
                vm.gastosFinales.c.monto = "AMPARADO";
            }

        }

        function validarTabla() {
            var tablaValida = false;

            if (validarSiCumple(vm.edificio.c)) {
                return true;
            }
            if (vm.edificio.ci.hidroEdificio.coberturasIntegrantes) {
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.bienesEdificio)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limTerminado)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limDesocupado)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limConstruccion)) {
                    return true;
                }
                if (validarSiCumple(vm.edificio.ci.hidroEdificio.coberturasIntegrantes.limFija)) {
                    return true;
                }
            }
            if (validarSiCumple(vm.contenidos.c)) {
                return true;
            }
            if (vm.contenidos.ci.hidroContenidos.coberturasIntegrantes) {
                if (validarSiCumple(vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.bienesContenidos)) {
                    return true;
                }
                if (validarSiCumple(vm.contenidos.ci.hidroContenidos.coberturasIntegrantes.limContenidos)) {
                    return true;
                }
            }
            if (validarSiCumple(vm.rcFamiliar.c)) {
                return true;
            }

            if (validarSiCumple(vm.cristales.c)) {
                return true;
            }

            if (validarSiCumple(vm.roboMenaje.c)) {
                return true;
            }

            if (validarSiCumple(vm.roboMenaje.ci.joyas)) {
                return true;
            }

            if (validarSiCumple(vm.dinero.c)) {
                return true;
            }

            if (validarSiCumple(vm.dinero.ci.usoTarjetasDinero)) {
                return true;
            }

            if (vm.objetosPersonales.ci.objetosObjetos) {
                if (validarSiCumple(vm.objetosPersonales.ci.objetosObjetos)) {
                    return true;
                }
            }

            if (validarSiCumple(vm.objetosPersonales.ci.bicicletasObjetos)) {
                return true;
            }

            if (validarSiCumple(vm.electrodomesticos.c)) {
                return true;
            }

            if (validarSiCumple(vm.electrodomesticos.ci.equipoMovil)) {
                return true;
            }

            return tablaValida;
        }

        function validarSiCumple(v) {
            if (v.checked) {
                if (v.monto < v.limiteMinimo || v.monto > v.limiteMaximo || v.monto === "" || v.monto === undefined) {
                    return true;
                }
            }
            return false;
        }

        $scope.onClicSendEmailNotificationCotizationHogar = function () {
            var clienteNombre = "";
            try {
                if (vm.personType.toString() === '1') {
                    clienteNombre = vm.apePaterno + ' ' + ' ' + vm.apeMaterno + ' ' + vm.nombres;
                }
                if (vm.personType.toString() === '2') {
                    clienteNombre = vm.nombreCliente;
                }
                $scope.obJsonMail = {
                    'language': 'SPA',
                    'emailFrom': "seguros@actinver.com.mx",
                    'idTemplate': "buildDBTemplate|17",
                    'emailSubject': "Envío de cotización seguro de hogar Actinver " + clienteNombre.toUpperCase() + "(" + vm.datosCotizacion.numeroCotizacion + ")",
                    'mailTo': [vm.emailUser],
                    'mailCC': [""],
                    'ldrEdificio': '',
                    'ldrIncendioAdicionalesEdificio': '',
                    'ldrExplosionEdificio': '',
                    'ldrHuelAlbPopEdificio': '',
                    'ldrNavAreaVehiHumoEdificio': '',
                    'ldrFenHidroEdificio': '',
                    'ldrTerrErupVolcEdificio': '',
                    'ldrTodoRiesIncAdicEdificio': '',
                    'ldrContenido': '',
                    'ldrIncendioAdicionalesCont': '',
                    'ldrExplosionCont': '',
                    'ldrHuelAlbPopCont': '',
                    'ldrNavAereaVehiHumoCont': '',
                    'ldrFenHidroCont': '',
                    'ldrTerrErupVolcCont': '',
                    'ldrTodoRiesIncAdicCont': '',
                    'ldrRemocionEscombros': '',
                    'ldrIncendioRemocion': '',
                    'ldrFenHidroRemocion': '',
                    'ldrTerrErupVolcRemocion': '',
                    'ldrGasExtraCasaHabitacion': '',
                    'ldrIncendioGastExtras': '',
                    'ldrFenHidroGatExtras': '',
                    'ldrTerrErupVolcGastExtras': '',
                    'ldrRCFamiliar': '',
                    'ldrRCArrendatario': '',
                    'ldrRCTrabDomestico': '',
                    'ldrRoboDeMenaje': '',
                    'ldrRoboConViolencia': '',
                    'ldrRoboPorAsalto': '',
                    'ldrJoyasArtValor': '',
                    'ldrGtosMedAsaltDomicilio': '',
                    'ldrDineroValores': '',
                    'ldrCristales': '',
                    'ldrObjPersonales': '',
                    'lbrEqElectro': '',
                    'ldrAsistHogarViajes': '',
                    'ldrExtGarEnViajesNalEInt': '',
                    'ldrAsistLegal': '',
                    'ldrServDeAsistInformatica': '',
                    "dataHouseEntityRisk": vm.cmd.dataHouseEntityRisk.type.text,
                    "dataHouseMunicipalityRisk": vm.cmd.dataHouseMunicipalityRisk.type.text,
                    "dataHousePostalCodeRisk": vm.cmd.dataHousePostalCodeRisk.type.text,
                    "kindPaid": vm.cmd.kindPaid.type.text,
                    "currency": vm.cmd.currency.type.text,
                    "calle": vm.calle,
                    "kindRisk": vm.cmd.kindRisk.type.text,
                    "kindClasification": vm.cmd.kindClasification.type.text, //creada nueva variable para clasificación
                    "kindStructure": vm.cmd.kindStructure.type.text,
                    "kindRoof": vm.cmd.kindRoof.type.text,
                    "securityActions": vm.cmd.securityActions.type.text,
                    'primaTotalAnual': vm.datosCotizacion.primaTotal,
                    "insurancePolicyDate" : vm.insurancePolicyDate,
                    "netPremium": vm.datosCotizados.primaNeta,
                    "surcharge": vm.datosCotizados.recargos,
                    "entitlement":  vm.datosCotizados.derechosPoliza,
                    "vat": vm.datosCotizados.iva,
                    "adjoiningHomeFlag" : vm.cmd.borderWall.type.id

                };
                angular.forEach(vm.datosCotizacion.coberturas.coverageInformation, function (value) {
                    if (value.code.toString() === "3000") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrEdificio = "";
                        } else {
                            $scope.obJsonMail.ldrEdificio = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3001") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioAdicionalesEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioAdicionalesEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3002") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExplosionEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExplosionEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3003") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrHuelAlbPopEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrHuelAlbPopEdificio = value.insuredSum;
                            }
                        }
                    }
                    if (value.code.toString() === "3004") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrNavAereaVehiHumoEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrNavAereaVehiHumoEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3020") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3021") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3030") {
                        if ($scope.obJsonMail.ldrEdificio.toString() !== "") {
                            if ($scope.obJsonMail.ldrEdificio.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTodoRiesIncAdicEdificio = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTodoRiesIncAdicEdificio = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3050") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrContenido = "";
                        } else {
                            $scope.obJsonMail.ldrContenido = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3051") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioAdicionalesCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioAdicionalesCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3052") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExplosionCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExplosionCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3053") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrHuelAlbPopCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrHuelAlbPopCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3054") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrNavAereaVehiHumoCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrNavAereaVehiHumoCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3070") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3071") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3080") {
                        if ($scope.obJsonMail.ldrContenido.toString() !== "") {
                            if ($scope.obJsonMail.ldrContenido.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTodoRiesIncAdicCont = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTodoRiesIncAdicCont = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3210") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRemocionEscombros = "";
                        } else {
                            $scope.obJsonMail.ldrRemocionEscombros = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3211") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3212") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3213") {
                        if ($scope.obJsonMail.ldrRemocionEscombros.toString() !== "") {
                            if ($scope.obJsonMail.ldrRemocionEscombros.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcRemocion = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcRemocion = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3220") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrGasExtraCasaHabitacion = "";
                        } else {
                            $scope.obJsonMail.ldrGasExtraCasaHabitacion = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3221") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrIncendioGastExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrIncendioGastExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3222") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrFenHidroGatExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrFenHidroGatExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3223") {
                        if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() !== "") {
                            if ($scope.obJsonMail.ldrGasExtraCasaHabitacion.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrTerrErupVolcGastExtras = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrTerrErupVolcGastExtras = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3401") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRCFamiliar = "";
                        } else {
                            $scope.obJsonMail.ldrRCFamiliar = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3442") {
                        if ($scope.obJsonMail.ldrRCFamiliar.toString() !== "") {
                            if ($scope.obJsonMail.ldrRCFamiliar.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRCArrendamiento = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRCArrendamiento = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3441") {
                        if ($scope.obJsonMail.ldrRCFamiliar.toString() !== "") {
                            if ($scope.obJsonMail.ldrRCFamiliar.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRCTrabDomestico = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRCTrabDomestico = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3500") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrRoboDeMenaje = "";
                        } else {
                            $scope.obJsonMail.ldrRoboDeMenaje = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3501") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRoboConViolencia = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRoboConViolencia = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3502") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrRoboPorAsalto = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrRoboPorAsalto = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3503") {
                        if ($scope.obJsonMail.ldrRoboDeMenaje.toString() !== "") {
                            if ($scope.obJsonMail.ldrRoboDeMenaje.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrJoyasArtValor = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrJoyasArtValor = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3504") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrGtosMedAsaltDomicilio = "";
                        } else {
                            $scope.obJsonMail.ldrGtosMedAsaltDomicilio = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3520") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrDineroValores = "";
                        } else {
                            $scope.obJsonMail.ldrDineroValores = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3530") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrCristales = "";
                        } else {
                            $scope.obJsonMail.ldrCristales = value.insuredSum;
                        }
                    }


                    if (value.code.toString() === "3550") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                            $scope.obJsonMail.ldrObjPersonales = "";
                        } else {
                            $scope.obJsonMail.ldrObjPersonales = value.insuredSum;
                        }
                    }

                    if (value.code.toString() === "3660") {
                        if ($scope.obJsonMail.ldrObjPersonales.toString() !== "") {
                            if ($scope.obJsonMail.ldrObjPersonales.toString() === value.insuredSum.toString() || value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.lbrEqElectro = "AMPARADA";
                            } else {
                                $scope.obJsonMail.lbrEqElectro = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3910") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {

                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrAsistHogarViajes = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrAsistHogarViajes = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3911") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrExtGarEnViajesNalEInt = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrExtGarEnViajesNalEInt = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3920") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrAsistLegal = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrAsistLegal = value.insuredSum;
                            }
                        }
                    }

                    if (value.code.toString() === "3921") {
                        if (value.insuredSum === undefined || value.insuredSum === null || value.insuredSum === 0) {
                        } else {
                            if (value.insuredSum.toString() === '1') {
                                $scope.obJsonMail.ldrServDeAsistInformatica = "AMPARADA";
                            } else {
                                $scope.obJsonMail.ldrServDeAsistInformatica = value.insuredSum;
                            }
                        }
                    }

                });


                var copia = $scope.obJsonMail;
                insurancePymeSrv.sendEmailNotificationCotizationPyme(copia).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado");
                    }
                });
            } catch (e) {

                
            }

        };

        $scope.onClicSendEmailNotificationCompraSeguro = function () {
            var _urlPoliza = window.location.href.indexOf("asesoria.actinver.com/asesoria") !== -1 ?
                'https://negocios.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0':
                'https://negociosuat.mapfre.com.mx/VIPII/wImpresion/MarcoImpresion.aspx?Poliza=' + vm.numPoliza + '&Endoso=0';
            var clienteNombre = vm.personType.toString() === '1' ? vm.apePaterno + ' ' + ' ' + vm.apeMaterno + ' ' + vm.nombres : vm.nombreCliente;
            var _email = (typeof vm.emailUser === 'undefined') ? "" : vm.emailUser;
            var _calle = (typeof vm.calle === 'undefined') ? "" : vm.calle;
            var _entidadFederativa = (typeof vm.cmd.dataHouseEntityRisk === 'undefined') ? "" : vm.cmd.dataHouseEntityRisk.type.text;
            var _minicipio = (typeof vm.cmd.dataHouseMunicipalityRisk === 'undefined') ? "" : vm.cmd.dataHouseMunicipalityRisk.type.text;
            var _codePostal = (typeof vm.cmd.dataHousePostalCodeRisk === 'undefined') ? "" : vm.cmd.dataHousePostalCodeRisk.type.text;
            var _tipoPago = (typeof vm.cmd.kindPaid === 'undefined') ? "" : vm.cmd.kindPaid.type.text;
            var _tipoMoneda = (typeof vm.cmd.currency === 'undefined') ? "" : vm.cmd.currency.type.text;
            var _tipoRiesgo = (typeof vm.cmd.kindRisk === 'undefined') ? "" : vm.cmd.kindRisk.type.text;
            var _tipoMuro = (typeof vm.cmd.kindStructure === 'undefined') ? "" : vm.cmd.kindStructure.type.text;
            var _tipoTecho = (typeof vm.cmd.kindRoof === 'undefined') ? "" : vm.cmd.kindRoof.type.text;
            var _tipoSecuridad = (typeof vm.cmd.securityActions === 'undefined') ? "" : vm.cmd.securityActions.type.text;
            var _type = !!vm.cotizacionSeleccionada;
            var _quotation = _type ? JSON.parse(vm.cotizacionSeleccionada.quotationJsonIni) : null;

            if (_quotation && _quotation.catalogosCotizacion) {
                var cat = _quotation.catalogosCotizacion;
                _email = vm.cotizacionSeleccionada.emailCliente;
                _calle = _quotation.Street;
                _entidadFederativa = cat.dataHouseEntityRisk.type.text;
                _minicipio = cat.dataHouseMunicipalityRisk.type.text;
                _codePostal = cat.dataHousePostalCodeRisk.type.text;
                _tipoPago = cat.kindPaid.type.text;
                _tipoMoneda = cat.currency.type.text;
                _tipoRiesgo = cat.kindRisk.type.text;
                _tipoMuro = cat.kindStructure.type.text;
                _tipoTecho = cat.kindRoof.type.text;
                _tipoSecuridad = cat.securityActions.type.text;
            }

            $scope.obJsonMail = {
                'language': 'SPA',
                'emailFrom': 'seguros@actinver.com.mx',
                'idTemplate': 'buildDBTemplate|18',
                'emailSubject': 'Póliza emitida seguro de hogar  ' + clienteNombre + ' ' + vm.numPoliza,
                'mailTo': _email,
                'mailCC': '',
                'polizaSeguro': (typeof vm.numPoliza === 'undefined') ? "" : vm.numPoliza,
                'fechaInicioVigencia': (typeof vm.insurancePolicyDate === 'undefined') ? "" : moment(vm.insurancePolicyDate).format("DD/MM/YYYY"),
                'fechaFinVigencia': (typeof vm.policyMaturityDate === 'undefined') ? "" : moment(vm.policyMaturityDate).format("DD/MM/YYYY"),
                'fechaLimitePago': (typeof vm.emission.payment.dateAprox === 'undefined') ? moment(new Date()).format('DD/MM/YYYY') : moment(vm.emission.payment.dateAprox).format("DD/MM/YYYY"),
                "dataHouseEntityRisk": _entidadFederativa,
                "dataHouseMunicipalityRisk": _minicipio,
                "dataHousePostalCodeRisk": _codePostal,
                "kindPaid": _tipoPago,
                "currency": _tipoMoneda,
                "calle": _calle,
                "kindRisk": _tipoRiesgo,
                "kindStructure": _tipoMuro,
                "kindRoof": _tipoTecho,
                "securityActions": _tipoSecuridad,
                "urlPolizaImpresion": _urlPoliza
            };

            if (_entidadFederativa !== "") {
                insurancePymeSrv.sendEmailNotificationEmisionPyme($scope.obJsonMail).then(function (_response) {
                    if (_response.success) {
                        CommonModalsSrv.done("Correo Enviado.");
                    } else {
                        CommonModalsSrv.error("El correo no fue enviado.");
                    }
                });
            } else {
                CommonModalsSrv.error("El correo no fue enviado.");
            }
        };

        function formatCurrency(amount) {
            var decimals = 2;
            amount += ''; // por si pasan un numero en vez de un string
            amount = parseFloat(amount.replace(/[^0-9\.]/g, '')); // elimino cualquier cosa que no sea numero o punto

            decimals = decimals || 0; // por si la variable no fue fue pasada
            // si no es un numero o es igual a cero retorno el mismo cero
            if (isNaN(amount) || amount === 0)
                return parseFloat(0).toFixed(decimals);
            // si es mayor o menor que cero retorno el valor formateado como numero
            amount = '' + amount.toFixed(decimals);

            var amount_parts = amount.split('.'),
                    regexp = /(\d+)(\d{3})/;

            while (regexp.test(amount_parts[0]))
                amount_parts[0] = amount_parts[0].replace(regexp, '$1' + ',' + '$2');

            return amount_parts.join('.');
        }

        function encode(string) {
            string = string.replace(/\r\n/g, "\n");

            var utftext = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
            }
            return utftext;
        }

        function decode(utftext) {
            var string = "";
            var i = 0;
            var c = 0;
            var c1 = 0;
            var c2 = 0;

            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    var c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return string;
        }

        $scope.updateSelection = function (position, elemento, list, $event) {

            var cot = elemento.cotizacion;

            if ($event.currentTarget.checked) {
                vm.cotizacionSeleccionada = elemento;
                vm.botonContratar = "Contratar";
            } else {
                vm.cotizacionSeleccionada = undefined;
                vm.botonContratar = "Cotizar";
            }

            angular.forEach(list, function (option, index) {
                if (cot !== list[index].cotizacion) {
                    option.checked = false;
                }
            });
        };
    }

})();

( function () {
    angular
        .module('actinver.controllers')
        .directive('numbersOnly', onlyNumbers)
        .directive('alphaNumeric', alphanNumeric)
        .directive('repeatedLetter', repeatedLetter);

        function onlyNumbers () {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/[^0-9]/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }

        function alphanNumeric() {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/[^a-zA-Z0-9 ]/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }

        function repeatedLetter () {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function(inputValue) {
                        if (inputValue === undefined) return '';
                        var onlyNumeric = inputValue.replace(/([a-zA-Z])\1{2,}/g, '');
                        if (onlyNumeric !== inputValue) {
                            modelCtrl.$setViewValue(onlyNumeric);
                            modelCtrl.$render();
                        }
                        return onlyNumeric;
                    });
                }
            };
        }



})();
(function () {
    'use strict';

    insurancePymeSrv.$inject = ['URLS', '$q', '$http'];
    function insurancePymeSrv(URLS, $q, $http) {
        /**
         *  prospect service
         */
        function InsurancePymeSrv() {}

        InsurancePymeSrv.prototype.getCatalogPostalCode = function (_idMunicipality) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogPostalCodeQuery + _idMunicipality,
                    params: {
                        language: 'SPA',
                        MunicipalityID: _idMunicipality
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outPostalCodeQuery.postalCodeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogInsuranceRiskType = function (_businessActivity, _businessActivitySubtype) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogInsuranceRiskTypeQuery + _businessActivity + "/" + _businessActivitySubtype,
                    params: {
                        language: 'SPA',
                        BusinessActivity: _businessActivity,
                        BusinessActivitySubtype: _businessActivitySubtype
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceRiskTypeQuery.riskTypeList.riskTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogWallType = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogWallTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outWallTypeQuery.wallTypeList.wallTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogRoofType = function (_wallTypeID) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogRoofTypeQuery + _wallTypeID,
                    params: {
                        language: 'SPA',
                        WallTypeID: _wallTypeID
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outRoofTypeQuery.roofTypeList.roofTypeDetail;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogStreetTypeQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogStreetTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outStreetTypeQuery.streetTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogCardTypeQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogCardTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outInsuranceCardTypeQuery.cardTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogPaymentTypeQuery = function () {
            console.log("hiola desde houses svr ");
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogPaymentTypeQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outPaymentTypeQuery.paymentTypeList;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };



        InsurancePymeSrv.prototype.getListQuotations = function (_params) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationSearch,
                    params: _params
                }).then(function success(response) {
                    if (response.data.return.status === 1) {
                        var _response = response.data.return.data.listInsuranceQuotationRs;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                }
                );
            });
        };

        //modificado nombre y URL de la funcion
        InsurancePymeSrv.prototype.getServiceCotizacionPyme = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getServiceCotizacionPyme,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result.toString() === "1") {
                        _response = response.data.outHomeInsuranceQuotation;
                        resolve({success: true, info: _response,response:response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        //modificado nombre y URL de la funcion
        InsurancePymeSrv.prototype.getServiceEmisionPyme = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getServiceEmisionPyme,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outHomeInsurancePolicyRegistration;
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.updateQuotation = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationUpdate,
                    params: _datos

                }).then(function success(response) {
                    console.log('response update', response);
                    var _response;
                    if (response.data.return.status === 1) {
                        _response = response.data.return.data.listInsuranceQuotationRs[0];
                        resolve({success: true, info: _response, response: response.data});
                    } else {
                        resolve({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    console.log('response update', error);
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCoverage = function () {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCoverage + "?language=SPA"
                }).then(function success(response) {
                    console.log("Original:");
                    console.log(response);
                    if (response.data.return.status === 1) {
                        //console.log(response.data.listInsuranceCoverageRs);
                        var _response = response.data.return.data.listInsuranceCoverageRs;
                        console.log("Lista de Coberturas: " + _response);
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                    /*if ( _response.status === 1 ) {
                     _response = response.data.listInsuranceCoverageRs;
                     resolve( {success: true, info: _response } );
                     }else{
                     resolve( {success: false, info: response.data.outCommonHeader.result });
                     }*/
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        InsurancePymeSrv.prototype.getCotizationAdd = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationAdd,
                    params: _datos
                }).then(function success(response) {
                    console.log("respuesta");
                    console.log(response);
                    if (response.data.return.status === 1) {
                        var _response = response.data.return.data.listInsuranceQuotationRs;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: "not-found"});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                }
                );
            });
        };

        InsurancePymeSrv.prototype.getCotizationUpdate = function (_datos) {

            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.getCotizationUpdate,
                    params: _datos

                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result.toString() === "1") {
                        _response = response.data.outHomeInsurancePolicyRegistration;
                        resolve({success: true, info: _response});
                    } else {
                        resolve({success: false, info: response.messages});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        //modificado nombre y URL de la funcion
        InsurancePymeSrv.prototype.sendEmailNotificationCotizationPyme = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationCotizationPyme,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        //modificado nombre y URL de la funcion
        InsurancePymeSrv.prototype.sendEmailNotificationEmisionPyme = function (objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'POST',
                    url: URLS.sendEmailNotificationEmisionPyme,
                    params: objectJson
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outCommonHeader.result;
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };

        //inicio funciones añadidas 12-11-2019 G.E.
        InsurancePymeSrv.prototype.getCatalogEntityFederativePyme = function () {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getCatalogEntityFederalPyme,
                    params: {
                        language : 'SPA'
                    }
                }).then(function success( response ) {
                    var _response;
                    if ( response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outFederalEntityQuery.federalEntityCatalogData.federalEntity;
                        resolve( {success: true, info: _response } );
                    }else{
                        reject( {success: false, info: response.data.outCommonHeader.result });
                    }
                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogMunicipalityPyme = function ( _idEntityFederative ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getCatalogMunicipalityPyme + _idEntityFederative,
                    params: {
                        language : 'SPA'
                    }
                }).then(function success( response ) {
                    var _response;
                    if ( response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outMunicipalityQuery.municipalityCatalogData.municipality;
                        resolve( {success: true, info: _response } );
                    }else{
                        reject( {success: false, info: response.data.outCommonHeader.result });
                    }
                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogBanksPyme = function ( ) {
            return $q(function( resolve, reject ){
                $http({
                    method: 'GET',
                    url: URLS.getCatalogBanksPyme,
                    params: {
                        language : 'SPA'
                    }
                }).then(function success( response ) {
                    var _response;
                    if ( response.data.outCommonHeader.result.result === 1 ) {
                        _response = response.data.outInsuranceBanksQuery.insuranceBanksCatalogData.bank;
                        resolve( {success: true, info: _response } );
                    }else{
                        reject( {success: false, info: response.data.outCommonHeader.result });
                    }
                }, function error(){
                    reject( {success: false, type: 'not-found'} );
                });
            });
        };

        InsurancePymeSrv.prototype.getCatalogClasificationQuery = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getCatalogClasificationQuery,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                    var _response;
                    if (response.data.outCommonHeader.result.result === 1) {
                        _response = response.data.outStreetTypeQuery.streetTypeList; //modificar
                        resolve({success: true, info: _response});
                    } else {
                        reject({success: false, info: response.data.outCommonHeader.result});
                    }
                }, function error() {
                    reject({success: false, type: 'not-found'});
                });
            });
        };
        //fin funciones añadidas 12-11-2019 G.E.

        return new InsurancePymeSrv();

    }

    angular
            .module('actinver.controllers')
            .service('insurancePymeSrv', insurancePymeSrv);

})();

(function () {
    'use strict';
    luminaNotificationCtrl.$inject = ['$scope', 'notificationLuminaSrv', 'ErrorMessagesSrv'];
    function luminaNotificationCtrl($scope, notificationLuminaSrv,ErrorMessagesSrv) {

        var vm = this;
        vm.modal = false;
        vm.listNotification = [];

        function onStart() {
            vm.getNotificacion();
        }

        function getPositionElemento(_key) {
            var indice = -1;
            indice = vm.listNotification.findIndex(function (element) {                
                return element.adviserNotificationID === _key;
            });
            return indice;
        }

        function showLoading(opcion) {
            vm.modal = opcion;
        }

        vm.getNotificacion = function () {
            notificationLuminaSrv.getNotifications(sessionStorage.__username).then(function success(record) {
                vm.listNotification = record.notificaciones;
                $scope.$emit('mensajesLuminaNoLeidos', record.totalNoLeido);
            }).catch(function error(error) {
                ErrorMessagesSrv(error.message);
                vm.listNotification = [];
            });
        };

        vm.showMessage = function (_adviserNotificationId) {
            var indice = getPositionElemento(_adviserNotificationId);
            if (indice > -1) {
                if (!vm.listNotification[indice].readNotificationFlag) {
                    vm.saveStateNotificaction(_adviserNotificationId);
                } else {
                    vm.listNotification[indice].accion = 1;
                }
            }
        };

        vm.hideMessage = function (_adviserNotificationId) {
            var indice = getPositionElemento(_adviserNotificationId);
            if (indice > -1) {
                vm.listNotification[indice].accion = 0;
            }
        };

        vm.saveStateNotificaction = function (_adviserNotificationId) {
            var indice = -1;
            indice = getPositionElemento(_adviserNotificationId);
            notificationLuminaSrv.saveStateNotification({ adviserNotificationID: _adviserNotificationId }).then(function () {
                if (indice > -1) {
                    vm.listNotification[indice].readNotificationFlag = true;
                    $scope.$emit('mensajesLuminaNoLeidos', vm.listNotification.filter(function (record) {
                        return !record.readNotificationFlag;
                    }).length);
                    showLoading(false);
                }
                vm.listNotification[indice].accion = 1;

            }).catch(function () {
                showLoading(false);
                vm.listNotification[indice].accion = 0;
            });
        };

        onStart();
    }
    angular
        .module('actinver.controllers')
        .controller('luminaNotificationCtrl', luminaNotificationCtrl);
})();
(function () {

    'use strict';

    notificationLuminaSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv'];
    function notificationLuminaSrv(URLS, $q, $http, ErrorMessagesSrv) {

        function NotificacionLuminaServices() {

        }

        NotificacionLuminaServices.prototype.saveStateNotification = function (_datos) {
            return $q(function (resolve, reject) {
                _datos.language= 'SPA'; 
                $http({
                    method: 'POST',
                    url: URLS.updateStatusLumina,
                    data: $.param(_datos)                   
                }).then(function (response) {                    
                    resolve(response.data);
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ status: 'failed', error: error });
                });
            });
        };

        NotificacionLuminaServices.prototype.getNotifications = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getNotificationLumina,
                    params: {
                        language: 'SPA'
                    }
                }).then(function success(response) {
                  
                    if (typeof response !== 'undefined' && response.data.outCommonHeader.result.result === 1) {
                        var lista = response.data.result;
                        var regNoLeidos = lista.filter(function (record) {
                            return !record.readNotificationFlag;
                        }).length;
                        resolve({ success: true, totalNoLeido: regNoLeidos, totalRegistro: lista.length, notificaciones: lista });
                    } else if (typeof response !== 'undefined' && response.outCommonHeader.result.result === 2) {
                        reject({ success: false, totalNoLeido: 0, totalRegistro: 0, notificaciones: [], message: response.data.outCommonHeader.result.messages[0].responseMessage });
                    } else {
                        reject({ success: false, totalNoLeido: 0, totalRegistro: 0, notificaciones: [], message: 'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk' });
                    }

                }).catch(function failed() {
                    reject({ success: false, totalNoLeido: 0, totalRegistro: 0, notificaciones: [], message: 'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk' });
                });
            });

        };

        return new NotificacionLuminaServices();
    }
    angular.module('actinver.services')
        .service('notificationLuminaSrv', notificationLuminaSrv);
})();
( function(){
    "use strict";

    activityCtrl.$inject = ['NgTableParams', 'proposalSrv', 'CommonModalsSrv'];
    function activityCtrl( NgTableParams, proposalSrv, CommonModalsSrv ){
        var vm = this;
       

        function setup () {
            setupVars();
            getOffices("Todos");

        }



        function setupVars () {
            vm.date = new Date();
            vm.openedCalendar = false;
            vm.dateOptions = {
                minMode: 'month'
            };
            vm.showTable = false;
            vm.dropdownOptions = [];
            vm.dropdownSelected={ text: 'Todos' ,id:0};
            vm.showSpinner = false;
        }


       function getOffices(option) {

        vm.showSpinner = true;
        vm.showTable = false;
        //carga datos todos los datos
        proposalSrv.getActivityOffice( vm.date ).then(
            function ( _data ){
                vm.showSpinner = false;               
                vm.dropdownOptions=[];
                var optionSelect;
                var datosCombo=_data.financialCentersList;
                
                if(!option){
                    optionSelect={
                        text:'Todos'
                    };
                }else if(option === "Todos"){
                    optionSelect={
                        text:option
                    };
                }else{
                    optionSelect=option;
                }

                //llenado de tablas
                if(optionSelect.text === 'Todos'){ ///||( option && option.text  ==='Todos') ){
                    vm.dataInfoTabs = _data;   
                }else{
                    var datos = vm.dataInfoTabs.records && vm.dataInfoTabs.records.length <= _data.records.length ? _data.records:vm.dataInfoTabs.records;
                    var temporal=[];
                    vm.dataInfoTabs.totalLogins=0;
                    vm.dataInfoTabs.totalProposalReports=0;
                    vm.dataInfoTabs.totalTrackingAndProposalReports=0;
                    vm.dataInfoTabs.totalClientQueries=0;
                    vm.dataInfoTabs.totalTrackingReports=0;
                    vm.dataInfoTabs.totalFundSell=0;
                    vm.dataInfoTabs.totalTransferCash=0;
                    vm.tableParams=[];
                    vm.dataRowTableActivity=[];
                   // vm.showTable = false;
    
                    for(var row in datos){
                        if(datos[row].financialCenter === optionSelect.text){
                            if(datos[row].component==="Login"){
                                vm.dataInfoTabs.totalLogins+=1;
                            }
                            if(datos[row].component==="Reporte de Propuesta"){
                                vm.dataInfoTabs.totalProposalReports+=1;
                            }
                            if(datos[row].component==="Reporte de Propuesta con seguimiento"){
                                vm.dataInfoTabs.totalTrackingAndProposalReports+=1;
                            }
                            if(datos[row].component==="Consulta de cliente"){
                                vm.dataInfoTabs.totalClientQueries+=1;
                            }
                            if(datos[row].component==="Reporte de Seguimiento"){
                                vm.dataInfoTabs.totalTrackingReports+=1;
                            }
                            if(datos[row].component==="Venta de Fondos de Inversion"){
                                vm.dataInfoTabs.totalFundSell+=1;
                            }
                            if(datos[row].component==="Transferencia de Efectivo"){
                                vm.dataInfoTabs.totalTransferCash+=1;
                            }
                            temporal.push(datos[row]);
                        }
                    }
    
                    vm.dataInfoTabs.totalRecords = vm.dataInfoTabs.totalLogins + vm.dataInfoTabs.totalProposalReports + vm.dataInfoTabs.totalClientQueries + vm.dataInfoTabs.totalTrackingReports + vm.dataInfoTabs.totalFundSell + vm.dataInfoTabs.totalTransferCash;
                    vm.dataInfoTabs.records = temporal;
                }

                // cargar datos del combo de centros financiero
                for(var x in datosCombo){
                    vm.dropdownOptions.push({ text: datosCombo[x].financialCenter ,id: datosCombo[x].keyCenter});
                }
                vm.dropdownOptions.push({ text: 'Todos' ,id:0});

            },
            function () {
                CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
                vm.showSpinner = false;
            }
        );

        }


        vm.getInfoTabs = function (option) {
            getOffices(option);
        };


        vm.getMoreInfoTab = function ( _tabActive ) {
            vm.tabActive = _tabActive;
            vm.dataRowTableActivity=[];
            var datos = vm.dataInfoTabs.records;
            var rowData=null;

            if(_tabActive ==="tab1"){
                for( rowData in datos){
                    if(datos[rowData].component==="Login"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }

            }else if(_tabActive ==="tab2"){                
                for( rowData in datos){                    
                    if(datos[rowData].component === "Reporte de Propuesta"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
            }else if(_tabActive ==="tab3"){
                for( rowData in datos){                    
                    if(datos[rowData].component === "Reporte de Propuesta con seguimiento"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
                
            }else if(_tabActive ==="tab4"){
                for( rowData in datos){                    
                    if(datos[rowData].component === "Consulta de cliente"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
                
            }else if(_tabActive ==="tab5"){
                for( rowData in datos){                    
                    if(datos[rowData].component === "Reporte de Seguimiento"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
                
            }else if(_tabActive ==="tab6"){
                for( rowData in datos){                    
                    if(datos[rowData].component === "Venta de Fondos de Inversion"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
                
            }else if(_tabActive ==="tab7"){
                for( rowData in datos){                    
                    if(datos[rowData].component === "Transferencia de Efectivo"){
                        vm.dataRowTableActivity.push(datos[rowData]);
                    }
                }
                
            }


             if( vm.dataRowTableActivity ) {
                vm.tableParams = new NgTableParams(
                    { count: 10 },
                    { dataset: ( vm.dataRowTableActivity ) }
                );
            }

            vm.showTable = true;
        };


        vm.generaExcel=function(){
            /*
            var htmltable= document.getElementById('table-result');
            var html = htmltable.outerHTML;
            window.open('data:application/vnd.ms-excel;filename=Resultado.xls,' + encodeURIComponent(html));
*/
            var blob = new Blob([document.getElementById('table-result').outerHTML], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
            });
            saveAs(blob, "Report.xls");
        };

        function saveAs(blob, fileName) {
            if (window.navigator.msSaveOrOpenBlob) { // For IE:
                navigator.msSaveBlob(blob, fileName);
            } else { // For other browsers:
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = fileName;
                link.click();
                window.URL.revokeObjectURL(link.href);
            }
        }


        setup();

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'activityCtrl', activityCtrl );

})();

(function () {
	'use strict';

	proposalCtrl.$inject = ['$filter', 'proposalsProposalSrv', 'CommonModalsSrv', '$sessionStorage'];
	function proposalCtrl($filter, proposalsProposalSrv, CommonModalsSrv, $sessionStorage) {
		var vm = this;

		function setup() {
			vm.form = {
				portfolio: []
			};
			proposalsProposalSrv.getIssuersInfo()
				.then(function (response) {
					vm.issuers = response.data;
				});
		}

		// Reset form
		vm.resetForm = function () {
			setup();
			vm.client_name = null;
			vm.adviser_ext = null;
			vm.adviser_mobile = null;
			vm.adviser_phone = null;
			vm.change_location = null;
		};

		// Validate form
		vm.validateForm = function (form) {
			var msg = false;

			if (!form.name.$valid) {
				msg = 'El nombre del cliente es obligatorio, favor de revisarlo.';
			} else if (!form.ext.$valid) {
				msg = 'El número de extension es obligatorio, favor de revisarlo.';
			} else {
				angular.forEach(vm.form.portfolio, function (item) {
					var countPortfolio = 0;
					var invest_left = item.value - item.totals;
					if (item.type === 'manual' && !msg) {
						if (Number(invest_left.toFixed(2)) < 0) {
							msg = 'El valor del portafolio '+countPortfolio+' es menor a la inversión.';
						} else if (Number(invest_left.toFixed(2)) !== 0) {
							msg = 'Te falta invertir (<strong>' + $filter('currency')(Number(invest_left.toFixed(2))) + '</strong>) para poder continuar.';
						}
					}
					countPortfolio++;
				});
			}

			if (msg) {
				CommonModalsSrv.error(msg);
			} else {
				vm.submitForm();
			}
		};

		// Submit form
		vm.submitForm = function () {

			var user = JSON.parse($sessionStorage.user);
			var valorPortafolio1 = 0;
			var valorPortafolio2 = 0;
			var comments = '';
			var comments2 = '';
			var tipoPortafolio1 = 0;
			var tipoPortafolio2 = 0;
			var clientType = 0;

			
			valorPortafolio1 = vm.form.portfolio[0].value;
			comments = vm.form.portfolio[0].comment;
			if (vm.form.portfolio[0].type === 'model') {
				tipoPortafolio1 = 2;
				clientType = 0;
			} else if (vm.form.portfolio[0].type === 'manual') {
				tipoPortafolio1 = 1;
				clientType = 1;
				if(vm.form.portfolio[0].client_type.description === 'Moral'){
					clientType = 2;
				}
			}
			
			if (vm.form.portfolio[1]) {
				valorPortafolio2 = vm.form.portfolio[1].value;
				comments2 = vm.form.portfolio[1].comment;
				if (vm.form.portfolio[1].type === 'model') { //validar esta paret por ue creo esta entrando un 0 en tipo de portafolio al ingresar dos vecces manual
					tipoPortafolio2 = 2;
				} else if (vm.form.portfolio[1].type === 'manual') {
					tipoPortafolio2 = 1;
				}
			}

			var productos = [];
			if (vm.form.products) {
				angular.forEach(vm.form.products, function (value) {
					if (value) {
						angular.forEach(value.subproducts, function (subproducts, id) {
							productos.push({ "product": id, "value": 1 });
						});
					}
				});
			}

			var dataSent;
			var dataSentPortafolio=[];
			if (vm.form.portfolio[0].type === 'model') {
				dataSent = doJsonData(vm.form.portfolio[0] ? vm.form.portfolio[0].strategyItems : [], vm.form.portfolio[0].value);
			} else if (vm.form.portfolio[0].type === 'manual') {
				dataSent = doJson(vm.form.portfolio[0] ? vm.form.portfolio[0].invest : []);				
			}

			if (vm.form.portfolio[1] && vm.form.portfolio[1].type === 'model') {
				dataSentPortafolio = doJsonData(vm.form.portfolio[1] ? vm.form.portfolio[1].strategyItems : [], vm.form.portfolio[1].value);
			} else if (vm.form.portfolio[1] && vm.form.portfolio[1].type === 'manual') {
				dataSentPortafolio = doJson(vm.form.portfolio[1] ? vm.form.portfolio[1].invest : []);
			}

			var model = {
				language: 			'SPA',
				data: 				dataSent.length === 0 ? 0 : window.btoa(unescape(encodeURIComponent(JSON.stringify(dataSent)))),
				nameProposal:	 	vm.form.client_name,
				clientType: 		clientType,
				name: 				user.name,
				mail: 				user.mail,
				ext: 				vm.form.adviser_ext,
				idEmployee: 		user.employeeID,
				portfolioType1: 	tipoPortafolio1,
				portfolioType2: 	tipoPortafolio2,
				mobile: 			vm.form.adviser_mobile?vm.form.adviser_mobile:0,
				phone: 				vm.form.adviser_phone?vm.form.adviser_phone:0,
				valorPortafolio: 	valorPortafolio1,
				clientTypeFlag: 	0,
				comments: 			comments,
				portfolio: 			(dataSentPortafolio && dataSentPortafolio.length === 0) ? 0 : window.btoa(unescape(encodeURIComponent(JSON.stringify(dataSentPortafolio)))),
				valorPortafolio2:	valorPortafolio2,
				comments2: 			comments2,
				products: 			productos.length === 0 ? 0 : window.btoa(unescape(encodeURIComponent(JSON.stringify(productos)))),
				createEnvironment: true,
				createForecast: true
			};

			proposalsProposalSrv.generaReportePropuesta(model)
				.then(function (response) {
					try {
						if (/access/i.test(navigator.userAgent)) {
							var b64encoded = btoa(Uint8ToString(new Uint8Array(response.data)));
							var popupWin = window.open('Propuesta', '_blank', 'width=1000px,height=905px,resizable=0');
							popupWin.document.open();
							popupWin.document.write('<html><head></head><body><iframe width="100%" height="100%" src="data:application/pdf;base64,' + b64encoded + '"></iframe></body></html>');
							popupWin.document.close();
						} else {
							var file = new Blob([response.data], { type: 'application/pdf' });
							var fileURL = URL.createObjectURL(file);
							window.open(fileURL, '_blank', 'Reporte');
						}
					} catch(error) {
						CommonModalsSrv.error(error);
					}
				}).catch(function (error) {
					CommonModalsSrv.error("Estatus: "+error.status +" "+ error.statusText);
				});
		};

		function Uint8ToString(u8) {
			var CHUNK_SZ = 0x8000, c = [];
			for (var i = 0; i < u8.length; i += CHUNK_SZ) {
				c.push(String.fromCharCode.apply(null, u8.subarray(i, i + CHUNK_SZ)));
			}
			return c.join("");
		}

		function doJson(_array) {
			var json = [];
			angular.forEach(_array, function (value, key) {
				angular.forEach(value, function (value2) {
					if (key === 'invest') {
						json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'descripcion': value2.description ? value2.description : '' , 'instrumento': 'SOCIEDADES DE INVERSION' });
					} else if (key === 'actions') {
						json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'ACCIONES' });
					} else if (key === 'money') {
						json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'MERCADO DE DINERO' });
					} else if (key === 'reportos') {
						json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'instrumento': 'REPORTOS' });
					} else if (key === 'derivatives') {
						json.push({ 'producto': value2.issuer, 'monto': value2.amount, 'porcentajeInversion': value2.percentage * 100, 'descripcion': value2.description ? value2.description : '' , 'instrumento': 'DERIVADOS' });
					}
				});
			});
			return json;
		}

		function getDescripcion(issuer) {
			for (var pos = 0; pos < vm.issuers.length; pos++) {
				if (vm.issuers[pos].name.trim() === issuer.trim()) {
					return vm.issuers[pos].description;
				}
			}

			return '';
		}

		function doJsonData(_array, montoTotal) {
			var json = [];
			var jsonSubGroup = {};
			var jsonBase = {};

			angular.forEach(_array, function (value, key) {
				if (key === 'Fondo de Fondos') {
					angular.forEach(value, function (value2) {
						angular.forEach(value2, function (value3) {
							jsonBase = {
								name: key,
								subGroups: []
							};
							jsonSubGroup = {
								name: value3.subGroup.name,
								instruments: []
							};
							angular.forEach(value3.productLimits, function (instrument) {
								var jsonInstrument = {
									percentage: instrument.percentage,
									issuer: instrument.product.issuer.name,
									amount: montoTotal * (instrument.percentage) / 100,
									description: getDescripcion(instrument.product.issuer.name)
								};
								jsonSubGroup.instruments.push(jsonInstrument);
							});
							jsonBase.subGroups.push(jsonSubGroup);
							json.push(jsonBase);
						});
					});

				} else if (key === 'Renta Variable') {
					angular.forEach(value, function (value2) {
						angular.forEach(value2, function (value3) {
							jsonBase = {
								name: key,
								subGroups: []
							};
							jsonSubGroup = {
								name: value3.subGroup.name,
								instruments: []
							};
							angular.forEach(value3.productLimits, function (instrument) {
								var jsonInstrument = {
									percentage: instrument.percentage,
									issuer: instrument.product.issuer.name,
									amount: montoTotal * (instrument.percentage) / 100,
									description: getDescripcion(instrument.product.issuer.name)
								};
								jsonSubGroup.instruments.push(jsonInstrument);
							});
							jsonBase.subGroups.push(jsonSubGroup);
							json.push(jsonBase);
						});
					});

				} else if (key === 'Fibras') {
					angular.forEach(value, function (value2) {
						angular.forEach(value2, function (value3) {
							jsonBase = {
								name: key,
								subGroups: []
							};
							jsonSubGroup = {
								name: value3.subGroup.name,
								instruments: []
							};
							angular.forEach(value3.productLimits, function (instrument) {
								var jsonInstrument = {
									percentage: instrument.percentage,
									issuer: instrument.product.issuer.name,
									amount: montoTotal * (instrument.percentage) / 100,
									description: getDescripcion(instrument.product.issuer.name)
								};
								jsonSubGroup.instruments.push(jsonInstrument);
							});
							jsonBase.subGroups.push(jsonSubGroup);
							json.push(jsonBase);
						});
					});

				} else if (key === 'Riesgo Cambiario') {
					angular.forEach(value, function (value2) {
						angular.forEach(value2, function (value3) {
							jsonBase = {
								name: key,
								subGroups: []
							};
							jsonSubGroup = {
								name: value3.subGroup.name,
								instruments: []
							};
							angular.forEach(value3.productLimits, function (instrument) {
								var jsonInstrument = {
									percentage: instrument.percentage,
									issuer: instrument.product.issuer.name,
									amount: montoTotal * (instrument.percentage) / 100,
									description: getDescripcion(instrument.product.issuer.name)
								};
								jsonSubGroup.instruments.push(jsonInstrument);
							});
							jsonBase.subGroups.push(jsonSubGroup);
							json.push(jsonBase);
						});
					});

				} else if (key === 'Deuda') {
					angular.forEach(value, function (value2) {
						angular.forEach(value2, function (value3) {
							jsonBase = {
								name: key,
								subGroups: []
							};
							jsonSubGroup = {
								name: value3.subGroup.name,
								instruments: []
							};
							angular.forEach(value3.productLimits, function (instrument) {
								var jsonInstrument = {
									percentage: instrument.percentage,
									issuer: instrument.product.issuer.name,
									amount: montoTotal * (instrument.percentage) / 100,
									description: getDescripcion(instrument.product.issuer.name)
								};
								jsonSubGroup.instruments.push(jsonInstrument);
							});
							jsonBase.subGroups.push(jsonSubGroup);
							json.push(jsonBase);
						});
					});
				}
			});

			return json;
		}
		
		// Init application
		setup();
	}

	angular
		.module('actinver.controllers')
		.controller('proposalCtrl', proposalCtrl);

})();
( function(){
	'use strict';

	propTracingCtrl.$inject = ['$scope', '$filter', 'proposalsProposalSrv', 'proposalsPropTracingSrv', 'CommonModalsSrv'];
	function propTracingCtrl( $scope, $filter, proposalsProposalSrv, proposalsPropTracingSrv, CommonModalsSrv ){
		var vm = this;

		function setup(){
			vm.tracing = {
				form: {}
			};
			
			vm.brief = {
	        	form: {
					portfolio: []
				}
			};

			vm.products = [];
			vm.adviser = {};

			proposalsProposalSrv.getIssuersInfo()
			.then( function( response ){
				vm.issuers = response.data;
			} );
		}

		// Reset form
		vm.resetForm = function(){
			setup();
		};

		// Validate form
		vm.validateForm = function( form ){
			var msg = false;
			
			if( typeof vm.tracing.form.tir === 'undefined' && vm.tracing.form.scontract.origen==='CB' ){
				msg = 'Los datos del periodo para calculo de TIR-1 son incorrectos o incompletos, favor de revisarlos';
			}else if( vm.tracing.form.tir && vm.tracing.form.other_calculus && typeof vm.tracing.form.tir2 === 'undefined' && vm.tracing.form.scontract.origen==='CB' ){
				msg = 'Los datos del periodo para calculo de TIR-2 son incorrectos o incompletos, favor de revisarlos';
			}else if(vm.tracing.form.scontract.origen==='CB' && vm.tracing.form.tir && (vm.tracing.form.tir.startDate._d.getDate() === vm.tracing.form.tir.endDate._d.getDate()) && (vm.tracing.form.tir.startDate._d.getMonth() === vm.tracing.form.tir.endDate._d.getMonth()) && (vm.tracing.form.tir.startDate._d.getFullYear() === vm.tracing.form.tir.endDate._d.getFullYear()) ){
                msg = 'Los datos del periodo para calculo de TIR-1 no pueden ser iguales, favor de revisarlos';
            }else if( !form.ext.$valid ){
				 msg = 'El número de extension es obligatorio, favor de revisarlo.';
			} else {
				angular.forEach( vm.brief.form.portfolio, function( item ){
					var invest_left = item.value - item.totals;

					if( item.type === 'manual' && !msg ){
						if( Number(invest_left.toFixed(2)) < 0 ){
							msg = 'El valor del portafolio es menor a la inversión.';
						}else if( Number(invest_left.toFixed(2)) !== 0 ) {
							msg = 'Te falta invertir (<strong>' + $filter( 'currency' )( Number(invest_left.toFixed(2)) ) + '</strong>) para poder continuar.';
						}
					}
				} );
			}

			if( msg ){
				CommonModalsSrv.error( msg );
			} else {
				vm.submitForm();
			}
		};

		// Submit form
		vm.submitForm = function () {
			var form = {
				tracing: vm.tracing,
				brief: vm.brief,
				products: vm.products,
				adviser: vm.adviser,
				issuers: vm.issuers
			};
			
			proposalsPropTracingSrv.doProposalTracing(form)
				.then(function (response) {
					if (/access/i.test(navigator.userAgent)) {
						var b64encoded = btoa(Uint8ToString(new Uint8Array(response.data)));
						var popupWin = window.open('Propuesta', '_blank', 'width=1000px,height=905px,resizable=0');
						popupWin.document.open();
						popupWin.document.write('<html><head></head><body><iframe width="100%" height="100%" src="data:application/pdf;base64,' + b64encoded + '"></iframe></body></html>');
						popupWin.document.close();
					} else {
						var file = new Blob([response.data], { type: 'application/pdf' });
						var fileURL = URL.createObjectURL(file);
						window.open(fileURL, '_blank', 'Reporte');
					}
				}).catch(function (error) {
					console.error("Error:", error);
				});
		};

		function Uint8ToString(u8) {
			var CHUNK_SZ = 0x8000, c = [];
			for (var i = 0; i < u8.length; i += CHUNK_SZ) {
				c.push(String.fromCharCode.apply(null, u8.subarray(i, i + CHUNK_SZ)));
			}
			return c.join("");
		}

		// Init application
		setup();

	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'propTracingCtrl', propTracingCtrl );

})();
( function(){
    "use strict";

    tracingClientCtrl.$inject = ['$q', 'userConfig', 'proposalSrv', 'CommonModalsSrv'];
    function tracingClientCtrl( $q, userConfig, proposalSrv, CommonModalsSrv ){
        var vm = this;
        vm.selectedInfo = { };
        vm.optionTypeContract=[];
        vm.optionSelected={id:"1",text:"Casa"};

        // Set current adviser
        vm.sadviser = userConfig.user;

        function setup () {
            setupVars();
        }
        function resetListContracts(){
            vm.listContracts=[];
            vm.input = '';
        }


        function setupVars () {
            vm.type =  'contract';
            vm.lengthInput = 8;
            vm.placeholderInput = 'Número de contrato';
            vm.input = '';
            vm.listContracts = [];
            vm.listSummaryContracts = [];
            vm.showSpinner = false;
            vm.optionTypeContract.push({id:"1",text:"Casa"});
            vm.optionTypeContract.push({id:"2",text:"Banco"});
        }

        function doStructureForPosition(_response) {
            var registerFormat = {};
            _response.map(function (_element) {
                if (registerFormat[_element.issuer]) {
                    registerFormat[_element.issuer].rows.push(_element);
                    registerFormat[_element.issuer].total.position += _element.position;
                    registerFormat[_element.issuer].total.valuation += _element.valuation;
                } else {
                    registerFormat[_element.issuer] = {
                        rows: [_element],
                        total: {
                            position: _element.position,
                            valuation: _element.valuation
                        }
                    };
                }
            });
            return registerFormat;
        }

        vm.setType = function ( _type ) {
            vm.type = _type;
            vm.placeholderInput = _type === 'contract' ? 'Número de contrato' : 'Cliente único';
            vm.input = '';
            vm.lengthInput =  8;
            resetListContracts();
        };

        vm.getContract = function() {
            vm.listContracts =  [];
            vm.listSummaryContracts = [];
            vm.positionContract = false;
            vm.showSpinner = true;

            var model = {};
            model.type = vm.type;            
            model.optionTypeContract=vm.optionSelected;
            model.employeeID=vm.sadviser.employeeID;
            model.field = vm.input; 

   
            //***************************** Manda la peticion a los servicios[1] ********************************/
            proposalSrv.getContractIdClient( model ).then(function ( _res ) {
                var client =null;
                var message='';
                var responseClient=_res;
                var _error='';
                   
                if(responseClient.outCommonHeader.result.result === 2){
                     _error=responseClient.outCommonHeader.result.messages;
                    angular.forEach(_error, function (_res) {
                        if (_res.responseMessage) {
                            message += _res.responseMessage + '<br>';
                        }
                    });
                    CommonModalsSrv.error(message);
                    return;
                }

                client=responseClient.outClientOrContractClientInfoQuery.client;
                if(client.length === 0){
                         _error=responseClient.outCommonHeader.result.messages;
                        angular.forEach(_error, function (_res) {
                            if (_res.responseMessage) {
                                message += _res.responseMessage + '<br>';
                            }
                        });
                        CommonModalsSrv.error(message);
                        return;
                }else{
                    var clientNumber= Number(client[0].clientNumber);
                    vm.cliente=client[0];
                    vm.clientName = client[0].name + ' ' + client[0].lastName + ' ' + client[0].secondLastName;
                    vm.clientId = client[0].clientNumber;

                    //***************************** Manda la peticion a los servicios[3] ********************************/
                    proposalSrv.getContractSummary(vm.sadviser.employeeID, clientNumber).then(function (_response) {
                        vm.detailClient = {
                            brokerHouseValue: _response.brokerHouseValue,
                            bankValue: _response.bankValue,
                            totalValue: _response.totalValue
                        };
                        vm.listContracts = _response.contractsList.outContractsBalancesByPortfolioQuery.contractInformation;
                        if(_response.contractsList.outContractsBalancesByPortfolioQuery.contractInformation.length === 0){
                            CommonModalsSrv.error("No se encontraron contratos permitidos.");
                        }
                    }).catch(function () {
                        vm.showSpinner = false;
                        CommonModalsSrv.error("Lo sentimos ocurrio un error.");
                    }).finally(
                    );
                }
            }).catch(function(){
                CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
            }).finally(function(){
                vm.showSpinner = false;
            });
        };


        vm.viewSummaryContract = function ( record ) {
            var _contractNumber = record.contractNumber;
            vm.selectedInfo = {
                tipo : record.companyName,
                isGeneral: false
            };

            vm.showSpinner = true;
            vm.listSummaryContracts = [];
            vm.positionContract = false;
            vm.contractNumbers=[_contractNumber];
            var typeContract=null;

            //for para saber si es banco o casa
            for(var index in vm.listContracts){
                if(vm.listContracts[index].contractNumber ===_contractNumber ){
                    var temp=vm.listContracts[index].companyName;
                    if("Casa"===temp){
                        typeContract='CB';
                    }else if("Banco"===temp){
                        typeContract='B';
                    }
                    break;
                }                    
            }
   
            proposalSrv.getDetailedSummaryContract( _contractNumber,typeContract )
                .then(function ( _element ) {
                    
                    var portfolioValue = 0;
                    var totalFounds=0;
                    var totalCasa=0;
                    var totalMC=0;
                    var contract=[];
                    var data={};
                    var totalCash=0;

                    var objeto={};
                    angular.forEach(_element.result, function(value, key) {                       
                        objeto[key]=value;

                        if("moneyMarket" === key){
                            totalCasa+=parseFloat(value);
                        }else if("capitalMarket" === key){
                            totalMC+=parseFloat(value);
                        }else if("debtFund"=== key || "rentFund"=== key || "coverFund"=== key){   
                            totalFounds+=parseFloat(value);
                        }                  

                        if("cashPesos" === key || "cashDollars" === key || "cashEuros" === key ){
                            totalCash+=parseFloat(value);
                        }

                        if("portfolioValue" !== key){
                            portfolioValue+=parseFloat(value);
                        }
                    });

                        data=objeto;
                        contract.data=data;
                        contract.contractNumber =_element.contractNumber;

                    vm.listSummaryContracts = {
                        listContracts: [contract],
                        portfolioValue: portfolioValue,
                        totalCasa:totalCasa,
                        totalFounds:totalFounds,
                        totalMC:totalMC,
                        totalCash:totalCash
                    };

                    vm.positionContract = false;
                }).catch(function(){
                    vm.showSpinner = false;
                    CommonModalsSrv.error( "Lo sentimos ocurrio un error." );
                }).finally(function(){
                    vm.showSpinner = false;
                });
            };

        vm.detailGeneral = function () {

            vm.selectedInfo = {
                tipo : null,
                isGeneral: true
            };

            vm.showSpinner = true;
            vm.listSummaryContracts.listContracts = [];
            vm.listSummaryContracts.portfolioValue = 0;
            vm.listSummaryContracts.totalCasa = 0;
            vm.listSummaryContracts.totalFounds = 0;
            vm.listSummaryContracts.totalMC = 0;
            vm.listSummaryContracts.totalCash = 0;
            vm.positionContract = false;
           
            var contractNumbers = vm.listContracts.map(function (contract) {
                return contract.contractNumber;
            });

            vm.contractNumbers=contractNumbers;
            //for para iterar cara contrato 
            for (var index = 0; index < contractNumbers.length; index++) {
                var contractonum = contractNumbers[index];
                var typeContract = null;
                //for para saber si es banco o casa
                for (var indexContract in vm.listContracts) {
                    if (vm.listContracts[indexContract].contractNumber === contractonum) {
                        var temp = vm.listContracts[indexContract].companyName;
                        if ("Casa" === temp) {
                            typeContract = 'CB';
                        } else if ("Banco" === temp) {
                            typeContract = 'B';
                        }
                        break;
                    }
                }
                llamada(contractonum, typeContract);
            }

                function llamada(contractonum, typeContract){
                    proposalSrv.getDetailedSummaryContract(contractonum, typeContract).then(function (_element) {

                        var portfolioValue = 0;
                        var totalFounds=0;
                        var totalCasa=0;
                        var totalMC=0;
                        var totalCash=0;

                        var contract = {};
                        var data = {};
                        var objeto = {};
                        angular.forEach(_element.result, function (value, key) {
                            objeto[key] = value;

                            if("moneyMarket" === key){
                                totalCasa+=parseFloat(value);
                            }else if("capitalMarket" === key){
                                totalMC+=parseFloat(value);
                            }else if("debtFund"=== key || "rentFund"=== key || "coverFund"=== key){   
                                totalFounds+=parseFloat(value);
                            }   
                            
                            if("cashPesos" === key || "cashDollars" === key || "cashEuros" === key ){
                                totalCash+=parseFloat(value);
                            }

                            if (key !== "portfolioValue") {
                                portfolioValue += parseFloat(value);
                            }

                        });

                        data = objeto;
                        contract.data = data;
                        contract.contractNumber = _element.contractNumber;

                        vm.listSummaryContracts.listContracts.push(contract);
                        vm.listSummaryContracts.portfolioValue = portfolioValue + vm.listSummaryContracts.portfolioValue;
                        vm.listSummaryContracts.totalCash = totalCash + vm.listSummaryContracts.totalCash;
                        vm.listSummaryContracts.totalCasa = totalCasa + vm.listSummaryContracts.totalCasa;
                        vm.listSummaryContracts.totalFounds = totalFounds + vm.listSummaryContracts.totalFounds;
                        vm.listSummaryContracts.totalMC = totalMC + vm.listSummaryContracts.totalMC;

                        vm.positionContract = false;
                    }).catch(function () {
                        vm.showSpinner = false;
                        CommonModalsSrv.error("Lo sentimos ocurrio un error.");
                    }).finally(function () {
                        vm.showSpinner = false;
                    });
                }


        };


        vm.changePositionContract = function () {
            if (!vm.positionContract) {
                return;
            }
            vm.showSpinner = true;
            vm.listPositionContracts = [];

            // si quiere ver las posiciones de todos los contratos
            if (vm.selectedInfo.isGeneral) { 
                var typeBank = [], typeHouse = [];
                var lista = vm.listSummaryContracts.listContracts;                
                for (var i = 0; i < lista.length; i++) {
                    for (var j = 0; j < vm.listContracts.length; j++) {
                        if (lista[i].contractNumber === vm.listContracts[j].contractNumber) {
                            if (vm.listContracts[j].companyName === "Casa") {
                                typeHouse.push(lista[i].contractNumber);
                            } else { //Banco
                                typeBank.push(lista[i].contractNumber);
                            }
                            j = vm.listContracts.length;
                        }
                    }
                }

                proposalSrv.getPositionTypeBankAndHouse(typeHouse,typeBank ).then(function(response){
                    vm.listPositionContracts = doStructureForPosition(response);
                    vm.showSpinner = false;
                })
                .catch(function(){
                    vm.showSpinner = false;
                    vm.listPositionContracts = [];
                });

            } else { // si quiere ver la posicion de un contrato
                if (vm.selectedInfo.tipo === 'Casa') {
                    proposalSrv.getPosition(vm.contractNumbers).then(function (_response) {
                        if (_response) {                           
                            vm.listPositionContracts = doStructureForPosition(_response);
                        }
                        vm.showSpinner = false;
                    }).catch(function () {
                        vm.showSpinner = false;
                        CommonModalsSrv.error("Lo sentimos ocurrio un error.");
                    }
                    );
                } else {
                    proposalSrv.getPositionTypeBank(vm.contractNumbers).then(function (_response) {
                        if (_response) {                           
                            vm.listPositionContracts = doStructureForPosition(_response);
                        }
                        vm.showSpinner = false;
                    }).catch(function (error) {
                        vm.showSpinner = false;
                        vm.listPositionContracts = error;
                    });
                }
            }
        };


        vm.generaReporte = function() {            
            var clientNumber= Number(vm.cliente.clientNumber);            
            var contratos=[];
            var productos=[];
            var lista = vm.listSummaryContracts.listContracts;
            
            for (var i = 0; i < lista.length; i++) {
                for (var j = 0; j < vm.listContracts.length; j++) {
                    if (lista[i].contractNumber === vm.listContracts[j].contractNumber) {
                        contratos.push({
                            contract: vm.listContracts[j].contractNumber,
                            source: vm.listContracts[j].companyName === "Casa" ? 'CB':'B'
                        });                       
                        j = vm.listContracts.length;
                    }
                }
            }

            if(vm.listPositionContracts) {
                for( var indexPosContract in vm.listPositionContracts) {
                    var t = vm.listPositionContracts[indexPosContract].rows[0];
                    productos.push({"contractNumber":t.contractNumber,"issuer":t.issuer,"position":t.position,"price":t.lastPrice,"valuation":t.valuation});
                }
            } else {
                productos = 0;
            }

            var model = {
                language: 'SPA',                        
                contracts: window.btoa(JSON.stringify(contratos)),
                clientId: clientNumber,
                totalCash: vm.listSummaryContracts.totalCash,                       
                totalFunds: vm.listSummaryContracts.totalFounds,                        
                totalMoney: vm.listSummaryContracts.totalCasa,                        
                totalCapitals: vm.listSummaryContracts.totalMC,   
                //products: window.btoa(JSON.stringify(productos)),    
                //name:  vm.clientName,                        
                name: userConfig.user.name,
                mail: userConfig.user.mail,
                createEnvironment: true,
                createForecast: true
            };

            //si esta activado posicion
            if (vm.positionContract) {
                model.products= window.btoa(JSON.stringify(productos)),    
                proposalSrv.getDetailedCustomerTrackingReport(model).then(function (response) {
                    if (/access/i.test(navigator.userAgent)) {
						var b64encoded = btoa(Uint8ToString(new Uint8Array(response.data)));
						var popupWin = window.open('Propuesta', '_blank', 'width=1000px,height=905px,resizable=0');
						popupWin.document.open();
						popupWin.document.write('<html><head></head><body><iframe width="100%" height="100%" src="data:application/pdf;base64,' + b64encoded + '"></iframe></body></html>');
						popupWin.document.close();
					} else {
                        var file = new Blob([response.data], { type: 'application/pdf' });
                        var fileURL = URL.createObjectURL(file);
                        window.open(fileURL, '_blank', 'Reporte');
                    }
                }).catch(function (err) {
                    CommonModalsSrv.error("Lo sentimos ocurrio un error. " + err);
                });

            } else {
                proposalSrv.getCustomerTrackingReport(model).then(function (response) {
                    if (/access/i.test(navigator.userAgent)) {
                        var b64encoded = btoa(Uint8ToString(new Uint8Array(response.data)));
						var popupWin = window.open('Propuesta', '_blank', 'width=1000px,height=905px,resizable=0');
						popupWin.document.open();
						popupWin.document.write('<html><head></head><body><iframe width="100%" height="100%" src="data:application/pdf;base64,' + b64encoded + '"></iframe></body></html>');
						popupWin.document.close();
                    } else {
                        var file = new Blob([response.data], { type: 'application/pdf' });
                        var fileURL = URL.createObjectURL(file);
                        window.open(fileURL, '_blank', 'Reporte');
                    }
                }).catch(function (err) {
                    CommonModalsSrv.error("Lo sentimos ocurrio un error. " + err);
                });
            }
        };

        function Uint8ToString(u8) {
			var CHUNK_SZ = 0x8000, c = [];
			for (var i = 0; i < u8.length; i += CHUNK_SZ) {
				c.push(String.fromCharCode.apply(null, u8.subarray(i, i + CHUNK_SZ)));
			}
			return c.join("");
		}

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'tracingClientCtrl', tracingClientCtrl );

})();

( function(){
	'use strict';

	tracingCtrl.$inject = ['proposalsTracingSrv', 'CommonModalsSrv'];
	function tracingCtrl( proposalsTracingSrv, CommonModalsSrv ){
		var vm = this;

		// Reset form
		vm.resetForm = function(){
			vm.form = {};
			vm.scontract = false;
		};

		// Validate form
		vm.validateForm = function( form ){
			var msg = false;
			
			if( typeof vm.form.tir === 'undefined' && vm.form.scontract.origen==='CB' ){
				msg = 'Los datos del periodo para calculo de TIR-1 son incorrectos o incompletos, favor de revisarlos';
			}else if( vm.form.tir && vm.form.other_calculus && typeof vm.form.tir2 === 'undefined' && vm.form.scontract.origen==='CB' ){
				msg = 'Los datos del periodo para calculo de TIR-2 son incorrectos o incompletos, favor de revisarlos';
			}else if(vm.form.scontract.origen==='CB' && vm.form.tir && (vm.form.tir.startDate._d.getDate() === vm.form.tir.endDate._d.getDate()) && (vm.form.tir.startDate._d.getMonth() === vm.form.tir.endDate._d.getMonth()) && (vm.form.tir.startDate._d.getFullYear() === vm.form.tir.endDate._d.getFullYear()) ){
                msg = 'Los datos del periodo para calculo de TIR-1 no pueden ser iguales, favor de revisarlos';
            }else if (vm.form.scontract.origen==='CB' && vm.form.other_calculus && vm.form.tir2 && (vm.form.tir2.startDate._d.getDate() === vm.form.tir2.endDate._d.getDate()) && (vm.form.tir2.startDate._d.getMonth() === vm.form.tir2.endDate._d.getMonth()) && (vm.form.tir2.startDate._d.getFullYear() === vm.form.tir2.endDate._d.getFullYear()) ){
                msg = 'Los datos del periodo para calculo de TIR-2 no pueden ser iguales, favor de revisarlos';
            }else if( !form.ext.$valid ){
				msg = 'El número de extension es obligatorio, favor de revisarlo.';
			}
			
			if( msg ){
				CommonModalsSrv.error( msg );
			} else {
				vm.submitForm();
			}
		};

		// Submit form
		vm.submitForm = function(){
            proposalsTracingSrv.doTracing( vm.form ).then( function(response){
				try {
					if (/access/i.test(navigator.userAgent)) {
						var b64encoded = btoa(Uint8ToString(new Uint8Array(response.data)));
						var popupWin = window.open('Propuesta', '_blank', 'width=1000px,height=905px,resizable=0');
						popupWin.document.open();
						popupWin.document.write('<html><head></head><body><iframe width="100%" height="100%" src="data:application/pdf;base64,' + b64encoded + '"></iframe></body></html>');
						popupWin.document.close();
					} else {
						var file = new Blob([response.data], {type: 'application/pdf'});
						var fileURL = URL.createObjectURL(file);
						window.open(fileURL,'_blank', 'Reporte');
					}
				} catch(error) {
					CommonModalsSrv.error(error);
				}
            }, function() {
                CommonModalsSrv.error( 'Error al generar la propuesta<br/>Intente más tarde.' );
            });
		};

		function Uint8ToString(u8) {
			var CHUNK_SZ = 0x8000, c = [];
			for (var i = 0; i < u8.length; i += CHUNK_SZ) {
				c.push(String.fromCharCode.apply(null, u8.subarray(i, i + CHUNK_SZ)));
			}
			return c.join("");
		}

	}

	angular
		.module( 'actinver.controllers' )
		.controller( 'tracingCtrl', tracingCtrl );

})();
( function(){
    "use strict";

    prospectsDetailCtrl.$inject = ['$scope', 'prospectSrv', 'prospectModalsSrv', '$stateParams', 'userConfig', 'CommonModalsSrv'];
    function prospectsDetailCtrl( $scope, prospectSrv, prospectModalsSrv, $stateParams, userConfig, CommonModalsSrv ){
        var vm = this;
        vm.isOpenProgramadas = true;
        vm.isOpenVencidas = true;
       // var idProspect = $stateParams.model;
        var idOpportunity = $stateParams.id;

        function setup(){
            getStageOpportunity();
        }

        $scope.$on( 'updateDetailProspect', function(){
            getDetailProspect();
        });

        vm.addProspect = function(){
            prospectModalsSrv.addActivity('NUEVA ACTIVIDAD',vm.prospectDetail).result.then(function(){
                CommonModalsSrv.done( 'La actividad se guardo de manera exitosa.' );
                    getDetailProspect();
                    
            }).catch(function(res){
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                    throw res;
                }
            });
        };

        vm.modify = function(){
            prospectModalsSrv.addOpportunity( 'DATOS PERSONALES', idOpportunity).result.then(function () {
                //getDetailProspect();
                getStageOpportunity();
            }, function () {
            });
        };

        vm.updateStage = function( _id ){
            var modelUpdate ={
                language: 'SPA',
                idOpportunity: idOpportunity,
                idEmployee : userConfig.user.employeeID,
                idNextStage: _id,
            };
            

            if(_id === 8 && vm.detailOpportunity.contacted == false){
                CommonModalsSrv.error('Para cambiar de etapa, el cliente debe ser contactado');

            }else if((vm.detailOpportunity.asrStage.idStage +1 ) != _id){
                CommonModalsSrv.error('Te falta seleccionar la Etapa PROSPECTO');
            }else{
                CommonModalsSrv.warning('¿Estás seguro de cambiar de etapa al prospecto?')
                   .result.then(function () {
                    prospectSrv.nextStage(modelUpdate).then(function () {
                        CommonModalsSrv.done('El cambio de etapa se realizó de manera correcta.');
                        getStageOpportunity();
                    });
                }).catch(function(res){
                    if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click' || typeof res === 'undefined')) {
                        throw res;
                    }
                });
            }
        };

        function getStageOpportunity(){
            prospectSrv.getOpportunityById(idOpportunity).then(function( _opportunity ) {
                vm.detailOpportunity = _opportunity;
            });
        }

        function getDetailProspect() {
            prospectSrv.getDetailProspect(idProspect,vm.detailProspect.idStage)
                .then(function (_res) {
                    if(angular.isArray(_res.scheduledActivities)){
                        _res.scheduledActivities.forEach(function(reg){
                            reg.closeDate = _res.closeDate;
                            reg.prospectDetail = { 
                                nombreProspecto : _res.name,
                                mailProspect: _res.mail  
                            };
                        });
                    }
                    vm.prospectDetail = _res;
                });
        }


        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'prospectsDetailCtrl', prospectsDetailCtrl );

})();

( function(){
    "use strict";

    prospectsProfileCtrl.$inject = ['binnacleInfo', 'prospectModalsSrv', 'NgTableParams', 'prospectSrv', '$stateParams', 'userConfig', 'CommonModalsSrv'];
    function prospectsProfileCtrl( binnacleInfo, prospectModalsSrv, NgTableParams, prospectSrv, $stateParams, userConfig, CommonModalsSrv ){
        var vm = this;
        var userID = userConfig.user.employeeID;


        function setup(){
            setUser();
            //getGraphics();
          getStages();
        }

        vm.addOpportunity = function(){
            prospectModalsSrv.addOpportunity().result.then(function(){
                CommonModalsSrv.done( 'La oportunidad se ha guardado de manera exitosa.' );
                getStages();
            });
        };

        vm.filterStage = function(){
            var term = vm.fieldSearch;
            vm.configTable.filter({ $: term});
        };

        vm.changeStage = function( _stage ){
            if( angular.isObject( _stage ) ){
                vm.typeStage= 'stage' + _stage.idStage;
            }
            else{
                vm.typeStage= _stage;
            }
            setTableStage();
        };

        vm.changeDate = function( _calendar ){
            vm.selectedReport = _calendar;
        };

        vm.getReport = function() {
            vm.loadingReports = true;
            prospectSrv.getProsReports( vm.reportDate, vm.reportType, userID ).then(function(_res){
                vm.prospectsReport = _res;
                vm.selectedReport = _res.calendar[0];
                vm.loadingReports = false;
            });
        };

        vm.downloadPDF = function(){
            prospectSrv.downloadPDF();
        };

        function setUser() {
            if( $stateParams.id ){
                userID= $stateParams.id ;
                vm.sectionForAdmin = true;
            }

            vm.dateOptions = {
                minMode: 'month'
            };
            vm.reportType = 'mes';
        }

        function setStagesCategories( _table ){
            var table = _table;
            var name;
            vm.stagesCat = [];
            R.forEach(function( _stage ){
                name = 'stage' + _stage.idStage;
                vm.stagesCat[name] = R.filter(function(  _prospect  ){
                    return _prospect.idStage === _stage.idStage;
                }, table );
            },vm.stages);
            vm.typeStage = 'stage7';
            setTableStage();
        }

        function setTableStage() {
            var term = angular.copy(vm.typeStage);
            var defaults = {
                    page: 1,
                    count: 10,
                };
                vm.configTable = new NgTableParams( defaults, {
                    paginationMaxBlocks: 4,
                    paginationMinBlocks: 2,
                    dataset: vm.stagesCat[term],
                });
        }


        function getListByEmployee(){
            vm.loadingStage = true;
            prospectSrv.getListByEmployee( userID ).then(function( _dataTable ){
                setStagesCategories( _dataTable );
                vm.stagesTable = _dataTable;
                vm.loadingStage = false;
            }).catch(function () {
                vm.loadingStage = false;
            });
        }

        function getStages(){
            prospectSrv.getStages().then(function( _stages ){
                vm.stages = _stages;
                getListByEmployee();
            });
        }

        /* //Aun no hay servicios para esta funcion
        function getGraphics(){
            console.log('my-profile-ctrl.js');
            prospectSrv.getPrincipalgraphics( 1, 0, userID).then(function( _res ){
                vm.adviserDetails = {
                    "ammount": _res.ammount,
                    "name": _res.name
                };

                vm.details1 = prospectSrv.generateDataChart(_res.money);
                vm.details2 = prospectSrv.generateDataChart(_res.funds);
                vm.details3 = prospectSrv.generateDataChart(_res.credit , true);
                vm.details4 = prospectSrv.generateDataChart(_res.seguros, true);

                vm.totalProspects = vm.details3.chart.percentage + vm.details4.chart.percentage;
                vm.remainingProspects = vm.details3.remaining + vm.details4.remaining;
                vm.customersContacted = _res.customersContacted;
            });
        }*/

        vm.contactedClient = function(element){
            //CommonModalsSrv.warning('¿Estás seguro de eliminar la emisora?')
            CommonModalsSrv.warning('¿Confirma que se ha contactado a ' + element.nameOpportunity)
            .result.then(function () {
                prospectSrv.updateContacted(element.idOpportunity).then(function( _result ){
                    getListByEmployee();
                });

                
            }).catch(function (res) {
                if (!(res === 'cancel' || res === 'escape key press' || res === 'backdrop click')) {
                    throw res;
                }
            });

            
        };

        setup();

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'prospectsProfileCtrl', prospectsProfileCtrl );

})();

( function(){
    "use strict";

    reportOppCtrl.$inject = ['binnacleInfo', 'prospectModalsSrv', '$filter', '$scope', 'NgTableParams', 'exportTableToExcel', 'prospectSrv', '$state', 'userConfig', '$uibModal'];
    function reportOppCtrl( binnacleInfo, prospectModalsSrv, $filter,  $scope, NgTableParams, exportTableToExcel, prospectSrv, $state, userConfig ,$uibModal){
        var vm = this; 
        var userID = userConfig.user.employeeID;
        vm.name = userConfig.user.name;
        vm.filterTable = {};
         
        vm.activeFilters = false;
       
        
        vm.datepicker_opts_Fecha_Alta = {
            parentEl: "idDateEnd",
            singleDatePicker: true,
            minDate: moment(),
            locale: {
                format: "DD/MM/YYYY"
            }
        };

        
        function setup(){
           // vm.submitSearch();
           setupVars();
            getReport();
        }

        

         function getReport(){
            prospectSrv.getReportOpportunity( userID, vm.date ).then(function( result ){
                vm.listReport = result.result;
            }).catch(function () {
            });
        }

        

        vm.getDetailReport = function( obj, type ){
            var title = type == 1 ? 'REPORTE ESPECIAL DEL USUARIO: ' + obj.name : 'REPORTE ESPECIAL DEL CF: ' + obj.financialCenter 
            return $uibModal.open({
                templateUrl: '/scripts/modals/views/prospects/report-detail.html',
                controller: 'reportDetailCtrl',
                controllerAs: 'reportDetail',
                resolve: {
                    adviserInfo: function(){
                        return {
                            adviserID: obj.idEmployee,
                            idCF: obj.idFC,
                            name: title,
                            type: type
                        };
                    },
                    dateInfo: function(){
                        return {
                            date : vm.date
                        };
                    }
                }
            }).result.finally( angular.noop ).then( angular.noop, angular.noop );
        };

        vm.report = function () {
			var exportHref = exportTableToExcel.tableToExcel('#idTablaResultadosReport', 'Reporte General');
			var link = document.createElement('a');
			link.download = 'Reporte General.xls';
			link.href = exportHref;
			link.click();
        };
        
        
        function setupVars () {
            vm.date = new Date();
            vm.openedCalendar = false;
            vm.dateOptions = {
                minMode: 'month'
            };
        }

        vm.getInfoTabs = function(option){
            getReport();
        }

        vm.activfilters = function(){
            if(vm.activeFilters){
                vm.activeFilters = false; 
            }else{
                vm.activeFilters = true;
            }
            $scope.search = undefined;
        } 

        setup();

    
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'reportOppCtrl', reportOppCtrl );

})();

( function(){
    "use strict";

    prospectsTeamCtrl.$inject = ['binnacleInfo', 'prospectModalsSrv', 'NgTableParams', 'prospectSrv', '$state', 'userConfig'];
    function prospectsTeamCtrl( binnacleInfo, prospectModalsSrv, NgTableParams, prospectSrv, $state, userConfig ){
        var vm = this;
        var userID = userConfig.user.employeeID;

        vm.typeUserF = function(){
            var type1 = vm.user.type ? 1: 0;  //advisers
            var type2 = vm.user.type2 ? 1: 0; //admin
            vm.loadingTeamGraph = true;
            prospectSrv.getPrincipalgraphics(  type1, type2, userID   ).then(function( _res ){
                vm.details1 =prospectSrv.generateDataChart(_res.money);
                vm.details2 =prospectSrv.generateDataChart(_res.funds);
                vm.details3 =prospectSrv.generateDataChart(_res.credit , true);
                vm.details4 =prospectSrv.generateDataChart(_res.seguros, true);

                vm.noResults = _res.money || _res.fuds || _res.credit || _res.seguros;

                vm.totalProspects = vm.details3.chart.percentage + vm.details4.chart.percentage;
                vm.remainingProspects = vm.details3.remaining + vm.details4.remaining;
                vm.customersContacted = _res.customersContacted;
                vm.loadingTeamGraph = false;
                vm.viewDetail = false;
            });
        };

        vm.detailStage = function( _item ) {
            vm.spinnerDetail = true;
            prospectSrv.getTableProspects(  _item ).then(function( _dataTable ){
                var initialParams = {
                    count: 5 // initial page size
                };
                var initialSettings = {
                    dataset: _dataTable,
                    paginationMaxBlocks: 4,
                    paginationMinBlocks: 2,
                };
                vm.configTable = new NgTableParams( initialParams, initialSettings);
                vm.spinnerDetail = false;
                vm.viewDetail = true;
            });
        };

        vm.setUser = function( _user ){
            vm.adviserProspect  = _user;
            $state.go('prospects.team.idTeam', {id:40});
        };

        vm.applySearch = function() {
            var term = vm.fieldSearch;
            vm.configTable.filter({ $: term });
        };

        vm.addProspect = function(){
            prospectModalsSrv.add();
        };

        vm.downloadPDF = function(){
            prospectSrv.downloadPDF();
        };

    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'prospectsTeamCtrl', prospectsTeamCtrl );

})();

( function(){
    "use strict";

    prospectsReactivateCtrl.$inject = ['reactivateSrv', '$state', '$stateParams', '$scope', 'CommonModalsSrv', 'prospectSrv'];
    function prospectsReactivateCtrl( reactivateSrv, $state, $stateParams, $scope, CommonModalsSrv, prospectSrv ){
        var vm = this;


        if( !$stateParams.model ){
            $state.go( 'prospects.myProfile' );
            return '';
        }

        function setup(){
            setDetails();
            getStages();
        }

        function setDetails(){
            vm.profile = $stateParams.model;
        }

        function getStages(){
            prospectSrv.getStages().then(function( _stages ){
                vm.stages = _stages.map(function( _val ){
                    _val.text = _val.description;
                    return _val;
                });
            });
        }
        // function getDetail(){
        //     reactivateSrv.getProfile().then( function( _profile ){
        //         vm.profile = _profile;
        //     });
        // }


        vm.reactivate = function(){
            var activity = vm.varsActivity ? vm.varsActivity.activity : null;
            reactivateSrv.reactivate( vm.profile,  activity ).then( function(){

                CommonModalsSrv.done( 'Se a reactivado correctamente el perfil').result
                .then( function(){
                    $state.go('prospects.myProfile');
                });
            });
        };

        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'prospectsReactivateCtrl', prospectsReactivateCtrl );

})();

(function() {
    "use strict";

    reactivateSrv.$inject = ['URLS', '$q', '$http'];
    function reactivateSrv( URLS, $q, $http ) {
        /**
         *  prospect service
         */
        function Reactivate(){}

        Reactivate.prototype.getProfile = function ( _model ) {

            return $q(function( resolve ){
                $http({
                    method: 'POST',
                    url: URLS.genericPost,
                    data : _model
                }).then(function(response) {
                    if( response.data.status ){
                        resolve( response.data.result );
                    }
                });
            });
        };


        Reactivate.prototype.reactivate = function ( _prospect, _activity ) {

            return $q(function( resolve ){
                $http({
                    method: 'POST',
                    url: URLS.genericPost,
                    data : {
                        prospect :_prospect,
                        activity: _activity
                    }
                }).then(function(response) {
                    if( response.data.status ){
                        resolve( response.data.result );
                    }
                });
            });
        };


        return new Reactivate();
    }

    angular.module('actinver.services')
        .service('reactivateSrv', reactivateSrv);
})();

( function(){
    "use strict";

    creditCtrl.$inject = ['creditSrv', 'prospectSrv'];
    function creditCtrl( creditSrv, prospectSrv ){
        var vm = this;

        function setup(){
            vm.payment = 0;
            vm.quote ={
                optionsSelectedDropdowm : null,
                type: 'fisica',
            };

            vm.optionsDropdowm=[
                {
                    id: 1,
                    text: 'Crédito Valor',
                },
                {
                    id: 2,
                    text: 'Crédito Prendario Tasa Variable',
                },
            ];
        }

        vm.changeOptionSelectedDropdowm =  function ( _option ) {
            vm.quote = {
                type: 'fisica',
            };
            vm.quote.optionsSelectedDropdowm = _option;
            vm.payment = 0;
        };

        vm.getPayment = function(){
            creditSrv.getSimPayment( vm.quote ).then(function( _res){
                vm.payment = _res.payment;
            });
        };

        vm.quotation = function(){
            creditSrv.quotation( vm.quote ).then(function( _res ){
                vm.quotationDetail =  _res;
                vm.showNewQuotation = true;
            });
        };

        vm.back = function(){
            // setup();
            vm.showNewQuotation = false;
        };

        vm.print = function(){
            prospectSrv.downloadPDF();
        };


        setup();
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'creditCtrl', creditCtrl );

})();

(function() {
    "use strict";

    creditSrv.$inject = ['URLS', '$q', '$http', 'ErrorMessagesSrv'];
    function creditSrv( URLS, $q, $http, ErrorMessagesSrv ) {
        /**
         *  prospect service
         */
        function Credit(){}

        Credit.prototype.quotation = function ( _model ) {

            return $q(function( resolve, reject ){
                $http({
                    method: 'POST',
                    url: URLS.getCreditDetail,
                    params:{
                        language : 'SPA'
                    },
                    data: _model
                }).then(function(response) {
                    if( response.data.status === 1){
                        resolve( response.data.result );
                    }
                    else {
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                });
            });
        };


        Credit.prototype.getSimPayment = function ( _model ) {

            return $q(function( resolve, reject ){
                $http({
                    method: 'POST',
                    url: URLS.getSimPayment,
                    params:{
                        language : 'SPA'
                    },
                    data: (_model || {})
                }).then(function(response) {
                    if( response.data.status === 1){
                        resolve( response.data.result );
                    }
                    else {
                        ErrorMessagesSrv( response.data.messages );
                        reject();
                    }
                });
            });
        };


        return new Credit();
    }

    angular.module('actinver.services')
        .service('creditSrv', creditSrv);
})();

(function () {
    "use strict";

    detailPerformCtrl.$inject = ['PerformanceSrv', '$stateParams', '$state', 'cfpLoadingBar'];
    angular.module('actinver.controllers').controller('detailPerformCtrl', detailPerformCtrl);

    function detailPerformCtrl(PerformanceSrv, $stateParams, $state,cfpLoadingBar) {

        var vm = this;
        var model;
        var doc;
       

        if (!$stateParams.model) {
            $state.go('simulators.performance');
            return '';
        }

        setup();

        function setup() {
            setupVars();
            loadSmt01();
        }

        function setupVars() {
            model = $stateParams.model;
            doc = document.getElementById('chartjs-tooltip2');
        }

        function loadSmt01() {
            var sendModel = PerformanceSrv.sendModel(model);
            loadSmt02(sendModel);
            PerformanceSrv.SimulatorRest('smt01', sendModel.send)
                .then(function (_res) {
                    vm.amounts = PerformanceSrv.calculate(model.virtualAmount, _res);
                    vm.smt01 = _res.issuers;
                    vm.chartLine = PerformanceSrv.setupDataLine(_res.simulator);
                    vm.chartDonut = PerformanceSrv.setDonutChart(vm.smt01, doc, model);
                });
        }

        function loadSmt02(sendModel){
            //vm.spinner = true;
            PerformanceSrv.SimulatorRest('smt02', sendModel.send)
                .then(function(_res){
                    vm.smt02 = _res;
                });
        }

        vm.viewDetail = function () {
            vm.viewMore = true;
            vm.newCharts = [];
            var graphs = [];
            
            graphs.push(PerformanceSrv.getType('debt', model.send.issuers,vm.smt01, 'DEUDA'));
            graphs.push(PerformanceSrv.getType('rent', model.send.issuers,vm.smt01, 'RENTA VARIABLE'));
            graphs.push(PerformanceSrv.getType('din', model.send.issuers,vm.smt01, 'DINÁMICOS'));
            graphs.push(PerformanceSrv.getType('MERCADO DE CAPITALES', model.send.issuers,vm.smt01, 'MERCADO DE CAPITALES'));
            
            vm.newCharts = PerformanceSrv.getGraps(graphs,doc,model);          
        };

        vm.downloadPDF =  function () {
            cfpLoadingBar.start();
            setTimeout(unBlockDetail, 5000);

        };

        function unBlockDetail(){
            cfpLoadingBar.complete();
        }



    }
})();

(function () {
    "use strict";

    performanceCtrl.$inject = ['PerformanceSrv', '$q', '$state', '$filter', 'ErrorMessagesSrv'];
    function performanceCtrl(PerformanceSrv, $q, $state, $filter, ErrorMessagesSrv) {
        var vm = this;

        function setup() {
            setupVars();
            getStations();
        }

        vm.goState = function () {
            var issuers = $filter('filter')(vm.allMarkets, { selected: true });

            var newIssuers = issuers.map(function (_val) {
                if(vm.selectedTab === 'funds'){
                    return {
                        issuer: _val.issuerName,
                        serie: _val.serie,
                        virtualAmount: _val.value / 100 * vm.amount,
                        percent: _val.value,
                        type: _val.type
                    };
                }else{
                    return {
                        issuer: _val.issuerName,
                        serie: _val.serie,
                        virtualAmount: _val.value / 100 * vm.amount,
                        percent: _val.value,
                        type: 'MERCADO DE CAPITALES'
                    };
                }
            });

            var endDate = new Date();
            var beginDate = new Date();
            beginDate.setFullYear(beginDate.getFullYear() - vm.slider.value);

            var sendModel = {
                send: {
                    beginDate: $filter('date')(beginDate, 'ddMMyy'),
                    endDate: $filter('date')(endDate, 'ddMMyy'),
                    issuers: newIssuers
                },
                virtualAmount: vm.amount,
            };
            $state.go('simulators.details', { model: sendModel });
        };

        vm.selectTabTable = function (_tab, _subTab) {
            if (_subTab) {
                vm.selectedSubTab = _subTab;
                vm.resultTable = vm.categories[vm.selectedSubTab.code];
            }else {
                // vm.allMarkets.map(function (_market) {
                //     _market.selected = false;
                // });
                vm.selectedTab = _tab;
                //vm.selectedSubTab = _tab === 'funds' ? vm.optionsTab1[0] : vm.optionsTab2[0];

                if(_tab==='funds'){
                    vm.selectedSubTab=vm.optionsTab1[0];
                    vm.resultTable = vm.categories[vm.selectedSubTab.code];
                }
                else{
                    vm.selectedSubTab=vm.optionsTab2[0];
                    vm.selectTabTableMarket(vm.selectedSubTab);
                }
            }
        };


        vm.selectTabTableMarket = function(_subTab){
            if(_subTab){
                vm.selectedSubTab=_subTab;
                var market=0;
                var monitor=0; 
                switch(_subTab.code){
                    case 'ipc':
                        market = 2;
                        monitor=2;
                    break;
                    case 'masbursatil':
                        market=2;
                        monitor=3;
                    break;
                    case 'menosbursatil':
                        market=2;
                        monitor=4;
                    break;
                    case 'sic':
                        market=5;
                        monitor=5;
                    break;
                    case 'tracks':
                        market=3;
                        monitor=5;
                    break;
                    case 'tracksdeuda':
                        market=4;
                        monitor=5;
                    break;
                }
                PerformanceSrv.GetStationsMarketCAP(market,monitor)
                .then(function(response){
                    if(vm.categories[_subTab.code]===undefined){
                        var temporaryArray=[];
                        var temporaryObject={};
                        angular.forEach(response, function(item){
                            temporaryObject=item.issuer;
                            temporaryObject.averagePrice=item.averagePrice;
                            temporaryObject.closingPrice=item.closingPrice;
                            temporaryObject.lastPrice=item.lastPrice;
                            temporaryObject.selected=false;
                            temporaryObject.type=_subTab.code;
                            temporaryArray.push(temporaryObject);
                            vm.allMarkets.push(temporaryObject);
                        });
                        vm.categories[_subTab.code]=temporaryArray;
                    }
                    vm.resultTable=vm.categories[_subTab.code];
                });
            }
        };

        vm.updateTotal = function () {
            vm.totalValueMarket = 0;
            vm.allMarkets.map(function (_market) {
                if (_market.selected) {
                    vm.totalValueMarket += parseInt(_market.value) || 0;
                }
            });
        };

        function setupVars() {
            vm.date = { startDate: null, endDate: null };
            vm.categories = {};
            vm.totalValueMarket = 0;
            vm.allMarkets = [];
            vm.selectedTab = 'funds';
            vm.selectedSubTab = 'debt';
            vm.amount = 1000000;
            vm.slider = {
                value: 0,
                options: {
                    floor: 1,
                    ceil: 5,
                    step: 2,
                    showSelectionBar: true,
                    translate: function (value, sliderId, label) {
                        switch (label) {
                            case 'model':
                                //return ( (Math.trunc(value/12) ? Math.trunc(value/12) + ' años ' : '') + ((value%12) ? (value%12) + ' meses' : '') || '0 meses');
                                return (value + ' años ');
                            //case 'floor':
                            //return ( value + ' años ');
                            default:
                                return '';
                        }
                    }
                }
            };

            vm.optionsTab1 = [
                { id: 3, text: 'DE DEUDA', code: 'debt' },
                { id: 2, text: 'DE RENTA VARIABLE', code: 'rent' },
                { id: 1, text: 'DINÁMICOS', code: 'din' },
            ];
            
            vm.optionsTab2 = [
                { id: 4, text: 'IPC', code: 'ipc' },
                { id: 5, text: 'MAS BURSÁTILES', code: 'masbursatil' },
                { id: 6, text: 'MENOS BURSÁTILES', code: 'menosbursatil' },
                { id: 7, text: 'SIC', code: 'sic' },
                { id: 8, text: 'TRACKS', code: 'tracks' },
                { id: 9, text: 'TRACKS DEUDA', code: 'tracksdeuda' },
            ];
        }

        function getStations() {
            vm.loading = true;

            $q.all([
                PerformanceSrv.GetStations(3),
                PerformanceSrv.GetStations(2),
                PerformanceSrv.GetStations(1),
            ]).then(function (_res) {
                if(typeof _res[0] !== 'string'  && typeof _res[1] !== 'string' && typeof _res[2] !== 'string'){
                    var options = ['debt', 'rent', 'din'];
                    _res.map(function (_val, _index) {
                        _val.issuer.map(function (_station) {
                            PerformanceSrv.getClasification(_station);
                            _station.type = options[_index];
                            vm.allMarkets.push(_station);
                        });
                        vm.categories[options[_index]] = _val.issuer;
                    });
                    vm.resultTable = vm.categories['debt'];     //se agrega debt para carga unicial de Fondos.           
                    getCapitals();
                }else{
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                }
            });
        }

        function getCapitals() {
            PerformanceSrv.GetStationsMarket().then(function (_res) {
                vm.categories.capitals = _res.marketDataTuple;
                _res.marketDataTuple.map(function (array){
                    vm.allMarkets.push(array);
                });
                vm.selectTabTable('funds');
                vm.loading = false;
            });
        }

        setup();
    }

    angular
        .module('actinver.controllers')
        .controller('performanceCtrl', performanceCtrl);
})();

(function () {
    "use strict";

    PerformanceSrv.$inject = ['URLS', '$q', '$http', 'csrfSrv', '$filter', 'ErrorMessagesSrv'];
    function PerformanceSrv(URLS, $q, $http, csrfSrv, $filter, ErrorMessagesSrv ) {
        /**
         *  prospect service
         */
        function Performance() { }

        Performance.prototype.GetStations = function (_id) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',                    
                    url: URLS.getInvestmentIssuersQuery + '55/0/0/0/' + _id + '/0',
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1 ) {
                        resolve(response.data.outInvestmentIssuersQuery);
                    }else if (response.data.outCommonHeader.result.result === 2 ){
                        resolve('response.data.outCommonHeader.result.messages[0].responseMessage');
                    }
                }).catch(function (error) {
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({ error: error.data });
                });
            });
        };


        Performance.prototype.GetStationsMarket = function () {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',                    
                    url: URLS.clientIssuersMarketInfoQuery + '0/1/1/0/0/0/' ,
                    params: {
                        language: 'SPA'
                    }
                }).then(function (response) {
                    if (response.data.outCommonHeader.result.result === 1) {
                        resolve(response.data.outClientIssuersMarketInfoQuery);
                    }
                    else {
                        reject(response.data.outCommonHeader);
                    }
                });
            });
        };

        Performance.prototype.GetStationsMarketCAP = function(_market,_monitor){
            return $q(function(resolve,reject){
                $http({
                    method:'GET',
                    url: URLS.clientIssuersMarketInfoQueryV1 + '55/'+_market+'/'+_monitor+'/0/0/1',
                    params:{
                        language: 'SPA'
                    }
                }).then(function(response){
                    if(response.data.outCommonHeader.result.result === 1){
                        resolve(response.data.outClientIssuersMarketInfoQuery.marketDataTuple);
                    }else{
                        if(response.data.outCommonHeader.result.result === 2){
                            resolve(response.data.outCommonHeader.result.messages[0].responseMessage);
                        }
                    }
                }).catch(function (error){
                    ErrorMessagesSrv('Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk');
                    reject({error:error.data});
                });
            });
        };

        Performance.prototype.SimulatorRest = function (_id, _model) {
            return $q(function (resolve, reject) {
                csrfSrv.csrfValidate()
                    .then(successCsrf)
                    .catch(errorCsrf);

                function successCsrf() {
                    var parametersSubmit = {
                        beginDate: _model.beginDate,
                        endDate: _model.endDate,
                        issuers: JSON.stringify(_model.issuers),
                        language: 'SPA'
                    };
                    $http({
                        method: 'POST',
                        //url: URLS.SimulatorRest + _id,
                        //url: 'http://vsdlapafro01.actinver.com.mx/ficha-valor-restful/SimulatorRest/' + _id,
                        url: 'https://bursanet.actinver.com/ficha-valor-restful/SimulatorRest/' + _id,
                        data: $.param(parametersSubmit)
                    }).then(function (response) {
                        if (response.data.status === 1) {
                            resolve(response.data.result);
                        }
                        else {
                            reject(response.data.messages);
                        }
                    });
                }

                function errorCsrf(error) {
                    reject(error);
                }

            });
        };

        Performance.prototype.getClasification = function (obj) {
            switch (obj.familyFundClassification) {
                case 1:
                    obj.clasificacion = "Alternativos";
                    break;
                case 2:
                    obj.clasificacion = "Relativo a Indices de Mercado";
                    break;
                case 3:
                    obj.clasificacion = "Paises / Economías";
                    break;
                case 4:
                    obj.clasificacion = "México Estilos de Inversión";
                    break;
                case 5:
                    obj.clasificacion = "Pesos";
                    break;
                case 6:
                    obj.clasificacion = "Dólares";
                    break;
                case 7:
                    obj.clasificacion = "Activos Locales";
                    break;
                case 8:
                    obj.clasificacion = "Activos Globales";
                    break;
                default:
                    obj.clasificacion = "";
            }
        };

        Performance.prototype.calculate = function (virtualAmount, _res) {
            var lnResult = _res.simulator.length - 1;
            var finalAmount = _res.simulator[lnResult].investmentFinal;
            return {
                start: virtualAmount,
                end: finalAmount,
                pesos: (finalAmount - virtualAmount),
                services: (virtualAmount > 0) ? (((finalAmount - virtualAmount) * 100) / virtualAmount) : 0
            };
        };

        Performance.prototype.setupDataLine = function (_simulator) {
            var historicalInfo = _simulator.map(function (_val) {
                var newDate = new Date(_val.datePrice);
                return {
                    amount: _val.investmentFinal,
                    paymentPeriod: $filter('date')(newDate, 'yyyyMMdd')
                };
            });

            return {
                chart: [{
                    historical: {
                        contractNumber: 'Valuación',
                        historicalInfo: historicalInfo
                    }
                }]
            };
        };

        Performance.prototype.sendModel = function (model) {
            var newIssuers = model.send.issuers.map(function (_val) {
                return {
                    issuer: _val.issuer,
                    serie: _val.serie,
                    virtualAmount: _val.virtualAmount
                };
            });
            return {
                send: {
                    beginDate: model.send.beginDate,
                    endDate: model.send.endDate,
                    issuers: newIssuers
                },
            };
        };

        function getValue(_name, _arrays) {
            var result = _arrays.filter(function (array) {
                return array.issuer === _name;
            });

            return result[0].percent;
        }

        Performance.prototype.setDonutChart = function (_issuers, tooltipEl, model) {
            var size;
            var chartData = [];

            _issuers.map(function (_issuer) {
                size = _issuer.elements.length - 1;
                _issuer.finalAmount = _issuer.elements[size];
                chartData.push(_issuer.finalAmount.virtualValue);
            });

            return {
                chart: {
                    labels: _issuers,
                    data: chartData,
                    cutoutPercentage: 60,
                    colors: ['#517cbd', '#f5f047', '#3366cc', '#dc3912', '#ff9900', '#109618', '#990099', '#0099c6', '#dd4477', '#66aa00', '#b82e2e', '#316395', '#994499', '#22aa99', '#aaaa11', '#6633cc', '#e67300', '#8b0707', '#651067', '#329262', '#5574a6', '#3b3eac', '#b77322', '#16d620', '#b91383', '#f4359e', '#9c5935', '#a9c413', '#2a778d', '#668d1c', '#bea413', '#0c5922', '#743411'],
                    tooltips: {
                        custom: function (tooltipModel) {
                            var positionY = this._chart.canvas.offsetTop;
                            var positionX = this._chart.canvas.offsetLeft;

                            if (tooltipModel.opacity === 0) {
                                tooltipEl.style.display = 'none';
                                return;
                            }

                            if (tooltipModel.dataPoints) {
                                tooltipEl.style.display = 'block';
                                tooltipEl.style.left = positionX + tooltipModel.caretX + 'px';
                                tooltipEl.style.top = positionY + tooltipModel.caretY + 'px';
                            }

                            return tooltipEl;
                        },
                        callbacks: {
                            label: function (tooltipModel, data) {
                                var newModel = data.labels[tooltipModel.index];
                                var percent = getValue(newModel.issuer, model.send.issuers);
                                var template = "";
                                template += '<div class="row margin-0 title">';
                                template += '<div class="col-xs-6 padding-left-10 padding-right-0">' + newModel.issuer + ' ' + newModel.serie + ' <br/> <em>Renta variable</em></div>';
                                template += '<div class="col-xs-6 percentage">' + percent + '% </div>';
                                template += '</div>';

                                template += '<div class="row margin-0 description">';
                                template += '<div class="col-xs-6">';
                                template += '<label>Monto asignado: </label>' + $filter('currency')(newModel.virtualAmount);
                                template += '</div>';
                                template += '<div class="col-xs-6 ">';
                                template += '<label>Importe final:</label>' + $filter('currency')(newModel.finalAmount.virtualValue);
                                template += '</div>';
                                template += '</div>';

                                template += '<div class="row margin-0 description">';
                                template += '<div class="col-xs-6">';
                                template += '<label>$ Plusvalía en pesos:</label>' + $filter('currency')(newModel.finalAmount.virtualValue - newModel.virtualAmount);
                                template += '</div>';
                                template += '<div class="col-xs-6">';
                                template += '<label>% Plusvalía por servicio:</label>' + $filter('currency')((newModel.virtualAmount > 0) ? (((newModel.finalAmount.virtualValue - newModel.virtualAmount) * 100) / newModel.virtualAmount) : 0, '') + '%';
                                template += '</div>';
                                template += '</div>';

                                tooltipEl.innerHTML = template;
                            },
                        },
                    },
                }
            };
        };

        Performance.prototype.getType = function (_type, _arrays, _smt01, _nameGroup) {
            var tree = [];
            var send = [];
            var amount = 0;
            var amountFinal = 0;
            var percent = 0;
            
            _arrays.filter(function (array) {
                if (array.type === _type) {
                    _smt01.filter(function (_smt01Array) {
                        if (_smt01Array.issuer === array.issuer) {
                            send.push(_smt01Array);
                            amount += parseInt(array.virtualAmount);
                            amountFinal += parseInt(_smt01Array.finalAmount.virtualValue);
                            percent += parseInt(array.percent);
                        }
                    });
                }
            });

            tree.push(send);
            tree.push(amount);
            tree.push(amountFinal);
            tree.push(percent);
            tree.push(_nameGroup);

            if(percent === 0){
                return [];
            }else{
                return tree;
            }
        };

        Performance.prototype.getGraps = function(_graphs,_doc,_model){
            var array = [];
            _graphs.filter(function (graph){
                if(graph.length !== 0){
                    var newchart  = {
                        chart: per.setDonutChart(graph[0], _doc, _model),
                        name: graph[4],
                        investmentFinal: graph[2],
                        investment: graph[1],
                    };
                    newchart.chart.chart.tooltips = {};
                    newchart.chart.chart.percentage = graph[3]+'%';
                    array.push(newchart);
                }
            });
            return array;
        };

        var per = new Performance();
        return new Performance();
    }

    angular.module('actinver.services')
        .service('PerformanceSrv', PerformanceSrv);
})();

( function(){
    "use strict";

    detailContractCtrl.$inject = ['$uibModalInstance', 'data'];
    function detailContractCtrl( $uibModalInstance, data ){
        var vm = this;
        vm.beneficiarios = data.beneficiaryList.beneficiary;
        vm.attorneyList  = data.attorneyList.attorney;
        vm.personAuthorizedList  = data.personAuthorizedList.personAuthorized;
        vm.cotitulares = data.coownerList.coowner;
        vm.titular = data.holder;
        vm.investmentProfile = data.investmentProfile.description;
        vm.phoneNumberList = data.holder.phonesList.phone;
        vm.emailList = data.holder.emailList.email;
        vm.adviserName = data.adviser.description;
        vm.financialCenter = data.branch.description;
        vm.discretionaryContractFlag = data.discretionaryContractFlag;
        vm.eligibleClientFlag = data.eligibleClientFlag;
        vm.ownPositionFlag = data.ownPositionFlag;
        vm.contractNumber = data.contractNumber;


        vm.close = function(){
            $uibModalInstance.dismiss();
        };

        vm.done = function(){
            $uibModalInstance.close();
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'detailContractCtrl', detailContractCtrl );

} )();



( function(){
    "use strict";

    capitalsCtrl.$inject = ['$scope'];
    function capitalsCtrl( $scope ){
        var vm = this;

        var categories = {
            all:{
                val1: 1,
                val2: 5,
                text: 'TODAS'
            },
            ipc:{
                val1: 2,
                val2: 2,
                text: 'IPC'
            },
            bmv:{
                val1: 3,
                val2: 5,
                text: 'BMV'
            },
            sic:{
                val1: 4,
                val2: 5,
                text: 'SIC'
            },
            trackInt:{
                val1: 5,
                val2: 5,
                text: 'TRACKINT'
            },
            trackNac:{
                val1: 6,
                val2: 5,
                text: 'TRACKNAC'
            },
            plusBursatiles:{
                val1: 7,
                val2: 3,
                text: '10MAS'
            },
            minusBursatiles:{
                val1: 8,
                val2: 4,
                text: '10MENOS'
            }
        };
        
        vm.selected = function( _id ){
            vm.categorySelected = categories[_id];
            vm.tabSelect = _id;
        };

        $scope.$on( 'updateCapitalsTab', function(){
            switch ($scope.activeTab) {
                case 0:
                    vm.updateFunds();
                break;
                case 1:
                    vm.updateOrders();
                break;
                case 2:
                    vm.stopLoss();
                break;
                case 3:
                    vm.trailingStop();
                break;
                case 4:
                    vm.clean();
                break;
            }
        });

        vm.categorySelected = categories.ipc;
    }

    angular.module( 'actinver.controllers' )
        .controller( 'capitalsCtrl', capitalsCtrl );

})();



( function(){
    "use strict";

    capitalsLuminaCtrl.$inject = ['$scope'];
    function capitalsLuminaCtrl( $scope ){
        var vm = this;

        var categories = {
            ipc:{
                val1: 2,
                val2: 2,
                text: 'IPC'
            },
            bmv:{
                val1: 3,
                val2: 5,
                text: 'BMV'
            },
            sic:{
                val1: 4,
                val2: 5,
                text: 'SIC'
            },
            trackInt:{
                val1: 5,
                val2: 5,
                text: 'TRACKINT'
            },
            trackDeuda:{
                val1: 6,
                val2: 5,
                text: 'TRACKNAC'
            },
            plusBursatiles:{
                val1: 7,
                val2: 3,
                text: '10MAS'
            },
            minusBursatiles:{
                val1: 8,
                val2: 4,
                text: '10MENOS'
            },
            all:{
                val1: 1,
                val2: 5,
                text: 'TODAS'
            }
        };
        
        vm.selected = function( _id ){
            vm.categorySelected = categories[_id];
            vm.tabSelect = _id;
        };

        $scope.$on( 'updateCapitalsTab', function(){
            switch ($scope.activeTab) {
                case 0:
                    vm.updateFunds();
                break;
                case 1:
                    vm.updateOrders();
                break;
            }
        });

        vm.categorySelected = categories.ipc;
    }

    angular.module( 'actinver.controllers' )
        .controller( 'capitalsLuminaCtrl', capitalsLuminaCtrl );

})();



( function(){
    "use strict";

    fundsCtrl.$inject = ['$scope', '$state'];
    function fundsCtrl( $scope, $state){
        var vm = this;

        if( !$scope.investment.contract ){
            $state.go('investment');
        }

        $scope.$on('updateTab', function(){
           // $scope.activeTab === 0 ?  vm.updateFunds() : vm.updateOrders();
            switch($scope.activeTab){
                    case 0:  vm.updateFunds(); break;
                    case 1:  vm.updateOrders(); break;
                    case 2:  vm.clean(); break;
            }
            
        });

        vm.selected = function( _id ){
            vm.tabSelect = _id;
        };
    }

    angular.module( 'actinver.controllers' )
        .controller( 'fundsCtrl', fundsCtrl );

})();



( function(){
    "use strict";

    fundsBankCtrl.$inject = ['$scope'];
    function fundsBankCtrl( $scope){
        var vm = this;

        $scope.$on('updateTab', function(){
           // $scope.activeTab === 0 ?  vm.updateFunds() : vm.updateOrders();
            switch($scope.activeTab){
                case 0:  vm.updateFunds(); break;
                case 1:  vm.updateOrders(); break;
                case 2:  vm.clean(); break;
            }
        });


        vm.selected = function( _id ){
            vm.tabSelect = _id;
        };

    }

    angular.module( 'actinver.controllers' )
        .controller( 'fundsBankCtrl', fundsBankCtrl );

})();

( function(){
    "use strict";

    statementFiscalCtrl.$inject = ['$scope', 'accountSrv', 'CommonModalsSrv', 'ErrorMessage', 'statementFiscalSrv'];
    function statementFiscalCtrl( $scope, accountSrv, CommonModalsSrv, ErrorMessage, statementFiscalSrv ){
        var vm = this;

        vm.ListConstancias = getCatalogoConstancias();

        vm.ListConstanciasFiscales = [];
        vm.ListConstanciasPormenorizadas = [];
        vm.EmailConstancias = [];
        vm.contract = 0;
        vm.sendMail = sendMail;
        vm.onChangeStatementFiscal = onChangeStatementFiscal;

            init();
        function init() {
            var contract = JSON.parse(localStorage.getItem('contractSelected'));
            vm.contract = contract.contractNumber;
            //console.log("INIT: " + vm.contract);
            vm.EmailConstancias = getEmail();
        }

        function getCatalogoConstancias(){
            return [
                {id: 4, text: "Constancia Fiscal"},
                {id: 9, text: "Constancia Fiscal Pormenorizada"},
                {id: 3, text: "Estados de Cuenta"}
            ];
        }

        function getCatalogoFormatos(  ){
            return [
                {id: 1, text: "PDF"},
                {id: 2, text: "XML"},
                {id: 3, text: "PDF/XML"},
            ];

        }

        function getEmail() {
            var _typeContract = JSON.parse(localStorage.getItem('contractSelected')).bankingArea;
            var _model = {
                contractNumber: vm.contract,//$scope.contract.contractNumber,
                bankingArea: _typeContract
            };
            var _listaObtenida = [];
            accountSrv.getContractInfoDetail( _model ).then(function (_res) {
                if ( _res.holder.emailList.email.length === 0 ) {
                    CommonModalsSrv.error("No tiene Correos Asignados");
                } else {
                    angular.forEach( _res.holder.emailList.email, function ( item, key ) {
                        _listaObtenida.push({
                            id: key,
                            text: item.toLowerCase()
                        });
                    });
                }
            }).catch(function ( _res ) {
                var _error = _res.data.outCommonHeader.result.messages;
                CommonModalsSrv.error( ErrorMessage.createError( _error ) );
            });
            return _listaObtenida;
        }

        function getListaConstanciasFiscales ( _type ) {
            var _listaObtenida = [];
            statementFiscalSrv.getStatementFiscales( vm.contract, _type ) 
                .then(function (_res) {
                    if ( _res.resultSet !== 0 ) {
                        angular.forEach( _res.resultSet, function ( item ) {
                            _listaObtenida.push({
                                id: item.period, //'1',
                                text: _type === 3 ? returnMonth(item.period) : Number( item.period ), //"2018", //period //Hay que restar un día
                                contractNumber: item.contractNumber, //'00084445',//contractNumber
                                typeAccountStatement: item.typeAccountStatement, //"2",//typeAccountStatement
                                fileNameExtension: item.fileNameExtension //'PDF'//fileNameExtension
                            }); 
                        });
                    }
                }).catch(function ( _res ) {
                    CommonModalsSrv.error( ErrorMessage.createError( _res.data.outCommonHeader.result.messages ) );
                });
            return _listaObtenida;
        }

        function returnMonth( data ) {
            return data.substring(0,2)  + '/' + data.substring(2,6);
        }

        function getListaConstanciasFiscalesPormenorizada ( _type ) {
            var _typeContract = JSON.parse(localStorage.getItem('contractSelected')).bankingArea;
            _type = _typeContract === '999' ? 1 : 2;
            var _listaObtenida = [];
            statementFiscalSrv.getStatementFiscalesPormenorizadas( vm.contract, _type )
                .then(function (_res) {
                    if ( _res.resultSet !== 0 ) {
                        angular.forEach( _res.resultSet, function ( item ) {
                            _listaObtenida.push({
                                id: item.period, //'1',
                                text: Number( item.period ) -1, //"2018", //period //Hay que restar un día
                                contractNumber: item.contractNumber, //'00084445',//contractNumber
                                typeAccountStatement: item.typeAccountStatement ? item.typeAccountStatement : 9, //"2",//typeAccountStatement
                                fileNameExtension: item.fileNameExtension, //'PDF'//fileNameExtension
                                documentTypeID: item.documentTypeID //9 documentTypeID
                            }); 
                        });
                    }
                }).catch(function ( _res ) {
                    var _error = _res.data.outCommonHeader.result.messages;
                    CommonModalsSrv.error( ErrorMessage.createError( _error ) );
                });
            return _listaObtenida;
        }

        function limpiar () {
            //console.log("Entra a Limpiar: " );
            vm.ListConstanciasFiscales  = [];
            vm.ListConstanciasPormenorizadas = [];
            var _cmd = (typeof vm.cmd !== 'undefined') ? vm.cmd : null;
            if ( _cmd !== null ) {
                var _email = (typeof _cmd.dataEmailConstancias !== 'undefined') ? _cmd.dataEmailConstancias : null;
                var _idStatementFiscal = (typeof _cmd.dataListConstanciasFiscales !== 'undefined') ? _cmd.dataListConstanciasFiscales : null;
                var _idStatementPorme = (typeof _cmd.dataListConstanciasPormenorizadas !== 'undefined') ? _cmd.dataListConstanciasPormenorizadas : null;
                var _idFormat = (typeof _cmd.dataListFormats !== 'undefined') ? _cmd.dataListFormats : null;
    
                if ( _email !== null ) {
                    vm.cmd.dataEmailConstancias.type = [];
                }
                if ( _idStatementFiscal !== null ) {
                    vm.cmd.dataListConstanciasFiscales.type = [];
                }
                if ( _idStatementPorme !== null ) {
                    vm.cmd.dataListConstanciasPormenorizadas.type = [];
                }
                if ( _idFormat !== null ) {
                    vm.cmd.dataListFormats.type = [];
                }
            }
            
        }

        $scope.validate = function ( ) {
            var _typeStatement = (typeof vm.cmd.dataStatementFiscal !== 'undefined') ? vm.cmd.dataStatementFiscal.type : null;
            var _email = (typeof vm.cmd.dataEmailConstancias !== 'undefined') ? vm.cmd.dataEmailConstancias.type : null;
            var _idStatementFiscal = (typeof vm.cmd.dataListConstanciasFiscales !== 'undefined') ? vm.cmd.dataListConstanciasFiscales.type : null;
            var _idStatementPorme = (typeof vm.cmd.dataListConstanciasPormenorizadas !== 'undefined') ? vm.cmd.dataListConstanciasPormenorizadas.type : null;
            var _idFormat = (typeof vm.cmd.dataListFormats !== 'undefined') ? vm.cmd.dataListFormats.type : null;
            if ( _typeStatement === null) {
                    CommonModalsSrv.error( "Seleccione un tipo de Constancia" );
                    return false;
            } else {
                if ( _typeStatement.id === 4 ) { //Constancias Fisicas
                        return _email !== null && _idStatementFiscal !== null && _idFormat !== null ;
                } else if ( _typeStatement.id === 9 ) {//Constancias Pormenorizada
                        return _email !== null && _idStatementPorme !== null && _idFormat !== null;
                } 
            }
            return false;
        };

        function sendMail () {
            var _typeContract = JSON.parse(localStorage.getItem('contractSelected')).bankingArea;
            var _email = [];
            _email.push(vm.cmd.dataEmailConstancias.type.text);
            var _params = {
                contract: vm.contract,
                businessType: _typeContract === '999' ? 1 : 2,
                documentKeyValue: 1,
                month: vm.cmd.dataListConstanciasFiscales.type.typeAccountStatement === 3 ?
                    vm.cmd.dataListConstanciasFiscales.type.text.substring(0,2) : 0,
                year: vm.cmd.dataListConstanciasFiscales.type.typeAccountStatement === 3 ?
                    vm.cmd.dataListConstanciasFiscales.type.text.substring(3,7) :
                    vm.cmd.dataListConstanciasFiscales.type.text + 1,
                typeAccountStatement: vm.cmd.dataListConstanciasFiscales.type.typeAccountStatement,
                documentTypeID: vm.cmd.dataListFormats.type.id,
                email: _email
            };
            statementFiscalSrv.sendEmailNotificationStatementFiscalNew( _params ).then( function ( response ) {
                if (response.status) {
                    CommonModalsSrv.done(response.message);
                }
            }).catch( function ( error ) {
                CommonModalsSrv.error(error.message);
            });
        }

        function onChangeStatementFiscal (lastValue, newValue) {
            limpiar();
            switch( newValue.id ){
                case 4:
                    vm.ListFormats = getCatalogoFormatos( newValue.id );
                    vm.ListConstanciasFiscales  = getListaConstanciasFiscales( newValue.id );
                    break;
                case 9:
                    vm.ListFormats = getCatalogoFormatos( newValue.id );
                    vm.ListConstanciasFiscales = getListaConstanciasFiscalesPormenorizada( newValue.id );
                    break;
                case 3:
                    vm.ListFormats = getCatalogoFormatos( newValue.id );
                    vm.ListConstanciasFiscales  = getListaConstanciasFiscales( newValue.id );
                    break;
            }
        };
    }

    angular.module( 'actinver.controllers' )
        .controller( 'statementFiscalCtrl', statementFiscalCtrl );

})();
(function () {
    'use strict';

    statementFiscalSrv.$inject = ['$q', '$http', 'URLS'];
    function statementFiscalSrv($q, $http, URLS) {

        /**
        *  statement Fiscal Service
        */
        function StatementFiscal() { }
        StatementFiscal.prototype.getStatementFiscales = function ( _contractNumber, _typeAccountStatement ) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getStatementFiscal + _contractNumber+'/'+_typeAccountStatement,
                    params: {
                        language: 'SPA'
                    }
                })
                    .then(function (_response) {
                        if (_response.data.outCommonHeader.result.result === 1) {
                            resolve(_response.data.outAccountStatementAvailabilityQuery);
                        } else {
                            reject(_response.data.outCommonHeader.result);
                        }
                    });
            });
        };

        StatementFiscal.prototype.getStatementFiscalesPormenorizadas = function ( _contractNumber, _businessType ) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.getStatementFiscalPormenorizadas+_contractNumber+'/'+_businessType,
                    params: {
                        language: 'SPA'
                    }
                })
                    .then(function (_response) {
                        if (_response.data.outCommonHeader.result.result === 1) {
                            resolve(_response.data.outFiscalCertificateAvailableQuery);
                        } else {
                            reject(_response.data.outCommonHeader.result);
                        }
                    });
            });
        };

        StatementFiscal.prototype.sendEmailNotificationStatementFiscal = function ( _contractNumber, _businessType, _documentKeyValue, _month, _year, _typeAccountStatement, objectJson) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.sendEmailNotificationStatementFiscalQuery +_contractNumber+'/'+_businessType+'/'+_documentKeyValue+'/'+_month+'/'+_year+'/'+_typeAccountStatement,
                    params: objectJson
                })
                    .then(function ( response ) {
                        if ( response.data.outCommonHeader.result.result === 1) {
                            resolve( response.data.outCommonHeader );
                        } else {
                            reject( response.data.outCommonHeader.result );
                        }
                    });
            });
        };

        StatementFiscal.prototype.sendEmailNotificationStatementFiscalNew = function ( _params ) {
            return $q(function (resolve, reject) {
                $http({
                    method: 'GET',
                    url: URLS.sendEmailNotificationStatementFiscalQuery + _params.contract + '/' + _params.businessType + '/' + _params.documentKeyValue + '/' + _params.month + '/' + _params.year + '/' + _params.typeAccountStatement + '/' + _params.documentTypeID,
                    params: {
                        language: 'SPA',
                        emailTo: _params.email
                    }
                })
                    .then(function ( response ) {
                        if ( response.data.outCommonHeader.result.result === 1) {
                            resolve( {
                                status: true,
                                message: 'Se envió el correo correctamente'
                            } );
                        } else {
                            reject( {
                                status: false,
                                message: response.data.outCommonHeader.result.messages[0].responseMessage
                            } );
                        }
                    });
            });
        };


        return new StatementFiscal();
    }

    angular
        .module('actinver.services')
        .service('statementFiscalSrv', statementFiscalSrv);

})();
( function(){
    'use strict';

    moneyCtrl.$inject = ['$scope', '$rootScope'];
    function moneyCtrl( $scope, $rootScope ){
        var vm = this;

        $scope.$on( 'updateItems', function(){
     
            switch($scope.activeTab){
                case 0:  vm.updateInstruments(); break;
                case 1:  vm.updateOrders(); break;
                case 2:  vm.fhClean(); break;
            }
        } );

        vm.selected = function( _id ){
            vm.tabSelect = _id;
            if( vm.tabSelect ===  1 ){
                vm.type = 'directo';
                $rootScope.bands = null;
            } else {
                vm.type = 'reporto';
            }
        };
    }

    angular
        .module( 'actinver.controllers' )
        .controller( 'moneyCtrl', moneyCtrl );

})();


( function(){
    "use strict";

    function moneyBankCtrl(){
        var vm = this;
        vm.bandsDirect = [];

        vm.selected = function( _id ){
            vm.tabSelect = _id;
            if(vm.tabSelect ===  1){
                vm.type = 'directo';
            }else if(vm.tabSelect ===  2){
                vm.type = 'reporto';
            }else if(vm.tabSelect ===  3){
                vm.type = 'subastas';
            }
        };
    }

    angular.module( 'actinver.controllers' )
        .controller( 'moneyBankCtrl', moneyBankCtrl );

})();

( function(){
    "use strict";

    admonGroupModalCtrl.$inject = ['$uibModalInstance', 'group', 'NgTableParams', 'GroupSrv', 'CommonModalsSrv'];
    function admonGroupModalCtrl( $uibModalInstance, group, NgTableParams, GroupSrv, CommonModalsSrv ){
        var vm = this;


        function setup () {
            getDropdowns();
            setupVars();
            setTableUsers();
            setTableCenters();
        }

        vm.search = function( _id ){
            var term = vm[ _id ];
            if( _id === 'table2'){
                vm.configTable2.filter({ $: term});
            }
            else{
                vm.configTable.filter({ $: term});
            }
        };

        vm.addUser = function() {
            var sendModel ={
                idTargetGroup: group.idTargetGroup,
                idEmployee: vm.userSelected.idEmployee,
                language: 'SPA'
            };

            GroupSrv.service( 'saveUser', 'POST',  sendModel )
            .then(function(){
                vm.disabledModal = true;
                CommonModalsSrv.done( 'El Usuario se agregó de manera exitosa.' )
                .result.finally(function(){
                    vm.disabledModal = false;
                });
                group.users.push( angular.copy(vm.userSelected) );
                setTableUsers();
                vm.userSelected = null;
            });
        };

        vm.deleteUser = function( _user ){
            var sendModel ={
                idTargetGroup: group.idTargetGroup,
                idEmployee: _user.idEmployee,
                language: 'SPA'
            };
            GroupSrv.service( 'deleteUser', 'POST',  sendModel )
            .then(function(){
                vm.disabledModal = true;
                CommonModalsSrv.done( 'El Usuario se elimino de manera exitosa.' )
                .result.finally(function(){
                    vm.disabledModal = false;
                });
            });
        };

        vm.addFinancial = function() {
            var sendModel ={
                idTargetGroup: group.idTargetGroup,
                keyCenter: vm.financialCenterSelected.keyCenter,
                language: 'SPA'
            };

            GroupSrv.service( 'saveCenter', 'POST', sendModel )
            .then(function(){
                vm.disabledModal = true;
                CommonModalsSrv.done( 'El Centro Financiero se agregó de manera exitosa.' )
                .result.finally(function(){
                    vm.disabledModal = false;
                });
                group.financialCenters.push( angular.copy(vm.financialCenterSelected) );
                setTableCenters();
                vm.financialCenterSelected = null;
            });

        };

        vm.deleteFinancial = function( _center ) {
            var sendModel ={
                idTargetGroup: group.idTargetGroup,
                keyCenter: _center.keyCenter,
                language: 'SPA'
            };

            GroupSrv.service( 'deleteCenter', 'POST', sendModel )
            .then(function(){
                vm.disabledModal = true;
                CommonModalsSrv.done( 'El Centro Financiero se elimino de manera exitosa.' )
                .result.finally(function(){
                    vm.disabledModal = false;
                });
            });

        };

        vm.close = function(){
            $uibModalInstance.dismiss();
        };


        vm.done = function(){
          $uibModalInstance.close( vm.group );
            $uibModalInstance.close( vm.employee );

        };

        function getDropdowns(){
            GroupSrv.service('financialCenters').then(function(_res){
                vm.financialCenters = _res.map( function( _val){
                    _val.text = _val.financialCenter;
                    return _val;
                });
            });
            GroupSrv.service('userGroups').then(function(_res){
                vm.users = _res.map( function( _val){
                    _val.text = _val.userCode;
                    return _val;
                });
            });
        }


        function setTableCenters(){
            var initialParams = {
                count: 5 // initial page size
            };
            var initialSettings = {
                dataset: group.financialCenters,
                paginationMaxBlocks: 4,
                paginationMinBlocks: 2,
            };
            vm.configTable = new NgTableParams( initialParams, initialSettings);

        }
        function setTableUsers(){
            var initialParams = {
                count: 5 // initial page size
            };
            var initialSettings2 = {
                dataset: group.users,
                paginationMaxBlocks: 4,
                paginationMinBlocks: 2,
            };
            vm.configTable2 = new NgTableParams( initialParams, initialSettings2);
        }

        function setupVars () {
            vm.group = group;
        }

        setup();

    }

    angular.module( 'actinver.controllers' )
        .controller( 'admonGroupModalCtrl', admonGroupModalCtrl );

} )();

(function () {
    'use strict';

    misreportestCtrl.$inject = ['$scope', 'URLS', '$http', '$timeout', 'exportTableToExcel', 'randomNamesSrv', 'misreportesSrv', 'ErrorMessagesSrv'];
    function misreportestCtrl($scope, URLS, $http, $timeout, exportTableToExcel, randomNamesSrv, misreportesSrv, ErrorMessagesSrv) {
        var vm = this;
        vm.modal = false;
        vm.listRegister = [];

        function init() {
            vm.getLista();
            
        }

        // Get information from service
        vm.getLista = function () {
            console.log("========= DENTRO DE LA FUNCION GET LISTA =======");
            vm.modal = true;
            misreportesSrv.getListaReportes().then(function success(data) {
                console.log("========== DATA =========" + data);
                if (data.success) {
                    vm.listRegister = data.lista;
                    console.log("*******************" + listRegister);
                } else {
                    vm.listRegister = [];
                    ErrorMessagesSrv(data.message);
                    cosole.log("******************ERROR");
                }
                vm.modal = false;
            }).catch(function error(error) {
                vm.modal = false;
                ErrorMessagesSrv(error.message);
            });
        };

        vm.exportData = function () {
            var exportHref = exportTableToExcel.tableToExcel('#idTablaResultados', 'Mis Reportes');
            var link = document.createElement('a');
            link.download = randomNamesSrv.getNameFile() + '.xls';
            link.href = exportHref;
            link.click();
        };
        /*  Data = function () {
         var exportHref = exportTableToExcel.tableToExcel('#idTablaResultados', 'Mis Reportes');
         var link = document.createElement('a');
         link.download = randomNamesSrv.getNameFile() + '.xls';
         link.href = exportHref;
         link.click();
         };
         */
        init();
    }
    angular
            .module('actinver.controllers')
            .controller('misreportesCtrl', misreportestCtrl);

})();
(function () {
    'use strict';
    misreportesSrv.$inject = ['URLS', '$q', '$http'];
    function misreportesSrv(URLS, $q, $http) {

        function misreportes() {

        }

       misreportes.prototype.getListaReportes = function () {
           console.log("========= GetLisReportes =========");
            return $q(function (resolve, reject) {
                $http({
                    method: 'Get',
                    url: URLS.getInsuranceMaritalStatusQuery,
                    params: {
                        language: 'SPA',
                        insuranceTypeID:'100'
                    }
                }).then(function succees(response) {/*
                    if (typeof response !== 'undefined' && response.data.OutCommonHeaderReporte.result.result === 1) {
                        resolve({ success: true, lista: response.data.OutBrokerReportesQuery.reportesFound.reporteslist, msg: '' });
                    } else if (typeof response !== 'undefined' && response.data.OutCommonHeaderReporte.result.result === 2) {
                        reject({ success: false, lista: [], msg: response.data.OutCommonHeaderReporte.result.messages[0] });
                    }*/
                console.log(response);
                }).catch(function failed() {
                    reject({ success: false, lista: [], msg: 'Se encontró un error favor de intentarlo más tarde, comuníquese con su help desk' });
                });
            });
        };

        return new misreportes();
    }
    angular
        .module('actinver.services')
        .service('misreportesSrv', misreportesSrv);

})();